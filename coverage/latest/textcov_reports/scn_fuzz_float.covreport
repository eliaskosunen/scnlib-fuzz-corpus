_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1014|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1014|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1014|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|  1.60M|{
 4124|  1.60M|    if constexpr (sizeof(U) == 1) {
 4125|  1.60M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|  1.60M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|  1.60M|{
 4088|  1.60M|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|  1.60M|    SCN_GCC_COMPAT_PUSH
 4091|  1.60M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|  1.60M|    constexpr char lengths[] =
 4093|  1.60M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|  1.60M|        "\1\1\1\1\1\1\1\1"
 4095|  1.60M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|  1.60M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|  1.60M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|  1.60M|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|  1.60M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|  1.60M|    SCN_GCC_COMPAT_POP
 4102|  1.60M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  1.42M|{
 4330|  1.42M|    if constexpr (sizeof(CharT) == 1) {
 4331|  1.42M|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  1.42M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  1.42M|{
 4143|  1.42M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  1.42M|    const auto is_trailing_code_unit = [](char ch) {
 4146|  1.42M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  1.42M|    };
 4148|       |
 4149|  1.42M|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 1.37M, False: 52.7k]
  ------------------
 4150|  1.37M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 484, False: 1.37M]
  ------------------
 4151|    484|            SCN_UNLIKELY_ATTR
 4152|    484|            return invalid_code_point;
 4153|    484|        }
 4154|  1.37M|        return static_cast<char32_t>(input[0]);
 4155|  1.37M|    }
 4156|       |
 4157|  52.7k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 44.9k, False: 7.81k]
  ------------------
 4158|  44.9k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 144, False: 44.8k]
  ------------------
 4159|    144|            SCN_UNLIKELY_ATTR
 4160|    144|            return invalid_code_point;
 4161|    144|        }
 4162|  44.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 8.42k, False: 36.4k]
  ------------------
 4163|  8.42k|            SCN_UNLIKELY_ATTR
 4164|  8.42k|            return invalid_code_point;
 4165|  8.42k|        }
 4166|       |
 4167|  36.4k|        char32_t cp{};
 4168|  36.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|  36.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|  36.4k|        return cp;
 4171|  44.8k|    }
 4172|       |
 4173|  7.81k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 4.47k, False: 3.33k]
  ------------------
 4174|  4.47k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 113, False: 4.36k]
  ------------------
 4175|    113|            SCN_UNLIKELY_ATTR
 4176|    113|            return invalid_code_point;
 4177|    113|        }
 4178|  4.36k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 1.40k, False: 2.96k]
  ------------------
 4179|  4.36k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 1.96k, False: 997]
  ------------------
 4180|  3.36k|            SCN_UNLIKELY_ATTR
 4181|  3.36k|            return invalid_code_point;
 4182|  3.36k|        }
 4183|       |
 4184|    997|        char32_t cp{};
 4185|    997|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|    997|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|    997|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|    997|        return cp;
 4189|  4.36k|    }
 4190|       |
 4191|  3.33k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 3.33k, False: 0]
  ------------------
 4192|  3.33k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 3.33k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  3.33k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 320, False: 3.01k]
  ------------------
 4197|    320|            SCN_UNLIKELY_ATTR
 4198|    320|            return invalid_code_point;
 4199|    320|        }
 4200|  3.01k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 1.28k, False: 1.72k]
  ------------------
 4201|  3.01k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 752, False: 973]
  ------------------
 4202|  3.01k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 693, False: 280]
  ------------------
 4203|  2.73k|            SCN_UNLIKELY_ATTR
 4204|  2.73k|            return invalid_code_point;
 4205|  2.73k|        }
 4206|       |
 4207|    280|        char32_t cp{};
 4208|    280|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|    280|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|    280|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|    280|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|    280|        return cp;
 4213|  3.01k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|  57.8k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  57.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  57.8k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  3.17M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  3.17M|    else {
 4022|  3.17M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  3.17M|                                       to_address(first), to_address(last)))};
 4024|  3.17M|    }
 4025|  3.17M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  9.72M|{
  341|  9.72M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  9.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  9.72M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  14.2M|{
  319|  14.2M|    return p;
  320|  14.2M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  4.80M|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  4.80M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  4.80M|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  4.80M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  4.80M|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  4.80M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  70.4k|    {
 2901|  70.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  70.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  70.4k|    {
 2882|  70.4k|        return decay_copy(t.begin());
 2883|  70.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  6.19M|{
 2126|  6.19M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  6.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  6.19M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.04M|    {
 2958|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.04M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.04M|    {
 2940|  1.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.04M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  76.3k|{
10005|  76.3k|    auto result = make_scan_result<Source, Args...>();
10006|  76.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  76.3k|                                   make_scan_args(result->values())));
10008|  76.3k|    return result;
10009|  76.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9960|   168k|{
 9961|   168k|    return scan_result_type<Source, Args...>();
 9962|   168k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   168k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   168k|        : m_value(T{}), m_has_value(true)
  460|   168k|    {
  461|   168k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6775|   168k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|   521k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|   521k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6549|   658k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   168k|{
 9946|   168k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 145k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   145k|    else {
 9950|   145k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   145k|    static_cast<    \
  |  | 1084|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   145k|    }
 9952|   168k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|   521k|    {
 1772|   521k|        return has_value();
 1773|   521k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.04M|    {
  523|  1.04M|        return m_has_value;
  524|  1.04M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  68.6k|    {
 1778|  68.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  68.6k|        return this->get_unexpected().error();
 1780|  68.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  68.6k|    {
  506|  68.6k|        return m_unexpected;
  507|  68.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  10.1M|    {
  398|  10.1M|        return m_unexpected;
  399|  10.1M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|  2.68M|        : m_unexpected(std::forward<Err>(e))
  381|  2.68M|    {
  382|  2.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.68M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|  7.30M|        : m_unexpected(std::forward<Args>(args)...)
  392|  7.30M|    {
  393|  7.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  7.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  7.30M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   674k|    {
  523|   674k|        return m_has_value;
  524|   674k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   459k|    {
  489|   459k|        return m_value;
  490|   459k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   412k|{
  429|   412k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   412k|        T(std::forward<Args>(args)...);
  431|   412k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|   452k|    {
 6650|   452k|        m_range = std::forward<Other>(r);
 6651|   452k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   452k|    {
 1827|   452k|        return value();
 1828|   452k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   452k|    {
 1801|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   452k|        return this->get_value();
 1803|   452k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   452k|    {
  489|   452k|        return m_value;
  490|   452k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|   235k|{
 9767|   235k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   235k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   235k|{
 9704|   235k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   235k|    auto result = vscan_impl(buffer, format, args);
 9707|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 204k]
  |  |  ------------------
  ------------------
 9708|  31.6k|        return unexpected(result.error());
 9709|  31.6k|    }
 9710|   204k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   235k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|   521k|{
 5466|   521k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   521k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   521k|                  "\n"
 5470|   521k|                  "Unsupported range type given as input to a scanning "
 5471|   521k|                  "function.\n"
 5472|   521k|                  "A range needs to have a character type (value type) "
 5473|   521k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   521k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   521k|                  "to be included.\n"
 5476|   521k|                  "See the scnlib documentation for more details.");
 5477|   521k|    static_assert(
 5478|   521k|        !std::is_same_v<T, custom_char_traits>,
 5479|   521k|        "\n"
 5480|   521k|        "Unsupported range type given as input to a scanning "
 5481|   521k|        "function.\n"
 5482|   521k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   521k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   521k|        "not supported.");
 5485|   521k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   521k|                  "\n"
 5487|   521k|                  "Unsupported range type given as input to a scanning "
 5488|   521k|                  "function.\n"
 5489|   521k|                  "file_marker_found cannot be used as an "
 5490|   521k|                  "source range type to scn::scan.\n"
 5491|   521k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   521k|                  "and do not provide an explicit source range, "
 5493|   521k|                  "or use scn::scan with a FILE* directly.");
 5494|   521k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   521k|                  "\n"
 5496|   521k|                  "Unsupported range type given as input to a scanning "
 5497|   521k|                  "function.\n"
 5498|   521k|                  "In order to be scannable, a range needs to satisfy "
 5499|   521k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   521k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   521k|                  "\n"
 5502|   521k|                  "Unsupported range type given as input to a scanning "
 5503|   521k|                  "function.\n"
 5504|   521k|                  "A range needs to model forward_range and have a valid "
 5505|   521k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   521k|                  "Examples of scannable ranges are std::string, "
 5507|   521k|                  "std::string_view, "
 5508|   521k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   521k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   521k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   521k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   521k|{
 5404|   521k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   521k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   521k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   521k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   521k|    {
 3032|   521k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   521k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   521k|    {
 3013|   521k|        return t.data();
 3014|   521k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|   521k|    {
 3415|   521k|        return detail::to_address(ranges::begin(derived()));
 3416|   521k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  4.49M|{
  341|  4.49M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  4.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  4.49M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   974k|    {
 2901|   974k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   974k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   974k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   974k|    {
 2882|   974k|        return decay_copy(t.begin());
 2883|   974k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  13.2M|    {
 3513|  13.2M|        return m_iterator;
 3514|  13.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|   521k|    {
 3371|   521k|        return static_cast<const D&>(*this);
 3372|   521k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   521k|    {
 3107|   521k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   521k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   521k|    {
 3073|   521k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   521k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|  3.43M|{
 2126|  3.43M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  3.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  3.43M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  3.23M|    {
 3530|  3.23M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  3.23M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|  8.47M|    {
 1772|  8.47M|        return has_value();
 1773|  8.47M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  15.1M|    {
  523|  15.1M|        return m_has_value;
  524|  15.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   847k|    {
 1778|   847k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   847k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   847k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   847k|        return this->get_unexpected().error();
 1780|   847k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   847k|    {
  506|   847k|        return m_unexpected;
  507|   847k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  68.6k|        : base(unexpect, std::move(e.error())),
 1648|  68.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  68.6k|    {
 1650|  68.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  68.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  68.6k|          m_has_value(false)
  484|  68.6k|    {
  485|  68.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   521k|    {
 1348|   521k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   452k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   452k|                      ranges::iterator_t<SourceRange>>) {
 6882|   452k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   452k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  3.65M|    {
 2901|  3.65M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  3.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  3.65M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  3.65M|    {
 2882|  3.65M|        return decay_copy(t.begin());
 2883|  3.65M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|   452k|{
 6867|   452k|    return ranges::end(source);
 6868|   452k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   452k|    {
 2958|   452k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   452k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   452k|    {
 2940|   452k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   452k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  6.09M|    {
 3518|  6.09M|        return m_sentinel;
 3519|  6.09M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  2.52M|    {
 1827|  2.52M|        return value();
 1828|  2.52M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  5.86M|    {
 1801|  5.86M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.86M|        return this->get_value();
 1803|  5.86M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  5.86M|    {
  489|  5.86M|        return m_value;
  490|  5.86M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   452k|        : base(std::in_place, std::forward<U>(val)),
 1602|   452k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   452k|    {
 1604|   452k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   452k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   452k|    {
  475|   452k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   152k|    {
 8963|   152k|        return m_str;
 8964|   152k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   315k|{
 6275|   315k|    detail::check_scan_arg_types<Args...>();
 6276|   315k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   315k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5985|   658k|{
 5986|   658k|    constexpr bool default_constructible_constraint =
 5987|   658k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   658k|    static_assert(default_constructible_constraint,
 5989|   658k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   658k|    constexpr bool destructible_constraint =
 5992|   658k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   658k|    static_assert(destructible_constraint,
 5994|   658k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   658k|    constexpr bool non_reference_constraint =
 5997|   658k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   658k|    static_assert(non_reference_constraint,
 5999|   658k|                  "Scan argument types must not be references");
 6000|       |
 6001|   658k|    constexpr bool movable_constraint =
 6002|   658k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   658k|    static_assert(movable_constraint,
 6004|   658k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   658k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   658k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   658k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6250|   315k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   315k|    {
 6252|   315k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   315k|    {
 6260|   315k|        return {detail::make_arg<
 6261|   315k|            kind, Context,
 6262|   315k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   315k|                                 typename Context::char_type>::value>(args)...};
 6264|   315k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 6035|   315k|{
 6036|   315k|    return make_value<Context>(value).ref_value;
 6037|   315k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5970|   348k|{
 5971|   348k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   348k|                                  needs_context_tag>) {
 5975|   348k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   348k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5772|   348k|    {                                                                        \
 5773|   348k|        return val;                                                          \
 5774|   348k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5939|   658k|{
 5940|   658k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   658k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   658k|    constexpr bool scannable_char =
 5944|   658k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   658k|    static_assert(scannable_char,
 5946|   658k|                  "Cannot scan an argument of an unsupported character "
 5947|   658k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   658k|    constexpr bool scannable_const =
 5950|   658k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   658k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   658k|    constexpr bool scannable_disabled =
 5954|   658k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   658k|    static_assert(scannable_disabled,
 5956|   658k|                  "Cannot scan an argument that has been disabled by "
 5957|   658k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   658k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   658k|    static_assert(
 5961|   658k|        scannable,
 5962|   658k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   658k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   658k|    return arg_value{arg};
 5966|   658k|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5715|   658k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   658k|    {
 5717|   658k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6558|   599k|    {
 6559|   599k|        return m_values;
 6560|   599k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   315k|        : basic_scan_args(store.desc, store.args.data())
 6301|   315k|    {
 6302|   315k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|   975k|        : m_desc(desc), m_builtin_values(data)
 6353|   975k|    {
 6354|   975k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  5.26M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.26M|    static_cast<    \
  |  | 1084|  5.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.26M|    static_cast<    \
  |  | 1084|  5.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.26M|    {
 3498|  5.26M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   975k|{
 8640|   975k|    return s;
 8641|   975k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   975k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   152k|        : m_str(r.str)
 8958|   152k|    {
 8959|   152k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   168k|    {
 1772|   168k|        return has_value();
 1773|   168k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1846|   459k|    {
 1847|   459k|        return &value();
 1848|   459k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   459k|    {
 1801|   459k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   459k|        return this->get_value();
 1803|   459k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|   452k|    {
 6639|   452k|        return ranges::begin(m_range);
 6640|   452k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  76.3k|{
10074|  76.3k|    auto result = make_scan_result<Source, Args...>();
10075|  76.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  76.3k|                                   make_scan_args(result->values())));
10077|  76.3k|    return result;
10078|  76.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|   235k|{
 9785|   235k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   235k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   235k|{
 9720|   235k|#if !SCN_DISABLE_LOCALE
 9721|   235k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   235k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   235k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   235k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   235k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 204k]
  |  |  ------------------
  ------------------
 9728|  31.6k|        return unexpected(result.error());
 9729|  31.6k|    }
 9730|   204k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   235k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  15.9k|{
10115|  15.9k|    auto result = make_scan_result<Source, T>();
10116|  15.9k|    fill_scan_result(
10117|  15.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  15.9k|                            detail::make_arg<scan_context>(result->value())));
10119|  15.9k|    return result;
10120|  15.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  50.0k|{
 9798|  50.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  50.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  50.0k|{
 9744|  50.0k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  50.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  50.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.28k, False: 44.7k]
  |  |  ------------------
  ------------------
 9748|  5.28k|        return unexpected(result.error());
 9749|  5.28k|    }
 9750|  44.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  50.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 6020|  32.4k|{
 6021|  32.4k|    check_scan_arg_types<T>();
 6022|       |
 6023|  32.4k|    basic_scan_arg<Context> arg;
 6024|  32.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  32.4k|    arg.m_value = make_value<Context>(value);
 6026|  32.4k|    return arg;
 6027|  32.4k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|  1.07M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  2.08M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  59.1k|    {
 6581|  59.1k|        return std::get<0>(m_values);
 6582|  59.1k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  79.0k|{
10005|  79.0k|    auto result = make_scan_result<Source, Args...>();
10006|  79.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  79.0k|                                   make_scan_args(result->values())));
10008|  79.0k|    return result;
10009|  79.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9960|   174k|{
 9961|   174k|    return scan_result_type<Source, Args...>();
 9962|   174k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   174k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   174k|        : m_value(T{}), m_has_value(true)
  460|   174k|    {
  461|   174k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6775|   174k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6549|   704k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   174k|{
 9946|   174k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 151k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   151k|    else {
 9950|   151k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   151k|    }
 9952|   174k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   699k|    {
  523|   699k|        return m_has_value;
  524|   699k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   478k|    {
  489|   478k|        return m_value;
  490|   478k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   158k|    {
 8963|   158k|        return m_str;
 8964|   158k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   327k|{
 6275|   327k|    detail::check_scan_arg_types<Args...>();
 6276|   327k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   327k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5985|   704k|{
 5986|   704k|    constexpr bool default_constructible_constraint =
 5987|   704k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   704k|    static_assert(default_constructible_constraint,
 5989|   704k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   704k|    constexpr bool destructible_constraint =
 5992|   704k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   704k|    static_assert(destructible_constraint,
 5994|   704k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   704k|    constexpr bool non_reference_constraint =
 5997|   704k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   704k|    static_assert(non_reference_constraint,
 5999|   704k|                  "Scan argument types must not be references");
 6000|       |
 6001|   704k|    constexpr bool movable_constraint =
 6002|   704k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   704k|    static_assert(movable_constraint,
 6004|   704k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   704k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   704k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   704k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|   327k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   327k|    {
 6252|   327k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   327k|    {
 6260|   327k|        return {detail::make_arg<
 6261|   327k|            kind, Context,
 6262|   327k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   327k|                                 typename Context::char_type>::value>(args)...};
 6264|   327k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|   327k|{
 6036|   327k|    return make_value<Context>(value).ref_value;
 6037|   327k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5970|   361k|{
 5971|   361k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   361k|                                  needs_context_tag>) {
 5975|   361k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   361k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5772|   361k|    {                                                                        \
 5773|   361k|        return val;                                                          \
 5774|   361k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5939|   704k|{
 5940|   704k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   704k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   704k|    constexpr bool scannable_char =
 5944|   704k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   704k|    static_assert(scannable_char,
 5946|   704k|                  "Cannot scan an argument of an unsupported character "
 5947|   704k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   704k|    constexpr bool scannable_const =
 5950|   704k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   704k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   704k|    constexpr bool scannable_disabled =
 5954|   704k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   704k|    static_assert(scannable_disabled,
 5956|   704k|                  "Cannot scan an argument that has been disabled by "
 5957|   704k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   704k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   704k|    static_assert(
 5961|   704k|        scannable,
 5962|   704k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   704k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   704k|    return arg_value{arg};
 5966|   704k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5715|   704k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   704k|    {
 5717|   704k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6558|   639k|    {
 6559|   639k|        return m_values;
 6560|   639k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   327k|        : basic_scan_args(store.desc, store.args.data())
 6301|   327k|    {
 6302|   327k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   158k|        : m_str(r.str)
 8958|   158k|    {
 8959|   158k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   174k|    {
 1772|   174k|        return has_value();
 1773|   174k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|   478k|    {
 1847|   478k|        return &value();
 1848|   478k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   478k|    {
 1801|   478k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   478k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   478k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   478k|        return this->get_value();
 1803|   478k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  79.0k|{
10074|  79.0k|    auto result = make_scan_result<Source, Args...>();
10075|  79.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  79.0k|                                   make_scan_args(result->values())));
10077|  79.0k|    return result;
10078|  79.0k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  16.8k|{
10115|  16.8k|    auto result = make_scan_result<Source, T>();
10116|  16.8k|    fill_scan_result(
10117|  16.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  16.8k|                            detail::make_arg<scan_context>(result->value())));
10119|  16.8k|    return result;
10120|  16.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 6020|  33.9k|{
 6021|  33.9k|    check_scan_arg_types<T>();
 6022|       |
 6023|  33.9k|    basic_scan_arg<Context> arg;
 6024|  33.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  33.9k|    arg.m_value = make_value<Context>(value);
 6026|  33.9k|    return arg;
 6027|  33.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  65.2k|    {
 6581|  65.2k|        return std::get<0>(m_values);
 6582|  65.2k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  80.4k|{
10005|  80.4k|    auto result = make_scan_result<Source, Args...>();
10006|  80.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  80.4k|                                   make_scan_args(result->values())));
10008|  80.4k|    return result;
10009|  80.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9960|   178k|{
 9961|   178k|    return scan_result_type<Source, Args...>();
 9962|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   178k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   178k|        : m_value(T{}), m_has_value(true)
  460|   178k|    {
  461|   178k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6775|   178k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6549|   719k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   178k|{
 9946|   178k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 155k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   155k|    else {
 9950|   155k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   155k|    static_cast<    \
  |  | 1084|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   155k|    }
 9952|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   712k|    {
  523|   712k|        return m_has_value;
  524|   712k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   488k|    {
  489|   488k|        return m_value;
  490|   488k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   160k|    {
 8963|   160k|        return m_str;
 8964|   160k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   333k|{
 6275|   333k|    detail::check_scan_arg_types<Args...>();
 6276|   333k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   333k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5985|   719k|{
 5986|   719k|    constexpr bool default_constructible_constraint =
 5987|   719k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   719k|    static_assert(default_constructible_constraint,
 5989|   719k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   719k|    constexpr bool destructible_constraint =
 5992|   719k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   719k|    static_assert(destructible_constraint,
 5994|   719k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   719k|    constexpr bool non_reference_constraint =
 5997|   719k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   719k|    static_assert(non_reference_constraint,
 5999|   719k|                  "Scan argument types must not be references");
 6000|       |
 6001|   719k|    constexpr bool movable_constraint =
 6002|   719k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   719k|    static_assert(movable_constraint,
 6004|   719k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   719k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   719k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   719k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6250|   333k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   333k|    {
 6252|   333k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   333k|    {
 6260|   333k|        return {detail::make_arg<
 6261|   333k|            kind, Context,
 6262|   333k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   333k|                                 typename Context::char_type>::value>(args)...};
 6264|   333k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 6035|   333k|{
 6036|   333k|    return make_value<Context>(value).ref_value;
 6037|   333k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5970|   367k|{
 5971|   367k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   367k|                                  needs_context_tag>) {
 5975|   367k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   367k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5772|   367k|    {                                                                        \
 5773|   367k|        return val;                                                          \
 5774|   367k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5939|   719k|{
 5940|   719k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   719k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   719k|    constexpr bool scannable_char =
 5944|   719k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   719k|    static_assert(scannable_char,
 5946|   719k|                  "Cannot scan an argument of an unsupported character "
 5947|   719k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   719k|    constexpr bool scannable_const =
 5950|   719k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   719k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   719k|    constexpr bool scannable_disabled =
 5954|   719k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   719k|    static_assert(scannable_disabled,
 5956|   719k|                  "Cannot scan an argument that has been disabled by "
 5957|   719k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   719k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   719k|    static_assert(
 5961|   719k|        scannable,
 5962|   719k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   719k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   719k|    return arg_value{arg};
 5966|   719k|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5715|   719k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   719k|    {
 5717|   719k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6558|   652k|    {
 6559|   652k|        return m_values;
 6560|   652k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   333k|        : basic_scan_args(store.desc, store.args.data())
 6301|   333k|    {
 6302|   333k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   160k|        : m_str(r.str)
 8958|   160k|    {
 8959|   160k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   178k|    {
 1772|   178k|        return has_value();
 1773|   178k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1846|   488k|    {
 1847|   488k|        return &value();
 1848|   488k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   488k|    {
 1801|   488k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   488k|        return this->get_value();
 1803|   488k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  80.4k|{
10074|  80.4k|    auto result = make_scan_result<Source, Args...>();
10075|  80.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  80.4k|                                   make_scan_args(result->values())));
10077|  80.4k|    return result;
10078|  80.4k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  17.2k|{
10115|  17.2k|    auto result = make_scan_result<Source, T>();
10116|  17.2k|    fill_scan_result(
10117|  17.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.2k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.2k|    return result;
10120|  17.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 6020|  34.7k|{
 6021|  34.7k|    check_scan_arg_types<T>();
 6022|       |
 6023|  34.7k|    basic_scan_arg<Context> arg;
 6024|  34.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  34.7k|    arg.m_value = make_value<Context>(value);
 6026|  34.7k|    return arg;
 6027|  34.7k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  67.2k|    {
 6581|  67.2k|        return std::get<0>(m_values);
 6582|  67.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  68.6k|    {
 2901|  68.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  68.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  68.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  68.6k|    {
 2882|  68.6k|        return decay_copy(t.begin());
 2883|  68.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  18.3M|{
 2126|  18.3M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  18.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  18.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.11M|    {
 2958|  1.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.11M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.11M|    {
 2940|  1.11M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.11M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  81.4k|{
10005|  81.4k|    auto result = make_scan_result<Source, Args...>();
10006|  81.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  81.4k|                                   make_scan_args(result->values())));
10008|  81.4k|    return result;
10009|  81.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9960|   179k|{
 9961|   179k|    return scan_result_type<Source, Args...>();
 9962|   179k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   179k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   179k|        : m_value(T{}), m_has_value(true)
  460|   179k|    {
  461|   179k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6775|   179k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   555k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   555k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   179k|{
 9946|   179k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 156k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   156k|    else {
 9950|   156k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   156k|    static_cast<    \
  |  | 1084|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   156k|    }
 9952|   179k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   555k|    {
 1772|   555k|        return has_value();
 1773|   555k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.11M|    {
  523|  1.11M|        return m_has_value;
  524|  1.11M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  68.6k|    {
 1778|  68.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  68.6k|        return this->get_unexpected().error();
 1780|  68.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  68.6k|    {
  506|  68.6k|        return m_unexpected;
  507|  68.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   717k|    {
  523|   717k|        return m_has_value;
  524|   717k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   492k|    {
  489|   492k|        return m_value;
  490|   492k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   486k|    {
 6650|   486k|        m_range = std::forward<Other>(r);
 6651|   486k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   486k|    {
 1827|   486k|        return value();
 1828|   486k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   486k|    {
 1801|   486k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   486k|        return this->get_value();
 1803|   486k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   486k|    {
  489|   486k|        return m_value;
  490|   486k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|   252k|{
 9767|   252k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   252k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   252k|{
 9704|   252k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   252k|    auto result = vscan_impl(buffer, format, args);
 9707|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 220k]
  |  |  ------------------
  ------------------
 9708|  31.6k|        return unexpected(result.error());
 9709|  31.6k|    }
 9710|   220k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   252k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   555k|{
 5466|   555k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   555k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   555k|                  "\n"
 5470|   555k|                  "Unsupported range type given as input to a scanning "
 5471|   555k|                  "function.\n"
 5472|   555k|                  "A range needs to have a character type (value type) "
 5473|   555k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   555k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   555k|                  "to be included.\n"
 5476|   555k|                  "See the scnlib documentation for more details.");
 5477|   555k|    static_assert(
 5478|   555k|        !std::is_same_v<T, custom_char_traits>,
 5479|   555k|        "\n"
 5480|   555k|        "Unsupported range type given as input to a scanning "
 5481|   555k|        "function.\n"
 5482|   555k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   555k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   555k|        "not supported.");
 5485|   555k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   555k|                  "\n"
 5487|   555k|                  "Unsupported range type given as input to a scanning "
 5488|   555k|                  "function.\n"
 5489|   555k|                  "file_marker_found cannot be used as an "
 5490|   555k|                  "source range type to scn::scan.\n"
 5491|   555k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   555k|                  "and do not provide an explicit source range, "
 5493|   555k|                  "or use scn::scan with a FILE* directly.");
 5494|   555k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   555k|                  "\n"
 5496|   555k|                  "Unsupported range type given as input to a scanning "
 5497|   555k|                  "function.\n"
 5498|   555k|                  "In order to be scannable, a range needs to satisfy "
 5499|   555k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   555k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   555k|                  "\n"
 5502|   555k|                  "Unsupported range type given as input to a scanning "
 5503|   555k|                  "function.\n"
 5504|   555k|                  "A range needs to model forward_range and have a valid "
 5505|   555k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   555k|                  "Examples of scannable ranges are std::string, "
 5507|   555k|                  "std::string_view, "
 5508|   555k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   555k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   555k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   555k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   555k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   555k|    else {
 5451|   555k|        return make_forward_scan_buffer(r);
 5452|   555k|    }
 5453|   555k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   555k|{
 5269|   555k|    return basic_scan_forward_buffer_impl(range);
 5270|   555k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   555k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   555k|          m_cursor(ranges::begin(*m_range))
 4830|   555k|    {
 4831|   555k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   555k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   555k|    {
 4802|   555k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   555k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   555k|    {
 4493|   555k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   555k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.04M|    {
 2901|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.04M|    {
 2882|  1.04M|        return decay_copy(t.begin());
 2883|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|  1.52M|    {
 3513|  1.52M|        return m_iterator;
 3514|  1.52M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|  5.16M|    {
 4835|  5.16M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 181k, False: 4.98M]
  ------------------
 4836|   181k|            return false;
 4837|   181k|        }
 4838|  4.98M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  4.98M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  4.98M|        }
 4841|  4.98M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 4.43M, False: 548k]
  ------------------
 4842|  4.43M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  4.43M|                                          this->m_current_view.begin(),
 4844|  4.43M|                                          this->m_current_view.end());
 4845|  4.43M|        }
 4846|  4.98M|        m_latest = *m_cursor;
 4847|  4.98M|        ++m_cursor;
 4848|  4.98M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  4.98M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  4.98M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  4.98M|        }
 4852|  4.98M|        return true;
 4853|  5.16M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  15.1M|    {
 2958|  15.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  15.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  15.1M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  15.1M|    {
 2940|  15.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  15.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  15.1M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  15.6M|    {
 3518|  15.6M|        return m_sentinel;
 3519|  15.6M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   555k|    {
 4402|   555k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   555k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   555k|        return true;
 4404|   555k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  68.6k|        : base(unexpect, std::move(e.error())),
 1648|  68.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  68.6k|    {
 1650|  68.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  68.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  68.6k|          m_has_value(false)
  484|  68.6k|    {
  485|  68.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   555k|    {
 1348|   555k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   486k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   486k|                      ranges::iterator_t<SourceRange>>) {
 6882|   486k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   486k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   486k|    {
 2901|   486k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   486k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   486k|    {
 2882|   486k|        return decay_copy(t.begin());
 2883|   486k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|   486k|{
 6867|   486k|    return ranges::end(source);
 6868|   486k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   486k|    {
 2958|   486k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   486k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   486k|    {
 2940|   486k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   486k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   486k|        : base(std::in_place, std::forward<U>(val)),
 1602|   486k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   486k|    {
 1604|   486k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   486k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   486k|    {
  475|   486k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   162k|    {
 8963|   162k|        return m_str;
 8964|   162k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|  1.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.04M|    static_cast<    \
  |  | 1084|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.04M|    static_cast<    \
  |  | 1084|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.04M|    {
 3498|  1.04M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   162k|        : m_str(r.str)
 8958|   162k|    {
 8959|   162k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   179k|    {
 1772|   179k|        return has_value();
 1773|   179k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1846|   492k|    {
 1847|   492k|        return &value();
 1848|   492k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   492k|    {
 1801|   492k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   492k|        return this->get_value();
 1803|   492k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|   486k|    {
 6639|   486k|        return ranges::begin(m_range);
 6640|   486k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  81.4k|{
10074|  81.4k|    auto result = make_scan_result<Source, Args...>();
10075|  81.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  81.4k|                                   make_scan_args(result->values())));
10077|  81.4k|    return result;
10078|  81.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|   252k|{
 9785|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   252k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   252k|{
 9720|   252k|#if !SCN_DISABLE_LOCALE
 9721|   252k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 220k]
  |  |  ------------------
  ------------------
 9728|  31.6k|        return unexpected(result.error());
 9729|  31.6k|    }
 9730|   220k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   252k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  16.4k|{
10115|  16.4k|    auto result = make_scan_result<Source, T>();
10116|  16.4k|    fill_scan_result(
10117|  16.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  16.4k|                            detail::make_arg<scan_context>(result->value())));
10119|  16.4k|    return result;
10120|  16.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  51.1k|{
 9798|  51.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  51.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  51.1k|{
 9744|  51.1k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  51.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  51.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.28k, False: 45.8k]
  |  |  ------------------
  ------------------
 9748|  5.28k|        return unexpected(result.error());
 9749|  5.28k|    }
 9750|  45.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  51.1k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  84.6k|{
10005|  84.6k|    auto result = make_scan_result<Source, Args...>();
10006|  84.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  84.6k|                                   make_scan_args(result->values())));
10008|  84.6k|    return result;
10009|  84.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9960|   186k|{
 9961|   186k|    return scan_result_type<Source, Args...>();
 9962|   186k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   186k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   186k|        : m_value(T{}), m_has_value(true)
  460|   186k|    {
  461|   186k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6775|   186k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   186k|{
 9946|   186k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 163k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   163k|    else {
 9950|   163k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   163k|    static_cast<    \
  |  | 1084|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   163k|    }
 9952|   186k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   746k|    {
  523|   746k|        return m_has_value;
  524|   746k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   513k|    {
  489|   513k|        return m_value;
  490|   513k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   169k|    {
 8963|   169k|        return m_str;
 8964|   169k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   169k|        : m_str(r.str)
 8958|   169k|    {
 8959|   169k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   186k|    {
 1772|   186k|        return has_value();
 1773|   186k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1846|   513k|    {
 1847|   513k|        return &value();
 1848|   513k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   513k|    {
 1801|   513k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   513k|        return this->get_value();
 1803|   513k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  84.6k|{
10074|  84.6k|    auto result = make_scan_result<Source, Args...>();
10075|  84.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  84.6k|                                   make_scan_args(result->values())));
10077|  84.6k|    return result;
10078|  84.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  17.1k|{
10115|  17.1k|    auto result = make_scan_result<Source, T>();
10116|  17.1k|    fill_scan_result(
10117|  17.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.1k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.1k|    return result;
10120|  17.1k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  86.0k|{
10005|  86.0k|    auto result = make_scan_result<Source, Args...>();
10006|  86.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  86.0k|                                   make_scan_args(result->values())));
10008|  86.0k|    return result;
10009|  86.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9960|   189k|{
 9961|   189k|    return scan_result_type<Source, Args...>();
 9962|   189k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   189k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   189k|        : m_value(T{}), m_has_value(true)
  460|   189k|    {
  461|   189k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6775|   189k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   189k|{
 9946|   189k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 166k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   166k|    else {
 9950|   166k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   166k|    static_cast<    \
  |  | 1084|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   166k|    }
 9952|   189k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   758k|    {
  523|   758k|        return m_has_value;
  524|   758k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   523k|    {
  489|   523k|        return m_value;
  490|   523k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   172k|    {
 8963|   172k|        return m_str;
 8964|   172k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   172k|        : m_str(r.str)
 8958|   172k|    {
 8959|   172k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   189k|    {
 1772|   189k|        return has_value();
 1773|   189k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1846|   523k|    {
 1847|   523k|        return &value();
 1848|   523k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   523k|    {
 1801|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   523k|        return this->get_value();
 1803|   523k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  86.0k|{
10074|  86.0k|    auto result = make_scan_result<Source, Args...>();
10075|  86.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  86.0k|                                   make_scan_args(result->values())));
10077|  86.0k|    return result;
10078|  86.0k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  17.4k|{
10115|  17.4k|    auto result = make_scan_result<Source, T>();
10116|  17.4k|    fill_scan_result(
10117|  17.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.4k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.4k|    return result;
10120|  17.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   140k|    {
 2901|   140k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   140k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   140k|    {
 2882|   140k|        return decay_copy(t.begin());
 2883|   140k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  4.09M|{
 2126|  4.09M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  4.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  4.09M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.00M|    {
 2958|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.00M|    {
 2940|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.00M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9960|   155k|{
 9961|   155k|    return scan_result_type<Source, Args...>();
 9962|   155k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   155k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   155k|        : m_value(T{}), m_has_value(true)
  460|   155k|    {
  461|   155k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6775|   155k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|   502k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|   502k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   155k|{
 9946|   155k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 109k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   109k|    else {
 9950|   109k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   109k|    static_cast<    \
  |  | 1084|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   109k|    }
 9952|   155k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|   502k|    {
 1772|   502k|        return has_value();
 1773|   502k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.00M|    {
  523|  1.00M|        return m_has_value;
  524|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|   137k|    {
 1778|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   137k|        return this->get_unexpected().error();
 1780|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   137k|    {
  506|   137k|        return m_unexpected;
  507|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   621k|    {
  523|   621k|        return m_has_value;
  524|   621k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   374k|    {
  489|   374k|        return m_value;
  490|   374k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|   365k|    {
 6650|   365k|        m_range = std::forward<Other>(r);
 6651|   365k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   365k|    {
 1827|   365k|        return value();
 1828|   365k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   365k|    {
 1801|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   365k|        return this->get_value();
 1803|   365k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   365k|    {
  489|   365k|        return m_value;
  490|   365k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   228k|{
 9704|   228k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   228k|    auto result = vscan_impl(buffer, format, args);
 9707|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 165k]
  |  |  ------------------
  ------------------
 9708|  63.3k|        return unexpected(result.error());
 9709|  63.3k|    }
 9710|   165k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   228k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|   502k|{
 5466|   502k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   502k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   502k|                  "\n"
 5470|   502k|                  "Unsupported range type given as input to a scanning "
 5471|   502k|                  "function.\n"
 5472|   502k|                  "A range needs to have a character type (value type) "
 5473|   502k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   502k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   502k|                  "to be included.\n"
 5476|   502k|                  "See the scnlib documentation for more details.");
 5477|   502k|    static_assert(
 5478|   502k|        !std::is_same_v<T, custom_char_traits>,
 5479|   502k|        "\n"
 5480|   502k|        "Unsupported range type given as input to a scanning "
 5481|   502k|        "function.\n"
 5482|   502k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   502k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   502k|        "not supported.");
 5485|   502k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   502k|                  "\n"
 5487|   502k|                  "Unsupported range type given as input to a scanning "
 5488|   502k|                  "function.\n"
 5489|   502k|                  "file_marker_found cannot be used as an "
 5490|   502k|                  "source range type to scn::scan.\n"
 5491|   502k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   502k|                  "and do not provide an explicit source range, "
 5493|   502k|                  "or use scn::scan with a FILE* directly.");
 5494|   502k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   502k|                  "\n"
 5496|   502k|                  "Unsupported range type given as input to a scanning "
 5497|   502k|                  "function.\n"
 5498|   502k|                  "In order to be scannable, a range needs to satisfy "
 5499|   502k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   502k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   502k|                  "\n"
 5502|   502k|                  "Unsupported range type given as input to a scanning "
 5503|   502k|                  "function.\n"
 5504|   502k|                  "A range needs to model forward_range and have a valid "
 5505|   502k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   502k|                  "Examples of scannable ranges are std::string, "
 5507|   502k|                  "std::string_view, "
 5508|   502k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   502k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   502k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   502k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   502k|{
 5404|   502k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   502k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   502k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   502k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   502k|    {
 3032|   502k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   502k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   502k|    {
 3013|   502k|        return t.data();
 3014|   502k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|   502k|    {
 3415|   502k|        return detail::to_address(ranges::begin(derived()));
 3416|   502k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  2.41M|{
  341|  2.41M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  2.41M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  2.41M|{
  319|  2.41M|    return p;
  320|  2.41M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   868k|    {
 2901|   868k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   868k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   868k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   868k|    {
 2882|   868k|        return decay_copy(t.begin());
 2883|   868k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|  20.8M|    {
 3513|  20.8M|        return m_iterator;
 3514|  20.8M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|   502k|    {
 3371|   502k|        return static_cast<const D&>(*this);
 3372|   502k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   502k|    {
 3107|   502k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   502k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   502k|    {
 3073|   502k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   502k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  2.62M|    {
 3530|  2.62M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  2.62M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|   137k|        : base(unexpect, std::move(e.error())),
 1648|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   137k|    {
 1650|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   137k|          m_has_value(false)
  484|   137k|    {
  485|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   502k|    {
 1348|   502k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   365k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   365k|                      ranges::iterator_t<SourceRange>>) {
 6882|   365k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   365k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.71M|    {
 2901|  1.71M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.71M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.71M|    {
 2882|  1.71M|        return decay_copy(t.begin());
 2883|  1.71M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|   365k|{
 6867|   365k|    return ranges::end(source);
 6868|   365k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   365k|    {
 2958|   365k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   365k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   365k|    {
 2940|   365k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   365k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|  12.5M|    {
 3518|  12.5M|        return m_sentinel;
 3519|  12.5M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   365k|        : base(std::in_place, std::forward<U>(val)),
 1602|   365k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   365k|    {
 1604|   365k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   365k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   365k|    {
  475|   365k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   142k|    {
 8963|   142k|        return m_str;
 8964|   142k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   284k|{
 6275|   284k|    detail::check_scan_arg_types<Args...>();
 6276|   284k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   284k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6250|   284k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   284k|    {
 6252|   284k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   284k|    {
 6260|   284k|        return {detail::make_arg<
 6261|   284k|            kind, Context,
 6262|   284k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   284k|                                 typename Context::char_type>::value>(args)...};
 6264|   284k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 6035|   284k|{
 6036|   284k|    return make_value<Context>(value).ref_value;
 6037|   284k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5970|   310k|{
 5971|   310k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   310k|                                  needs_context_tag>) {
 5975|   310k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   310k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5772|   310k|    {                                                                        \
 5773|   310k|        return val;                                                          \
 5774|   310k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   284k|        : basic_scan_args(store.desc, store.args.data())
 6301|   284k|    {
 6302|   284k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|   915k|        : m_desc(desc), m_builtin_values(data)
 6353|   915k|    {
 6354|   915k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  7.77M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.77M|    static_cast<    \
  |  | 1084|  7.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.77M|    static_cast<    \
  |  | 1084|  7.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  7.77M|    {
 3498|  7.77M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|   915k|{
 8645|   915k|    return s;
 8646|   915k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|   915k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   142k|        : m_str(r.str)
 8958|   142k|    {
 8959|   142k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   155k|    {
 1772|   155k|        return has_value();
 1773|   155k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1846|   374k|    {
 1847|   374k|        return &value();
 1848|   374k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   374k|    {
 1801|   374k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   374k|        return this->get_value();
 1803|   374k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|   365k|    {
 6639|   365k|        return ranges::begin(m_range);
 6640|   365k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   228k|{
 9720|   228k|#if !SCN_DISABLE_LOCALE
 9721|   228k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   228k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   228k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   228k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 165k]
  |  |  ------------------
  ------------------
 9728|  63.3k|        return unexpected(result.error());
 9729|  63.3k|    }
 9730|   165k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   228k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  45.2k|{
 9744|  45.2k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  45.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  45.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.5k, False: 34.6k]
  |  |  ------------------
  ------------------
 9748|  10.5k|        return unexpected(result.error());
 9749|  10.5k|    }
 9750|  34.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  45.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 6020|  26.6k|{
 6021|  26.6k|    check_scan_arg_types<T>();
 6022|       |
 6023|  26.6k|    basic_scan_arg<Context> arg;
 6024|  26.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  26.6k|    arg.m_value = make_value<Context>(value);
 6026|  26.6k|    return arg;
 6027|  26.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|  1.00M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9960|   171k|{
 9961|   171k|    return scan_result_type<Source, Args...>();
 9962|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   171k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   171k|        : m_value(T{}), m_has_value(true)
  460|   171k|    {
  461|   171k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6775|   171k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   171k|{
 9946|   171k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 125k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   125k|    else {
 9950|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   125k|    static_cast<    \
  |  | 1084|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   125k|    }
 9952|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   686k|    {
  523|   686k|        return m_has_value;
  524|   686k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   422k|    {
  489|   422k|        return m_value;
  490|   422k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   155k|    {
 8963|   155k|        return m_str;
 8964|   155k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   311k|{
 6275|   311k|    detail::check_scan_arg_types<Args...>();
 6276|   311k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   311k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|   311k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   311k|    {
 6252|   311k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   311k|    {
 6260|   311k|        return {detail::make_arg<
 6261|   311k|            kind, Context,
 6262|   311k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   311k|                                 typename Context::char_type>::value>(args)...};
 6264|   311k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|   311k|{
 6036|   311k|    return make_value<Context>(value).ref_value;
 6037|   311k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5970|   342k|{
 5971|   342k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   342k|                                  needs_context_tag>) {
 5975|   342k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   342k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5772|   342k|    {                                                                        \
 5773|   342k|        return val;                                                          \
 5774|   342k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   311k|        : basic_scan_args(store.desc, store.args.data())
 6301|   311k|    {
 6302|   311k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   155k|        : m_str(r.str)
 8958|   155k|    {
 8959|   155k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   171k|    {
 1772|   171k|        return has_value();
 1773|   171k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|   422k|    {
 1847|   422k|        return &value();
 1848|   422k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   422k|    {
 1801|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   422k|        return this->get_value();
 1803|   422k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 6020|  31.2k|{
 6021|  31.2k|    check_scan_arg_types<T>();
 6022|       |
 6023|  31.2k|    basic_scan_arg<Context> arg;
 6024|  31.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  31.2k|    arg.m_value = make_value<Context>(value);
 6026|  31.2k|    return arg;
 6027|  31.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9960|   175k|{
 9961|   175k|    return scan_result_type<Source, Args...>();
 9962|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   175k|        : m_value(T{}), m_has_value(true)
  460|   175k|    {
  461|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6775|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   175k|{
 9946|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 130k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   130k|    else {
 9950|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   130k|    static_cast<    \
  |  | 1084|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   130k|    }
 9952|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   703k|    {
  523|   703k|        return m_has_value;
  524|   703k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   436k|    {
  489|   436k|        return m_value;
  490|   436k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   159k|    {
 8963|   159k|        return m_str;
 8964|   159k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   319k|{
 6275|   319k|    detail::check_scan_arg_types<Args...>();
 6276|   319k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   319k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6250|   319k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   319k|    {
 6252|   319k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   319k|    {
 6260|   319k|        return {detail::make_arg<
 6261|   319k|            kind, Context,
 6262|   319k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   319k|                                 typename Context::char_type>::value>(args)...};
 6264|   319k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 6035|   319k|{
 6036|   319k|    return make_value<Context>(value).ref_value;
 6037|   319k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5970|   351k|{
 5971|   351k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   351k|                                  needs_context_tag>) {
 5975|   351k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   351k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5772|   351k|    {                                                                        \
 5773|   351k|        return val;                                                          \
 5774|   351k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   319k|        : basic_scan_args(store.desc, store.args.data())
 6301|   319k|    {
 6302|   319k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   159k|        : m_str(r.str)
 8958|   159k|    {
 8959|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   175k|    {
 1772|   175k|        return has_value();
 1773|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1846|   436k|    {
 1847|   436k|        return &value();
 1848|   436k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   436k|    {
 1801|   436k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   436k|        return this->get_value();
 1803|   436k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 6020|  32.4k|{
 6021|  32.4k|    check_scan_arg_types<T>();
 6022|       |
 6023|  32.4k|    basic_scan_arg<Context> arg;
 6024|  32.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  32.4k|    arg.m_value = make_value<Context>(value);
 6026|  32.4k|    return arg;
 6027|  32.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   137k|    {
 2901|   137k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   137k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   137k|    {
 2882|   137k|        return decay_copy(t.begin());
 2883|   137k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|  10.0M|{
 2126|  10.0M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  10.0M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.00M|    {
 2958|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.00M|    {
 2940|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.00M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9960|   155k|{
 9961|   155k|    return scan_result_type<Source, Args...>();
 9962|   155k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   155k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   155k|        : m_value(T{}), m_has_value(true)
  460|   155k|    {
  461|   155k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6775|   155k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   502k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   502k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   155k|{
 9946|   155k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 109k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   109k|    else {
 9950|   109k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   109k|    static_cast<    \
  |  | 1084|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   109k|    }
 9952|   155k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   502k|    {
 1772|   502k|        return has_value();
 1773|   502k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.00M|    {
  523|  1.00M|        return m_has_value;
  524|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|   137k|    {
 1778|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   137k|        return this->get_unexpected().error();
 1780|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   137k|    {
  506|   137k|        return m_unexpected;
  507|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   621k|    {
  523|   621k|        return m_has_value;
  524|   621k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   374k|    {
  489|   374k|        return m_value;
  490|   374k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   365k|    {
 6650|   365k|        m_range = std::forward<Other>(r);
 6651|   365k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   365k|    {
 1827|   365k|        return value();
 1828|   365k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   365k|    {
 1801|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   365k|        return this->get_value();
 1803|   365k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   365k|    {
  489|   365k|        return m_value;
  490|   365k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   228k|{
 9704|   228k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   228k|    auto result = vscan_impl(buffer, format, args);
 9707|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 165k]
  |  |  ------------------
  ------------------
 9708|  63.3k|        return unexpected(result.error());
 9709|  63.3k|    }
 9710|   165k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   228k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   502k|{
 5466|   502k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   502k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   502k|                  "\n"
 5470|   502k|                  "Unsupported range type given as input to a scanning "
 5471|   502k|                  "function.\n"
 5472|   502k|                  "A range needs to have a character type (value type) "
 5473|   502k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   502k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   502k|                  "to be included.\n"
 5476|   502k|                  "See the scnlib documentation for more details.");
 5477|   502k|    static_assert(
 5478|   502k|        !std::is_same_v<T, custom_char_traits>,
 5479|   502k|        "\n"
 5480|   502k|        "Unsupported range type given as input to a scanning "
 5481|   502k|        "function.\n"
 5482|   502k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   502k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   502k|        "not supported.");
 5485|   502k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   502k|                  "\n"
 5487|   502k|                  "Unsupported range type given as input to a scanning "
 5488|   502k|                  "function.\n"
 5489|   502k|                  "file_marker_found cannot be used as an "
 5490|   502k|                  "source range type to scn::scan.\n"
 5491|   502k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   502k|                  "and do not provide an explicit source range, "
 5493|   502k|                  "or use scn::scan with a FILE* directly.");
 5494|   502k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   502k|                  "\n"
 5496|   502k|                  "Unsupported range type given as input to a scanning "
 5497|   502k|                  "function.\n"
 5498|   502k|                  "In order to be scannable, a range needs to satisfy "
 5499|   502k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   502k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   502k|                  "\n"
 5502|   502k|                  "Unsupported range type given as input to a scanning "
 5503|   502k|                  "function.\n"
 5504|   502k|                  "A range needs to model forward_range and have a valid "
 5505|   502k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   502k|                  "Examples of scannable ranges are std::string, "
 5507|   502k|                  "std::string_view, "
 5508|   502k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   502k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   502k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   502k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   502k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   502k|    else {
 5451|   502k|        return make_forward_scan_buffer(r);
 5452|   502k|    }
 5453|   502k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   502k|{
 5269|   502k|    return basic_scan_forward_buffer_impl(range);
 5270|   502k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   502k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   502k|          m_cursor(ranges::begin(*m_range))
 4830|   502k|    {
 4831|   502k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   502k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   502k|    {
 4802|   502k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   502k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   502k|    {
 4493|   502k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   502k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   867k|    {
 2901|   867k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   867k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   867k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   867k|    {
 2882|   867k|        return decay_copy(t.begin());
 2883|   867k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|  1.23M|    {
 3513|  1.23M|        return m_iterator;
 3514|  1.23M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|  2.57M|    {
 4835|  2.57M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 201k, False: 2.37M]
  ------------------
 4836|   201k|            return false;
 4837|   201k|        }
 4838|  2.37M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  2.37M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  2.37M|        }
 4841|  2.37M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 1.87M, False: 500k]
  ------------------
 4842|  1.87M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  1.87M|                                          this->m_current_view.begin(),
 4844|  1.87M|                                          this->m_current_view.end());
 4845|  1.87M|        }
 4846|  2.37M|        m_latest = *m_cursor;
 4847|  2.37M|        ++m_cursor;
 4848|  2.37M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  2.37M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  2.37M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  2.37M|        }
 4852|  2.37M|        return true;
 4853|  2.57M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  7.32M|    {
 2958|  7.32M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  7.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  7.32M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  7.32M|    {
 2940|  7.32M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  7.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  7.32M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|  7.69M|    {
 3518|  7.69M|        return m_sentinel;
 3519|  7.69M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   502k|    {
 4402|   502k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   502k|        return true;
 4404|   502k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|   137k|        : base(unexpect, std::move(e.error())),
 1648|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   137k|    {
 1650|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   137k|          m_has_value(false)
  484|   137k|    {
  485|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   502k|    {
 1348|   502k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   365k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   365k|                      ranges::iterator_t<SourceRange>>) {
 6882|   365k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   365k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   365k|    {
 2901|   365k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   365k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   365k|    {
 2882|   365k|        return decay_copy(t.begin());
 2883|   365k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|   365k|{
 6867|   365k|    return ranges::end(source);
 6868|   365k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   365k|    {
 2958|   365k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   365k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   365k|    {
 2940|   365k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   365k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   365k|        : base(std::in_place, std::forward<U>(val)),
 1602|   365k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   365k|    {
 1604|   365k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   365k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   365k|    {
  475|   365k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   142k|    {
 8963|   142k|        return m_str;
 8964|   142k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   867k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   867k|    static_cast<    \
  |  | 1084|   867k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   867k|    static_cast<    \
  |  | 1084|   867k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   867k|    {
 3498|   867k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   142k|        : m_str(r.str)
 8958|   142k|    {
 8959|   142k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   155k|    {
 1772|   155k|        return has_value();
 1773|   155k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1846|   374k|    {
 1847|   374k|        return &value();
 1848|   374k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   374k|    {
 1801|   374k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   374k|        return this->get_value();
 1803|   374k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|   365k|    {
 6639|   365k|        return ranges::begin(m_range);
 6640|   365k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   228k|{
 9720|   228k|#if !SCN_DISABLE_LOCALE
 9721|   228k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   228k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   228k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   228k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 165k]
  |  |  ------------------
  ------------------
 9728|  63.3k|        return unexpected(result.error());
 9729|  63.3k|    }
 9730|   165k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   228k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  45.1k|{
 9744|  45.1k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  45.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  45.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.5k, False: 34.6k]
  |  |  ------------------
  ------------------
 9748|  10.5k|        return unexpected(result.error());
 9749|  10.5k|    }
 9750|  34.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  45.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9960|   171k|{
 9961|   171k|    return scan_result_type<Source, Args...>();
 9962|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   171k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   171k|        : m_value(T{}), m_has_value(true)
  460|   171k|    {
  461|   171k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6775|   171k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   171k|{
 9946|   171k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 125k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   125k|    else {
 9950|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   125k|    static_cast<    \
  |  | 1084|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   125k|    }
 9952|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   685k|    {
  523|   685k|        return m_has_value;
  524|   685k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   422k|    {
  489|   422k|        return m_value;
  490|   422k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   155k|    {
 8963|   155k|        return m_str;
 8964|   155k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   155k|        : m_str(r.str)
 8958|   155k|    {
 8959|   155k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   171k|    {
 1772|   171k|        return has_value();
 1773|   171k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1846|   422k|    {
 1847|   422k|        return &value();
 1848|   422k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   422k|    {
 1801|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   422k|        return this->get_value();
 1803|   422k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9960|   175k|{
 9961|   175k|    return scan_result_type<Source, Args...>();
 9962|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   175k|        : m_value(T{}), m_has_value(true)
  460|   175k|    {
  461|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6775|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   175k|{
 9946|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 130k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   130k|    else {
 9950|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   130k|    static_cast<    \
  |  | 1084|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   130k|    }
 9952|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   703k|    {
  523|   703k|        return m_has_value;
  524|   703k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   436k|    {
  489|   436k|        return m_value;
  490|   436k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   159k|    {
 8963|   159k|        return m_str;
 8964|   159k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   159k|        : m_str(r.str)
 8958|   159k|    {
 8959|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   175k|    {
 1772|   175k|        return has_value();
 1773|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1846|   436k|    {
 1847|   436k|        return &value();
 1848|   436k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   436k|    {
 1801|   436k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   436k|        return this->get_value();
 1803|   436k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|  2.39M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|  2.39M|    {
 3787|  2.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  2.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|  2.39M|    }
_ZNK3scn2v410scan_error4codeEv:
 3797|   219k|    {
 3798|   219k|        return m_code;
 3799|   219k|    }
_ZNK3scn2v410scan_error3msgEv:
 3802|  2.16k|    {
 3803|  2.16k|        return m_msg;
 3804|  2.16k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   414k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   414k|    else {
 4037|   414k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   414k|    }
 4039|   414k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  24.1M|    {
 3513|  24.1M|        return m_iterator;
 3514|  24.1M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  21.3M|    {
 3513|  21.3M|        return m_iterator;
 3514|  21.3M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  12.8M|    {
  605|  12.8M|        return m_has_value;
  606|  12.8M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|  2.55M|    {
  588|  2.55M|        return m_unexpected;
  589|  2.55M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|   328k|    {
 1778|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   328k|        return this->get_unexpected().error();
 1780|   328k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  1.50M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|  1.11M|    {
 7230|  1.11M|        m_specs.type = type;
 7231|  1.11M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|  1.50M|    {
 7305|  1.50M|        return m_error;
 7306|  1.50M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|  2.36M|{
 3972|  2.36M|    return unexpected(scan_error{c, m});
 3973|  2.36M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  4.12M|{
 4364|       |    // Pattern_White_Space property
 4365|  4.12M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 3.96M, False: 167k]
  |  Branch (4365:27): [True: 340k, False: 3.61M]
  ------------------
 4366|  4.12M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 23.5k, False: 3.76M]
  ------------------
 4367|  4.12M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 38.8k, False: 3.72M]
  ------------------
 4368|  4.12M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 5.06k, False: 3.71M]
  ------------------
 4369|  4.12M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 25.2k, False: 3.69M]
  ------------------
 4370|  4.12M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 955k, False: 2.73M]
  ------------------
 4371|  4.12M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 261, False: 2.73M]
  ------------------
 4372|  4.12M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|   391k|{
 7990|   391k|    switch (type) {
 7991|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 0, False: 391k]
  ------------------
 7992|      0|            return arg_type_category::none;
 7993|       |
 7994|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 0, False: 391k]
  ------------------
 7995|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 391k]
  ------------------
 7996|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 0, False: 391k]
  ------------------
 7997|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 391k]
  ------------------
 7998|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 0, False: 391k]
  ------------------
 7999|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 391k]
  ------------------
 8000|      0|            return arg_type_category::integer;
 8001|       |
 8002|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 0, False: 391k]
  ------------------
 8003|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 391k]
  ------------------
 8004|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 0, False: 391k]
  ------------------
 8005|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 391k]
  ------------------
 8006|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 0, False: 391k]
  ------------------
 8007|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 391k]
  ------------------
 8008|      0|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 0, False: 391k]
  ------------------
 8011|      0|            return arg_type_category::pointer;
 8012|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 0, False: 391k]
  ------------------
 8013|      0|            return arg_type_category::boolean;
 8014|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 0, False: 391k]
  ------------------
 8015|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 0, False: 391k]
  ------------------
 8016|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 391k]
  ------------------
 8017|      0|            return arg_type_category::character;
 8018|       |
 8019|   120k|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 120k, False: 271k]
  ------------------
 8020|   253k|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 133k, False: 258k]
  ------------------
 8021|   391k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 137k, False: 253k]
  ------------------
 8022|   391k|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 391k]
  ------------------
 8023|   391k|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 391k]
  ------------------
 8024|   391k|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 391k]
  ------------------
 8025|   391k|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 391k]
  ------------------
 8026|   391k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 391k]
  ------------------
 8027|   391k|            return arg_type_category::floating;
 8028|       |
 8029|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 0, False: 391k]
  ------------------
 8030|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 0, False: 391k]
  ------------------
 8031|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 0, False: 391k]
  ------------------
 8032|      0|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 391k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 391k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|   391k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|   391k|            SCN_CLANG_POP
 8043|   391k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|   391k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1787|  2.22M|    {
 1788|  2.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.22M|        return std::move(this->get_unexpected().error());
 1790|  2.22M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|  1.67M|    {
 3073|  1.67M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  1.67M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3106|  1.67M|    {
 3107|  1.67M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  1.67M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3129|  1.67M|    {
 3130|  1.67M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|  1.67M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3138|  1.67M|    {
 3139|  1.67M|        return fn::impl(std::forward<T>(t));
 3140|  1.67M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8125|  1.50M|{
 8126|  1.50M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8126:9): [True: 1.11M, False: 391k]
  ------------------
 8127|  1.50M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8127:10): [True: 0, False: 1.11M]
  ------------------
 8128|  1.11M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8128:10): [True: 0, False: 1.11M]
  ------------------
 8129|      0|        SCN_UNLIKELY_ATTR
 8130|      0|        return handler.on_error("Invalid type specifier for float type");
 8131|      0|    }
 8132|  1.50M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  10.3M|    {
 1772|  10.3M|        return has_value();
 1773|  10.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|   120M|    {
 4537|   120M|        assert(m_begin);
 4538|   120M|        return m_end == nullptr;
 4539|   120M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|  2.02M|    {
 4554|  2.02M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 2.02M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  2.02M|        return parent()->get_segment_starting_at(position());
 4560|  2.02M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  66.5M|    {
 4548|  66.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  66.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  66.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  66.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  66.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|  2.02M|    {
 4437|  2.02M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  2.02M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  2.02M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 854k, False: 1.17M]
  |  |  ------------------
  ------------------
 4440|   854k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   854k|        }
 4442|  1.17M|        const auto start = upos - m_putback_buffer.size();
 4443|  1.17M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|  1.17M|        return m_current_view.substr(start);
 4445|  1.17M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4542|  1.44M|    {
 4543|  1.44M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|  1.44M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|  1.44M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|  3.72M|    {
 4532|  3.72M|        return m_position;
 4533|  3.72M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|  1.66M|    {
 4463|  1.66M|        return m_is_contiguous;
 4464|  1.66M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|  69.2M|    {
 4537|  69.2M|        assert(m_begin);
 4538|  69.2M|        return m_end == nullptr;
 4539|  69.2M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   346k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   346k|    else {
 4037|   346k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   346k|    }
 4039|   346k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|  1.23M|    {
 4554|  1.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 1.23M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  1.23M|        return parent()->get_segment_starting_at(position());
 4560|  1.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|  37.0M|    {
 4548|  37.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  37.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  37.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  37.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  37.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4436|  1.23M|    {
 4437|  1.23M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  1.23M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  1.23M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 713k, False: 525k]
  |  |  ------------------
  ------------------
 4440|   713k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   713k|        }
 4442|   525k|        const auto start = upos - m_putback_buffer.size();
 4443|   525k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   525k|        return m_current_view.substr(start);
 4445|   525k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4542|  1.31M|    {
 4543|  1.31M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|  1.31M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|  1.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|  2.70M|    {
 4532|  2.70M|        return m_position;
 4533|  2.70M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|  1.50M|    {
 4463|  1.50M|        return m_is_contiguous;
 4464|  1.50M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|  3.05M|    {
 3366|  3.05M|        return static_cast<D&>(*this);
 3367|  3.05M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|  3.05M|    {
 3407|  3.05M|        return detail::to_address(ranges::begin(derived()));
 3408|  3.05M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|  1.17M|    {
 3366|  1.17M|        return static_cast<D&>(*this);
 3367|  1.17M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|  1.17M|    {
 3407|  1.17M|        return detail::to_address(ranges::begin(derived()));
 3408|  1.17M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|   402k|    {
 9160|   402k|        return ranges::subrange{begin(), end()};
 9161|   402k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|   402k|    {
 9152|   402k|        return ranges::default_sentinel;
 9153|   402k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  5.86M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.86M|    static_cast<    \
  |  | 1084|  5.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.86M|    static_cast<    \
  |  | 1084|  5.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.86M|    {
 3498|  5.86M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|  3.20M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   555k|    {
 2011|   555k|        return detail::transform_error_impl(std::move(*this),
 2012|   555k|                                            std::forward<F>(f));
 2013|   555k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   555k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   555k|    else {
 1504|   555k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   555k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 545k, False: 9.80k]
  |  |  ------------------
  ------------------
 1506|   555k|                   ? result(*std::forward<Exp>(exp))
 1507|   555k|                   : result(unexpect,
 1508|  9.80k|                            trivial_invoke(std::forward<F>(f),
 1509|  9.80k|                                           std::forward<Exp>(exp).error()));
 1510|   555k|    }
 1511|   555k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  5.75M|    {
  523|  5.75M|        return m_has_value;
  524|  5.75M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.95M|    {
 1837|  1.95M|        return std::move(value());
 1838|  1.95M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.20M|    {
 1801|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.20M|        return this->get_value();
 1803|  2.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  2.20M|    {
  489|  2.20M|        return m_value;
  490|  2.20M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  2.34M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.34M|    {
 1604|  2.34M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.34M|    {
  475|  2.34M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.13M|    {
 1348|  3.13M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  28.7k|{
 1382|  28.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  28.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  38.9k|    {
 1788|  38.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  38.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  38.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  38.9k|        return std::move(this->get_unexpected().error());
 1790|  38.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  49.6k|    {
  506|  49.6k|        return m_unexpected;
  507|  49.6k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|   395k|    {
  398|   395k|        return m_unexpected;
  399|   395k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|   558k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   558k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   558k|    {
 1660|   558k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   740k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   740k|          m_has_value(false)
  484|   740k|    {
  485|   740k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   367k|    {
 9160|   367k|        return ranges::subrange{begin(), end()};
 9161|   367k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   367k|    {
 9152|   367k|        return ranges::default_sentinel;
 9153|   367k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  5.20M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.20M|    static_cast<    \
  |  | 1084|  5.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.20M|    static_cast<    \
  |  | 1084|  5.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.20M|    {
 3498|  5.20M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   502k|    {
 2011|   502k|        return detail::transform_error_impl(std::move(*this),
 2012|   502k|                                            std::forward<F>(f));
 2013|   502k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   502k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   502k|    else {
 1504|   502k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   502k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 498k, False: 4.32k]
  |  |  ------------------
  ------------------
 1506|   502k|                   ? result(*std::forward<Exp>(exp))
 1507|   502k|                   : result(unexpect,
 1508|  4.32k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.32k|                                           std::forward<Exp>(exp).error()));
 1510|   502k|    }
 1511|   502k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  4.88M|    {
  523|  4.88M|        return m_has_value;
  524|  4.88M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.75M|    {
 1837|  1.75M|        return std::move(value());
 1838|  1.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  1.78M|    {
 1801|  1.78M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.78M|        return this->get_value();
 1803|  1.78M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.78M|    {
  489|  1.78M|        return m_value;
  490|  1.78M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  1.86M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.86M|    {
 1604|  1.86M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.86M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.86M|    {
  475|  1.86M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.86M|    {
 1348|  2.86M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  63.2k|    {
 1788|  63.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  63.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  63.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  63.2k|        return std::move(this->get_unexpected().error());
 1790|  63.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  66.0k|    {
  506|  66.0k|        return m_unexpected;
  507|  66.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|   629k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   629k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   629k|    {
 1660|   629k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.00M|          m_has_value(false)
  484|  1.00M|    {
  485|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|  2.36M|        : m_unexpected(std::forward<Err>(e))
  381|  2.36M|    {
  382|  2.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.36M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   631k|        : base(unexpect, std::move(e.error())),
 1648|   631k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   631k|    {
 1650|   631k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   631k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   631k|          m_has_value(false)
  484|   631k|    {
  485|   631k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.64M|    {
 1348|  5.64M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   164k|        : base(unexpect, std::move(e.error())),
 1648|   164k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   164k|    {
 1650|   164k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   665k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   665k|          m_has_value(false)
  484|   665k|    {
  485|   665k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.99M|    {
 1348|  2.99M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  2.28M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.28M|    {
 1604|  2.28M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.28M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.28M|    {
  475|  2.28M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|  3.50M|    {
 1772|  3.50M|        return has_value();
 1773|  3.50M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|  5.52M|    {
  523|  5.52M|        return m_has_value;
  524|  5.52M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|   191k|    {
 1778|   191k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   191k|        return this->get_unexpected().error();
 1780|   191k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   191k|    {
  506|   191k|        return m_unexpected;
  507|   191k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  1.48M|    {
 1837|  1.48M|        return std::move(value());
 1838|  1.48M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  1.83M|    {
 1801|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.83M|        return this->get_value();
 1803|  1.83M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|  1.83M|    {
  489|  1.83M|        return m_value;
  490|  1.83M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   304k|        : base(unexpect, std::move(e.error())),
 1648|   304k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   304k|    {
 1650|   304k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   865k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   865k|          m_has_value(false)
  484|   865k|    {
  485|   865k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.86M|    {
 1348|  2.86M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  2.00M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.00M|    {
 1604|  2.00M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.00M|    {
  475|  2.00M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|  3.36M|    {
 1772|  3.36M|        return has_value();
 1773|  3.36M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  5.29M|    {
  523|  5.29M|        return m_has_value;
  524|  5.29M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|   366k|    {
 1778|   366k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   366k|        return this->get_unexpected().error();
 1780|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   366k|    {
  506|   366k|        return m_unexpected;
  507|   366k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  1.30M|    {
 1837|  1.30M|        return std::move(value());
 1838|  1.30M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  1.56M|    {
 1801|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.56M|        return this->get_value();
 1803|  1.56M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|  1.56M|    {
  489|  1.56M|        return m_value;
  490|  1.56M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   521k|    {
 2011|   521k|        return detail::transform_error_impl(std::move(*this),
 2012|   521k|                                            std::forward<F>(f));
 2013|   521k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   521k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   521k|    else {
 1504|   521k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   521k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   521k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 513k, False: 7.90k]
  |  |  ------------------
  ------------------
 1506|   521k|                   ? result(*std::forward<Exp>(exp))
 1507|   521k|                   : result(unexpect,
 1508|  7.90k|                            trivial_invoke(std::forward<F>(f),
 1509|  7.90k|                                           std::forward<Exp>(exp).error()));
 1510|   521k|    }
 1511|   521k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  2.00M|    {
  523|  2.00M|        return m_has_value;
  524|  2.00M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   513k|    {
 1837|   513k|        return std::move(value());
 1838|   513k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   678k|    {
 1801|   678k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   678k|        return this->get_value();
 1803|   678k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   678k|    {
  489|   678k|        return m_value;
  490|   678k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|  7.90k|    {
 1788|  7.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  7.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  7.90k|        return std::move(this->get_unexpected().error());
 1790|  7.90k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  13.2k|    {
  506|  13.2k|        return m_unexpected;
  507|  13.2k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|   500k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   500k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   500k|    {
 1660|   500k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|  1.15M|    {
 9144|  1.15M|        return m_current;
 9145|  1.15M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   773k|    {
 9037|   773k|        return m_locale;
 9038|   773k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   773k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   773k|    static_cast<    \
  |  | 1084|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   773k|    static_cast<    \
  |  | 1084|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   773k|    {
 9044|   773k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   818k|    {
 3032|   818k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   818k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   818k|    {
 3013|   818k|        return t.data();
 3014|   818k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   181k|        : base(unexpect, std::move(e.error())),
 1648|   181k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   181k|    {
 1650|   181k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1601|  48.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  48.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  48.1k|    {
 1604|  48.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  48.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  48.1k|    {
  475|  48.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|   995k|    {
 9144|   995k|        return m_current;
 9145|   995k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   734k|    {
 9037|   734k|        return m_locale;
 9038|   734k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   734k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   734k|    static_cast<    \
  |  | 1084|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   734k|    static_cast<    \
  |  | 1084|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   734k|    {
 9044|   734k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   373k|        : base(unexpect, std::move(e.error())),
 1648|   373k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   373k|    {
 1650|   373k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|  2.55M|        : base(unexpect, std::move(e.error())),
 1648|  2.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.55M|    {
 1650|  2.55M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|  2.55M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|  2.55M|          m_has_value(false)
  583|  2.55M|    {
  584|  2.55M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.55M|    {
 1348|  2.55M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  8.81M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  8.81M|        : m_deferred_init(), m_has_value(true)
  562|  8.81M|    {
  563|  8.81M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  4.71M|    {
 4623|  4.71M|        return x.is_at_end();
 4624|  4.71M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  9.79M|    {
 4667|  9.79M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 9.79M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  9.79M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 9.79M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  9.79M|        return !read_at_position();
 4674|  9.79M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  38.7M|    {
 4647|  38.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  38.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  38.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  38.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 38.7M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  38.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  38.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 33.5M, False: 5.16M]
  |  |  ------------------
  ------------------
 4654|  33.5M|            return true;
 4655|  33.5M|        }
 4656|       |
 4657|  10.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 5.16M, False: 4.98M]
  ------------------
 4658|  5.16M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 181k, False: 4.98M]
  ------------------
 4659|   181k|                return false;
 4660|   181k|            }
 4661|  5.16M|        }
 4662|  4.98M|        return true;
 4663|  5.16M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  10.4M|    {
 4582|  10.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  10.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 10.4M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  10.4M|        auto res = read_at_position();
 4591|  10.4M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  10.4M|        return parent()->get_character_at(m_position);
 4593|  10.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  10.4M|    {
 4449|  10.4M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  10.4M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  10.4M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  10.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.33M, False: 3.12M]
  |  |  ------------------
  ------------------
 4452|  7.33M|            return m_putback_buffer[upos];
 4453|  7.33M|        }
 4454|  3.12M|        const auto start = upos - m_putback_buffer.size();
 4455|  3.12M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  3.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  3.12M|        return m_current_view[start];
 4457|  3.12M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  3.44M|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.44M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.44M|    {
 1604|  3.44M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  3.44M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.44M|    {
  475|  3.44M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.49M|    {
 1348|  3.49M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  380|   149k|        : m_unexpected(std::forward<Err>(e))
  381|   149k|    {
  382|   149k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   149k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   149k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  49.6k|        : base(unexpect, std::move(e.error())),
 1648|  49.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  49.6k|    {
 1650|  49.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  49.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  49.6k|          m_has_value(false)
  484|  49.6k|    {
  485|  49.6k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|   198k|        : m_unexpected(std::forward<Args>(args)...)
  392|   198k|    {
  393|   198k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   198k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  18.4M|    {
 4568|  18.4M|        ++m_position;
 4569|  18.4M|        (void)read_at_position();
 4570|  18.4M|        return *this;
 4571|  18.4M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|  1.49M|    {
 1772|  1.49M|        return has_value();
 1773|  1.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|   247k|    {
 1827|   247k|        return value();
 1828|   247k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|  8.50M|    {
 4617|  8.50M|        return !(lhs == rhs);
 4618|  8.50M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|  9.85M|    {
 4612|  9.85M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 9.85M, False: 0]
  |  Branch (4612:46): [True: 1.76M, False: 8.08M]
  ------------------
 4613|  9.85M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  48.1k|        : m_unexpected(std::forward<Err>(e))
  381|  48.1k|    {
  382|  48.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  48.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  48.1k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  7.64k|        : base(unexpect, std::move(e.error())),
 1648|  7.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  7.64k|    {
 1650|  7.64k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  7.64k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  7.64k|          m_has_value(false)
  484|  7.64k|    {
  485|  7.64k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   746k|    {
 1348|   746k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   738k|        : base(std::in_place, std::forward<U>(val)),
 1602|   738k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   738k|    {
 1604|   738k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   738k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   738k|    {
  475|   738k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   746k|    {
 1772|   746k|        return has_value();
 1773|   746k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.49M|    {
  523|  1.49M|        return m_has_value;
  524|  1.49M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  7.64k|    {
 1778|  7.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  7.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  7.64k|        return this->get_unexpected().error();
 1780|  7.64k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  7.64k|    {
  506|  7.64k|        return m_unexpected;
  507|  7.64k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   738k|    {
 1837|   738k|        return std::move(value());
 1838|   738k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   738k|    {
 1801|   738k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   738k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   738k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   738k|        return this->get_value();
 1803|   738k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   738k|    {
  489|   738k|        return m_value;
  490|   738k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  14.6M|    {
 3518|  14.6M|        return m_sentinel;
 3519|  14.6M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  380|  49.2k|        : m_unexpected(std::forward<Err>(e))
  381|  49.2k|    {
  382|  49.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  49.2k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  397|  8.53M|    {
  398|  8.53M|        return m_unexpected;
  399|  8.53M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  2.38M|        : m_unexpected(std::forward<Args>(args)...)
  392|  2.38M|    {
  393|  2.38M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  2.38M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  380|  10.1M|        : m_unexpected(std::forward<Err>(e))
  381|  10.1M|    {
  382|  10.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  10.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  10.1M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  397|  10.1M|    {
  398|  10.1M|        return m_unexpected;
  399|  10.1M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  391|  10.1M|        : m_unexpected(std::forward<Args>(args)...)
  392|  10.1M|    {
  393|  10.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  10.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  10.1M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|   147k|{
 1382|   147k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|   147k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  380|  2.19M|        : m_unexpected(std::forward<Err>(e))
  381|  2.19M|    {
  382|  2.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.19M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|  10.7k|    {
 1778|  10.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  10.7k|        return this->get_unexpected().error();
 1780|  10.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|   579k|        : base(unexpect, std::move(e.error())),
 1648|   579k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   579k|    {
 1650|   579k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|   608k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   608k|          m_has_value(false)
  484|   608k|    {
  485|   608k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.92M|    {
 1348|  5.92M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|   250k|        : base(std::in_place, std::forward<U>(val)),
 1602|   250k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   250k|    {
 1604|   250k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|   250k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   250k|    {
  475|   250k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  3.04M|        : base(unexpect, std::move(e.error())),
 1648|  3.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.04M|    {
 1650|  3.04M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  3.04M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.04M|          m_has_value(false)
  484|  3.04M|    {
  485|  3.04M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|  6.47M|    {
 1772|  6.47M|        return has_value();
 1773|  6.47M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  11.3M|    {
  523|  11.3M|        return m_has_value;
  524|  11.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|  1.56M|    {
 1778|  1.56M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.56M|        return this->get_unexpected().error();
 1780|  1.56M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.56M|    {
  506|  1.56M|        return m_unexpected;
  507|  1.56M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   584k|        : base(std::in_place, std::forward<U>(val)),
 1602|   584k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   584k|    {
 1604|   584k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   584k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   584k|    {
  475|   584k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   584k|    {
 1348|   584k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|    204|        : base(unexpect, std::move(e.error())),
 1648|    204|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    204|    {
 1650|    204|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  482|    204|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    204|          m_has_value(false)
  484|    204|    {
  485|    204|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  1.37M|    {
 1827|  1.37M|        return value();
 1828|  1.37M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.78M|    {
 1801|  2.78M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.78M|        return this->get_value();
 1803|  2.78M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  2.78M|    {
  489|  2.78M|        return m_value;
  490|  2.78M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|  38.4k|    {
 1772|  38.4k|        return has_value();
 1773|  38.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|  1.16M|    {
  523|  1.16M|        return m_has_value;
  524|  1.16M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   545k|    {
 1837|   545k|        return std::move(value());
 1838|   545k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   584k|    {
 1801|   584k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   584k|        return this->get_value();
 1803|   584k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   584k|    {
  489|   584k|        return m_value;
  490|   584k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  1.44M|    {
 2011|  1.44M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.44M|                                            std::forward<F>(f));
 2013|  1.44M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  1.44M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.44M|    else {
 1504|  1.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.41M, False: 29.1k]
  |  |  ------------------
  ------------------
 1506|  1.44M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.44M|                   : result(unexpect,
 1508|  29.1k|                            trivial_invoke(std::forward<F>(f),
 1509|  29.1k|                                           std::forward<Exp>(exp).error()));
 1510|  1.44M|    }
 1511|  1.44M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.02M|    {
 1604|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.02M|    {
  475|  2.02M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  29.1k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  29.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  29.1k|    {
 1660|  29.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.41M|    {
 1837|  1.41M|        return std::move(value());
 1838|  1.41M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  3.67M|    {
 1772|  3.67M|        return has_value();
 1773|  3.67M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.81M|    {
  523|  5.81M|        return m_has_value;
  524|  5.81M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   235k|    {
 1778|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   235k|        return this->get_unexpected().error();
 1780|   235k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   235k|    {
  506|   235k|        return m_unexpected;
  507|   235k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.52M|    {
 1837|  1.52M|        return std::move(value());
 1838|  1.52M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.90M|    {
 1801|  1.90M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.90M|        return this->get_value();
 1803|  1.90M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.90M|    {
  489|  1.90M|        return m_value;
  490|  1.90M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3512|   575k|    {
 3513|   575k|        return m_iterator;
 3514|   575k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3517|   575k|    {
 3518|   575k|        return m_sentinel;
 3519|   575k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   460k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   460k|    static_cast<    \
  |  | 1084|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   460k|    static_cast<    \
  |  | 1084|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   460k|    {
 3498|   460k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  5.08M|    {
 4634|  5.08M|        return !x.is_at_end();
 4635|  5.08M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  13.2k|        : base(unexpect, std::move(e.error())),
 1648|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.2k|    {
 1650|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  13.2k|          m_has_value(false)
  484|  13.2k|    {
  485|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.31M|    {
 1348|  1.31M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  1.30M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.30M|    {
 1604|  1.30M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.30M|    {
  475|  1.30M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1771|   793k|    {
 1772|   793k|        return has_value();
 1773|   793k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   164k|    {
 1827|   164k|        return value();
 1828|   164k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  5.76k|        : base(unexpect, std::move(e.error())),
 1648|  5.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.76k|    {
 1650|  5.76k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  5.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.76k|          m_has_value(false)
  484|  5.76k|    {
  485|  5.76k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   685k|    {
 1348|   685k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   679k|        : base(std::in_place, std::forward<U>(val)),
 1602|   679k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   679k|    {
 1604|   679k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   679k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   679k|    {
  475|   679k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|   685k|    {
 1772|   685k|        return has_value();
 1773|   685k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.37M|    {
  523|  1.37M|        return m_has_value;
  524|  1.37M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1777|  5.76k|    {
 1778|  5.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.76k|        return this->get_unexpected().error();
 1780|  5.76k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.76k|    {
  506|  5.76k|        return m_unexpected;
  507|  5.76k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   679k|    {
 1837|   679k|        return std::move(value());
 1838|   679k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   679k|    {
 1801|   679k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   679k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   679k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   679k|        return this->get_value();
 1803|   679k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|   679k|    {
  489|   679k|        return m_value;
  490|   679k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1777|  5.32k|    {
 1778|  5.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.32k|        return this->get_unexpected().error();
 1780|  5.32k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|   542k|        : base(unexpect, std::move(e.error())),
 1648|   542k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   542k|    {
 1650|   542k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   542k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   542k|          m_has_value(false)
  484|   542k|    {
  485|   542k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.94M|    {
 1348|  2.94M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|   166k|        : base(std::in_place, std::forward<U>(val)),
 1602|   166k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   166k|    {
 1604|   166k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|   166k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   166k|    {
  475|   166k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  2.02M|        : base(unexpect, std::move(e.error())),
 1648|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.02M|    {
 1650|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.02M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.02M|          m_has_value(false)
  484|  2.02M|    {
  485|  2.02M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1771|  3.46M|    {
 1772|  3.46M|        return has_value();
 1773|  3.46M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  5.89M|    {
  523|  5.89M|        return m_has_value;
  524|  5.89M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1777|  1.41M|    {
 1778|  1.41M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.41M|        return this->get_unexpected().error();
 1780|  1.41M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.41M|    {
  506|  1.41M|        return m_unexpected;
  507|  1.41M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   538k|        : base(std::in_place, std::forward<U>(val)),
 1602|   538k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   538k|    {
 1604|   538k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   538k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   538k|    {
  475|   538k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   540k|    {
 1348|   540k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  2.41k|        : base(unexpect, std::move(e.error())),
 1648|  2.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.41k|    {
 1650|  2.41k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  2.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.41k|          m_has_value(false)
  484|  2.41k|    {
  485|  2.41k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   523k|    {
 1827|   523k|        return value();
 1828|   523k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   523k|    {
 1801|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   523k|        return this->get_value();
 1803|   523k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|   523k|    {
  489|   523k|        return m_value;
  490|   523k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  27.1k|    {
 1772|  27.1k|        return has_value();
 1773|  27.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  1.08M|    {
  523|  1.08M|        return m_has_value;
  524|  1.08M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1777|  2.35k|    {
 1778|  2.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.35k|        return this->get_unexpected().error();
 1780|  2.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  505|  2.35k|    {
  506|  2.35k|        return m_unexpected;
  507|  2.35k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.35k|        : base(unexpect, std::move(e.error())),
 1648|  2.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.35k|    {
 1650|  2.35k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  2.35k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.35k|          m_has_value(false)
  484|  2.35k|    {
  485|  2.35k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  15.1k|    {
 1348|  15.1k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   526k|    {
 1837|   526k|        return std::move(value());
 1838|   526k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   538k|    {
 1801|   538k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   538k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   538k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   538k|        return this->get_value();
 1803|   538k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   538k|    {
  489|   538k|        return m_value;
  490|   538k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|   214k|        : base(std::in_place, std::forward<U>(val)),
 1602|   214k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   214k|    {
 1604|   214k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   214k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   214k|    {
  475|   214k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|  12.8k|        : base(std::in_place, std::forward<U>(val)),
 1602|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  12.8k|    {
 1604|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  12.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  12.8k|    {
  475|  12.8k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  15.1k|    {
 2011|  15.1k|        return detail::transform_error_impl(std::move(*this),
 2012|  15.1k|                                            std::forward<F>(f));
 2013|  15.1k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|  15.1k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  15.1k|    else {
 1504|  15.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  15.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  15.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 12.8k, False: 2.35k]
  |  |  ------------------
  ------------------
 1506|  15.1k|                   ? result(*std::forward<Exp>(exp))
 1507|  15.1k|                   : result(unexpect,
 1508|  2.35k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.35k|                                           std::forward<Exp>(exp).error()));
 1510|  15.1k|    }
 1511|  15.1k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  522|  30.3k|    {
  523|  30.3k|        return m_has_value;
  524|  30.3k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  12.8k|    {
 1837|  12.8k|        return std::move(value());
 1838|  12.8k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  12.8k|    {
 1801|  12.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  12.8k|        return this->get_value();
 1803|  12.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  488|  12.8k|    {
  489|  12.8k|        return m_value;
  490|  12.8k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  12.8k|        : base(std::in_place, std::forward<U>(val)),
 1602|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  12.8k|    {
 1604|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  12.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  12.8k|    {
  475|  12.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  15.1k|    {
 1348|  15.1k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1787|  2.35k|    {
 1788|  2.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.35k|        return std::move(this->get_unexpected().error());
 1790|  2.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|  2.35k|    {
  506|  2.35k|        return m_unexpected;
  507|  2.35k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.35k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.35k|    {
 1660|  2.35k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  2.35k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.35k|          m_has_value(false)
  484|  2.35k|    {
  485|  2.35k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1771|  15.1k|    {
 1772|  15.1k|        return has_value();
 1773|  15.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  522|  30.3k|    {
  523|  30.3k|        return m_has_value;
  524|  30.3k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1777|  2.35k|    {
 1778|  2.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.35k|        return this->get_unexpected().error();
 1780|  2.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  2.35k|    {
  506|  2.35k|        return m_unexpected;
  507|  2.35k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  12.8k|    {
 1837|  12.8k|        return std::move(value());
 1838|  12.8k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  12.8k|    {
 1801|  12.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  12.8k|        return this->get_value();
 1803|  12.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  488|  12.8k|    {
  489|  12.8k|        return m_value;
  490|  12.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.72M|    {
 3032|  1.72M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.72M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.72M|    {
 3013|  1.72M|        return t.data();
 3014|  1.72M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|  5.01M|        : base(std::in_place, std::forward<U>(val)),
 1602|  5.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  5.01M|    {
 1604|  5.01M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|  5.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  5.01M|    {
  475|  5.01M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1836|  3.34M|    {
 1837|  3.34M|        return std::move(value());
 1838|  3.34M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1381|  2.22M|{
 1382|  2.22M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  2.22M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 2010|   545k|    {
 2011|   545k|        return detail::transform_error_impl(std::move(*this),
 2012|   545k|                                            std::forward<F>(f));
 2013|   545k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1493|   545k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   545k|    else {
 1504|   545k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   545k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   545k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 545k, False: 0]
  |  |  ------------------
  ------------------
 1506|   545k|                   ? result(*std::forward<Exp>(exp))
 1507|   545k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   545k|    }
 1511|   545k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|   545k|        : base(std::in_place, std::forward<U>(val)),
 1602|   545k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   545k|    {
 1604|   545k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   545k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   545k|    {
  475|   545k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   545k|    {
 1348|   545k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   545k|    {
 1772|   545k|        return has_value();
 1773|   545k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.09M|    {
  523|  1.09M|        return m_has_value;
  524|  1.09M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   545k|    {
 1837|   545k|        return std::move(value());
 1838|   545k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   545k|    {
 1801|   545k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   545k|        return this->get_value();
 1803|   545k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   545k|    {
  489|   545k|        return m_value;
  490|   545k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1996|   549k|    {
 1997|   549k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   549k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1493|   549k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   549k|    else {
 1504|   549k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   549k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   549k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 549k]
  |  |  ------------------
  ------------------
 1506|   549k|                   ? result(*std::forward<Exp>(exp))
 1507|   549k|                   : result(unexpect,
 1508|   549k|                            trivial_invoke(std::forward<F>(f),
 1509|   549k|                                           std::forward<Exp>(exp).error()));
 1510|   549k|    }
 1511|   549k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   383k|    {
 1827|   383k|        return value();
 1828|   383k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3991|   124k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1846|  38.2k|    {
 1847|  38.2k|        return &value();
 1848|  38.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|   379k|    {
 2901|   379k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   379k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|   379k|    {
 2882|   379k|        return decay_copy(t.begin());
 2883|   379k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|   379k|{
 2126|   379k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   379k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3991|   224k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   513k|    {
 2011|   513k|        return detail::transform_error_impl(std::move(*this),
 2012|   513k|                                            std::forward<F>(f));
 2013|   513k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|   513k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   513k|    else {
 1504|   513k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   513k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   513k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 513k, False: 0]
  |  |  ------------------
  ------------------
 1506|   513k|                   ? result(*std::forward<Exp>(exp))
 1507|   513k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   513k|    }
 1511|   513k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   513k|        : base(std::in_place, std::forward<U>(val)),
 1602|   513k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   513k|    {
 1604|   513k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   513k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   513k|    {
  475|   513k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   513k|    {
 1348|   513k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   513k|    {
 1772|   513k|        return has_value();
 1773|   513k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.02M|    {
  523|  1.02M|        return m_has_value;
  524|  1.02M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   513k|    {
 1837|   513k|        return std::move(value());
 1838|   513k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   513k|    {
 1801|   513k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   513k|        return this->get_value();
 1803|   513k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   513k|    {
  489|   513k|        return m_value;
  490|   513k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1996|   493k|    {
 1997|   493k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   493k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   493k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   493k|    else {
 1504|   493k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   493k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   493k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 1506|   493k|                   ? result(*std::forward<Exp>(exp))
 1507|   493k|                   : result(unexpect,
 1508|   493k|                            trivial_invoke(std::forward<F>(f),
 1509|   493k|                                           std::forward<Exp>(exp).error()));
 1510|   493k|    }
 1511|   493k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1601|  45.2k|        : base(std::in_place, std::forward<U>(val)),
 1602|  45.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  45.2k|    {
 1604|  45.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|  45.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  45.2k|    {
  475|  45.2k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|   493k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   493k|    static_cast<    \
  |  | 1084|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   493k|    {
 3966|   493k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   350k|    {
 1827|   350k|        return value();
 1828|   350k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1846|  11.9k|    {
 1847|  11.9k|        return &value();
 1848|  11.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   549k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   549k|    static_cast<    \
  |  | 1084|   549k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   549k|    {
 3966|   549k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  4.28M|    {
 4623|  4.28M|        return x.is_at_end();
 4624|  4.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|  6.80M|    {
 4667|  6.80M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 6.80M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  6.80M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 6.80M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  6.80M|        return !read_at_position();
 4674|  6.80M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|  21.5M|    {
 4647|  21.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  21.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  21.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 21.5M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  21.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  21.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 18.9M, False: 2.57M]
  |  |  ------------------
  ------------------
 4654|  18.9M|            return true;
 4655|  18.9M|        }
 4656|       |
 4657|  4.95M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 2.57M, False: 2.37M]
  ------------------
 4658|  2.57M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 201k, False: 2.37M]
  ------------------
 4659|   201k|                return false;
 4660|   201k|            }
 4661|  2.57M|        }
 4662|  2.37M|        return true;
 4663|  2.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|  27.8M|    {
 4413|  27.8M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  27.8M|                                           m_current_view.size());
 4415|  27.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|  6.75M|    {
 4582|  6.75M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  6.75M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 6.75M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  6.75M|        auto res = read_at_position();
 4591|  6.75M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  6.75M|        return parent()->get_character_at(m_position);
 4593|  6.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|  6.75M|    {
 4449|  6.75M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  6.75M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  6.75M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.70M, False: 1.04M]
  |  |  ------------------
  ------------------
 4452|  5.70M|            return m_putback_buffer[upos];
 4453|  5.70M|        }
 4454|  1.04M|        const auto start = upos - m_putback_buffer.size();
 4455|  1.04M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.04M|        return m_current_view[start];
 4457|  1.04M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  2.96M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.96M|    {
 1604|  2.96M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.96M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.96M|    {
  475|  2.96M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.03M|    {
 1348|  3.03M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  66.0k|        : base(unexpect, std::move(e.error())),
 1648|  66.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  66.0k|    {
 1650|  66.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  66.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  66.0k|          m_has_value(false)
  484|  66.0k|    {
  485|  66.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|  8.01M|    {
 4568|  8.01M|        ++m_position;
 4569|  8.01M|        (void)read_at_position();
 4570|  8.01M|        return *this;
 4571|  8.01M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|  1.20M|    {
 1772|  1.20M|        return has_value();
 1773|  1.20M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  29.7k|    {
 1827|  29.7k|        return value();
 1828|  29.7k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|  3.31M|    {
 4617|  3.31M|        return !(lhs == rhs);
 4618|  3.31M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|  4.49M|    {
 4612|  4.49M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 4.49M, False: 0]
  |  Branch (4612:46): [True: 1.43M, False: 3.06M]
  ------------------
 4613|  4.49M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|  3.04M|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|  3.04M|    else {
 4131|       |        // utf-32
 4132|  3.04M|        static_assert(sizeof(U) == 4);
 4133|  3.04M|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|  3.04M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|  3.04M|        return 1;
 4135|  3.04M|    }
 4136|  3.04M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  3.04M|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|  3.04M|    else {
 4337|  3.04M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|  3.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|  3.04M|        auto cp = static_cast<char32_t>(input.front());
 4339|  3.04M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 170k, False: 2.87M]
  |  |  ------------------
  ------------------
 4340|   170k|            return invalid_code_point;
 4341|   170k|        }
 4342|  2.87M|        return cp;
 4343|  3.04M|    }
 4344|  3.04M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  3.20k|        : base(unexpect, std::move(e.error())),
 1648|  3.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.20k|    {
 1650|  3.20k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  3.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.20k|          m_has_value(false)
  484|  3.20k|    {
  485|  3.20k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   626k|    {
 1348|   626k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   623k|        : base(std::in_place, std::forward<U>(val)),
 1602|   623k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   623k|    {
 1604|   623k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   623k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   623k|    {
  475|   623k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   626k|    {
 1772|   626k|        return has_value();
 1773|   626k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.25M|    {
  523|  1.25M|        return m_has_value;
  524|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  3.20k|    {
 1778|  3.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.20k|        return this->get_unexpected().error();
 1780|  3.20k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  3.20k|    {
  506|  3.20k|        return m_unexpected;
  507|  3.20k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   623k|    {
 1837|   623k|        return std::move(value());
 1838|   623k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   623k|    {
 1801|   623k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   623k|        return this->get_value();
 1803|   623k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   623k|    {
  489|   623k|        return m_value;
  490|   623k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  11.1M|    {
 3518|  11.1M|        return m_sentinel;
 3519|  11.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|  2.75k|    {
 1778|  2.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.75k|        return this->get_unexpected().error();
 1780|  2.75k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|   560k|        : base(unexpect, std::move(e.error())),
 1648|   560k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   560k|    {
 1650|   560k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|   618k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   618k|          m_has_value(false)
  484|   618k|    {
  485|   618k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.23M|    {
 1348|  5.23M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|  29.7k|        : base(std::in_place, std::forward<U>(val)),
 1602|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  29.7k|    {
 1604|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  29.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  29.7k|    {
  475|  29.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  2.93M|        : base(unexpect, std::move(e.error())),
 1648|  2.93M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.93M|    {
 1650|  2.93M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.93M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.93M|          m_has_value(false)
  484|  2.93M|    {
  485|  2.93M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|  5.73M|    {
 1772|  5.73M|        return has_value();
 1773|  5.73M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  10.1M|    {
  523|  10.1M|        return m_has_value;
  524|  10.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|  1.69M|    {
 1778|  1.69M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.69M|        return this->get_unexpected().error();
 1780|  1.69M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.69M|    {
  506|  1.69M|        return m_unexpected;
  507|  1.69M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   515k|        : base(std::in_place, std::forward<U>(val)),
 1602|   515k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   515k|    {
 1604|   515k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   515k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   515k|    {
  475|   515k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   515k|    {
 1348|   515k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|     78|        : base(unexpect, std::move(e.error())),
 1648|     78|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     78|    {
 1650|     78|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  482|     78|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|     78|          m_has_value(false)
  484|     78|    {
  485|     78|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|   798k|    {
 1827|   798k|        return value();
 1828|   798k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.05M|    {
 1801|  2.05M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.05M|        return this->get_value();
 1803|  2.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  2.05M|    {
  489|  2.05M|        return m_value;
  490|  2.05M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|  17.6k|    {
 1772|  17.6k|        return has_value();
 1773|  17.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|  1.03M|    {
  523|  1.03M|        return m_has_value;
  524|  1.03M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   498k|    {
 1837|   498k|        return std::move(value());
 1838|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   515k|    {
 1801|   515k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   515k|        return this->get_value();
 1803|   515k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   515k|    {
  489|   515k|        return m_value;
  490|   515k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  1.31M|    {
 2011|  1.31M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.31M|                                            std::forward<F>(f));
 2013|  1.31M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  1.31M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.31M|    else {
 1504|  1.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.26M, False: 58.9k]
  |  |  ------------------
  ------------------
 1506|  1.31M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.31M|                   : result(unexpect,
 1508|  58.9k|                            trivial_invoke(std::forward<F>(f),
 1509|  58.9k|                                           std::forward<Exp>(exp).error()));
 1510|  1.31M|    }
 1511|  1.31M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|  1.65M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.65M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.65M|    {
 1604|  1.65M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.65M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.65M|    {
  475|  1.65M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  58.9k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  58.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  58.9k|    {
 1660|  58.9k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.26M|    {
 1837|  1.26M|        return std::move(value());
 1838|  1.26M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  3.36M|    {
 1772|  3.36M|        return has_value();
 1773|  3.36M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.36M|    {
  523|  5.36M|        return m_has_value;
  524|  5.36M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   504k|    {
 1778|   504k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   504k|        return this->get_unexpected().error();
 1780|   504k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   504k|    {
  506|   504k|        return m_unexpected;
  507|   504k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.23M|    {
 1837|  1.23M|        return std::move(value());
 1838|  1.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.49M|    {
 1801|  1.49M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.49M|        return this->get_value();
 1803|  1.49M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.49M|    {
  489|  1.49M|        return m_value;
  490|  1.49M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3512|   410k|    {
 3513|   410k|        return m_iterator;
 3514|   410k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3517|   410k|    {
 3518|   410k|        return m_sentinel;
 3519|   410k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   368k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   368k|    static_cast<    \
  |  | 1084|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   368k|    static_cast<    \
  |  | 1084|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   368k|    {
 3498|   368k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  2.52M|    {
 4634|  2.52M|        return !x.is_at_end();
 4635|  2.52M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  64.1k|        : base(unexpect, std::move(e.error())),
 1648|  64.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  64.1k|    {
 1650|  64.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  64.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  64.1k|          m_has_value(false)
  484|  64.1k|    {
  485|  64.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.51M|    {
 1348|  2.51M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  2.45M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.45M|    {
 1604|  2.45M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.45M|    {
  475|  2.45M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1771|   691k|    {
 1772|   691k|        return has_value();
 1773|   691k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  4.35M|    {
  523|  4.35M|        return m_has_value;
  524|  4.35M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  13.1k|    {
 1827|  13.1k|        return value();
 1828|  13.1k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.77M|    {
 1801|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.77M|        return this->get_value();
 1803|  1.77M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.77M|    {
  489|  1.77M|        return m_value;
  490|  1.77M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  3.20k|        : base(unexpect, std::move(e.error())),
 1648|  3.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.20k|    {
 1650|  3.20k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  3.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.20k|          m_has_value(false)
  484|  3.20k|    {
  485|  3.20k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   627k|    {
 1348|   627k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   623k|        : base(std::in_place, std::forward<U>(val)),
 1602|   623k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   623k|    {
 1604|   623k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   623k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   623k|    {
  475|   623k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   502k|    {
 2011|   502k|        return detail::transform_error_impl(std::move(*this),
 2012|   502k|                                            std::forward<F>(f));
 2013|   502k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   502k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   502k|    else {
 1504|   502k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   502k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 498k, False: 4.32k]
  |  |  ------------------
  ------------------
 1506|   502k|                   ? result(*std::forward<Exp>(exp))
 1507|   502k|                   : result(unexpect,
 1508|  4.32k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.32k|                                           std::forward<Exp>(exp).error()));
 1510|   502k|    }
 1511|   502k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.75M|    {
 1837|  1.75M|        return std::move(value());
 1838|  1.75M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  63.4k|    {
 1788|  63.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  63.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  63.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  63.4k|        return std::move(this->get_unexpected().error());
 1790|  63.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  64.1k|    {
  506|  64.1k|        return m_unexpected;
  507|  64.1k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|   560k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   560k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   560k|    {
 1660|   560k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|   627k|    {
 1772|   627k|        return has_value();
 1773|   627k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.25M|    {
  523|  1.25M|        return m_has_value;
  524|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1777|  3.20k|    {
 1778|  3.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.20k|        return this->get_unexpected().error();
 1780|  3.20k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  3.20k|    {
  506|  3.20k|        return m_unexpected;
  507|  3.20k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   623k|    {
 1837|   623k|        return std::move(value());
 1838|   623k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   623k|    {
 1801|   623k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   623k|        return this->get_value();
 1803|   623k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|   623k|    {
  489|   623k|        return m_value;
  490|   623k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1777|    640|    {
 1778|    640|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    640|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    640|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    640|        return this->get_unexpected().error();
 1780|    640|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|   558k|        : base(unexpect, std::move(e.error())),
 1648|   558k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   558k|    {
 1650|   558k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   617k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   617k|          m_has_value(false)
  484|   617k|    {
  485|   617k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.13M|    {
 1348|  4.13M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|  13.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  13.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  13.1k|    {
 1604|  13.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|  13.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  13.1k|    {
  475|  13.1k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  2.11M|        : base(unexpect, std::move(e.error())),
 1648|  2.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.11M|    {
 1650|  2.11M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.11M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.11M|          m_has_value(false)
  484|  2.11M|    {
  485|  2.11M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1771|  4.62M|    {
 1772|  4.62M|        return has_value();
 1773|  4.62M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  8.32M|    {
  523|  8.32M|        return m_has_value;
  524|  8.32M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1777|  1.61M|    {
 1778|  1.61M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.61M|        return this->get_unexpected().error();
 1780|  1.61M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.61M|    {
  506|  1.61M|        return m_unexpected;
  507|  1.61M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   505k|        : base(std::in_place, std::forward<U>(val)),
 1602|   505k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   505k|    {
 1604|   505k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   505k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   505k|    {
  475|   505k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   505k|    {
 1348|   505k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|     24|        : base(unexpect, std::move(e.error())),
 1648|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     24|    {
 1650|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|     24|          m_has_value(false)
  484|     24|    {
  485|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   259k|    {
 1827|   259k|        return value();
 1828|   259k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.52M|    {
 1801|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.52M|        return this->get_value();
 1803|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  1.52M|    {
  489|  1.52M|        return m_value;
  490|  1.52M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  6.58k|    {
 1772|  6.58k|        return has_value();
 1773|  6.58k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  1.01M|    {
  523|  1.01M|        return m_has_value;
  524|  1.01M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   498k|    {
 1837|   498k|        return std::move(value());
 1838|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   505k|    {
 1801|   505k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   505k|        return this->get_value();
 1803|   505k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   505k|    {
  489|   505k|        return m_value;
  490|   505k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  1.32M|    {
 2011|  1.32M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.32M|                                            std::forward<F>(f));
 2013|  1.32M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  1.32M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.32M|    else {
 1504|  1.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.26M, False: 59.1k]
  |  |  ------------------
  ------------------
 1506|  1.32M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.32M|                   : result(unexpect,
 1508|  59.1k|                            trivial_invoke(std::forward<F>(f),
 1509|  59.1k|                                           std::forward<Exp>(exp).error()));
 1510|  1.32M|    }
 1511|  1.32M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  1.38M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.38M|    {
 1604|  1.38M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.38M|    {
  475|  1.38M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1657|  59.1k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  59.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  59.1k|    {
 1660|  59.1k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.26M|    {
 1837|  1.26M|        return std::move(value());
 1838|  1.26M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.17M|    {
 3032|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.17M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.17M|    {
 3013|  1.17M|        return t.data();
 3014|  1.17M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 2010|   498k|    {
 2011|   498k|        return detail::transform_error_impl(std::move(*this),
 2012|   498k|                                            std::forward<F>(f));
 2013|   498k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1493|   498k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   498k|    else {
 1504|   498k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   498k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   498k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 498k, False: 0]
  |  |  ------------------
  ------------------
 1506|   498k|                   ? result(*std::forward<Exp>(exp))
 1507|   498k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   498k|    }
 1511|   498k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|   498k|        : base(std::in_place, std::forward<U>(val)),
 1602|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   498k|    {
 1604|   498k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   498k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   498k|    {
  475|   498k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   498k|    {
 1348|   498k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   498k|    {
 1772|   498k|        return has_value();
 1773|   498k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   996k|    {
  523|   996k|        return m_has_value;
  524|   996k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   498k|    {
 1837|   498k|        return std::move(value());
 1838|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   498k|    {
 1801|   498k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   498k|        return this->get_value();
 1803|   498k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   498k|    {
  489|   498k|        return m_value;
  490|   498k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1996|   625k|    {
 1997|   625k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   625k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1493|   625k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   625k|    else {
 1504|   625k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   625k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   625k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 1506|   625k|                   ? result(*std::forward<Exp>(exp))
 1507|   625k|                   : result(unexpect,
 1508|   625k|                            trivial_invoke(std::forward<F>(f),
 1509|   625k|                                           std::forward<Exp>(exp).error()));
 1510|   625k|    }
 1511|   625k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   261k|    {
 1827|   261k|        return value();
 1828|   261k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3991|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1846|  17.5k|    {
 1847|  17.5k|        return &value();
 1848|  17.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|   399k|    {
 2901|   399k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   399k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|   399k|    {
 2882|   399k|        return decay_copy(t.begin());
 2883|   399k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|   399k|{
 2126|   399k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   399k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3991|   223k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   498k|    {
 2011|   498k|        return detail::transform_error_impl(std::move(*this),
 2012|   498k|                                            std::forward<F>(f));
 2013|   498k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|   498k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   498k|    else {
 1504|   498k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   498k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   498k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 498k, False: 0]
  |  |  ------------------
  ------------------
 1506|   498k|                   ? result(*std::forward<Exp>(exp))
 1507|   498k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   498k|    }
 1511|   498k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   498k|        : base(std::in_place, std::forward<U>(val)),
 1602|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   498k|    {
 1604|   498k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   498k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   498k|    {
  475|   498k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   498k|    {
 1348|   498k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   498k|    {
 1772|   498k|        return has_value();
 1773|   498k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   997k|    {
  523|   997k|        return m_has_value;
  524|   997k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   498k|    {
 1837|   498k|        return std::move(value());
 1838|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   498k|    {
 1801|   498k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   498k|        return this->get_value();
 1803|   498k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   498k|    {
  489|   498k|        return m_value;
  490|   498k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1996|   556k|    {
 1997|   556k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   556k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1493|   556k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   556k|    else {
 1504|   556k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   556k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   556k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 556k]
  |  |  ------------------
  ------------------
 1506|   556k|                   ? result(*std::forward<Exp>(exp))
 1507|   556k|                   : result(unexpect,
 1508|   556k|                            trivial_invoke(std::forward<F>(f),
 1509|   556k|                                           std::forward<Exp>(exp).error()));
 1510|   556k|    }
 1511|   556k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|   556k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   556k|    static_cast<    \
  |  | 1084|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   556k|    {
 3966|   556k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   261k|    {
 1827|   261k|        return value();
 1828|   261k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1846|  6.56k|    {
 1847|  6.56k|        return &value();
 1848|  6.56k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   625k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   625k|    static_cast<    \
  |  | 1084|   625k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   625k|    {
 3966|   625k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  50.3M|    {
 4413|  50.3M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  50.3M|                                           m_current_view.size());
 4415|  50.3M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   975k|    {
 6342|   975k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   975k|        return static_cast<std::size_t>(m_desc &
 6347|   975k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   975k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|  1.95M|    {
 6368|  1.95M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  1.95M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   975k|    {
 6310|   975k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   975k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   975k|        const auto t = type(id);
 6322|   975k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   975k|        basic_scan_arg<Context> arg;
 6327|   975k|        arg.m_type = t;
 6328|   975k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 975k, False: 0]
  ------------------
 6329|   975k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   975k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   975k|        return arg;
 6335|   975k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   975k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   975k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   975k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   975k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   975k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   975k|    {
 6372|   975k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   975k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|  1.85M|    {
 6125|  1.85M|        return m_type != detail::arg_type::none_type;
 6126|  1.85M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   150k|{
 9606|   150k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   150k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   150k|{
 9463|   150k|#define SCN_VISIT(Type)                                                    \
 9464|   150k|    do {                                                                   \
 9465|   150k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   150k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   150k|        }                                                                  \
 9468|   150k|        else {                                                             \
 9469|   150k|            return vis(monostate_val);                                     \
 9470|   150k|        }                                                                  \
 9471|   150k|    } while (false)
 9472|       |
 9473|   150k|    monostate monostate_val{};
 9474|       |
 9475|   150k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 150k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 150k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 150k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 150k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 150k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 150k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 150k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 150k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 150k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 150k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 150k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 150k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 150k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 150k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 150k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 150k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 150k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  47.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 47.9k, False: 102k]
  ------------------
 9519|  47.9k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  47.9k|    do {                                                                   \
  |  | 9465|  47.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  47.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  47.9k|        }                                                                  \
  |  | 9468|  47.9k|        else {                                                             \
  |  | 9469|  47.9k|            return vis(monostate_val);                                     \
  |  | 9470|  47.9k|        }                                                                  \
  |  | 9471|  47.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  98.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 50.4k, False: 99.7k]
  ------------------
 9521|  98.3k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  98.3k|    do {                                                                   \
  |  | 9465|  98.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  98.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  98.3k|        }                                                                  \
  |  | 9468|  98.3k|        else {                                                             \
  |  | 9469|  98.3k|            return vis(monostate_val);                                     \
  |  | 9470|  98.3k|        }                                                                  \
  |  | 9471|  98.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   150k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 51.8k, False: 98.3k]
  ------------------
 9523|   150k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   150k|    do {                                                                   \
  |  | 9465|   150k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   150k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   150k|        }                                                                  \
  |  | 9468|   150k|        else {                                                             \
  |  | 9469|   150k|            return vis(monostate_val);                                     \
  |  | 9470|   150k|        }                                                                  \
  |  | 9471|   150k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   150k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 150k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   150k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 150k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 150k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 150k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 150k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 150k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 150k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 150k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 150k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 150k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 150k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   150k|            SCN_CLANG_POP
 9585|   150k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  2.62M|{
 6171|  2.62M|    return arg.m_type;
 6172|  2.62M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  1.07M|{
 6183|  1.07M|    return arg.m_value;
 6184|  1.07M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   402k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   402k|    {
 9129|   402k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   555k|{
 4755|   555k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 555k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   555k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   555k|                            ranges::default_sentinel};
 4761|   555k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   555k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   555k|    {
 4519|   555k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   555k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   555k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   153k|{
 9606|   153k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   153k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   153k|{
 9463|   153k|#define SCN_VISIT(Type)                                                    \
 9464|   153k|    do {                                                                   \
 9465|   153k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   153k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   153k|        }                                                                  \
 9468|   153k|        else {                                                             \
 9469|   153k|            return vis(monostate_val);                                     \
 9470|   153k|        }                                                                  \
 9471|   153k|    } while (false)
 9472|       |
 9473|   153k|    monostate monostate_val{};
 9474|       |
 9475|   153k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 153k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 153k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 153k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 153k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 153k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 153k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 153k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 153k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 153k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 153k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 153k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 153k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 153k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 153k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 153k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 153k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 153k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  49.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 49.3k, False: 104k]
  ------------------
 9519|  49.3k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  49.3k|    do {                                                                   \
  |  | 9465|  49.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  49.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  49.3k|        }                                                                  \
  |  | 9468|  49.3k|        else {                                                             \
  |  | 9469|  49.3k|            return vis(monostate_val);                                     \
  |  | 9470|  49.3k|        }                                                                  \
  |  | 9471|  49.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   100k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 51.5k, False: 101k]
  ------------------
 9521|   100k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   100k|    do {                                                                   \
  |  | 9465|   100k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   100k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   100k|        }                                                                  \
  |  | 9468|   100k|        else {                                                             \
  |  | 9469|   100k|            return vis(monostate_val);                                     \
  |  | 9470|   100k|        }                                                                  \
  |  | 9471|   100k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   153k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 52.4k, False: 100k]
  ------------------
 9523|   153k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   153k|    do {                                                                   \
  |  | 9465|   153k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   153k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   153k|        }                                                                  \
  |  | 9468|   153k|        else {                                                             \
  |  | 9469|   153k|            return vis(monostate_val);                                     \
  |  | 9470|   153k|        }                                                                  \
  |  | 9471|   153k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   153k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 153k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   153k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 153k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 153k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 153k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 153k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 153k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 153k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 153k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 153k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 153k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 153k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   153k|            SCN_CLANG_POP
 9585|   153k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|   371k|        : m_format{format},
 6445|   371k|          m_next_arg_id{next_arg_id},
 6446|   371k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   371k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   371k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   371k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   371k|    {
 6452|   371k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   371k|    {
 3107|   371k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   371k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   371k|    {
 3073|   371k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   371k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   371k|{
 7971|   371k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   371k|    handler.check_args_exhausted();
 7973|   371k|    return handler.get_error();
 7974|   371k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   371k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   371k|    auto begin = format.data();
 7939|   371k|    auto it = begin;
 7940|   371k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   689k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 371k, False: 318k]
  ------------------
 7943|   371k|        const auto ch = *it++;
 7944|   371k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 371k, False: 0]
  ------------------
 7945|   371k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   371k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   371k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 52.8k, False: 318k]
  ------------------
 7949|  52.8k|                return;
 7950|  52.8k|            }
 7951|   371k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   371k|    }
 7962|       |
 7963|   318k|    handler.on_literal_text(begin, end);
 7964|   318k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|   371k|{
 7868|   371k|    struct id_adapter {
 7869|   371k|        constexpr void operator()()
 7870|   371k|        {
 7871|   371k|            arg_id = handler.on_arg_id();
 7872|   371k|        }
 7873|   371k|        constexpr void operator()(std::size_t id)
 7874|   371k|        {
 7875|   371k|            arg_id = handler.on_arg_id(id);
 7876|   371k|        }
 7877|       |
 7878|   371k|        constexpr void on_error(const char* msg)
 7879|   371k|        {
 7880|   371k|            SCN_UNLIKELY_ATTR
 7881|   371k|            handler.on_error(msg);
 7882|   371k|        }
 7883|       |
 7884|   371k|        Handler& handler;
 7885|   371k|        std::size_t arg_id;
 7886|   371k|    };
 7887|       |
 7888|   371k|    ++begin;
 7889|   371k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   371k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 371k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   371k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 371k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   371k|    else {
 7901|   371k|        auto adapter = id_adapter{handler, 0};
 7902|   371k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   371k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   371k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 371k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   371k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 371k, False: 0]
  ------------------
 7913|   371k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   371k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   371k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  |  Branch (1014:45): [True: 0, False: 371k]
  |  |  |  Branch (1014:45): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   371k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   371k|    }
 7929|   371k|    return begin + 1;
 7930|   371k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   773k|    {
 9027|   773k|        return m_args.get(id);
 9028|   773k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   773k|    {
 6480|   773k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 773k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   773k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   773k|        do_check_arg_id(id);
 6488|   773k|        return id;
 6489|   773k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   773k|{
 6974|   773k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   773k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   773k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   371k|{
 7367|   371k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   371k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 371k, False: 0]
  |  Branch (7368:26): [True: 0, False: 371k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   371k|    handler();
 7373|   371k|    return begin;
 7374|   371k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   371k|        {
 7871|   371k|            arg_id = handler.on_arg_id();
 7872|   371k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   773k|    {
 6475|   773k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   773k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|  1.54M|    {
 6464|  1.54M|        return m_format.data();
 6465|  1.54M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   371k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   371k|    {
 8055|   371k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   371k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|   371k|{
 7784|   371k|    auto do_presentation = [&]() -> const CharT* {
 7785|   371k|        if (*begin == CharT{'['}) {
 7786|   371k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   371k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   371k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   371k|                return begin;
 7792|   371k|            }
 7793|   371k|            handler.on_character_set_string(set);
 7794|   371k|            return begin;
 7795|   371k|        }
 7796|   371k|        if (*begin == CharT{'/'}) {
 7797|   371k|            return parse_presentation_regex(begin, end, handler);
 7798|   371k|        }
 7799|   371k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   371k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   371k|            handler.on_error("Invalid type specifier in format string");
 7802|   371k|            return begin;
 7803|   371k|        }
 7804|   371k|        handler.on_type(type);
 7805|   371k|        return begin;
 7806|   371k|    };
 7807|       |
 7808|   371k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 371k, False: 0]
  |  Branch (7808:28): [True: 371k, False: 0]
  ------------------
 7809|   371k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 371k, False: 0]
  |  Branch (7809:36): [True: 271k, False: 100k]
  ------------------
 7810|   271k|        return do_presentation();
 7811|   271k|    }
 7812|       |
 7813|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|   100k|    begin = parse_align(begin, end, handler);
 7819|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|   100k|    begin = parse_width(begin, end, handler);
 7825|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|   100k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 100k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|   100k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 100k, False: 0]
  ------------------
 7844|   100k|        handler.on_localized();
 7845|   100k|        ++begin;
 7846|   100k|    }
 7847|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|   100k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 100k, False: 0]
  |  Branch (7852:25): [True: 0, False: 100k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|   100k|    return begin;
 7861|   100k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|   773k|{
 7431|   773k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 562k, False: 210k]
  |  Branch (7431:33): [True: 562k, False: 0]
  ------------------
 7432|   773k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 210k, False: 0]
  |  Branch (7432:33): [True: 210k, False: 0]
  ------------------
 7433|   773k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   271k|    auto do_presentation = [&]() -> const CharT* {
 7785|   271k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 271k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   271k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 271k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   271k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   271k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 271k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   271k|        handler.on_type(type);
 7805|   271k|        return begin;
 7806|   271k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|   562k|{
 7379|   562k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 562k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 562k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 562k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 562k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 562k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 562k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 562k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 562k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 562k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 562k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|   230k|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 230k, False: 332k]
  ------------------
 7398|   230k|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 562k]
  ------------------
 7399|   230k|            return presentation_type::float_hex;
 7400|  28.7k|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 28.7k, False: 534k]
  ------------------
 7401|  28.7k|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 562k]
  ------------------
 7402|  28.7k|            return presentation_type::float_scientific;
 7403|   123k|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 123k, False: 438k]
  ------------------
 7404|   123k|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 562k]
  ------------------
 7405|   123k|            return presentation_type::float_fixed;
 7406|   179k|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 179k, False: 383k]
  ------------------
 7407|   179k|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 562k]
  ------------------
 7408|   179k|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 562k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 562k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 562k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 562k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 562k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 562k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|      0|        default:
  ------------------
  |  Branch (7423:9): [True: 0, False: 562k]
  ------------------
 7424|      0|            return presentation_type::none;
 7425|   562k|    }
 7426|   562k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|   100k|{
 7456|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|   100k|    auto check_align = [](wchar_t ch) {
 7459|   100k|        switch (ch) {
 7460|   100k|            case L'<':
 7461|   100k|                return align_type::left;
 7462|   100k|            case L'>':
 7463|   100k|                return align_type::right;
 7464|   100k|            case L'^':
 7465|   100k|                return align_type::center;
 7466|   100k|            default:
 7467|   100k|                return align_type::none;
 7468|   100k|        }
 7469|   100k|    };
 7470|       |
 7471|   100k|    auto potential_fill_len = code_point_length(begin, end);
 7472|   100k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  |  Branch (1014:45): [True: 0, False: 100k]
  |  |  |  Branch (1014:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7473|   100k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|   100k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|   100k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|   100k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|   100k|    const auto begin_before_fill = begin;
 7483|   100k|    begin += potential_fill_len;
 7484|       |
 7485|   100k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 100k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|   100k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|   100k|    const auto begin_after_fill = begin;
 7491|   100k|    ++begin;
 7492|       |
 7493|   100k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 100k, False: 0]
  ------------------
 7494|   100k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|   100k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 100k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|   100k|    }
 7502|       |
 7503|   100k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 100k, False: 0]
  ------------------
 7504|   100k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 100k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|   100k|        return begin_before_fill;
 7509|   100k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|   100k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|   210k|{
 7438|   210k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|   210k|    else {
 7443|   210k|        const auto lengths =
 7444|   210k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|   210k|            "\3\4";
 7446|   210k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|   210k|        return len;
 7448|   210k|    }
 7449|   210k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   200k|    auto check_align = [](wchar_t ch) {
 7459|   200k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 200k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 200k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 200k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   200k|            default:
  ------------------
  |  Branch (7466:13): [True: 200k, False: 0]
  ------------------
 7467|   200k|                return align_type::none;
 7468|   200k|        }
 7469|   200k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|   100k|{
 7521|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|   100k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 100k, False: 0]
  |  Branch (7523:33): [True: 0, False: 100k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|   100k|    return begin;
 7534|   100k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|   100k|    {
 8060|   100k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|   100k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 100k, False: 0]
  ------------------
 8062|   100k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 100k, False: 0]
  ------------------
 8063|   100k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 100k]
  ------------------
 8064|   100k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|   100k|        Handler::on_localized();
 8072|   100k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7198|   391k|    {
 7199|   391k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7200|   391k|            m_specs.localized = true;
 7201|       |        }
 7202|       |        else {
 7203|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7204|       |        }
 7205|   391k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   371k|{
 9606|   371k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   371k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   371k|{
 9463|   371k|#define SCN_VISIT(Type)                                                    \
 9464|   371k|    do {                                                                   \
 9465|   371k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   371k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   371k|        }                                                                  \
 9468|   371k|        else {                                                             \
 9469|   371k|            return vis(monostate_val);                                     \
 9470|   371k|        }                                                                  \
 9471|   371k|    } while (false)
 9472|       |
 9473|   371k|    monostate monostate_val{};
 9474|       |
 9475|   371k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 371k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 371k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 371k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 371k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 371k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 371k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 371k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 371k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 371k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 371k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 371k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 371k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 371k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 371k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 371k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 371k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 371k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   120k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 120k, False: 250k]
  ------------------
 9519|   120k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   120k|    do {                                                                   \
  |  | 9465|   120k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   120k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   120k|        }                                                                  \
  |  | 9468|   120k|        else {                                                             \
  |  | 9469|   120k|            return vis(monostate_val);                                     \
  |  | 9470|   120k|        }                                                                  \
  |  | 9471|   120k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   245k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 124k, False: 246k]
  ------------------
 9521|   245k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   245k|    do {                                                                   \
  |  | 9465|   245k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   245k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   245k|        }                                                                  \
  |  | 9468|   245k|        else {                                                             \
  |  | 9469|   245k|            return vis(monostate_val);                                     \
  |  | 9470|   245k|        }                                                                  \
  |  | 9471|   245k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   371k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 126k, False: 245k]
  ------------------
 9523|   371k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   371k|    do {                                                                   \
  |  | 9465|   371k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   371k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   371k|        }                                                                  \
  |  | 9468|   371k|        else {                                                             \
  |  | 9469|   371k|            return vis(monostate_val);                                     \
  |  | 9470|   371k|        }                                                                  \
  |  | 9471|   371k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   371k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 371k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   371k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 371k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 371k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 371k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 371k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 371k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 371k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 371k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 371k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 371k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 371k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   371k|            SCN_CLANG_POP
 9585|   371k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|   402k|        : m_format{format},
 6445|   402k|          m_next_arg_id{next_arg_id},
 6446|   402k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   402k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   402k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   402k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   402k|    {
 6452|   402k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   402k|{
 7971|   402k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   402k|    handler.check_args_exhausted();
 7973|   402k|    return handler.get_error();
 7974|   402k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   402k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   402k|    auto begin = format.data();
 7939|   402k|    auto it = begin;
 7940|   402k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   751k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 402k, False: 349k]
  ------------------
 7943|   402k|        const auto ch = *it++;
 7944|   402k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 402k, False: 0]
  ------------------
 7945|   402k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   402k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   402k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 52.8k, False: 349k]
  ------------------
 7949|  52.8k|                return;
 7950|  52.8k|            }
 7951|   402k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   402k|    }
 7962|       |
 7963|   349k|    handler.on_literal_text(begin, end);
 7964|   349k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|   349k|    {
 9166|   349k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   349k|    static_cast<    \
  |  | 1084|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   349k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|   402k|{
 7868|   402k|    struct id_adapter {
 7869|   402k|        constexpr void operator()()
 7870|   402k|        {
 7871|   402k|            arg_id = handler.on_arg_id();
 7872|   402k|        }
 7873|   402k|        constexpr void operator()(std::size_t id)
 7874|   402k|        {
 7875|   402k|            arg_id = handler.on_arg_id(id);
 7876|   402k|        }
 7877|       |
 7878|   402k|        constexpr void on_error(const char* msg)
 7879|   402k|        {
 7880|   402k|            SCN_UNLIKELY_ATTR
 7881|   402k|            handler.on_error(msg);
 7882|   402k|        }
 7883|       |
 7884|   402k|        Handler& handler;
 7885|   402k|        std::size_t arg_id;
 7886|   402k|    };
 7887|       |
 7888|   402k|    ++begin;
 7889|   402k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   402k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 402k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   402k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 402k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   402k|    else {
 7901|   402k|        auto adapter = id_adapter{handler, 0};
 7902|   402k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   402k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   402k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 402k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   402k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 402k, False: 0]
  ------------------
 7913|   402k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   402k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   402k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  |  Branch (1014:45): [True: 0, False: 402k]
  |  |  |  Branch (1014:45): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   402k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   402k|    }
 7929|   402k|    return begin + 1;
 7930|   402k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   402k|{
 7367|   402k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   402k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 402k, False: 0]
  |  Branch (7368:26): [True: 0, False: 402k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   402k|    handler();
 7373|   402k|    return begin;
 7374|   402k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   402k|        {
 7871|   402k|            arg_id = handler.on_arg_id();
 7872|   402k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   402k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   402k|    {
 8055|   402k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   402k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7783|   402k|{
 7784|   402k|    auto do_presentation = [&]() -> const CharT* {
 7785|   402k|        if (*begin == CharT{'['}) {
 7786|   402k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   402k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   402k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   402k|                return begin;
 7792|   402k|            }
 7793|   402k|            handler.on_character_set_string(set);
 7794|   402k|            return begin;
 7795|   402k|        }
 7796|   402k|        if (*begin == CharT{'/'}) {
 7797|   402k|            return parse_presentation_regex(begin, end, handler);
 7798|   402k|        }
 7799|   402k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   402k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   402k|            handler.on_error("Invalid type specifier in format string");
 7802|   402k|            return begin;
 7803|   402k|        }
 7804|   402k|        handler.on_type(type);
 7805|   402k|        return begin;
 7806|   402k|    };
 7807|       |
 7808|   402k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 402k, False: 0]
  |  Branch (7808:28): [True: 402k, False: 0]
  ------------------
 7809|   402k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 402k, False: 0]
  |  Branch (7809:36): [True: 291k, False: 110k]
  ------------------
 7810|   291k|        return do_presentation();
 7811|   291k|    }
 7812|       |
 7813|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|   110k|    begin = parse_align(begin, end, handler);
 7819|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|   110k|    begin = parse_width(begin, end, handler);
 7825|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 110k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 110k, False: 0]
  ------------------
 7844|   110k|        handler.on_localized();
 7845|   110k|        ++begin;
 7846|   110k|    }
 7847|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 110k, False: 0]
  |  Branch (7852:25): [True: 0, False: 110k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|   110k|    return begin;
 7861|   110k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   291k|    auto do_presentation = [&]() -> const CharT* {
 7785|   291k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 291k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   291k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 291k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   291k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   291k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   291k|        handler.on_type(type);
 7805|   291k|        return begin;
 7806|   291k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7455|   110k|{
 7456|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|   110k|    auto check_align = [](wchar_t ch) {
 7459|   110k|        switch (ch) {
 7460|   110k|            case L'<':
 7461|   110k|                return align_type::left;
 7462|   110k|            case L'>':
 7463|   110k|                return align_type::right;
 7464|   110k|            case L'^':
 7465|   110k|                return align_type::center;
 7466|   110k|            default:
 7467|   110k|                return align_type::none;
 7468|   110k|        }
 7469|   110k|    };
 7470|       |
 7471|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7472|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  |  Branch (1014:45): [True: 0, False: 110k]
  |  |  |  Branch (1014:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7473|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|   110k|    const auto begin_before_fill = begin;
 7483|   110k|    begin += potential_fill_len;
 7484|       |
 7485|   110k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 110k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|   110k|    const auto begin_after_fill = begin;
 7491|   110k|    ++begin;
 7492|       |
 7493|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 110k, False: 0]
  ------------------
 7494|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 110k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|   110k|    }
 7502|       |
 7503|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 110k, False: 0]
  ------------------
 7504|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 110k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|   110k|        return begin_before_fill;
 7509|   110k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|   110k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   221k|    auto check_align = [](wchar_t ch) {
 7459|   221k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 221k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 221k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 221k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   221k|            default:
  ------------------
  |  Branch (7466:13): [True: 221k, False: 0]
  ------------------
 7467|   221k|                return align_type::none;
 7468|   221k|        }
 7469|   221k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7520|   110k|{
 7521|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 110k, False: 0]
  |  Branch (7523:33): [True: 0, False: 110k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|   110k|    return begin;
 7534|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 8059|   110k|    {
 8060|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 110k, False: 0]
  ------------------
 8062|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 110k, False: 0]
  ------------------
 8063|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 110k]
  ------------------
 8064|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|   110k|        Handler::on_localized();
 8072|   110k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   402k|{
 9606|   402k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   402k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   402k|{
 9463|   402k|#define SCN_VISIT(Type)                                                    \
 9464|   402k|    do {                                                                   \
 9465|   402k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   402k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   402k|        }                                                                  \
 9468|   402k|        else {                                                             \
 9469|   402k|            return vis(monostate_val);                                     \
 9470|   402k|        }                                                                  \
 9471|   402k|    } while (false)
 9472|       |
 9473|   402k|    monostate monostate_val{};
 9474|       |
 9475|   402k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 402k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 402k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 402k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 402k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 402k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 402k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 402k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 402k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 402k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 402k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 402k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 402k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 402k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 402k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 402k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 402k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 402k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   130k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 130k, False: 272k]
  ------------------
 9519|   130k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   130k|    do {                                                                   \
  |  | 9465|   130k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   130k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   130k|        }                                                                  \
  |  | 9468|   130k|        else {                                                             \
  |  | 9469|   130k|            return vis(monostate_val);                                     \
  |  | 9470|   130k|        }                                                                  \
  |  | 9471|   130k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   265k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 134k, False: 267k]
  ------------------
 9521|   265k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   265k|    do {                                                                   \
  |  | 9465|   265k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   265k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   265k|        }                                                                  \
  |  | 9468|   265k|        else {                                                             \
  |  | 9469|   265k|            return vis(monostate_val);                                     \
  |  | 9470|   265k|        }                                                                  \
  |  | 9471|   265k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   402k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 137k, False: 265k]
  ------------------
 9523|   402k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   402k|    do {                                                                   \
  |  | 9465|   402k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   402k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   402k|        }                                                                  \
  |  | 9468|   402k|        else {                                                             \
  |  | 9469|   402k|            return vis(monostate_val);                                     \
  |  | 9470|   402k|        }                                                                  \
  |  | 9471|   402k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   402k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 402k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   402k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 402k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 402k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 402k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 402k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 402k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 402k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 402k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 402k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 402k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 402k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   402k|            SCN_CLANG_POP
 9585|   402k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  68.6k|    {
 4408|  68.6k|        return sync(0);
 4409|  68.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|   915k|    {
 6342|   915k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 915k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   915k|        return static_cast<std::size_t>(m_desc &
 6347|   915k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   915k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|  1.83M|    {
 6368|  1.83M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  1.83M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|   915k|    {
 6310|   915k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 915k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   915k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 915k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   915k|        const auto t = type(id);
 6322|   915k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 915k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   915k|        basic_scan_arg<Context> arg;
 6327|   915k|        arg.m_type = t;
 6328|   915k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 915k, False: 0]
  ------------------
 6329|   915k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   915k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   915k|        return arg;
 6335|   915k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|   915k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   915k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   915k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   915k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   915k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|   915k|    {
 6372|   915k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   915k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|  1.73M|    {
 6125|  1.73M|        return m_type != detail::arg_type::none_type;
 6126|  1.73M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   135k|{
 9606|   135k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   135k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   135k|{
 9463|   135k|#define SCN_VISIT(Type)                                                    \
 9464|   135k|    do {                                                                   \
 9465|   135k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   135k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   135k|        }                                                                  \
 9468|   135k|        else {                                                             \
 9469|   135k|            return vis(monostate_val);                                     \
 9470|   135k|        }                                                                  \
 9471|   135k|    } while (false)
 9472|       |
 9473|   135k|    monostate monostate_val{};
 9474|       |
 9475|   135k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 135k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 135k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 135k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 135k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 135k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 135k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 135k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 135k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 135k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 135k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 135k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 135k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 135k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 135k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 135k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 135k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 135k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  40.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 40.0k, False: 95.6k]
  ------------------
 9519|  40.0k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  40.0k|    do {                                                                   \
  |  | 9465|  40.0k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  40.0k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  40.0k|        }                                                                  \
  |  | 9468|  40.0k|        else {                                                             \
  |  | 9469|  40.0k|            return vis(monostate_val);                                     \
  |  | 9470|  40.0k|        }                                                                  \
  |  | 9471|  40.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  86.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 46.8k, False: 88.8k]
  ------------------
 9521|  86.9k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  86.9k|    do {                                                                   \
  |  | 9465|  86.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  86.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  86.9k|        }                                                                  \
  |  | 9468|  86.9k|        else {                                                             \
  |  | 9469|  86.9k|            return vis(monostate_val);                                     \
  |  | 9470|  86.9k|        }                                                                  \
  |  | 9471|  86.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   135k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 48.7k, False: 86.9k]
  ------------------
 9523|   135k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   135k|    do {                                                                   \
  |  | 9465|   135k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   135k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   135k|        }                                                                  \
  |  | 9468|   135k|        else {                                                             \
  |  | 9469|   135k|            return vis(monostate_val);                                     \
  |  | 9470|   135k|        }                                                                  \
  |  | 9471|   135k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   135k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 135k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   135k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 135k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 135k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 135k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 135k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 135k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 135k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 135k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 135k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 135k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 135k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   135k|            SCN_CLANG_POP
 9585|   135k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  2.47M|{
 6171|  2.47M|    return arg.m_type;
 6172|  2.47M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  1.00M|{
 6183|  1.00M|    return arg.m_value;
 6184|  1.00M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   367k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   367k|    {
 9129|   367k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   367k|        : m_format{format},
 6445|   367k|          m_next_arg_id{next_arg_id},
 6446|   367k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   367k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   367k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   367k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   367k|    {
 6452|   367k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   367k|    {
 3107|   367k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   367k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   367k|    {
 3073|   367k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   367k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   367k|{
 7971|   367k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   367k|    handler.check_args_exhausted();
 7973|   367k|    return handler.get_error();
 7974|   367k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   367k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   367k|    auto begin = format.data();
 7939|   367k|    auto it = begin;
 7940|   367k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   628k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 367k, False: 261k]
  ------------------
 7943|   367k|        const auto ch = *it++;
 7944|   367k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 367k, False: 0]
  ------------------
 7945|   367k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   367k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   367k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 105k, False: 261k]
  ------------------
 7949|   105k|                return;
 7950|   105k|            }
 7951|   367k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   367k|    }
 7962|       |
 7963|   261k|    handler.on_literal_text(begin, end);
 7964|   261k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|   367k|{
 7868|   367k|    struct id_adapter {
 7869|   367k|        constexpr void operator()()
 7870|   367k|        {
 7871|   367k|            arg_id = handler.on_arg_id();
 7872|   367k|        }
 7873|   367k|        constexpr void operator()(std::size_t id)
 7874|   367k|        {
 7875|   367k|            arg_id = handler.on_arg_id(id);
 7876|   367k|        }
 7877|       |
 7878|   367k|        constexpr void on_error(const char* msg)
 7879|   367k|        {
 7880|   367k|            SCN_UNLIKELY_ATTR
 7881|   367k|            handler.on_error(msg);
 7882|   367k|        }
 7883|       |
 7884|   367k|        Handler& handler;
 7885|   367k|        std::size_t arg_id;
 7886|   367k|    };
 7887|       |
 7888|   367k|    ++begin;
 7889|   367k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   367k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 367k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   367k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 367k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   367k|    else {
 7901|   367k|        auto adapter = id_adapter{handler, 0};
 7902|   367k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   367k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   367k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 367k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   367k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 367k, False: 0]
  ------------------
 7913|   367k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   367k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   367k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  |  Branch (1014:45): [True: 0, False: 367k]
  |  |  |  Branch (1014:45): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   367k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   367k|    }
 7929|   367k|    return begin + 1;
 7930|   367k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   734k|    {
 9027|   734k|        return m_args.get(id);
 9028|   734k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   734k|    {
 6480|   734k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   734k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   734k|        do_check_arg_id(id);
 6488|   734k|        return id;
 6489|   734k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   734k|{
 6974|   734k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   734k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   734k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   367k|{
 7367|   367k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   367k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 367k, False: 0]
  |  Branch (7368:26): [True: 0, False: 367k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   367k|    handler();
 7373|   367k|    return begin;
 7374|   367k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   367k|        {
 7871|   367k|            arg_id = handler.on_arg_id();
 7872|   367k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   734k|    {
 6475|   734k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   734k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   502k|{
 4755|   502k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 502k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   502k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   502k|                            ranges::default_sentinel};
 4761|   502k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   502k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   502k|    {
 4519|   502k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   502k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   502k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|  1.46M|    {
 6464|  1.46M|        return m_format.data();
 6465|  1.46M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   367k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   367k|    {
 8055|   367k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   367k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|   367k|{
 7784|   367k|    auto do_presentation = [&]() -> const CharT* {
 7785|   367k|        if (*begin == CharT{'['}) {
 7786|   367k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   367k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   367k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   367k|                return begin;
 7792|   367k|            }
 7793|   367k|            handler.on_character_set_string(set);
 7794|   367k|            return begin;
 7795|   367k|        }
 7796|   367k|        if (*begin == CharT{'/'}) {
 7797|   367k|            return parse_presentation_regex(begin, end, handler);
 7798|   367k|        }
 7799|   367k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   367k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   367k|            handler.on_error("Invalid type specifier in format string");
 7802|   367k|            return begin;
 7803|   367k|        }
 7804|   367k|        handler.on_type(type);
 7805|   367k|        return begin;
 7806|   367k|    };
 7807|       |
 7808|   367k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 367k, False: 0]
  |  Branch (7808:28): [True: 367k, False: 0]
  ------------------
 7809|   367k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 367k, False: 0]
  |  Branch (7809:36): [True: 276k, False: 90.4k]
  ------------------
 7810|   276k|        return do_presentation();
 7811|   276k|    }
 7812|       |
 7813|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  90.4k|    begin = parse_align(begin, end, handler);
 7819|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  90.4k|    begin = parse_width(begin, end, handler);
 7825|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  90.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 90.4k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  90.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 90.4k, False: 0]
  ------------------
 7844|  90.4k|        handler.on_localized();
 7845|  90.4k|        ++begin;
 7846|  90.4k|    }
 7847|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  90.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 90.4k, False: 0]
  |  Branch (7852:25): [True: 0, False: 90.4k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  90.4k|    return begin;
 7861|  90.4k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|   734k|{
 7431|   734k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 553k, False: 180k]
  |  Branch (7431:33): [True: 553k, False: 0]
  ------------------
 7432|   734k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 180k, False: 0]
  |  Branch (7432:33): [True: 180k, False: 0]
  ------------------
 7433|   734k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   276k|    auto do_presentation = [&]() -> const CharT* {
 7785|   276k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 276k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   276k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 276k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   276k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   276k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   276k|        handler.on_type(type);
 7805|   276k|        return begin;
 7806|   276k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|   553k|{
 7379|   553k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 553k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 553k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 553k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 553k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 553k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 553k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 553k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 553k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 553k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 553k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|   198k|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 198k, False: 354k]
  ------------------
 7398|   198k|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 553k]
  ------------------
 7399|   198k|            return presentation_type::float_hex;
 7400|  46.0k|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 46.0k, False: 507k]
  ------------------
 7401|  46.0k|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 553k]
  ------------------
 7402|  46.0k|            return presentation_type::float_scientific;
 7403|   141k|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 141k, False: 411k]
  ------------------
 7404|   141k|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 553k]
  ------------------
 7405|   141k|            return presentation_type::float_fixed;
 7406|   166k|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 166k, False: 386k]
  ------------------
 7407|   166k|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 553k]
  ------------------
 7408|   166k|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 553k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 553k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 553k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 553k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 553k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 553k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|      0|        default:
  ------------------
  |  Branch (7423:9): [True: 0, False: 553k]
  ------------------
 7424|      0|            return presentation_type::none;
 7425|   553k|    }
 7426|   553k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  90.4k|{
 7456|  90.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  90.4k|    auto check_align = [](wchar_t ch) {
 7459|  90.4k|        switch (ch) {
 7460|  90.4k|            case L'<':
 7461|  90.4k|                return align_type::left;
 7462|  90.4k|            case L'>':
 7463|  90.4k|                return align_type::right;
 7464|  90.4k|            case L'^':
 7465|  90.4k|                return align_type::center;
 7466|  90.4k|            default:
 7467|  90.4k|                return align_type::none;
 7468|  90.4k|        }
 7469|  90.4k|    };
 7470|       |
 7471|  90.4k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  90.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 90.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7473|  90.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  90.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  90.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  90.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  90.4k|    const auto begin_before_fill = begin;
 7483|  90.4k|    begin += potential_fill_len;
 7484|       |
 7485|  90.4k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 90.4k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  90.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  90.4k|    const auto begin_after_fill = begin;
 7491|  90.4k|    ++begin;
 7492|       |
 7493|  90.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 90.4k, False: 0]
  ------------------
 7494|  90.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  90.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 90.4k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  90.4k|    }
 7502|       |
 7503|  90.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 90.4k, False: 0]
  ------------------
 7504|  90.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 90.4k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  90.4k|        return begin_before_fill;
 7509|  90.4k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  90.4k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|   180k|{
 7438|   180k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|   180k|    if constexpr (sizeof(CharT) != 1) {
 7440|   180k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|   180k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   180k|    auto check_align = [](wchar_t ch) {
 7459|   180k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 180k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 180k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 180k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   180k|            default:
  ------------------
  |  Branch (7466:13): [True: 180k, False: 0]
  ------------------
 7467|   180k|                return align_type::none;
 7468|   180k|        }
 7469|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  90.4k|{
 7521|  90.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  90.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 90.4k, False: 0]
  |  Branch (7523:33): [True: 0, False: 90.4k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  90.4k|    return begin;
 7534|  90.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|  90.4k|    {
 8060|  90.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  90.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 90.4k, False: 0]
  ------------------
 8062|  90.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 90.4k, False: 0]
  ------------------
 8063|  90.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 90.4k]
  ------------------
 8064|  90.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  90.4k|        Handler::on_localized();
 8072|  90.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   367k|{
 9606|   367k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   367k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   367k|{
 9463|   367k|#define SCN_VISIT(Type)                                                    \
 9464|   367k|    do {                                                                   \
 9465|   367k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   367k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   367k|        }                                                                  \
 9468|   367k|        else {                                                             \
 9469|   367k|            return vis(monostate_val);                                     \
 9470|   367k|        }                                                                  \
 9471|   367k|    } while (false)
 9472|       |
 9473|   367k|    monostate monostate_val{};
 9474|       |
 9475|   367k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 367k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 367k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 367k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 367k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 367k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 367k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 367k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 367k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 367k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 367k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 367k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 367k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 367k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 367k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 367k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 367k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 367k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   115k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 115k, False: 251k]
  ------------------
 9519|   115k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   115k|    do {                                                                   \
  |  | 9465|   115k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   115k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   115k|        }                                                                  \
  |  | 9468|   115k|        else {                                                             \
  |  | 9469|   115k|            return vis(monostate_val);                                     \
  |  | 9470|   115k|        }                                                                  \
  |  | 9471|   115k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   240k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 124k, False: 242k]
  ------------------
 9521|   240k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   240k|    do {                                                                   \
  |  | 9465|   240k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   240k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   240k|        }                                                                  \
  |  | 9468|   240k|        else {                                                             \
  |  | 9469|   240k|            return vis(monostate_val);                                     \
  |  | 9470|   240k|        }                                                                  \
  |  | 9471|   240k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   367k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 127k, False: 240k]
  ------------------
 9523|   367k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   367k|    do {                                                                   \
  |  | 9465|   367k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   367k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   367k|        }                                                                  \
  |  | 9468|   367k|        else {                                                             \
  |  | 9469|   367k|            return vis(monostate_val);                                     \
  |  | 9470|   367k|        }                                                                  \
  |  | 9471|   367k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   367k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 367k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   367k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 367k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 367k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 367k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 367k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 367k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 367k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 367k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 367k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 367k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 367k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   367k|            SCN_CLANG_POP
 9585|   367k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   135k|{
 9606|   135k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   135k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   135k|{
 9463|   135k|#define SCN_VISIT(Type)                                                    \
 9464|   135k|    do {                                                                   \
 9465|   135k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   135k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   135k|        }                                                                  \
 9468|   135k|        else {                                                             \
 9469|   135k|            return vis(monostate_val);                                     \
 9470|   135k|        }                                                                  \
 9471|   135k|    } while (false)
 9472|       |
 9473|   135k|    monostate monostate_val{};
 9474|       |
 9475|   135k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 135k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 135k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 135k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 135k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 135k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 135k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 135k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 135k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 135k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 135k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 135k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 135k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 135k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 135k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 135k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 135k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 135k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  40.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 40.0k, False: 95.5k]
  ------------------
 9519|  40.0k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  40.0k|    do {                                                                   \
  |  | 9465|  40.0k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  40.0k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  40.0k|        }                                                                  \
  |  | 9468|  40.0k|        else {                                                             \
  |  | 9469|  40.0k|            return vis(monostate_val);                                     \
  |  | 9470|  40.0k|        }                                                                  \
  |  | 9471|  40.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  86.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 46.8k, False: 88.7k]
  ------------------
 9521|  86.8k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  86.8k|    do {                                                                   \
  |  | 9465|  86.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  86.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  86.8k|        }                                                                  \
  |  | 9468|  86.8k|        else {                                                             \
  |  | 9469|  86.8k|            return vis(monostate_val);                                     \
  |  | 9470|  86.8k|        }                                                                  \
  |  | 9471|  86.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   135k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 48.7k, False: 86.8k]
  ------------------
 9523|   135k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   135k|    do {                                                                   \
  |  | 9465|   135k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   135k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   135k|        }                                                                  \
  |  | 9468|   135k|        else {                                                             \
  |  | 9469|   135k|            return vis(monostate_val);                                     \
  |  | 9470|   135k|        }                                                                  \
  |  | 9471|   135k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   135k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 135k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   135k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 135k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 135k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 135k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 135k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 135k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 135k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 135k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 135k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 135k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 135k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   135k|            SCN_CLANG_POP
 9585|   135k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|   367k|        : m_format{format},
 6445|   367k|          m_next_arg_id{next_arg_id},
 6446|   367k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   367k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   367k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   367k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   367k|    {
 6452|   367k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   367k|{
 7971|   367k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   367k|    handler.check_args_exhausted();
 7973|   367k|    return handler.get_error();
 7974|   367k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   367k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   367k|    auto begin = format.data();
 7939|   367k|    auto it = begin;
 7940|   367k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   628k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 367k, False: 261k]
  ------------------
 7943|   367k|        const auto ch = *it++;
 7944|   367k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 367k, False: 0]
  ------------------
 7945|   367k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   367k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   367k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 105k, False: 261k]
  ------------------
 7949|   105k|                return;
 7950|   105k|            }
 7951|   367k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   367k|    }
 7962|       |
 7963|   261k|    handler.on_literal_text(begin, end);
 7964|   261k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|   261k|    {
 9166|   261k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   261k|    static_cast<    \
  |  | 1084|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   261k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|   367k|{
 7868|   367k|    struct id_adapter {
 7869|   367k|        constexpr void operator()()
 7870|   367k|        {
 7871|   367k|            arg_id = handler.on_arg_id();
 7872|   367k|        }
 7873|   367k|        constexpr void operator()(std::size_t id)
 7874|   367k|        {
 7875|   367k|            arg_id = handler.on_arg_id(id);
 7876|   367k|        }
 7877|       |
 7878|   367k|        constexpr void on_error(const char* msg)
 7879|   367k|        {
 7880|   367k|            SCN_UNLIKELY_ATTR
 7881|   367k|            handler.on_error(msg);
 7882|   367k|        }
 7883|       |
 7884|   367k|        Handler& handler;
 7885|   367k|        std::size_t arg_id;
 7886|   367k|    };
 7887|       |
 7888|   367k|    ++begin;
 7889|   367k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   367k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 367k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   367k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 367k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   367k|    else {
 7901|   367k|        auto adapter = id_adapter{handler, 0};
 7902|   367k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   367k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   367k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 367k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   367k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 367k, False: 0]
  ------------------
 7913|   367k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   367k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   367k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  |  Branch (1014:45): [True: 0, False: 367k]
  |  |  |  Branch (1014:45): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   367k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   367k|    }
 7929|   367k|    return begin + 1;
 7930|   367k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   367k|{
 7367|   367k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   367k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 367k, False: 0]
  |  Branch (7368:26): [True: 0, False: 367k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   367k|    handler();
 7373|   367k|    return begin;
 7374|   367k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   367k|        {
 7871|   367k|            arg_id = handler.on_arg_id();
 7872|   367k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   367k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   367k|    {
 8055|   367k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   367k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7783|   367k|{
 7784|   367k|    auto do_presentation = [&]() -> const CharT* {
 7785|   367k|        if (*begin == CharT{'['}) {
 7786|   367k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   367k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   367k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   367k|                return begin;
 7792|   367k|            }
 7793|   367k|            handler.on_character_set_string(set);
 7794|   367k|            return begin;
 7795|   367k|        }
 7796|   367k|        if (*begin == CharT{'/'}) {
 7797|   367k|            return parse_presentation_regex(begin, end, handler);
 7798|   367k|        }
 7799|   367k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   367k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   367k|            handler.on_error("Invalid type specifier in format string");
 7802|   367k|            return begin;
 7803|   367k|        }
 7804|   367k|        handler.on_type(type);
 7805|   367k|        return begin;
 7806|   367k|    };
 7807|       |
 7808|   367k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 367k, False: 0]
  |  Branch (7808:28): [True: 367k, False: 0]
  ------------------
 7809|   367k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 367k, False: 0]
  |  Branch (7809:36): [True: 276k, False: 90.3k]
  ------------------
 7810|   276k|        return do_presentation();
 7811|   276k|    }
 7812|       |
 7813|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  90.3k|    begin = parse_align(begin, end, handler);
 7819|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  90.3k|    begin = parse_width(begin, end, handler);
 7825|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  90.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 90.3k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  90.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 90.3k, False: 0]
  ------------------
 7844|  90.3k|        handler.on_localized();
 7845|  90.3k|        ++begin;
 7846|  90.3k|    }
 7847|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  90.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 90.3k, False: 0]
  |  Branch (7852:25): [True: 0, False: 90.3k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  90.3k|    return begin;
 7861|  90.3k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   276k|    auto do_presentation = [&]() -> const CharT* {
 7785|   276k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 276k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   276k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 276k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   276k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   276k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   276k|        handler.on_type(type);
 7805|   276k|        return begin;
 7806|   276k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7455|  90.3k|{
 7456|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  90.3k|    auto check_align = [](wchar_t ch) {
 7459|  90.3k|        switch (ch) {
 7460|  90.3k|            case L'<':
 7461|  90.3k|                return align_type::left;
 7462|  90.3k|            case L'>':
 7463|  90.3k|                return align_type::right;
 7464|  90.3k|            case L'^':
 7465|  90.3k|                return align_type::center;
 7466|  90.3k|            default:
 7467|  90.3k|                return align_type::none;
 7468|  90.3k|        }
 7469|  90.3k|    };
 7470|       |
 7471|  90.3k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  90.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  |  Branch (1014:45): [True: 0, False: 90.3k]
  |  |  |  Branch (1014:45): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7473|  90.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  90.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  90.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  90.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  90.3k|    const auto begin_before_fill = begin;
 7483|  90.3k|    begin += potential_fill_len;
 7484|       |
 7485|  90.3k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 90.3k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  90.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  90.3k|    const auto begin_after_fill = begin;
 7491|  90.3k|    ++begin;
 7492|       |
 7493|  90.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 90.3k, False: 0]
  ------------------
 7494|  90.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  90.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 90.3k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  90.3k|    }
 7502|       |
 7503|  90.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 90.3k, False: 0]
  ------------------
 7504|  90.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 90.3k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  90.3k|        return begin_before_fill;
 7509|  90.3k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  90.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   180k|    auto check_align = [](wchar_t ch) {
 7459|   180k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 180k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 180k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 180k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   180k|            default:
  ------------------
  |  Branch (7466:13): [True: 180k, False: 0]
  ------------------
 7467|   180k|                return align_type::none;
 7468|   180k|        }
 7469|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7520|  90.3k|{
 7521|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  90.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 90.3k, False: 0]
  |  Branch (7523:33): [True: 0, False: 90.3k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  90.3k|    return begin;
 7534|  90.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 8059|  90.3k|    {
 8060|  90.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  90.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 90.3k, False: 0]
  ------------------
 8062|  90.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 90.3k, False: 0]
  ------------------
 8063|  90.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 90.3k]
  ------------------
 8064|  90.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  90.3k|        Handler::on_localized();
 8072|  90.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   367k|{
 9606|   367k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   367k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   367k|{
 9463|   367k|#define SCN_VISIT(Type)                                                    \
 9464|   367k|    do {                                                                   \
 9465|   367k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   367k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   367k|        }                                                                  \
 9468|   367k|        else {                                                             \
 9469|   367k|            return vis(monostate_val);                                     \
 9470|   367k|        }                                                                  \
 9471|   367k|    } while (false)
 9472|       |
 9473|   367k|    monostate monostate_val{};
 9474|       |
 9475|   367k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 367k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 367k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 367k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 367k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 367k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 367k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 367k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 367k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 367k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 367k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 367k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 367k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 367k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 367k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 367k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 367k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 367k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   115k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 115k, False: 251k]
  ------------------
 9519|   115k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   115k|    do {                                                                   \
  |  | 9465|   115k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   115k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   115k|        }                                                                  \
  |  | 9468|   115k|        else {                                                             \
  |  | 9469|   115k|            return vis(monostate_val);                                     \
  |  | 9470|   115k|        }                                                                  \
  |  | 9471|   115k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   239k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 124k, False: 242k]
  ------------------
 9521|   239k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   239k|    do {                                                                   \
  |  | 9465|   239k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   239k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   239k|        }                                                                  \
  |  | 9468|   239k|        else {                                                             \
  |  | 9469|   239k|            return vis(monostate_val);                                     \
  |  | 9470|   239k|        }                                                                  \
  |  | 9471|   239k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   367k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 127k, False: 239k]
  ------------------
 9523|   367k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   367k|    do {                                                                   \
  |  | 9465|   367k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   367k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   367k|        }                                                                  \
  |  | 9468|   367k|        else {                                                             \
  |  | 9469|   367k|            return vis(monostate_val);                                     \
  |  | 9470|   367k|        }                                                                  \
  |  | 9471|   367k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   367k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 367k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   367k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 367k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 367k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 367k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 367k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 367k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 367k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 367k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 367k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 367k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 367k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   367k|            SCN_CLANG_POP
 9585|   367k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|   137k|    {
 4408|   137k|        return sync(0);
 4409|   137k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|   101k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|  90.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  71.0k|{
   89|  71.0k|    auto result = make_scan_result<Source, Args...>();
   90|  71.0k|    fill_scan_result(result,
   91|  71.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  71.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  71.0k|    return result;
   94|  71.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   228k|{
   44|   228k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   228k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  71.0k|{
  131|  71.0k|    auto result = make_scan_result<Source, Args...>();
  132|  71.0k|    fill_scan_result(result,
  133|  71.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  71.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  71.0k|    return result;
  136|  71.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   228k|{
   60|   228k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   228k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  13.3k|{
  171|  13.3k|    auto result = make_scan_result<Source, T>();
  172|  13.3k|    fill_scan_result(
  173|  13.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.3k|    return result;
  176|  13.3k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  45.2k|{
   72|  45.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.2k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  77.9k|{
   89|  77.9k|    auto result = make_scan_result<Source, Args...>();
   90|  77.9k|    fill_scan_result(result,
   91|  77.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  77.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  77.9k|    return result;
   94|  77.9k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  77.9k|{
  131|  77.9k|    auto result = make_scan_result<Source, Args...>();
  132|  77.9k|    fill_scan_result(result,
  133|  77.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  77.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  77.9k|    return result;
  136|  77.9k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.6k|{
  171|  15.6k|    auto result = make_scan_result<Source, T>();
  172|  15.6k|    fill_scan_result(
  173|  15.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.6k|    return result;
  176|  15.6k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  79.8k|{
   89|  79.8k|    auto result = make_scan_result<Source, Args...>();
   90|  79.8k|    fill_scan_result(result,
   91|  79.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.8k|    return result;
   94|  79.8k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  79.8k|{
  131|  79.8k|    auto result = make_scan_result<Source, Args...>();
  132|  79.8k|    fill_scan_result(result,
  133|  79.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.8k|    return result;
  136|  79.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  71.0k|{
   89|  71.0k|    auto result = make_scan_result<Source, Args...>();
   90|  71.0k|    fill_scan_result(result,
   91|  71.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  71.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  71.0k|    return result;
   94|  71.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   228k|{
   44|   228k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   228k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  71.0k|{
  131|  71.0k|    auto result = make_scan_result<Source, Args...>();
  132|  71.0k|    fill_scan_result(result,
  133|  71.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  71.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  71.0k|    return result;
  136|  71.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   228k|{
   60|   228k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   228k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  13.3k|{
  171|  13.3k|    auto result = make_scan_result<Source, T>();
  172|  13.3k|    fill_scan_result(
  173|  13.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.3k|    return result;
  176|  13.3k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  45.1k|{
   72|  45.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.1k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  77.8k|{
   89|  77.8k|    auto result = make_scan_result<Source, Args...>();
   90|  77.8k|    fill_scan_result(result,
   91|  77.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  77.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  77.8k|    return result;
   94|  77.8k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  77.8k|{
  131|  77.8k|    auto result = make_scan_result<Source, Args...>();
  132|  77.8k|    fill_scan_result(result,
  133|  77.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  77.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  77.8k|    return result;
  136|  77.8k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.6k|{
  171|  15.6k|    auto result = make_scan_result<Source, T>();
  172|  15.6k|    fill_scan_result(
  173|  15.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.6k|    return result;
  176|  15.6k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  79.8k|{
   89|  79.8k|    auto result = make_scan_result<Source, Args...>();
   90|  79.8k|    fill_scan_result(result,
   91|  79.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.8k|    return result;
   94|  79.8k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  79.8k|{
  131|  79.8k|    auto result = make_scan_result<Source, Args...>();
  132|  79.8k|    fill_scan_result(result,
  133|  79.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.8k|    return result;
  136|  79.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   945k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   945k|{
  309|   945k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   945k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   386k|{
  315|   386k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   386k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 193k, False: 193k]
  ------------------
  317|   386k|                    : std::locale{};
  318|   386k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1855|   315k|{
 1856|   315k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   315k|                                      m_nan_payload_buffer, value);
 1858|   315k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 302k, False: 12.7k]
  |  |  ------------------
  ------------------
 1859|   302k|        value = this->setsign(value);
 1860|   302k|        return n;
 1861|   302k|    }
 1862|       |
 1863|  12.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 3.32k, False: 9.46k]
  ------------------
 1864|  12.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 813, False: 2.51k]
  ------------------
 1865|    813|        return detail::unexpected_scan_error(
 1866|    813|            scan_error::value_negative_overflow, n.error().msg());
 1867|    813|    }
 1868|  11.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 560, False: 11.4k]
  ------------------
 1869|  11.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 95, False: 465]
  ------------------
 1870|     95|        return detail::unexpected_scan_error(
 1871|     95|            scan_error::value_negative_underflow, n.error().msg());
 1872|     95|    }
 1873|  11.8k|    return n;
 1874|  11.9k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1855|   245k|{
 1856|   245k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   245k|                                      m_nan_payload_buffer, value);
 1858|   245k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   245k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 219k, False: 25.9k]
  |  |  ------------------
  ------------------
 1859|   219k|        value = this->setsign(value);
 1860|   219k|        return n;
 1861|   219k|    }
 1862|       |
 1863|  25.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 2.53k, False: 23.4k]
  ------------------
 1864|  25.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 118, False: 2.41k]
  ------------------
 1865|    118|        return detail::unexpected_scan_error(
 1866|    118|            scan_error::value_negative_overflow, n.error().msg());
 1867|    118|    }
 1868|  25.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 806, False: 25.0k]
  ------------------
 1869|  25.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 86, False: 720]
  ------------------
 1870|     86|        return detail::unexpected_scan_error(
 1871|     86|            scan_error::value_negative_underflow, n.error().msg());
 1872|     86|    }
 1873|  25.7k|    return n;
 1874|  25.8k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|   327k|{
 1856|   327k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   327k|                                      m_nan_payload_buffer, value);
 1858|   327k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 315k, False: 11.4k]
  |  |  ------------------
  ------------------
 1859|   315k|        value = this->setsign(value);
 1860|   315k|        return n;
 1861|   315k|    }
 1862|       |
 1863|  11.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 1.99k, False: 9.44k]
  ------------------
 1864|  11.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 503, False: 1.48k]
  ------------------
 1865|    503|        return detail::unexpected_scan_error(
 1866|    503|            scan_error::value_negative_overflow, n.error().msg());
 1867|    503|    }
 1868|  10.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 249, False: 10.6k]
  ------------------
 1869|  10.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 81, False: 168]
  ------------------
 1870|     81|        return detail::unexpected_scan_error(
 1871|     81|            scan_error::value_negative_underflow, n.error().msg());
 1872|     81|    }
 1873|  10.8k|    return n;
 1874|  10.9k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|   276k|{
 1856|   276k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   276k|                                      m_nan_payload_buffer, value);
 1858|   276k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   276k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 251k, False: 24.8k]
  |  |  ------------------
  ------------------
 1859|   251k|        value = this->setsign(value);
 1860|   251k|        return n;
 1861|   251k|    }
 1862|       |
 1863|  24.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 1.56k, False: 23.2k]
  ------------------
 1864|  24.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 118, False: 1.44k]
  ------------------
 1865|    118|        return detail::unexpected_scan_error(
 1866|    118|            scan_error::value_negative_overflow, n.error().msg());
 1867|    118|    }
 1868|  24.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 196, False: 24.4k]
  ------------------
 1869|  24.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 54, False: 142]
  ------------------
 1870|     54|        return detail::unexpected_scan_error(
 1871|     54|            scan_error::value_negative_underflow, n.error().msg());
 1872|     54|    }
 1873|  24.6k|    return n;
 1874|  24.6k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1855|   332k|{
 1856|   332k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   332k|                                      m_nan_payload_buffer, value);
 1858|   332k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   332k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 321k, False: 10.0k]
  |  |  ------------------
  ------------------
 1859|   321k|        value = this->setsign(value);
 1860|   321k|        return n;
 1861|   321k|    }
 1862|       |
 1863|  10.0k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 400, False: 9.64k]
  ------------------
 1864|  10.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 184, False: 216]
  ------------------
 1865|    184|        return detail::unexpected_scan_error(
 1866|    184|            scan_error::value_negative_overflow, n.error().msg());
 1867|    184|    }
 1868|  9.85k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 98, False: 9.76k]
  ------------------
 1869|  9.85k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 42, False: 56]
  ------------------
 1870|     42|        return detail::unexpected_scan_error(
 1871|     42|            scan_error::value_negative_underflow, n.error().msg());
 1872|     42|    }
 1873|  9.81k|    return n;
 1874|  9.85k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1855|   283k|{
 1856|   283k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   283k|                                      m_nan_payload_buffer, value);
 1858|   283k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   283k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 260k, False: 23.6k]
  |  |  ------------------
  ------------------
 1859|   260k|        value = this->setsign(value);
 1860|   260k|        return n;
 1861|   260k|    }
 1862|       |
 1863|  23.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 132, False: 23.5k]
  ------------------
 1864|  23.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 32, False: 100]
  ------------------
 1865|     32|        return detail::unexpected_scan_error(
 1866|     32|            scan_error::value_negative_overflow, n.error().msg());
 1867|     32|    }
 1868|  23.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 86, False: 23.5k]
  ------------------
 1869|  23.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 36, False: 50]
  ------------------
 1870|     36|        return detail::unexpected_scan_error(
 1871|     36|            scan_error::value_negative_underflow, n.error().msg());
 1872|     36|    }
 1873|  23.6k|    return n;
 1874|  23.6k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  12.8k|{
 2217|  12.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  12.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  12.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  12.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  12.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 276, False: 12.5k]
  ------------------
 2223|    276|        SCN_UNLIKELY_ATTR
 2224|    276|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    276|                                             "Invalid integer value");
 2226|    276|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  12.5k|    auto start = source.data();
 2230|  12.5k|    const auto end = source.data() + source.size();
 2231|  12.5k|    {
 2232|   209k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 209k, False: 596]
  ------------------
 2233|   209k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 11.9k, False: 197k]
  ------------------
 2234|  11.9k|                break;
 2235|  11.9k|            }
 2236|   209k|        }
 2237|  12.5k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 894, False: 11.6k]
  |  |  |  Branch (1014:45): [True: 596, False: 11.9k]
  |  |  |  Branch (1014:45): [True: 298, False: 11.6k]
  |  |  ------------------
  ------------------
 2238|    894|            value = 0;
 2239|    894|            return ranges::next(source.begin(),
 2240|    894|                                ranges::distance(source.data(), start));
 2241|    894|        }
 2242|  12.5k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  11.6k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  11.6k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 11.6k, False: 0]
  ------------------
 2247|  11.6k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.20k, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.20k|    }                                                  \
  |  |  |  | 3995|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  10.4k|                             detail::make_string_view_from_pointers(start, end),
 2249|  10.4k|                             value, sign == sign_type::minus_sign));
 2250|  10.4k|            return ranges::next(source.begin(),
 2251|  10.4k|                                ranges::distance(source.data(), ptr));
 2252|  11.6k|        }
 2253|  11.6k|    }
 2254|       |
 2255|  11.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  11.6k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  11.6k|                     base, sign == sign_type::minus_sign));
 2258|  11.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  11.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|   235k|{
 2984|   235k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|   235k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|   252k|{
 2992|   252k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|   252k|    return sync_after_vscan(source, n);
 2994|   252k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|   228k|{
 3002|   228k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|   228k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|   228k|{
 3010|   228k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|   228k|    return sync_after_vscan(source, n);
 3012|   228k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   818k|{
  207|   818k|    return find_classic_impl(
  208|   818k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   818k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   818k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  1.07M|{
  215|  1.07M|    return find_classic_impl(
  216|  1.07M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  1.07M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  1.07M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|   235k|{
 2953|   235k|    return vscan_internal(source, format, args);
 2954|   235k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|   252k|{
 2959|   252k|    auto n = vscan_internal(source, format, args);
 2960|   252k|    return sync_after_vscan(source, n);
 2961|   252k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|   228k|{
 2967|   228k|    return vscan_internal(source, format, args);
 2968|   228k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|   228k|{
 2973|   228k|    auto n = vscan_internal(source, format, args);
 2974|   228k|    return sync_after_vscan(source, n);
 2975|   228k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  50.0k|{
 3039|  50.0k|    return vscan_value_internal(source, arg);
 3040|  50.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  51.1k|{
 3044|  51.1k|    auto n = vscan_value_internal(source, arg);
 3045|  51.1k|    return sync_after_vscan(source, n);
 3046|  51.1k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|  45.2k|{
 3052|  45.2k|    return vscan_value_internal(source, arg);
 3053|  45.2k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|  45.1k|{
 3058|  45.1k|    auto n = vscan_value_internal(source, arg);
 3059|  45.1k|    return sync_after_vscan(source, n);
 3060|  45.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1986|  11.6k|{
 1987|  11.6k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1988|  11.6k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1989|  11.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2030|    496|{
 2031|    496|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2032|    496|    return min_safe_u64_table[static_cast<size_t>(base)];
 2033|    496|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2040|  11.6k|{
 2041|  11.6k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  11.6k|    auto max_digits = maxdigits_u64(base);
 2044|  11.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 1.08k, False: 10.5k]
  ------------------
 2045|  1.08k|        return true;
 2046|  1.08k|    }
 2047|  10.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 496, False: 10.0k]
  |  Branch (2047:39): [True: 120, False: 376]
  ------------------
 2048|    120|        return true;
 2049|    120|    }
 2050|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2052|       |                      static_cast<uint64_t>(is_negative)) {
 2053|       |            SCN_UNLIKELY_ATTR
 2054|       |            return true;
 2055|       |        }
 2056|       |    }
 2057|       |
 2058|  10.4k|    return false;
 2059|  10.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2063|  10.4k|{
 2064|  10.4k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 0, False: 10.4k]
  ------------------
 2065|      0|        SCN_MSVC_PUSH
 2066|      0|        SCN_MSVC_IGNORE(4146)
 2067|      0|        return static_cast<T>(
 2068|      0|            -std::numeric_limits<T>::max() -
 2069|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|      0|        SCN_MSVC_POP
 2071|      0|    }
 2072|       |
 2073|  10.4k|    return static_cast<T>(acc);
 2074|  10.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1924|  21.2k|{
 1925|  21.2k|    uint64_t val{};
 1926|  21.2k|    std::memcpy(&val, input, sizeof(uint64_t));
 1927|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1928|       |        val = byteswap(val);
 1929|       |    }
 1930|  21.2k|    return val;
 1931|  21.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1934|  10.4k|{
 1935|  10.4k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1936|  10.4k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1937|  10.4k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1938|  10.4k|    word -= 0x3030303030303030;
 1939|  10.4k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1940|  10.4k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1941|  10.4k|    return static_cast<uint32_t>(word);
 1942|  10.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1945|  10.8k|{
 1946|  10.8k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1947|  10.8k|              0x8080808080808080));
 1948|  10.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   818k|{
  130|   818k|    auto it = source.begin();
  131|       |
  132|  2.41M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 1.85M, False: 564k]
  ------------------
  133|  1.85M|        auto sv =
  134|  1.85M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  1.85M|                .substr(0, 8);
  136|       |
  137|  1.85M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 1.78M, False: 72.0k]
  ------------------
  138|  1.78M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  1.78M|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  1.78M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 230k, False: 1.55M]
  ------------------
  141|   230k|                break;
  142|   230k|            }
  143|  1.55M|            continue;
  144|  1.78M|        }
  145|       |
  146|   247k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 198k, False: 48.3k]
  ------------------
  147|   198k|            auto tmp =
  148|   198k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   198k|            auto res = get_next_code_point(tmp);
  150|   198k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 23.6k, False: 175k]
  ------------------
  151|  23.6k|                return it;
  152|  23.6k|            }
  153|   175k|            i += static_cast<std::size_t>(
  154|   175k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|   175k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   175k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|   175k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   175k|        }
  158|  72.0k|    }
  159|       |
  160|   794k|    return detail::make_string_view_iterator(source, it);
  161|   818k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  2.52M|{
  117|  2.52M|    static_assert(sizeof(*source.data()) == 1);
  118|  2.52M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  2.52M|    uint64_t word{};
  120|  2.52M|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  2.52M|    return has_byte_greater(word, 127) != 0;
  123|  2.52M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  10.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   198k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  1.07M|{
  130|  1.07M|    auto it = source.begin();
  131|       |
  132|  1.15M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 671k, False: 485k]
  ------------------
  133|   671k|        auto sv =
  134|   671k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   671k|                .substr(0, 8);
  136|       |
  137|   671k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 620k, False: 50.6k]
  ------------------
  138|   620k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   620k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   620k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 541k, False: 79.3k]
  ------------------
  141|   541k|                break;
  142|   541k|            }
  143|  79.3k|            continue;
  144|   620k|        }
  145|       |
  146|  80.7k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 76.9k, False: 3.83k]
  ------------------
  147|  76.9k|            auto tmp =
  148|  76.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  76.9k|            auto res = get_next_code_point(tmp);
  150|  76.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 46.8k, False: 30.0k]
  ------------------
  151|  46.8k|                return it;
  152|  46.8k|            }
  153|  30.0k|            i += static_cast<std::size_t>(
  154|  30.0k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  30.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  30.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  30.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  30.0k|        }
  158|  50.6k|    }
  159|       |
  160|  1.02M|    return detail::make_string_view_iterator(source, it);
  161|  1.07M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   894k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  76.9k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   315k|{
 1764|   315k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.38k, False: 312k]
  ------------------
 1765|  2.38k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.38k|            value = std::numeric_limits<T>::infinity();
 1767|  2.38k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.38k|    }
 1775|   315k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.42k, False: 313k]
  ------------------
 1776|  1.42k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.42k|            value = std::numeric_limits<T>::infinity();
 1778|  1.42k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.42k|    }
 1786|   315k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 16.5k, False: 298k]
  ------------------
 1787|  16.5k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  16.5k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  16.5k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  16.5k|    }
 1797|   315k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 4.82k, False: 310k]
  ------------------
 1798|  4.82k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  4.82k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  4.82k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  4.82k|#if SCN_HAS_INT128
 1804|  4.82k|                using payload_type =
 1805|  4.82k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  4.82k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  4.82k|                payload_type payload{};
 1811|  4.82k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.64k, False: 1.17k]
  ------------------
 1812|  4.82k|                        nan_payload.view(), payload, {})) {
 1813|  3.64k|                    apply_nan_payload(value, payload);
 1814|  3.64k|                }
 1815|  1.17k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 400, False: 772]
  ------------------
 1816|  1.17k|                         scan_error::value_positive_overflow) {
 1817|    400|                    apply_nan_payload(value,
 1818|    400|                                      std::numeric_limits<payload_type>::max());
 1819|    400|                }
 1820|  4.82k|            }
 1821|       |
 1822|  4.82k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  4.82k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  4.82k|    }
 1831|       |
 1832|   315k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   289k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 62.4k, False: 227k]
  ------------------
 1834|  62.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.43k, False: 60.0k]
  |  |  ------------------
  ------------------
 1835|  2.43k|            return detail::unexpected_scan_error(
 1836|  2.43k|                scan_error::invalid_scanned_value,
 1837|  2.43k|                "Invalid floating-point digit");
 1838|  2.43k|        }
 1839|  62.4k|    }
 1840|   287k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.47k, False: 280k]
  |  |  ------------------
  ------------------
 1841|  6.47k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  6.47k|                                             "Invalid floating-point digit");
 1843|  6.47k|    }
 1844|       |
 1845|   280k|    return dispatch_parse_float_value<
 1846|   280k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   280k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   280k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   287k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1633|  4.04k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  4.04k|                                  nil_float_traits>) {
 1637|  4.04k|        using traits = float_traits<F>;
 1638|  4.04k|        typename traits::nan_repr bits{};
 1639|  4.04k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  4.04k|        traits::apply_nan_payload(bits, payload);
 1641|  4.04k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  4.04k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  380|  4.04k|    {
  381|  4.04k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  4.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  382|  4.04k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1079|  4.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  383|  4.04k|        r.mantissa = static_cast<unsigned>(payload);
  384|  4.04k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   280k|{
 1738|   280k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   280k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   280k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   280k|{
 1738|   280k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   280k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   280k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   280k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   280k|    else {
 1742|   280k|        auto next =
 1743|   280k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   280k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   280k|                if (!err.has_value()) {
 1748|   280k|                    return unexpected(err.error());
 1749|   280k|                }
 1750|   280k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   280k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   280k|        };
 1754|   280k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   280k|    }
 1756|   280k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   280k|{
 1713|   280k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   280k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   280k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   280k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1093|   280k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   280k|    {
 1095|   280k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1099|   280k|    {
 1100|   280k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   280k|                           generic_strtod);
 1102|   280k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  894|   280k|    {
  895|   280k|        CharT* end{};
  896|   280k|        errno = 0;
  897|   280k|        value = strtod_cb(src, &end);
  898|   280k|        const auto saved_errno = errno;
  899|   280k|        auto chars_read = end - src;
  900|       |
  901|   280k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   280k|    do {                                                            \
  |  | 3985|   280k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.88k, False: 277k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.88k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.88k|        }                                                           \
  |  | 3988|   280k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   277k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 59.5k, False: 217k]
  ------------------
  904|   277k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 59.5k, False: 0]
  ------------------
  905|  59.5k|            chars_read -= 2;
  906|  59.5k|        }
  907|       |
  908|   277k|        return chars_read;
  909|   280k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  937|   503k|    {
  938|   503k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 272k, False: 231k]
  |  Branch (938:41): [True: 0, False: 272k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   503k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 11.9k, False: 491k]
  ------------------
  946|   503k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 11.9k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   503k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 7.35k, False: 496k]
  |  Branch (954:34): [True: 1.36k, False: 5.99k]
  ------------------
  955|  1.36k|            SCN_UNLIKELY_ATTR
  956|  1.36k|            return detail::unexpected_scan_error(
  957|  1.36k|                scan_error::value_positive_underflow,
  958|  1.36k|                "strtod failed: Value too small");
  959|  1.36k|        }
  960|   502k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 5.99k, False: 496k]
  |  Branch (960:34): [True: 0, False: 5.99k]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   502k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 502k, False: 0]
  ------------------
  970|   502k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 502k, False: 0]
  ------------------
  971|   502k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 5.85k, False: 496k]
  ------------------
  972|  5.85k|            SCN_UNLIKELY_ATTR
  973|  5.85k|            return detail::unexpected_scan_error(
  974|  5.85k|                scan_error::value_positive_overflow,
  975|  5.85k|                "strtod failed: Value too large");
  976|  5.85k|        }
  977|   496k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 496k, False: 0]
  ------------------
  978|   496k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 496k, False: 0]
  ------------------
  979|   496k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 496k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   496k|        return {};
  987|   496k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  772|   503k|{
  773|   503k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 272k, False: 231k]
  |  Branch (773:44): [True: 0, False: 231k]
  ------------------
  774|   503k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  779|  7.35k|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  7.35k|    return value == static_cast<T>(0.0);
  791|  7.35k|#endif
  792|  7.35k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  796|  5.99k|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|  5.99k|    return value == static_cast<T>(-0.0);
  809|  5.99k|#endif
  810|  5.99k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  815|   502k|{
  816|   502k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   502k|        return value == std::numeric_limits<T>::infinity();
  833|   502k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   502k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  842|   496k|{
  843|   496k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   496k|        return value == -std::numeric_limits<T>::infinity();
  861|   496k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   496k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   280k|    {
  915|   280k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 264k, False: 15.9k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   264k|            auto first_space = read_until_classic_space(input.view());
  918|   264k|            input.assign(
  919|   264k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   264k|        }
  921|       |
  922|   280k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 59.8k, False: 221k]
  ------------------
  923|  59.8k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  59.8k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  59.8k|        }
  930|       |
  931|   280k|        return input.get_allocated_string().c_str();
  932|   280k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1106|   280k|    {
 1107|   280k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   280k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   280k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  990|   280k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   280k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|   280k|        if constexpr (std::is_same_v<T, float>) {
 1023|   280k|            return std::strtof(str, str_end);
 1024|       |        }
 1025|       |        else if constexpr (std::is_same_v<T, double>) {
 1026|       |            return std::strtod(str, str_end);
 1027|       |        }
 1028|       |        else if constexpr (std::is_same_v<T, long double>) {
 1029|       |            return std::strtold(str, str_end);
 1030|       |        }
 1031|      0|#endif
 1032|       |
 1033|   280k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   280k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   245k|{
 1764|   245k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 245k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   245k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 245k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   245k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 245k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   245k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 245k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   245k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   245k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 58.8k, False: 186k]
  ------------------
 1834|  58.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.59k, False: 52.2k]
  |  |  ------------------
  ------------------
 1835|  6.59k|            return detail::unexpected_scan_error(
 1836|  6.59k|                scan_error::invalid_scanned_value,
 1837|  6.59k|                "Invalid floating-point digit");
 1838|  6.59k|        }
 1839|  58.8k|    }
 1840|   238k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.0k, False: 222k]
  |  |  ------------------
  ------------------
 1841|  16.0k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  16.0k|                                             "Invalid floating-point digit");
 1843|  16.0k|    }
 1844|       |
 1845|   222k|    return dispatch_parse_float_value<
 1846|   222k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   222k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   222k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   238k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   222k|{
 1738|   222k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   222k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   222k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   222k|{
 1738|   222k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   222k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   222k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   222k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   222k|    else {
 1742|   222k|        auto next =
 1743|   222k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   222k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   222k|                if (!err.has_value()) {
 1748|   222k|                    return unexpected(err.error());
 1749|   222k|                }
 1750|   222k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   222k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   222k|        };
 1754|   222k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   222k|    }
 1756|   222k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   222k|{
 1713|   222k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   222k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   222k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   222k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1093|   222k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   222k|    {
 1095|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1099|   222k|    {
 1100|   222k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   222k|                           generic_strtod);
 1102|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  894|   222k|    {
  895|   222k|        CharT* end{};
  896|   222k|        errno = 0;
  897|   222k|        value = strtod_cb(src, &end);
  898|   222k|        const auto saved_errno = errno;
  899|   222k|        auto chars_read = end - src;
  900|       |
  901|   222k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   222k|    do {                                                            \
  |  | 3985|   222k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.33k, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.33k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.33k|        }                                                           \
  |  | 3988|   222k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   219k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 52.0k, False: 167k]
  ------------------
  904|   219k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 52.0k, False: 0]
  ------------------
  905|  52.0k|            chars_read -= 2;
  906|  52.0k|        }
  907|       |
  908|   219k|        return chars_read;
  909|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   222k|    {
  915|   222k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 216k, False: 6.31k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   216k|            auto first_space = read_until_classic_space(input.view());
  918|   216k|            input.assign(
  919|   216k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   216k|        }
  921|       |
  922|   222k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 52.1k, False: 170k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  52.1k|            else {
  927|  52.1k|                input.get_allocated_string().insert(0, L"0x");
  928|  52.1k|            }
  929|  52.1k|        }
  930|       |
  931|   222k|        return input.get_allocated_string().c_str();
  932|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1106|   222k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   222k|        else {
 1111|   222k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   222k|        }
 1113|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1038|   222k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   222k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|   222k|        if constexpr (std::is_same_v<T, float>) {
 1071|   222k|            return std::wcstof(str, str_end);
 1072|       |        }
 1073|       |        else if constexpr (std::is_same_v<T, double>) {
 1074|       |            return std::wcstod(str, str_end);
 1075|       |        }
 1076|       |        else if constexpr (std::is_same_v<T, long double>) {
 1077|       |            return std::wcstold(str, str_end);
 1078|       |        }
 1079|      0|#endif
 1080|       |
 1081|   222k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   222k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   327k|{
 1764|   327k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.71k, False: 324k]
  ------------------
 1765|  2.71k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.71k|            value = std::numeric_limits<T>::infinity();
 1767|  2.71k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.71k|    }
 1775|   327k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.50k, False: 325k]
  ------------------
 1776|  1.50k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.50k|            value = std::numeric_limits<T>::infinity();
 1778|  1.50k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.50k|    }
 1786|   327k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 16.9k, False: 310k]
  ------------------
 1787|  16.9k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  16.9k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  16.9k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  16.9k|    }
 1797|   327k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 5.14k, False: 321k]
  ------------------
 1798|  5.14k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  5.14k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  5.14k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  5.14k|#if SCN_HAS_INT128
 1804|  5.14k|                using payload_type =
 1805|  5.14k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  5.14k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  5.14k|                payload_type payload{};
 1811|  5.14k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.83k, False: 1.31k]
  ------------------
 1812|  5.14k|                        nan_payload.view(), payload, {})) {
 1813|  3.83k|                    apply_nan_payload(value, payload);
 1814|  3.83k|                }
 1815|  1.31k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 400, False: 912]
  ------------------
 1816|  1.31k|                         scan_error::value_positive_overflow) {
 1817|    400|                    apply_nan_payload(value,
 1818|    400|                                      std::numeric_limits<payload_type>::max());
 1819|    400|                }
 1820|  5.14k|            }
 1821|       |
 1822|  5.14k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  5.14k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  5.14k|    }
 1831|       |
 1832|   327k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   300k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 63.7k, False: 236k]
  ------------------
 1834|  63.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.46k, False: 61.3k]
  |  |  ------------------
  ------------------
 1835|  2.46k|            return detail::unexpected_scan_error(
 1836|  2.46k|                scan_error::invalid_scanned_value,
 1837|  2.46k|                "Invalid floating-point digit");
 1838|  2.46k|        }
 1839|  63.7k|    }
 1840|   298k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.73k, False: 291k]
  |  |  ------------------
  ------------------
 1841|  6.73k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  6.73k|                                             "Invalid floating-point digit");
 1843|  6.73k|    }
 1844|       |
 1845|   291k|    return dispatch_parse_float_value<
 1846|   291k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   291k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   291k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   298k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1633|  4.23k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  4.23k|                                  nil_float_traits>) {
 1637|  4.23k|        using traits = float_traits<F>;
 1638|  4.23k|        typename traits::nan_repr bits{};
 1639|  4.23k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  4.23k|        traits::apply_nan_payload(bits, payload);
 1641|  4.23k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  4.23k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  434|  4.23k|    {
  435|  4.23k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  436|  4.23k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1079|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  437|  4.23k|        r.mantissa0 = static_cast<unsigned>(payload >> 32);
  438|  4.23k|        r.mantissa1 = static_cast<unsigned>(payload);
  439|  4.23k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   291k|{
 1738|   291k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   291k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   291k|{
 1738|   291k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   291k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   291k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   291k|    else {
 1742|   291k|        auto next =
 1743|   291k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   291k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   291k|                if (!err.has_value()) {
 1748|   291k|                    return unexpected(err.error());
 1749|   291k|                }
 1750|   291k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   291k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   291k|        };
 1754|   291k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   291k|    }
 1756|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   291k|{
 1713|   291k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   291k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   291k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1093|   291k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   291k|    {
 1095|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1099|   291k|    {
 1100|   291k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   291k|                           generic_strtod);
 1102|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  894|   291k|    {
  895|   291k|        CharT* end{};
  896|   291k|        errno = 0;
  897|   291k|        value = strtod_cb(src, &end);
  898|   291k|        const auto saved_errno = errno;
  899|   291k|        auto chars_read = end - src;
  900|       |
  901|   291k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   291k|    do {                                                            \
  |  | 3985|   291k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.24k, False: 289k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  2.24k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  2.24k|        }                                                           \
  |  | 3988|   291k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   289k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 60.9k, False: 228k]
  ------------------
  904|   289k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 60.9k, False: 0]
  ------------------
  905|  60.9k|            chars_read -= 2;
  906|  60.9k|        }
  907|       |
  908|   289k|        return chars_read;
  909|   291k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  937|   544k|    {
  938|   544k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 296k, False: 248k]
  |  Branch (938:41): [True: 0, False: 296k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   544k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 13.3k, False: 531k]
  ------------------
  946|   544k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 13.3k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   544k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 4.54k, False: 540k]
  |  Branch (954:34): [True: 445, False: 4.10k]
  ------------------
  955|    445|            SCN_UNLIKELY_ATTR
  956|    445|            return detail::unexpected_scan_error(
  957|    445|                scan_error::value_positive_underflow,
  958|    445|                "strtod failed: Value too small");
  959|    445|        }
  960|   544k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 4.10k, False: 540k]
  |  Branch (960:34): [True: 0, False: 4.10k]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   544k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 544k, False: 0]
  ------------------
  970|   544k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 544k, False: 0]
  ------------------
  971|   544k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 3.55k, False: 540k]
  ------------------
  972|  3.55k|            SCN_UNLIKELY_ATTR
  973|  3.55k|            return detail::unexpected_scan_error(
  974|  3.55k|                scan_error::value_positive_overflow,
  975|  3.55k|                "strtod failed: Value too large");
  976|  3.55k|        }
  977|   540k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 540k, False: 0]
  ------------------
  978|   540k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 540k, False: 0]
  ------------------
  979|   540k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 540k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   540k|        return {};
  987|   540k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  772|   544k|{
  773|   544k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 296k, False: 248k]
  |  Branch (773:44): [True: 0, False: 248k]
  ------------------
  774|   544k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  779|  4.54k|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  4.54k|    return value == static_cast<T>(0.0);
  791|  4.54k|#endif
  792|  4.54k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  796|  4.10k|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|  4.10k|    return value == static_cast<T>(-0.0);
  809|  4.10k|#endif
  810|  4.10k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  815|   544k|{
  816|   544k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   544k|        return value == std::numeric_limits<T>::infinity();
  833|   544k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   544k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  842|   540k|{
  843|   540k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   540k|        return value == -std::numeric_limits<T>::infinity();
  861|   540k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   540k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   291k|    {
  915|   291k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 274k, False: 16.7k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   274k|            auto first_space = read_until_classic_space(input.view());
  918|   274k|            input.assign(
  919|   274k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   274k|        }
  921|       |
  922|   291k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 61.1k, False: 230k]
  ------------------
  923|  61.1k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  61.1k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  61.1k|        }
  930|       |
  931|   291k|        return input.get_allocated_string().c_str();
  932|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1106|   291k|    {
 1107|   291k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   291k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  990|   291k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   291k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|       |        if constexpr (std::is_same_v<T, float>) {
 1023|       |            return std::strtof(str, str_end);
 1024|       |        }
 1025|   291k|        else if constexpr (std::is_same_v<T, double>) {
 1026|   291k|            return std::strtod(str, str_end);
 1027|       |        }
 1028|       |        else if constexpr (std::is_same_v<T, long double>) {
 1029|       |            return std::strtold(str, str_end);
 1030|       |        }
 1031|      0|#endif
 1032|       |
 1033|   291k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   276k|{
 1764|   276k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 276k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   276k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 276k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   276k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 276k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   276k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 276k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   276k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   276k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 58.8k, False: 217k]
  ------------------
 1834|  58.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.60k, False: 52.2k]
  |  |  ------------------
  ------------------
 1835|  6.60k|            return detail::unexpected_scan_error(
 1836|  6.60k|                scan_error::invalid_scanned_value,
 1837|  6.60k|                "Invalid floating-point digit");
 1838|  6.60k|        }
 1839|  58.8k|    }
 1840|   269k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.4k, False: 253k]
  |  |  ------------------
  ------------------
 1841|  16.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  16.4k|                                             "Invalid floating-point digit");
 1843|  16.4k|    }
 1844|       |
 1845|   253k|    return dispatch_parse_float_value<
 1846|   253k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   253k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   253k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   269k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   253k|{
 1738|   253k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   253k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   253k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   253k|{
 1738|   253k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   253k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   253k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   253k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   253k|    else {
 1742|   253k|        auto next =
 1743|   253k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   253k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   253k|                if (!err.has_value()) {
 1748|   253k|                    return unexpected(err.error());
 1749|   253k|                }
 1750|   253k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   253k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   253k|        };
 1754|   253k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   253k|    }
 1756|   253k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   253k|{
 1713|   253k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   253k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   253k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   253k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1093|   253k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   253k|    {
 1095|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1099|   253k|    {
 1100|   253k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   253k|                           generic_strtod);
 1102|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  894|   253k|    {
  895|   253k|        CharT* end{};
  896|   253k|        errno = 0;
  897|   253k|        value = strtod_cb(src, &end);
  898|   253k|        const auto saved_errno = errno;
  899|   253k|        auto chars_read = end - src;
  900|       |
  901|   253k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   253k|    do {                                                            \
  |  | 3985|   253k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.76k, False: 251k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.76k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.76k|        }                                                           \
  |  | 3988|   253k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   251k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 52.1k, False: 199k]
  ------------------
  904|   251k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 52.1k, False: 0]
  ------------------
  905|  52.1k|            chars_read -= 2;
  906|  52.1k|        }
  907|       |
  908|   251k|        return chars_read;
  909|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   253k|    {
  915|   253k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 245k, False: 7.20k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   245k|            auto first_space = read_until_classic_space(input.view());
  918|   245k|            input.assign(
  919|   245k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   245k|        }
  921|       |
  922|   253k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 52.1k, False: 200k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  52.1k|            else {
  927|  52.1k|                input.get_allocated_string().insert(0, L"0x");
  928|  52.1k|            }
  929|  52.1k|        }
  930|       |
  931|   253k|        return input.get_allocated_string().c_str();
  932|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1106|   253k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   253k|        else {
 1111|   253k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   253k|        }
 1113|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1038|   253k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   253k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|       |        if constexpr (std::is_same_v<T, float>) {
 1071|       |            return std::wcstof(str, str_end);
 1072|       |        }
 1073|   253k|        else if constexpr (std::is_same_v<T, double>) {
 1074|   253k|            return std::wcstod(str, str_end);
 1075|       |        }
 1076|       |        else if constexpr (std::is_same_v<T, long double>) {
 1077|       |            return std::wcstold(str, str_end);
 1078|       |        }
 1079|      0|#endif
 1080|       |
 1081|   253k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   253k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   332k|{
 1764|   332k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.79k, False: 329k]
  ------------------
 1765|  2.79k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.79k|            value = std::numeric_limits<T>::infinity();
 1767|  2.79k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.79k|    }
 1775|   332k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.52k, False: 330k]
  ------------------
 1776|  1.52k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.52k|            value = std::numeric_limits<T>::infinity();
 1778|  1.52k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.52k|    }
 1786|   332k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 17.1k, False: 314k]
  ------------------
 1787|  17.1k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  17.1k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  17.1k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  17.1k|    }
 1797|   332k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 5.22k, False: 326k]
  ------------------
 1798|  5.22k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  5.22k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  5.22k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  5.22k|#if SCN_HAS_INT128
 1804|  5.22k|                using payload_type =
 1805|  5.22k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  5.22k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  5.22k|                payload_type payload{};
 1811|  5.22k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.87k, False: 1.34k]
  ------------------
 1812|  5.22k|                        nan_payload.view(), payload, {})) {
 1813|  3.87k|                    apply_nan_payload(value, payload);
 1814|  3.87k|                }
 1815|  1.34k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 402, False: 946]
  ------------------
 1816|  1.34k|                         scan_error::value_positive_overflow) {
 1817|    402|                    apply_nan_payload(value,
 1818|    402|                                      std::numeric_limits<payload_type>::max());
 1819|    402|                }
 1820|  5.22k|            }
 1821|       |
 1822|  5.22k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  5.22k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  5.22k|    }
 1831|       |
 1832|   332k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   305k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 64.1k, False: 241k]
  ------------------
 1834|  64.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.52k, False: 61.5k]
  |  |  ------------------
  ------------------
 1835|  2.52k|            return detail::unexpected_scan_error(
 1836|  2.52k|                scan_error::invalid_scanned_value,
 1837|  2.52k|                "Invalid floating-point digit");
 1838|  2.52k|        }
 1839|  64.1k|    }
 1840|   302k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.02k, False: 295k]
  |  |  ------------------
  ------------------
 1841|  7.02k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  7.02k|                                             "Invalid floating-point digit");
 1843|  7.02k|    }
 1844|       |
 1845|   295k|    return dispatch_parse_float_value<
 1846|   295k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   295k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   295k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   302k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1633|  4.27k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  4.27k|                                  nil_float_traits>) {
 1637|  4.27k|        using traits = float_traits<F>;
 1638|  4.27k|        typename traits::nan_repr bits{};
 1639|  4.27k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  4.27k|        traits::apply_nan_payload(bits, payload);
 1641|  4.27k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  4.27k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  500|  4.27k|    {
  501|  4.27k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  502|  4.27k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1079|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  503|  4.27k|        r.mantissa0 = static_cast<unsigned>(payload >> 32);
  504|  4.27k|        r.mantissa1 = static_cast<unsigned>(payload);
  505|  4.27k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|   295k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   295k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|   295k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   295k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   295k|    else {
 1742|   295k|        auto next =
 1743|   295k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   295k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   295k|                if (!err.has_value()) {
 1748|   295k|                    return unexpected(err.error());
 1749|   295k|                }
 1750|   295k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   295k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   295k|        };
 1754|   295k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   295k|    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   295k|{
 1713|   295k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   295k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   295k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1093|   295k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   295k|    {
 1095|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1099|   295k|    {
 1100|   295k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   295k|                           generic_strtod);
 1102|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  894|   295k|    {
  895|   295k|        CharT* end{};
  896|   295k|        errno = 0;
  897|   295k|        value = strtod_cb(src, &end);
  898|   295k|        const auto saved_errno = errno;
  899|   295k|        auto chars_read = end - src;
  900|       |
  901|   295k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   295k|    do {                                                            \
  |  | 3985|   295k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 498, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    498|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    498|        }                                                           \
  |  | 3988|   295k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   295k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 61.4k, False: 233k]
  ------------------
  904|   295k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 61.4k, False: 0]
  ------------------
  905|  61.4k|            chars_read -= 2;
  906|  61.4k|        }
  907|       |
  908|   295k|        return chars_read;
  909|   295k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  937|   556k|    {
  938|   556k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 302k, False: 253k]
  |  Branch (938:41): [True: 0, False: 302k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   556k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 13.3k, False: 542k]
  ------------------
  946|   556k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 13.3k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   556k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 716, False: 555k]
  |  Branch (954:34): [True: 184, False: 532]
  ------------------
  955|    184|            SCN_UNLIKELY_ATTR
  956|    184|            return detail::unexpected_scan_error(
  957|    184|                scan_error::value_positive_underflow,
  958|    184|                "strtod failed: Value too small");
  959|    184|        }
  960|   556k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 532, False: 555k]
  |  Branch (960:34): [True: 0, False: 532]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   556k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 556k, False: 0]
  ------------------
  970|   556k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 556k, False: 0]
  ------------------
  971|   556k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 532, False: 555k]
  ------------------
  972|    532|            SCN_UNLIKELY_ATTR
  973|    532|            return detail::unexpected_scan_error(
  974|    532|                scan_error::value_positive_overflow,
  975|    532|                "strtod failed: Value too large");
  976|    532|        }
  977|   555k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 555k, False: 0]
  ------------------
  978|   555k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 555k, False: 0]
  ------------------
  979|   555k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 555k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   555k|        return {};
  987|   555k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  772|   556k|{
  773|   556k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 302k, False: 253k]
  |  Branch (773:44): [True: 0, False: 253k]
  ------------------
  774|   556k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  779|    716|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    716|    return value == static_cast<T>(0.0);
  791|    716|#endif
  792|    716|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  796|    532|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|    532|    return value == static_cast<T>(-0.0);
  809|    532|#endif
  810|    532|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  815|   556k|{
  816|   556k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   556k|        return value == std::numeric_limits<T>::infinity();
  833|   556k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   556k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  842|   555k|{
  843|   555k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   555k|        return value == -std::numeric_limits<T>::infinity();
  861|   555k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   555k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   295k|    {
  915|   295k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 278k, False: 16.9k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   278k|            auto first_space = read_until_classic_space(input.view());
  918|   278k|            input.assign(
  919|   278k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   278k|        }
  921|       |
  922|   295k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 61.4k, False: 234k]
  ------------------
  923|  61.4k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  61.4k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  61.4k|        }
  930|       |
  931|   295k|        return input.get_allocated_string().c_str();
  932|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1106|   295k|    {
 1107|   295k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   295k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  990|   295k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   295k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|       |        if constexpr (std::is_same_v<T, float>) {
 1023|       |            return std::strtof(str, str_end);
 1024|       |        }
 1025|       |        else if constexpr (std::is_same_v<T, double>) {
 1026|       |            return std::strtod(str, str_end);
 1027|       |        }
 1028|   295k|        else if constexpr (std::is_same_v<T, long double>) {
 1029|   295k|            return std::strtold(str, str_end);
 1030|   295k|        }
 1031|      0|#endif
 1032|       |
 1033|   295k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   283k|{
 1764|   283k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 283k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   283k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 283k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   283k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 283k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   283k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 283k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   283k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   283k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 58.8k, False: 225k]
  ------------------
 1834|  58.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.62k, False: 52.2k]
  |  |  ------------------
  ------------------
 1835|  6.62k|            return detail::unexpected_scan_error(
 1836|  6.62k|                scan_error::invalid_scanned_value,
 1837|  6.62k|                "Invalid floating-point digit");
 1838|  6.62k|        }
 1839|  58.8k|    }
 1840|   277k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.8k, False: 260k]
  |  |  ------------------
  ------------------
 1841|  16.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  16.8k|                                             "Invalid floating-point digit");
 1843|  16.8k|    }
 1844|       |
 1845|   260k|    return dispatch_parse_float_value<
 1846|   260k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   260k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   260k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   277k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|   260k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   260k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|   260k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   260k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   260k|    else {
 1742|   260k|        auto next =
 1743|   260k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   260k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   260k|                if (!err.has_value()) {
 1748|   260k|                    return unexpected(err.error());
 1749|   260k|                }
 1750|   260k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   260k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   260k|        };
 1754|   260k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   260k|    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   260k|{
 1713|   260k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   260k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   260k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1093|   260k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   260k|    {
 1095|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1099|   260k|    {
 1100|   260k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   260k|                           generic_strtod);
 1102|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  894|   260k|    {
  895|   260k|        CharT* end{};
  896|   260k|        errno = 0;
  897|   260k|        value = strtod_cb(src, &end);
  898|   260k|        const auto saved_errno = errno;
  899|   260k|        auto chars_read = end - src;
  900|       |
  901|   260k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   260k|    do {                                                            \
  |  | 3985|   260k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 218, False: 260k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    218|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    218|        }                                                           \
  |  | 3988|   260k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   260k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 52.2k, False: 208k]
  ------------------
  904|   260k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 52.2k, False: 0]
  ------------------
  905|  52.2k|            chars_read -= 2;
  906|  52.2k|        }
  907|       |
  908|   260k|        return chars_read;
  909|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   260k|    {
  915|   260k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 252k, False: 7.53k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   252k|            auto first_space = read_until_classic_space(input.view());
  918|   252k|            input.assign(
  919|   252k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   252k|        }
  921|       |
  922|   260k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 52.2k, False: 208k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  52.2k|            else {
  927|  52.2k|                input.get_allocated_string().insert(0, L"0x");
  928|  52.2k|            }
  929|  52.2k|        }
  930|       |
  931|   260k|        return input.get_allocated_string().c_str();
  932|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1106|   260k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   260k|        else {
 1111|   260k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   260k|        }
 1113|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1038|   260k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   260k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|       |        if constexpr (std::is_same_v<T, float>) {
 1071|       |            return std::wcstof(str, str_end);
 1072|       |        }
 1073|       |        else if constexpr (std::is_same_v<T, double>) {
 1074|       |            return std::wcstod(str, str_end);
 1075|       |        }
 1076|   260k|        else if constexpr (std::is_same_v<T, long double>) {
 1077|   260k|            return std::wcstold(str, str_end);
 1078|   260k|        }
 1079|      0|#endif
 1080|       |
 1081|   260k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1966|  11.6k|{
 1967|  11.6k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1968|       |
 1969|  44.9k|    while (begin != end) {
  ------------------
  |  Branch (1969:12): [True: 33.9k, False: 10.9k]
  ------------------
 1970|  33.9k|        const auto digit = char_to_int(*begin);
 1971|  33.9k|        if (digit >= 10) {
  ------------------
  |  Branch (1971:13): [True: 661, False: 33.3k]
  ------------------
 1972|    661|            break;
 1973|    661|        }
 1974|  33.3k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1975|  33.3k|        ++begin;
 1976|  33.3k|    }
 1977|       |
 1978|  11.6k|    return begin;
 1979|  11.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1953|  11.6k|{
 1954|  11.6k|    while (
 1955|  22.0k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1955:9): [True: 10.8k, False: 11.2k]
  ------------------
 1956|  22.0k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1956:9): [True: 10.4k, False: 385]
  ------------------
 1957|  10.4k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1958|  10.4k|                                      get_eight_digits_word(p));
 1959|  10.4k|        p += 8;
 1960|  10.4k|    }
 1961|  11.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  11.6k|{
 2081|  11.6k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  11.6k|    uint64_t u64val{};
 2084|  11.6k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  11.6k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  11.6k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  11.6k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.20k, False: 10.4k]
  |  |  ------------------
  ------------------
 2089|  11.6k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|  1.20k|        return detail::unexpected_scan_error(
 2091|  1.20k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 0, False: 1.20k]
  ------------------
 2092|  1.20k|                        : scan_error::value_positive_overflow,
 2093|  1.20k|            "Integer overflow");
 2094|  1.20k|    }
 2095|       |
 2096|  10.4k|    val = store_result<T>(u64val, is_negative);
 2097|  10.4k|    return ptr;
 2098|  11.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   504k|{
 2850|   504k|    const auto argcount = args.size();
 2851|   504k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 102k, False: 402k]
  |  Branch (2851:60): [True: 102k, False: 0]
  ------------------
 2852|   102k|        auto arg = args.get(0);
 2853|   102k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   102k|    static_cast<    \
  |  | 1084|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|   102k|    }
 2855|       |
 2856|   402k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 402k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   402k|    SCN_UNLIKELY_ATTR
 2864|   402k|    {
 2865|   402k|        auto handler = format_handler<false, CharT>{
 2866|   402k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   402k|        return vscan_parse_format_string(format, handler);
 2868|   402k|    }
 2869|   402k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   975k|{
 2398|   975k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 773k, False: 202k]
  ------------------
 2399|   773k|        return false;
 2400|   773k|    }
 2401|   202k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 202k, False: 0]
  |  Branch (2401:39): [True: 202k, False: 0]
  ------------------
 2402|   975k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   153k|{
 2431|   153k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   153k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   153k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   153k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   153k|    static_cast<    \
  |  | 1084|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   153k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  15.8k|    }                                                  \
  |  |  |  | 3995|   153k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   137k|    return it.position();
 2448|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|   371k|        : format_handler_base{argcount},
 2674|   371k|          parse_ctx{source_tag<Source&&>, format},
 2675|   371k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   371k|    static_cast<    \
  |  | 1084|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   371k|    static_cast<    \
  |  | 1084|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   371k|    {
 2677|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|  1.50M|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|  1.50M|    {
 2493|  1.50M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|  1.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|   371k|        : contiguous_ctx(source, args, loc)
 2625|   371k|    {
 2626|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   371k|{
 2815|   371k|    const auto beg = handler.get_ctx().begin();
 2816|   371k|    detail::parse_format_string<false>(format, handler);
 2817|   371k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.8k, False: 318k]
  |  |  ------------------
  ------------------
 2818|  52.8k|        return unexpected(err.error());
 2819|  52.8k|    }
 2820|   318k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   371k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|  2.49M|    {
 2799|  2.49M|        return ctx.get();
 2800|  2.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|  2.49M|    {
 2630|  2.49M|        return contiguous_ctx;
 2631|  2.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   689k|    {
 2681|   689k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 689k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   689k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|   316k|    {
 2541|   316k|        error = unexpected(err);
 2542|   316k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|   371k|{
 2453|   371k|    auto arg = ctx.arg(id);
 2454|   371k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   371k|    return arg;
 2458|   371k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  1.50M|    {
 2567|  1.50M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|  1.50M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|  1.50M|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.50M, False: 0]
  |  |  ------------------
  ------------------
 2579|  1.50M|            visited_args_lower64 |= (1ull << id);
 2580|  1.50M|            return;
 2581|  1.50M|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  1.50M|    {
 2551|  1.50M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  1.50M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.50M, False: 0]
  |  |  ------------------
  ------------------
 2558|  1.50M|            return (visited_args_lower64 >> id) & 1ull;
 2559|  1.50M|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  1.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|   371k|    {
 2721|   371k|        return parse_ctx.next_arg_id();
 2722|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|   371k|    {
 2761|   371k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   371k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   371k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 371k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   371k|        auto specs = detail::format_specs{};
 2774|   371k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   371k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   371k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   371k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   371k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 371k]
  |  Branch (2779:29): [True: 0, False: 371k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   371k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   371k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   371k|        on_visit_scan_arg(
 2791|   371k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   371k|                                           get_ctx().locale()},
 2793|   371k|            arg);
 2794|   371k|        return parse_ctx.begin();
 2795|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|   371k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   371k|    {
 2472|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|   371k|    {
 2732|   371k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 371k]
  |  Branch (2732:13): [True: 0, False: 371k]
  |  Branch (2732:29): [True: 0, False: 371k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   371k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   371k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.8k, False: 318k]
  |  |  ------------------
  ------------------
 2739|  52.8k|            on_error(r.error());
 2740|  52.8k|        }
 2741|   318k|        else {
 2742|   318k|            get_ctx().advance_to(*r);
 2743|   318k|        }
 2744|   371k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|  1.50M|    {
 2500|  1.50M|        {
 2501|  1.50M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 1.50M]
  ------------------
 2502|  1.50M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 1.50M]
  ------------------
 2503|  1.50M|                                      ? std::numeric_limits<uint64_t>::max()
 2504|  1.50M|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|  1.50M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 1.50M]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|  1.50M|        }
 2511|       |
 2512|  1.50M|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 1.50M, False: 0]
  ------------------
 2513|  1.50M|            return;
 2514|  1.50M|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  6.03M|    {
 2546|  6.03M|        return error;
 2547|  6.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|   402k|        : format_handler_base{argcount},
 2674|   402k|          parse_ctx{source_tag<Source&&>, format},
 2675|   402k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   402k|    {
 2677|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|   402k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   402k|    static_cast<    \
  |  | 1084|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   402k|    {
 2602|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   402k|{
 2815|   402k|    const auto beg = handler.get_ctx().begin();
 2816|   402k|    detail::parse_format_string<false>(format, handler);
 2817|   402k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.8k, False: 349k]
  |  |  ------------------
  ------------------
 2818|  52.8k|        return unexpected(err.error());
 2819|  52.8k|    }
 2820|   349k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   402k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|  2.71M|    {
 2799|  2.71M|        return ctx.get();
 2800|  2.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|  2.71M|    {
 2606|  2.71M|        return ctx;
 2607|  2.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   751k|    {
 2681|   751k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 751k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   751k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|   402k|{
 2453|   402k|    auto arg = ctx.arg(id);
 2454|   402k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   402k|    return arg;
 2458|   402k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|   402k|    {
 2721|   402k|        return parse_ctx.next_arg_id();
 2722|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|   402k|    {
 2761|   402k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   402k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   402k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 402k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   402k|        auto specs = detail::format_specs{};
 2774|   402k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   402k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   402k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   402k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   402k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 402k]
  |  Branch (2779:29): [True: 0, False: 402k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   402k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   402k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   402k|        on_visit_scan_arg(
 2791|   402k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   402k|                                           get_ctx().locale()},
 2793|   402k|            arg);
 2794|   402k|        return parse_ctx.begin();
 2795|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2470|   402k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   402k|    {
 2472|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   402k|    {
 2732|   402k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 402k]
  |  Branch (2732:13): [True: 0, False: 402k]
  |  Branch (2732:29): [True: 0, False: 402k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   402k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   402k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.8k, False: 349k]
  |  |  ------------------
  ------------------
 2739|  52.8k|            on_error(r.error());
 2740|  52.8k|        }
 2741|   349k|        else {
 2742|   349k|            get_ctx().advance_to(*r);
 2743|   349k|        }
 2744|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   471k|{
 2830|   471k|    const auto argcount = args.size();
 2831|   471k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 100k, False: 371k]
  |  Branch (2831:60): [True: 100k, False: 0]
  ------------------
 2832|   100k|        auto arg = args.get(0);
 2833|   100k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   100k|    static_cast<    \
  |  | 1084|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|   100k|    }
 2835|       |
 2836|   371k|    auto handler = format_handler<true, CharT>{
 2837|   371k|        ranges::subrange<const CharT*>{source.data(),
 2838|   371k|                                       source.data() + source.size()},
 2839|   371k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   371k|    static_cast<    \
  |  | 1084|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   371k|    static_cast<    \
  |  | 1084|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   371k|    return vscan_parse_format_string(format, handler);
 2841|   471k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   150k|{
 2411|   150k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   150k|    auto reader =
 2417|   150k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   150k|            ranges::subrange<const CharT*>{source.data(),
 2419|   150k|                                           source.data() + source.size()},
 2420|   150k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   150k|    static_cast<    \
  |  | 1084|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   150k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  15.8k|    }                                                  \
  |  |  |  | 3995|   150k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   134k|    return ranges::distance(source.data(), it);
 2423|   150k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   555k|{
 2930|   555k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 486k, False: 68.6k]
  |  |  ------------------
  ------------------
 2931|   486k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   486k|    }
 2937|  68.6k|    else {
 2938|  68.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 68.6k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  68.6k|    }
 2944|   555k|    return result;
 2945|   555k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   457k|{
 2830|   457k|    const auto argcount = args.size();
 2831|   457k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 90.4k, False: 367k]
  |  Branch (2831:60): [True: 90.4k, False: 0]
  ------------------
 2832|  90.4k|        auto arg = args.get(0);
 2833|  90.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  90.4k|    static_cast<    \
  |  | 1084|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  90.4k|    }
 2835|       |
 2836|   367k|    auto handler = format_handler<true, CharT>{
 2837|   367k|        ranges::subrange<const CharT*>{source.data(),
 2838|   367k|                                       source.data() + source.size()},
 2839|   367k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   367k|    return vscan_parse_format_string(format, handler);
 2841|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   915k|{
 2398|   915k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 734k, False: 180k]
  ------------------
 2399|   734k|        return false;
 2400|   734k|    }
 2401|   180k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 180k, False: 0]
  |  Branch (2401:39): [True: 180k, False: 0]
  ------------------
 2402|   915k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   135k|{
 2411|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   135k|    auto reader =
 2417|   135k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   135k|            ranges::subrange<const CharT*>{source.data(),
 2419|   135k|                                           source.data() + source.size()},
 2420|   135k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   135k|    static_cast<    \
  |  | 1084|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   135k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 31.6k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  31.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  31.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  31.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  31.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  31.6k|    }                                                  \
  |  |  |  | 3995|   135k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   104k|    return ranges::distance(source.data(), it);
 2423|   135k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   367k|        : format_handler_base{argcount},
 2674|   367k|          parse_ctx{source_tag<Source&&>, format},
 2675|   367k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   367k|    {
 2677|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   367k|        : contiguous_ctx(source, args, loc)
 2625|   367k|    {
 2626|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   367k|{
 2815|   367k|    const auto beg = handler.get_ctx().begin();
 2816|   367k|    detail::parse_format_string<false>(format, handler);
 2817|   367k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 261k]
  |  |  ------------------
  ------------------
 2818|   105k|        return unexpected(err.error());
 2819|   105k|    }
 2820|   261k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|  2.35M|    {
 2799|  2.35M|        return ctx.get();
 2800|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|  2.35M|    {
 2630|  2.35M|        return contiguous_ctx;
 2631|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|   628k|    {
 2681|   628k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 628k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   628k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|   367k|{
 2453|   367k|    auto arg = ctx.arg(id);
 2454|   367k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   367k|    return arg;
 2458|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|   367k|    {
 2721|   367k|        return parse_ctx.next_arg_id();
 2722|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|   367k|    {
 2761|   367k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   367k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   367k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 367k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   367k|        auto specs = detail::format_specs{};
 2774|   367k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   367k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   367k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   367k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   367k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 367k]
  |  Branch (2779:29): [True: 0, False: 367k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   367k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   367k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   367k|        on_visit_scan_arg(
 2791|   367k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   367k|                                           get_ctx().locale()},
 2793|   367k|            arg);
 2794|   367k|        return parse_ctx.begin();
 2795|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|   367k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   367k|    {
 2472|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|   367k|    {
 2732|   367k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 367k]
  |  Branch (2732:13): [True: 0, False: 367k]
  |  Branch (2732:29): [True: 0, False: 367k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   367k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   367k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 261k]
  |  |  ------------------
  ------------------
 2739|   105k|            on_error(r.error());
 2740|   105k|        }
 2741|   261k|        else {
 2742|   261k|            get_ctx().advance_to(*r);
 2743|   261k|        }
 2744|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   457k|{
 2850|   457k|    const auto argcount = args.size();
 2851|   457k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 90.3k, False: 367k]
  |  Branch (2851:60): [True: 90.3k, False: 0]
  ------------------
 2852|  90.3k|        auto arg = args.get(0);
 2853|  90.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  90.3k|    static_cast<    \
  |  | 1084|  90.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  90.3k|    }
 2855|       |
 2856|   367k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 367k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   367k|    SCN_UNLIKELY_ATTR
 2864|   367k|    {
 2865|   367k|        auto handler = format_handler<false, CharT>{
 2866|   367k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   367k|        return vscan_parse_format_string(format, handler);
 2868|   367k|    }
 2869|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   135k|{
 2431|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   135k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   135k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   135k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   135k|    static_cast<    \
  |  | 1084|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   135k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 31.6k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  31.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  31.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  31.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  31.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  31.6k|    }                                                  \
  |  |  |  | 3995|   135k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   103k|    return it.position();
 2448|   135k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|   367k|        : format_handler_base{argcount},
 2674|   367k|          parse_ctx{source_tag<Source&&>, format},
 2675|   367k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   367k|    {
 2677|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|   367k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   367k|    {
 2602|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   367k|{
 2815|   367k|    const auto beg = handler.get_ctx().begin();
 2816|   367k|    detail::parse_format_string<false>(format, handler);
 2817|   367k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 261k]
  |  |  ------------------
  ------------------
 2818|   105k|        return unexpected(err.error());
 2819|   105k|    }
 2820|   261k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|  2.35M|    {
 2799|  2.35M|        return ctx.get();
 2800|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|  2.35M|    {
 2606|  2.35M|        return ctx;
 2607|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   628k|    {
 2681|   628k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 628k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   628k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|   367k|{
 2453|   367k|    auto arg = ctx.arg(id);
 2454|   367k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   367k|    return arg;
 2458|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|   367k|    {
 2721|   367k|        return parse_ctx.next_arg_id();
 2722|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|   367k|    {
 2761|   367k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   367k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   367k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 367k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   367k|        auto specs = detail::format_specs{};
 2774|   367k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   367k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   367k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   367k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   367k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 367k]
  |  Branch (2779:29): [True: 0, False: 367k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   367k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   367k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   367k|        on_visit_scan_arg(
 2791|   367k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   367k|                                           get_ctx().locale()},
 2793|   367k|            arg);
 2794|   367k|        return parse_ctx.begin();
 2795|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2470|   367k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   367k|    {
 2472|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   367k|    {
 2732|   367k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 367k]
  |  Branch (2732:13): [True: 0, False: 367k]
  |  Branch (2732:29): [True: 0, False: 367k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   367k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   367k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 261k]
  |  |  ------------------
  ------------------
 2739|   105k|            on_error(r.error());
 2740|   105k|        }
 2741|   261k|        else {
 2742|   261k|            get_ctx().advance_to(*r);
 2743|   261k|        }
 2744|   367k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   502k|{
 2930|   502k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 365k, False: 137k]
  |  |  ------------------
  ------------------
 2931|   365k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   365k|    }
 2937|   137k|    else {
 2938|   137k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|   137k|    }
 2944|   502k|    return result;
 2945|   502k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  50.0k|{
 2876|  50.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  50.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  51.1k|{
 2876|  51.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  51.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  45.2k|{
 2876|  45.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  45.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  45.1k|{
 2876|  45.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  45.1k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|  1.76k|{
 1487|  1.76k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|  1.76k|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|  1.76k|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|  1.76k|            return transcode_to_string_impl_to32(src, dest);
 1498|  1.76k|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|  1.76k|    SCN_EXPECT(false);
  ------------------
  |  | 1079|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|  1.76k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|  1.76k|{
 1379|  1.76k|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|  1.76k|    auto it = src.begin();
 1382|   374k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 372k, False: 1.76k]
  ------------------
 1383|   372k|        auto res = get_next_code_point(
 1384|   372k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   372k|                                                                 src.end()));
 1386|   372k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.63k, False: 371k]
  |  |  ------------------
  ------------------
 1387|  1.63k|            dest.push_back(DestCharT{0xfffd});
 1388|  1.63k|        }
 1389|   371k|        else {
 1390|   371k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   371k|        }
 1392|   372k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   372k|    }
 1394|  1.76k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   648k|{
 1303|   648k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   648k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   648k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   648k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   648k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.9k, False: 623k]
  |  |  ------------------
  ------------------
 1307|  24.9k|        return {get_start_for_next_code_point(input),
 1308|  24.9k|                detail::invalid_code_point};
 1309|  24.9k|    }
 1310|   623k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.93k, False: 620k]
  |  |  ------------------
  ------------------
 1311|  2.93k|        return {input.end(), detail::invalid_code_point};
 1312|  2.93k|    }
 1313|       |
 1314|   620k|    return {input.begin() + len,
 1315|   620k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   623k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  24.9k|{
 1289|  24.9k|    auto it = input.begin();
 1290|   125k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 118k, False: 7.24k]
  ------------------
 1291|   118k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 17.7k, False: 100k]
  ------------------
 1292|  17.7k|            break;
 1293|  17.7k|        }
 1294|   118k|    }
 1295|  24.9k|    return it;
 1296|  24.9k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  817|  18.8M|    constexpr parse_error(code c) : m_code(c)
  818|  18.8M|    {
  819|  18.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  18.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  820|  18.8M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  832|  8.55M|    {
  833|  8.55M|        return a.m_code == b.m_code;
  834|  8.55M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  836|  2.22M|    {
  837|  2.22M|        return !(a == b);
  838|  2.22M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1851|  1.60M|    clocale_restorer(int cat) : m_category(cat)
 1852|  1.60M|    {
 1853|  1.60M|        const auto loc = std::setlocale(cat, nullptr);
 1854|  1.60M|        std::strcpy(m_locbuf, loc);
 1855|  1.60M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1857|  1.60M|    {
 1858|       |        // Restore locale to what it was before
 1859|  1.60M|        std::setlocale(m_category, m_locbuf);
 1860|  1.60M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1880|  1.60M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1881|  1.60M|    {
 1882|  1.60M|        std::setlocale(cat, "C");
 1883|  1.60M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|  1.50M|    {
 3114|  1.50M|        return m_msg == nullptr;
 3115|  1.50M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3760|  1.48M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  10.8M|{
  458|  10.8M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  10.8M|        static_cast<unsigned char>(ch))];
  460|  10.8M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   403k|{
  469|   403k|    return static_cast<unsigned char>(ch) <= 127;
  470|   403k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|  2.52M|{
  538|  2.52M|    SCN_GCC_PUSH
  539|  2.52M|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|  2.52M|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|  2.52M|    SCN_GCC_POP
  542|  2.52M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  6.85M|{
  794|  6.85M|    return e != eof_error::good;
  795|  6.85M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  28.7k|{
  808|  28.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  28.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  28.7k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  854|   196k|{
  855|   196k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  856|   196k|    return parse_error::eof;
  857|   196k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  863|  2.22M|{
  864|  2.22M|    if (err == parse_error::good) {
  ------------------
  |  Branch (864:9): [True: 0, False: 2.22M]
  ------------------
  865|      0|        return {};
  866|      0|    }
  867|       |
  868|  2.22M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (868:9): [True: 75.1k, False: 2.14M]
  ------------------
  869|  75.1k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  870|  75.1k|    }
  871|       |
  872|  2.14M|    return detail::unexpected_scan_error(code, msg);
  873|  2.22M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  877|  2.22M|{
  878|  2.22M|    return [code, msg](parse_error err) {
  879|  2.22M|        assert(err != parse_error::good);
  880|  2.22M|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  2.22M|    };
  882|  2.22M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2381|  1.32M|{
 2382|  1.32M|    unsigned char running_diff{0};
 2383|  4.98M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2383:24): [True: 3.66M, False: 1.32M]
  ------------------
 2384|  3.66M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2385|  3.66M|    }
 2386|  1.32M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2386:12): [True: 38.8k, False: 1.28M]
  |  Branch (2386:33): [True: 19.2k, False: 1.26M]
  ------------------
 2387|  1.32M|}
_ZN3scn2v44impl11char_to_intEc:
 3302|  7.54M|{
 3303|  7.54M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3304|  7.54M|}
_ZN3scn2v44impl11char_to_intEw:
 3306|  2.79M|{
 3307|  2.79M|#if WCHAR_MIN < 0
 3308|  2.79M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3308:9): [True: 2.78M, False: 14.6k]
  |  Branch (3308:20): [True: 1.78M, False: 998k]
  ------------------
 3309|       |#else
 3310|       |    if (ch <= 255) {
 3311|       |#endif
 3312|  1.78M|        return char_to_int(static_cast<char>(ch));
 3313|  1.78M|    }
 3314|  1.01M|    return 255;
 3315|  2.79M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|  1.19M|{
 6146|  1.19M|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 0, False: 1.19M]
  ------------------
 6147|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 0, False: 0]
  ------------------
 6148|      0|            return detail::unexpected_scan_error(
 6149|      0|                scan_error::length_too_short,
 6150|      0|                "Scanned value too narrow, width did not exceed what "
 6151|      0|                "was specified in the format string");
 6152|      0|        }
 6153|      0|    }
 6154|  1.19M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 0, False: 1.19M]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|      0|                   specs.precision);
 6158|      0|    }
 6159|  1.19M|    return {};
 6160|  1.19M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.87M|    {
  304|  1.87M|        ranges::advance(x, n);
  305|  1.87M|        return x;
  306|  1.87M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.87M|    {
  268|  1.87M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.87M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.87M|    {
  151|  1.87M|        i += n;
  152|  1.87M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.23M|    {
  108|  2.23M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.23M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.23M|    {
   87|  2.23M|        return s - i;
   88|  2.23M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.62M|    {
  304|  1.62M|        ranges::advance(x, n);
  305|  1.62M|        return x;
  306|  1.62M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.62M|    {
  268|  1.62M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.62M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.62M|    {
  151|  1.62M|        i += n;
  152|  1.62M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   485k|    {
  108|   485k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   485k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   485k|    {
   87|   485k|        return s - i;
   88|   485k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|  1.06M|    {
 3055|  1.06M|        return m_current;
 3056|  1.06M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|   996k|    {
 3055|   996k|        return m_current;
 3056|   996k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   555k|{
  993|   555k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   555k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   555k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   555k|        auto beg = r.begin();
 1004|   555k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 555k, False: 0]
  ------------------
 1005|   555k|            return false;
 1006|   555k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   555k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|  1.44M|{
 1982|  1.44M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  1.44M|    else {
 1993|  1.44M|        auto it = range.begin();
 1994|  1.44M|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 874k, False: 567k]
  ------------------
 1995|   874k|            return ranges::next(it, count);
 1996|   874k|        }
 1997|       |
 1998|  2.22M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 1.69M, False: 537k]
  ------------------
 1999|  1.69M|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 29.1k, False: 1.66M]
  ------------------
 2000|  29.1k|                return unexpected(eof_error::eof);
 2001|  29.1k|            }
 2002|  1.69M|        }
 2003|       |
 2004|   537k|        return it;
 2005|   567k|    }
 2006|  1.44M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|  1.44M|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|  1.44M|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|  1.44M|        else {
 1125|  1.44M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 1.44M, False: 0]
  ------------------
 1126|  1.44M|                return static_cast<size_t>(
 1127|  1.44M|                    r.begin().parent()->chars_available() -
 1128|  1.44M|                    r.begin().position());
 1129|  1.44M|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|  1.44M|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|  1.44M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  10.0M|    {
  773|  10.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  10.0M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.30M|        : m_fptr([](storage fn,
  753|  1.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.30M|              cvref<T> obj = *get<T>(fn);
  755|  1.30M|              if constexpr (std::is_void_v<R>) {
  756|  1.30M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.30M|              }
  758|  1.30M|              else {
  759|  1.30M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.30M|              }
  761|  1.30M|          }),
  762|  1.30M|          m_storage(std::addressof(f))
  763|  1.30M|    {
  764|  1.30M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  5.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.01M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.01M|              else {
  759|  5.01M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.01M|              }
  761|  5.01M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  5.01M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  5.01M|        else if constexpr (std::is_object_v<T>) {
  694|  5.01M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.01M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.30M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.30M|        {
  668|  1.30M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  6.41M|    {
  773|  6.41M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  6.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  6.41M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.48M|        : m_fptr([](storage fn,
  753|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.48M|              cvref<T> obj = *get<T>(fn);
  755|  1.48M|              if constexpr (std::is_void_v<R>) {
  756|  1.48M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.48M|              }
  758|  1.48M|              else {
  759|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.48M|              }
  761|  1.48M|          }),
  762|  1.48M|          m_storage(std::addressof(f))
  763|  1.48M|    {
  764|  1.48M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|  2.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.55M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.55M|              else {
  759|  2.55M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.55M|              }
  761|  2.55M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|  2.55M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  2.55M|        else if constexpr (std::is_object_v<T>) {
  694|  2.55M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.55M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.48M|        {
  668|  1.48M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   402k|    {
 6174|   402k|        const bool need_skipped_width =
 6175|   402k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 402k]
  |  Branch (6175:33): [True: 0, False: 402k]
  ------------------
 6176|   402k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   402k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 402k]
  ------------------
 6180|   402k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 402k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   402k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 402k, False: 0]
  |  Branch (6184:56): [True: 402k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   402k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 402k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   796k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   402k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   402k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   402k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 7.64k, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  7.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  7.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  7.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  7.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  7.64k|    }                                                  \
  |  |  |  | 3995|   402k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   796k|                            make_eof_scan_error));
 6195|       |
 6196|   796k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 394k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   394k|            return result_type{it, 0};
 6204|   796k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   402k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  1.01M|{
 2134|  1.01M|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  1.01M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  1.01M|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  1.01M|    else {
 2105|  1.01M|        auto first = range.begin();
 2106|  3.85M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 3.84M, False: 14.1k]
  ------------------
 2107|  3.84M|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 997k, False: 2.84M]
  ------------------
 2108|   997k|                return first;
 2109|   997k|            }
 2110|  3.84M|        }
 2111|  14.1k|        return first;
 2112|  1.01M|    }
 2113|  1.01M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   859k|    {
  108|   859k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   859k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   859k|    {
   94|   859k|        iter_difference_t<I> counter{0};
   95|  5.87M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 5.02M, False: 859k]
  ------------------
   96|  5.02M|            ++i;
   97|  5.02M|            ++counter;
   98|  5.02M|        }
   99|   859k|        return counter;
  100|   859k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  878|  2.22M|    return [code, msg](parse_error err) {
  879|  2.22M|        assert(err != parse_error::good);
  880|  2.22M|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  2.22M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1904|   207k|    {
 1905|   207k|        auto stdloc = loc.get<std::locale>();
 1906|   207k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|   207k|        grouping = numpunct.grouping();
 1908|   207k|        thousands_sep =
 1909|   207k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 207k]
  ------------------
 1910|   207k|        decimal_point = numpunct.decimal_point();
 1911|   207k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1841|   207k|{
 1842|   207k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 207k, False: 0]
  ------------------
 1843|   207k|        return std::use_facet<Facet>(stdloc);
 1844|   207k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|   207k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|  1.49M|{
 1971|  1.49M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 1.48M]
  |  |  ------------------
  ------------------
 1972|  10.7k|        return unexpected(e);
 1973|  10.7k|    }
 1974|       |
 1975|  1.48M|    return ranges::next(range.begin());
 1976|  1.49M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  2.20M|{
  961|  2.20M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.5k, False: 2.18M]
  |  |  ------------------
  ------------------
  962|  20.5k|        return eof_error::eof;
  963|  20.5k|    }
  964|  2.18M|    return eof_error::good;
  965|  2.20M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  3.02M|{
  955|  3.02M|    return is_range_eof(r.begin(), r.end());
  956|  3.02M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  3.02M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  3.02M|    {
  948|  3.02M|        return begin == end;
  949|  3.02M|    }
  950|  3.02M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.48M|    {
  296|  1.48M|        ++x;
  297|  1.48M|        return x;
  298|  1.48M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   584k|{
 3321|   584k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   584k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 450k, False: 133k]
  ------------------
 3323|   450k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 450k, False: 204]
  ------------------
 3324|   450k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   450k|        }
 3326|    204|        return unexpected(eof_error::eof);
 3327|   450k|    }
 3328|       |
 3329|   133k|    auto& it = *r;
 3330|   133k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 61.6k, False: 71.9k]
  ------------------
 3331|  61.6k|        return std::pair{it, sign_type::minus_sign};
 3332|  61.6k|    }
 3333|  71.9k|    return std::pair{it, sign_type::plus_sign};
 3334|   133k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|   994k|{
 2435|   994k|    auto it = read_code_unit(range);
 2436|   994k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   994k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.34k, False: 988k]
  |  |  ------------------
  ------------------
 2437|  5.34k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  5.34k|    }
 2439|       |
 2440|  1.88M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.88M, False: 816k]
  ------------------
 2441|  1.88M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 171k, False: 1.71M]
  ------------------
 2442|   171k|            return *it;
 2443|   171k|        }
 2444|  1.88M|    }
 2445|       |
 2446|   816k|    return unexpected(parse_error::error);
 2447|   988k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|  1.44M|{
 2393|  1.44M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.44M|    else {
 2407|  1.44M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.44M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.44M|                return ch;
 2410|  1.44M|            }
 2411|  1.44M|            return static_cast<char_type>(ch +
 2412|  1.44M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.44M|        };
 2414|       |
 2415|  1.44M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 29.1k, False: 1.41M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  29.1k|    }                                                  \
  |  |  |  | 3995|  1.44M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.41M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.41M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.41M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.34M, False: 65.5k]
  |  |  ------------------
  ------------------
 2420|  1.41M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.41M|                    return ascii_tolower(a) ==
 2422|  1.41M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.41M|                }))) {
 2424|  1.34M|            return unexpected(parse_error::error);
 2425|  1.34M|        }
 2426|       |
 2427|  65.5k|        return it;
 2428|  1.41M|    }
 2429|  1.44M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2407|  1.65M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.65M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.42M, False: 227k]
  |  Branch (2408:29): [True: 156k, False: 70.6k]
  ------------------
 2409|  1.58M|                return ch;
 2410|  1.58M|            }
 2411|  70.6k|            return static_cast<char_type>(ch +
 2412|  70.6k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.65M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|   504k|{
 2308|   504k|    auto it = read_code_unit(range);
 2309|   504k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.37k, False: 498k]
  |  |  ------------------
  ------------------
 2310|  5.37k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  5.37k|    }
 2312|       |
 2313|   498k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 422k, False: 75.9k]
  |  |  ------------------
  ------------------
 2314|   498k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   422k|        return unexpected(parse_error::error);
 2316|   422k|    }
 2317|       |
 2318|  75.9k|    return *it;
 2319|   498k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|  1.00M|{
 2154|  1.00M|    auto it = read_while_code_unit(range, pred);
 2155|  1.00M|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 455k, False: 546k]
  ------------------
 2156|   455k|        return unexpected(parse_error::error);
 2157|   455k|    }
 2158|   546k|    return it;
 2159|  1.00M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1744|   460k|    {
 1745|   460k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   460k|                           ranges::common_range<Range>) {
 1762|   460k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   460k|            auto end_seg = range.end().contiguous_segment();
 1764|   460k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 57.5k, False: 402k]
  |  |  ------------------
  ------------------
 1765|   460k|                             detail::to_address(end_seg.end()))) {
 1766|  57.5k|                auto& str = m_storage.emplace();
 1767|  57.5k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  57.5k|                                                     range.begin().position()));
 1769|  57.5k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  57.5k|                m_view = string_view_type{str.data(), str.size()};
 1771|  57.5k|                return;
 1772|  57.5k|            }
 1773|       |
 1774|   402k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   402k|                                                            end_seg.data());
 1776|   402k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   460k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|  3.64M|    {
 1706|  3.64M|        return m_view;
 1707|  3.64M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|  2.11M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   343k|    {
 6216|   343k|        const bool need_skipped_width =
 6217|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 343k]
  |  Branch (6217:33): [True: 0, False: 343k]
  ------------------
 6218|   343k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   343k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 343k]
  ------------------
 6221|   343k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 343k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   343k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 343k, False: 0]
  ------------------
 6230|   343k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 343k]
  ------------------
 6231|   343k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   343k|        return result_type{rng.begin(), 0};
 6255|   343k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   777k|{
 1971|   777k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.97k, False: 774k]
  |  |  ------------------
  ------------------
 1972|  2.97k|        return unexpected(e);
 1973|  2.97k|    }
 1974|       |
 1975|   774k|    return ranges::next(range.begin());
 1976|   777k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|  1.46M|{
  961|  1.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 1.44M]
  |  |  ------------------
  ------------------
  962|  10.8k|        return eof_error::eof;
  963|  10.8k|    }
  964|  1.44M|    return eof_error::good;
  965|  1.46M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|  1.46M|{
  955|  1.46M|    return is_range_eof(r.begin(), r.end());
  956|  1.46M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|  1.47M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.47M|    {
  948|  1.47M|        return begin == end;
  949|  1.47M|    }
  950|  1.47M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   787k|    {
  296|   787k|        ++x;
  297|   787k|        return x;
  298|   787k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   525k|{
 3321|   525k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   525k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 404k, False: 121k]
  ------------------
 3323|   404k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 403k, False: 60]
  ------------------
 3324|   403k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   403k|        }
 3326|     60|        return unexpected(eof_error::eof);
 3327|   404k|    }
 3328|       |
 3329|   121k|    auto& it = *r;
 3330|   121k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 59.8k, False: 61.7k]
  ------------------
 3331|  59.8k|        return std::pair{it, sign_type::minus_sign};
 3332|  59.8k|    }
 3333|  61.7k|    return std::pair{it, sign_type::plus_sign};
 3334|   121k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   607k|{
 2435|   607k|    auto it = read_code_unit(range);
 2436|   607k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 946, False: 606k]
  |  |  ------------------
  ------------------
 2437|    946|        return unexpected(make_eof_parse_error(it.error()));
 2438|    946|    }
 2439|       |
 2440|  1.14M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.14M, False: 473k]
  ------------------
 2441|  1.14M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 133k, False: 1.00M]
  ------------------
 2442|   133k|            return *it;
 2443|   133k|        }
 2444|  1.14M|    }
 2445|       |
 2446|   473k|    return unexpected(parse_error::error);
 2447|   606k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|  12.8k|{
 3407|  12.8k|    switch (base) {
 3408|      0|        case 2:
  ------------------
  |  Branch (3408:9): [True: 0, False: 12.8k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|      0|                    false};
 3412|       |
 3413|      0|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 0, False: 12.8k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|      0|            bool zero_parsed = false;
 3416|      0|            auto it = apply_opt(
 3417|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|      0|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|      0|        case 16:
  ------------------
  |  Branch (3421:9): [True: 0, False: 12.8k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|      0|                    false};
 3425|       |
 3426|      0|        case 0:
  ------------------
  |  Branch (3426:9): [True: 0, False: 12.8k]
  ------------------
 3427|       |            // detect base
 3428|      0|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  12.8k|        default:
  ------------------
  |  Branch (3430:9): [True: 12.8k, False: 0]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  12.8k|            return {range.begin(), base, false};
 3433|  12.8k|    }
 3434|  12.8k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  1.35M|{
 2393|  1.35M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|  1.35M|                  std::is_same_v<char_type, char>) {
 2397|  1.35M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2397:13): [True: 29.8k, False: 1.32M]
  ------------------
 2398|  29.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|  29.8k|        }
 2400|  1.32M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2400:13): [True: 1.26M, False: 58.0k]
  ------------------
 2401|  1.26M|            return unexpected(parse_error::error);
 2402|  1.26M|        }
 2403|  58.0k|        return ranges::next(range.begin(),
 2404|  58.0k|                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|       |    else {
 2407|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|       |            if (ch < 'A' || ch > 'Z') {
 2409|       |                return ch;
 2410|       |            }
 2411|       |            return static_cast<char_type>(ch +
 2412|       |                                          static_cast<char_type>('a' - 'A'));
 2413|       |        };
 2414|       |
 2415|       |        SCN_TRY(it, read_exactly_n_code_units(
 2416|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|       |                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|       |        if (SCN_UNLIKELY(!std::equal(
 2420|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|       |                    return ascii_tolower(a) ==
 2422|       |                           static_cast<detail::char_t<Range>>(b);
 2423|       |                }))) {
 2424|       |            return unexpected(parse_error::error);
 2425|       |        }
 2426|       |
 2427|       |        return it;
 2428|       |    }
 2429|  1.35M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|   170k|{
 2308|   170k|    auto it = read_code_unit(range);
 2309|   170k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.02k, False: 168k]
  |  |  ------------------
  ------------------
 2310|  2.02k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  2.02k|    }
 2312|       |
 2313|   168k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 137k, False: 31.2k]
  |  |  ------------------
  ------------------
 2314|   168k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   137k|        return unexpected(parse_error::error);
 2316|   137k|    }
 2317|       |
 2318|  31.2k|    return *it;
 2319|   168k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|  12.8k|{
 3474|  12.8k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|  12.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|  12.8k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|  12.8k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|  12.8k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
 3479|      0|            return detail::unexpected_scan_error(
 3480|      0|                scan_error::invalid_scanned_value,
 3481|      0|                "Failed to parse integer: No digits found");
 3482|      0|        }
 3483|  12.8k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|  12.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|  12.8k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  12.8k|                  ranges::sized_range<Range>) {
 1811|  12.8k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  12.8k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  12.8k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  12.8k|    {
 1614|  12.8k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  2.70M|    {
 1627|  2.70M|        return sv;
 1628|  2.70M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|   296k|{
 2134|   296k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   296k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|   296k|{
 2101|   296k|    if constexpr (ranges::common_range<Range>) {
 2102|   296k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|   296k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   519k|{
 3129|   519k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 519k, False: 0]
  ------------------
 3130|   519k|        auto it = read_while_classic_space(range);
 3131|   519k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   519k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.10k, False: 513k]
  |  |  ------------------
  ------------------
 3133|  6.10k|            return unexpected(e);
 3134|  6.10k|        }
 3135|       |
 3136|   513k|        return it;
 3137|   519k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   519k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   519k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|   519k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|   519k|        auto buf = make_contiguous_buffer(range);
 2281|   519k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|   519k|        return ranges::next(range.begin(),
 2283|   519k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|   519k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   519k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   519k|                  ranges::sized_range<Range>) {
 1811|   519k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   519k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|   519k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   519k|    {
 1614|   519k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.43M|    {
  304|  1.43M|        ranges::advance(x, n);
  305|  1.43M|        return x;
  306|  1.43M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.91M|    {
  268|  1.91M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.91M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.91M|    {
  181|  7.36M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 5.45M, False: 1.91M]
  ------------------
  182|  5.45M|            ++i;
  183|  5.45M|        }
  184|  1.91M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   130k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   130k|            auto rd = make_reader<T, char_type>();
 6336|   130k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   130k|    do {                                                            \
  |  | 3985|   130k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 130k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   130k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   130k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 130k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   130k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   130k|                return impl(rd, range, value);
 6341|   130k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   130k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|   773k|    {
 3219|   773k|        reader_error_handler eh{};
 3220|   773k|        get_derived().check_specs_impl(specs, eh);
 3221|   773k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 773k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   773k|        return {};
 3226|   773k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3230|   773k|    {
 3231|   773k|        return static_cast<Derived&>(*this);
 3232|   773k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|   773k|    {
 4273|   773k|        detail::check_float_type_specs(specs, eh);
 4274|   773k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   130k|    {
 6261|   130k|        const bool need_skipped_width =
 6262|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 130k]
  |  Branch (6262:33): [True: 0, False: 130k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   130k|        auto it = rng.begin();
 6266|   130k|        std::ptrdiff_t prefix_width = 0;
 6267|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 130k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   130k|        else {
 6275|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.30k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.30k|    }                                                  \
  |  |  |  | 3995|   130k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   127k|            std::tie(it, prefix_width) = prefix_result;
 6277|   127k|        }
 6278|   127k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   127k|        std::ptrdiff_t value_width = 0;
 6282|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 127k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   127k|        else {
 6298|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.3k, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.3k|    }                                                  \
  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   112k|                                             specs, value, loc));
 6300|       |
 6301|   112k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 112k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   112k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   112k|        std::ptrdiff_t postfix_width = 0;
 6310|   112k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 110k, False: 1.65k]
  ------------------
 6311|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   110k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   110k|                                 value_width));
 6315|   110k|            std::tie(it, postfix_width) = postfix_result;
 6316|   110k|        }
 6317|       |
 6318|   112k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   112k|    do {                                                            \
  |  | 3985|   112k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   112k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   112k|            specs, prefix_width, value_width, postfix_width));
 6320|   112k|        return it;
 6321|   112k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3213|  1.73M|    {
 3214|  1.73M|        return true;
 3215|  1.73M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4346|   760k|    {
 4347|   760k|        unsigned options{};
 4348|   760k|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 207k, False: 552k]
  ------------------
 4349|   207k|            options |= float_reader_base::allow_thsep;
 4350|   207k|        }
 4351|       |
 4352|   760k|        SCN_GCC_COMPAT_PUSH
 4353|   760k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|   760k|        switch (specs.type) {
 4356|   122k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 122k, False: 637k]
  ------------------
 4357|   122k|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|  28.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 28.0k, False: 732k]
  ------------------
 4360|  28.0k|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|   225k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 225k, False: 534k]
  ------------------
 4363|   225k|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|   176k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 176k, False: 583k]
  ------------------
 4366|   176k|                return options | float_reader_base::allow_scientific |
 4367|   176k|                       float_reader_base::allow_fixed;
 4368|       |
 4369|   207k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 207k, False: 552k]
  ------------------
 4370|   207k|                return options | float_reader_base::allow_scientific |
 4371|   207k|                       float_reader_base::allow_fixed |
 4372|   207k|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 760k]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|   760k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|   760k|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|   760k|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3775|   760k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1895|  1.05M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1655|  2.11M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3806|   315k|    {
 3807|   315k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   315k|        const std::ptrdiff_t sign_len =
 3810|   315k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 74.8k, False: 240k]
  ------------------
 3811|       |
 3812|   315k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   315k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   315k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   315k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.7k, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.7k|    }                                                  \
  |  |  |  | 3995|   315k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   302k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   315k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4163|   974k|    {
 4164|   974k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 974k, False: 0]
  ------------------
 4165|   974k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 974k, False: 0]
  ------------------
 4166|   974k|            return;
 4167|   974k|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1710|  1.91M|    {
 1711|  1.91M|        return m_storage.has_value();
 1712|  1.91M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1715|  1.05M|    {
 1716|  1.05M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.05M|        return *m_storage;
 1718|  1.05M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   127k|    {
 4298|   127k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   127k|#if !SCN_DISABLE_LOCALE
 4301|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 34.6k, False: 93.0k]
  ------------------
 4302|  34.6k|            return read_impl<Range>(
 4303|  34.6k|                range, rd,
 4304|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  34.6k|                },
 4307|  34.6k|                value, loc);
 4308|  34.6k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  93.0k|        return read_impl<Range>(
 4314|  93.0k|            range, rd,
 4315|  93.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.0k|                return r.read_source(SCN_FWD(args)...);
 4317|  93.0k|            },
 4318|  93.0k|            value);
 4319|   127k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   176k|    {
 4336|   176k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   176k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 17.9k, False: 158k]
  |  |  ------------------
  ------------------
 4338|  17.9k|            return unexpected(r.error());
 4339|  17.9k|        }
 4340|       |
 4341|   158k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.06k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.06k|    }                                                  \
  |  |  |  | 3995|   176k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   156k|        return ranges::next(range.begin(), n);
 4343|   158k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  772|   545k|    {
  773|   545k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   545k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  34.6k|        : m_fptr([](storage fn,
  753|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  34.6k|              cvref<T> obj = *get<T>(fn);
  755|  34.6k|              if constexpr (std::is_void_v<R>) {
  756|  34.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  34.6k|              }
  758|  34.6k|              else {
  759|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  34.6k|              }
  761|  34.6k|          }),
  762|  34.6k|          m_storage(std::addressof(f))
  763|  34.6k|    {
  764|  34.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  34.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  34.6k|              else {
  759|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  34.6k|              }
  761|  34.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  34.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  34.6k|        else if constexpr (std::is_object_v<T>) {
  694|  34.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  34.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  34.6k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3794|   108k|    {
 3795|   108k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|   108k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 108k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|   108k|        return read_source_impl(range);
 3801|   108k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3820|   545k|    {
 3821|   545k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   545k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   545k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   545k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 545k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   545k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   545k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   545k|        auto it = sign_result.first;
 3824|   545k|        m_sign = sign_result.second;
 3825|       |
 3826|   545k|        auto digits_begin = it;
 3827|   545k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|   545k|        else {
 3854|   545k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|   545k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   545k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 55.3k, False: 490k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  55.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  55.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  55.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  55.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  55.3k|    }                                                  \
  |  | 3995|   545k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|   490k|                it,
 3856|   490k|                do_read_source_impl(
 3857|   490k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|   490k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|   490k|        }
 3860|       |
 3861|   545k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   490k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 486k, False: 4.02k]
  |  Branch (3863:48): [True: 484k, False: 2.30k]
  ------------------
 3864|   490k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 458k, False: 25.5k]
  ------------------
 3865|   490k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 450k, False: 8.11k]
  ------------------
 3866|   450k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   450k|        }
 3868|       |
 3869|   490k|        handle_separators();
 3870|       |
 3871|   490k|        return it;
 3872|   545k|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4106|   545k|    {
 4107|   545k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   545k|        const bool allowed_nonhex =
 4109|   545k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   545k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   545k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 539k, False: 6.32k]
  |  Branch (4112:45): [True: 0, False: 539k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   545k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 6.32k, False: 539k]
  ------------------
 4118|  6.32k|            return *r;
 4119|  6.32k|        }
 4120|       |
 4121|   539k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 505k, False: 33.7k]
  |  Branch (4121:45): [True: 1.50k, False: 504k]
  ------------------
 4122|  1.50k|            return unexpected(r.error());
 4123|  1.50k|        }
 4124|   537k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 33.7k, False: 504k]
  ------------------
 4125|  33.7k|            return *r;
 4126|  33.7k|        }
 4127|       |
 4128|   504k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 349k, False: 154k]
  |  Branch (4128:28): [True: 109k, False: 240k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|   109k|            auto it = range.begin();
 4132|       |
 4133|   109k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 6.45k, False: 102k]
  ------------------
 4134|  6.45k|                m_kind = float_kind::hex_with_prefix;
 4135|  6.45k|                it = *r;
 4136|  6.45k|            }
 4137|   102k|            else {
 4138|   102k|                m_kind = float_kind::hex_without_prefix;
 4139|   102k|            }
 4140|       |
 4141|   109k|            return read_hex(ranges::subrange{it, range.end()});
 4142|   109k|        }
 4143|   394k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 154k, False: 240k]
  |  Branch (4143:29): [True: 154k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   154k|            m_kind = float_kind::generic;
 4147|   154k|            return read_regular_float(range);
 4148|   154k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   240k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 15.2k, False: 224k]
  |  |  ------------------
  ------------------
 4154|  15.2k|            m_kind = float_kind::hex_with_prefix;
 4155|  15.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4156|  15.2k|        }
 4157|       |
 4158|   224k|        m_kind = float_kind::generic;
 4159|   224k|        return read_regular(range);
 4160|   240k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3914|   545k|    {
 3915|   545k|        auto it = range.begin();
 3916|   545k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 539k, False: 6.32k]
  ------------------
 3917|   539k|            return unexpected(r.error());
 3918|   539k|        }
 3919|  6.32k|        else {
 3920|  6.32k|            it = *r;
 3921|  6.32k|        }
 3922|       |
 3923|  6.32k|        if (auto r = read_matching_string_classic_nocase(
 3924|  6.32k|                ranges::subrange{it, range.end()}, "inity");
 3925|  6.32k|            !r) {
  ------------------
  |  Branch (3925:13): [True: 4.02k, False: 2.30k]
  ------------------
 3926|  4.02k|            m_kind = float_kind::inf_short;
 3927|  4.02k|            return it;
 3928|  4.02k|        }
 3929|  2.30k|        else {
 3930|  2.30k|            m_kind = float_kind::inf_long;
 3931|  2.30k|            return *r;
 3932|  2.30k|        }
 3933|  6.32k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3937|   539k|    {
 3938|   539k|        auto it = range.begin();
 3939|   539k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 504k, False: 35.2k]
  ------------------
 3940|   504k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   504k|                scan_error::invalid_scanned_value,
 3942|   504k|                "Invalid floating-point NaN value"));
 3943|   504k|        }
 3944|  35.2k|        else {
 3945|  35.2k|            it = *r;
 3946|  35.2k|        }
 3947|       |
 3948|  35.2k|        if (auto r =
 3949|  35.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|  35.2k|            !r) {
  ------------------
  |  Branch (3950:13): [True: 25.5k, False: 9.61k]
  ------------------
 3951|  25.5k|            m_kind = float_kind::nan_simple;
 3952|  25.5k|            return it;
 3953|  25.5k|        }
 3954|  9.61k|        else {
 3955|  9.61k|            it = *r;
 3956|  9.61k|        }
 3957|       |
 3958|  9.61k|        auto payload_beg_it = it;
 3959|  9.61k|        it = read_while_code_unit(
 3960|  9.61k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|  9.61k|                return is_ascii_char(ch) &&
 3962|  9.61k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|  9.61k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|  9.61k|            });
 3965|  9.61k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|  9.61k|        m_kind = float_kind::nan_with_payload;
 3968|  9.61k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 8.11k, False: 1.50k]
  ------------------
 3969|  9.61k|                                             ')')) {
 3970|  8.11k|            return *r;
 3971|  8.11k|        }
 3972|  1.50k|        return detail::unexpected_scan_error(
 3973|  1.50k|            scan_error::invalid_scanned_value,
 3974|  1.50k|            "Invalid floating-point NaN payload");
 3975|  9.61k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|  9.61k|        : m_fptr([](storage fn,
  753|  9.61k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  9.61k|              cvref<T> obj = *get<T>(fn);
  755|  9.61k|              if constexpr (std::is_void_v<R>) {
  756|  9.61k|                  obj(static_cast<decltype(args)>(args)...);
  757|  9.61k|              }
  758|  9.61k|              else {
  759|  9.61k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  9.61k|              }
  761|  9.61k|          }),
  762|  9.61k|          m_storage(std::addressof(f))
  763|  9.61k|    {
  764|  9.61k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|   206k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   206k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   206k|              else {
  759|   206k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   206k|              }
  761|   206k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  689|   206k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   206k|        else if constexpr (std::is_object_v<T>) {
  694|   206k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   206k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3960|   206k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|   206k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3961:24): [True: 206k, False: 89]
  ------------------
 3962|   206k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3962:26): [True: 198k, False: 8.51k]
  |  Branch (3962:39): [True: 189k, False: 8.77k]
  |  Branch (3962:54): [True: 3.08k, False: 14.2k]
  |  Branch (3962:67): [True: 3.00k, False: 83]
  ------------------
 3963|   206k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3963:26): [True: 5.73k, False: 8.55k]
  |  Branch (3963:39): [True: 2.93k, False: 2.80k]
  |  Branch (3963:53): [True: 2.72k, False: 8.63k]
  ------------------
 3964|   206k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  9.61k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  9.61k|        {
  668|  9.61k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3907|   349k|    {
 3908|   349k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   349k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4008|   124k|    {
 4009|   124k|        auto it = range.begin();
 4010|       |
 4011|   124k|        std::ptrdiff_t digits_count = 0;
 4012|   124k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|   124k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.16k, False: 117k]
  |  |  ------------------
  ------------------
 4014|  7.16k|            return r.transform_error(map_parse_error_to_scan_error(
 4015|  7.16k|                scan_error::invalid_scanned_value,
 4016|  7.16k|                "Invalid hexadecimal floating-point value"));
 4017|  7.16k|        }
 4018|   117k|        else {
 4019|   117k|            digits_count += ranges::distance(it, *r);
 4020|   117k|            it = *r;
 4021|   117k|        }
 4022|       |
 4023|   117k|        m_integral_part_length = digits_count;
 4024|   117k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 12.9k, False: 104k]
  ------------------
 4025|   117k|                                             m_locale_options.decimal_point)) {
 4026|  12.9k|            it = *r;
 4027|  12.9k|        }
 4028|       |
 4029|   117k|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 11.0k, False: 106k]
  ------------------
 4030|   117k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|  11.0k|            digits_count += ranges::distance(it, *r);
 4032|  11.0k|            it = *r;
 4033|  11.0k|        }
 4034|       |
 4035|   117k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|   117k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|   117k|        return it;
 4044|   117k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3892|   242k|    {
 3893|   242k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 242k]
  |  |  |  Branch (1014:45): [True: 0, False: 242k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|   242k|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|   242k|        return read_while1_code_unit(
 3902|   242k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|   242k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   242k|        : m_fptr([](storage fn,
  753|   242k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   242k|              cvref<T> obj = *get<T>(fn);
  755|   242k|              if constexpr (std::is_void_v<R>) {
  756|   242k|                  obj(static_cast<decltype(args)>(args)...);
  757|   242k|              }
  758|   242k|              else {
  759|   242k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   242k|              }
  761|   242k|          }),
  762|   242k|          m_storage(std::addressof(f))
  763|   242k|    {
  764|   242k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|   902k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   902k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   902k|              else {
  759|   902k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   902k|              }
  761|   902k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  689|   902k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   902k|        else if constexpr (std::is_object_v<T>) {
  694|   902k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   902k|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3902|   902k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   242k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   242k|        {
  668|   242k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3980|   410k|    {
 3981|   410k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 38.4k, False: 371k]
  ------------------
 3982|  38.4k|            auto beg_exp_it = range.begin();
 3983|  38.4k|            auto it = *r;
 3984|       |
 3985|  38.4k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 38.2k, False: 204]
  ------------------
 3986|  38.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  38.2k|                it = r_sign->first;
 3988|  38.2k|            }
 3989|       |
 3990|  38.4k|            if (auto r_exp = read_while1_code_unit(
 3991|  38.4k|                    ranges::subrange{it, range.end()},
 3992|  38.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  38.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.59k, False: 36.8k]
  |  |  ------------------
  ------------------
 3994|  1.59k|                it = beg_exp_it;
 3995|  1.59k|            }
 3996|  36.8k|            else {
 3997|  36.8k|                it = *r_exp;
 3998|  36.8k|            }
 3999|       |
 4000|  38.4k|            return it;
 4001|  38.4k|        }
 4002|   371k|        return range.begin();
 4003|   410k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|  38.4k|        : m_fptr([](storage fn,
  753|  38.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  38.4k|              cvref<T> obj = *get<T>(fn);
  755|  38.4k|              if constexpr (std::is_void_v<R>) {
  756|  38.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  38.4k|              }
  758|  38.4k|              else {
  759|  38.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  38.4k|              }
  761|  38.4k|          }),
  762|  38.4k|          m_storage(std::addressof(f))
  763|  38.4k|    {
  764|  38.4k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  753|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   119k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   119k|              else {
  759|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   119k|              }
  761|   119k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  689|   119k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   119k|        else if constexpr (std::is_object_v<T>) {
  694|   119k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   119k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3992|   119k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|  38.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  38.4k|        {
  668|  38.4k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4049|   379k|    {
 4050|   379k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   379k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 320k, False: 58.7k]
  |  Branch (4051:50): [True: 12.8k, False: 307k]
  ------------------
 4052|       |
 4053|   379k|        auto it = ranges::begin(range);
 4054|   379k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   379k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   379k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.6k, False: 341k]
  |  |  ------------------
  ------------------
 4058|  37.6k|            return r.transform_error(
 4059|  37.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  37.6k|                                              "Invalid floating-point value"));
 4061|  37.6k|        }
 4062|   341k|        else {
 4063|   341k|            digits_count += ranges::distance(it, *r);
 4064|   341k|            it = *r;
 4065|   341k|        }
 4066|       |
 4067|   341k|        m_integral_part_length = digits_count;
 4068|   341k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 45.2k, False: 296k]
  ------------------
 4069|   341k|                                             m_locale_options.decimal_point)) {
 4070|  45.2k|            it = *r;
 4071|  45.2k|        }
 4072|       |
 4073|   341k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 39.4k, False: 302k]
  ------------------
 4074|   341k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  39.4k|            digits_count += ranges::distance(it, *r);
 4076|  39.4k|            it = *r;
 4077|  39.4k|        }
 4078|       |
 4079|   341k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   341k|        auto beg_exp_it = it;
 4086|   341k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 292k, False: 49.4k]
  ------------------
 4087|   292k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|   292k|        }
 4089|   341k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 12.0k, False: 329k]
  |  Branch (4089:29): [True: 8.98k, False: 3.09k]
  ------------------
 4090|  8.98k|            return detail::unexpected_scan_error(
 4091|  8.98k|                scan_error::invalid_scanned_value,
 4092|  8.98k|                "No exponent given to scientific float");
 4093|  8.98k|        }
 4094|       |
 4095|   332k|        m_kind =
 4096|   332k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 296k, False: 36.1k]
  ------------------
 4097|       |
 4098|   332k|        return it;
 4099|   341k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3877|   721k|    {
 3878|   721k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 721k]
  |  |  |  Branch (1014:45): [True: 0, False: 721k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   721k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   721k|        return read_while1_code_unit(
 3887|   721k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   721k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   721k|        : m_fptr([](storage fn,
  753|   721k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   721k|              cvref<T> obj = *get<T>(fn);
  755|   721k|              if constexpr (std::is_void_v<R>) {
  756|   721k|                  obj(static_cast<decltype(args)>(args)...);
  757|   721k|              }
  758|   721k|              else {
  759|   721k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   721k|              }
  761|   721k|          }),
  762|   721k|          m_storage(std::addressof(f))
  763|   721k|    {
  764|   721k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|  2.61M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.61M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.61M|              else {
  759|  2.61M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.61M|              }
  761|  2.61M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  689|  2.61M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  2.61M|        else if constexpr (std::is_object_v<T>) {
  694|  2.61M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.61M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3887|  2.61M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   721k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   721k|        {
  668|   721k|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1700|   460k|    {
 1701|   460k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   460k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  34.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  34.6k|        {
  668|  34.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  93.0k|        : m_fptr([](storage fn,
  753|  93.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.0k|              cvref<T> obj = *get<T>(fn);
  755|  93.0k|              if constexpr (std::is_void_v<R>) {
  756|  93.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  93.0k|              }
  758|  93.0k|              else {
  759|  93.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.0k|              }
  761|  93.0k|          }),
  762|  93.0k|          m_storage(std::addressof(f))
  763|  93.0k|    {
  764|  93.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  93.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  93.0k|              else {
  759|  93.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.0k|              }
  761|  93.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  93.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  93.0k|        else if constexpr (std::is_object_v<T>) {
  694|  93.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  93.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  93.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  93.0k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3780|   437k|    {
 3781|   437k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 437k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   437k|        return read_source_impl(range);
 3787|   437k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  93.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  93.0k|        {
  668|  93.0k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   118k|    {
 4298|   118k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   118k|#if !SCN_DISABLE_LOCALE
 4301|   118k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 31.5k, False: 87.2k]
  ------------------
 4302|  31.5k|            return read_impl<Range>(
 4303|  31.5k|                range, rd,
 4304|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  31.5k|                },
 4307|  31.5k|                value, loc);
 4308|  31.5k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  87.2k|        return read_impl<Range>(
 4314|  87.2k|            range, rd,
 4315|  87.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.2k|                return r.read_source(SCN_FWD(args)...);
 4317|  87.2k|            },
 4318|  87.2k|            value);
 4319|   118k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   166k|    {
 4336|   166k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   166k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 9.82k, False: 156k]
  |  |  ------------------
  ------------------
 4338|  9.82k|            return unexpected(r.error());
 4339|  9.82k|        }
 4340|       |
 4341|   156k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.7k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.7k|    }                                                  \
  |  |  |  | 3995|   166k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   145k|        return ranges::next(range.begin(), n);
 4343|   156k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|   513k|    {
  773|   513k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   513k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  31.5k|        : m_fptr([](storage fn,
  753|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.5k|              cvref<T> obj = *get<T>(fn);
  755|  31.5k|              if constexpr (std::is_void_v<R>) {
  756|  31.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  31.5k|              }
  758|  31.5k|              else {
  759|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.5k|              }
  761|  31.5k|          }),
  762|  31.5k|          m_storage(std::addressof(f))
  763|  31.5k|    {
  764|  31.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  31.5k|              else {
  759|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.5k|              }
  761|  31.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  31.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  31.5k|        else if constexpr (std::is_object_v<T>) {
  694|  31.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  31.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  31.5k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|  98.7k|    {
 3795|  98.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  98.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  98.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 98.7k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  98.7k|        return read_source_impl(range);
 3801|  98.7k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|   513k|    {
 3821|   513k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   513k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   513k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   513k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 513k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   513k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   513k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   513k|        auto it = sign_result.first;
 3824|   513k|        m_sign = sign_result.second;
 3825|       |
 3826|   513k|        auto digits_begin = it;
 3827|   513k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|   513k|                      ranges::sized_range<Range>) {
 3830|   513k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 513k]
  |  |  |  Branch (1014:45): [True: 0, False: 513k]
  |  |  |  Branch (1014:45): [True: 0, False: 513k]
  |  |  ------------------
  ------------------
 3831|   513k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|   513k|            else {
 3840|   513k|                auto cb = [&](const auto& rr)
 3841|   513k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   513k|                    auto res = read_all(rr);
 3843|   513k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|   513k|                        return detail::unexpected_scan_error(
 3845|   513k|                            scan_error::invalid_scanned_value,
 3846|   513k|                            "Invalid float value");
 3847|   513k|                    }
 3848|   513k|                    return res;
 3849|   513k|                };
 3850|   513k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|   513k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   513k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 30.0k, False: 483k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  30.0k|    }                                                  \
  |  | 3995|   513k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|   483k|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|   513k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   483k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 479k, False: 3.86k]
  |  Branch (3863:48): [True: 477k, False: 2.15k]
  ------------------
 3864|   483k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 452k, False: 25.0k]
  ------------------
 3865|   483k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 445k, False: 7.06k]
  ------------------
 3866|   445k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   445k|        }
 3868|       |
 3869|   483k|        handle_separators();
 3870|       |
 3871|   483k|        return it;
 3872|   513k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|   513k|    {
 3915|   513k|        auto it = range.begin();
 3916|   513k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 507k, False: 6.02k]
  ------------------
 3917|   507k|            return unexpected(r.error());
 3918|   507k|        }
 3919|  6.02k|        else {
 3920|  6.02k|            it = *r;
 3921|  6.02k|        }
 3922|       |
 3923|  6.02k|        if (auto r = read_matching_string_classic_nocase(
 3924|  6.02k|                ranges::subrange{it, range.end()}, "inity");
 3925|  6.02k|            !r) {
  ------------------
  |  Branch (3925:13): [True: 3.86k, False: 2.15k]
  ------------------
 3926|  3.86k|            m_kind = float_kind::inf_short;
 3927|  3.86k|            return it;
 3928|  3.86k|        }
 3929|  2.15k|        else {
 3930|  2.15k|            m_kind = float_kind::inf_long;
 3931|  2.15k|            return *r;
 3932|  2.15k|        }
 3933|  6.02k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|   507k|    {
 3938|   507k|        auto it = range.begin();
 3939|   507k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 473k, False: 33.6k]
  ------------------
 3940|   473k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   473k|                scan_error::invalid_scanned_value,
 3942|   473k|                "Invalid floating-point NaN value"));
 3943|   473k|        }
 3944|  33.6k|        else {
 3945|  33.6k|            it = *r;
 3946|  33.6k|        }
 3947|       |
 3948|  33.6k|        if (auto r =
 3949|  33.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|  33.6k|            !r) {
  ------------------
  |  Branch (3950:13): [True: 25.0k, False: 8.53k]
  ------------------
 3951|  25.0k|            m_kind = float_kind::nan_simple;
 3952|  25.0k|            return it;
 3953|  25.0k|        }
 3954|  8.53k|        else {
 3955|  8.53k|            it = *r;
 3956|  8.53k|        }
 3957|       |
 3958|  8.53k|        auto payload_beg_it = it;
 3959|  8.53k|        it = read_while_code_unit(
 3960|  8.53k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|  8.53k|                return is_ascii_char(ch) &&
 3962|  8.53k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|  8.53k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|  8.53k|            });
 3965|  8.53k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|  8.53k|        m_kind = float_kind::nan_with_payload;
 3968|  8.53k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 7.06k, False: 1.46k]
  ------------------
 3969|  8.53k|                                             ')')) {
 3970|  7.06k|            return *r;
 3971|  7.06k|        }
 3972|  1.46k|        return detail::unexpected_scan_error(
 3973|  1.46k|            scan_error::invalid_scanned_value,
 3974|  1.46k|            "Invalid floating-point NaN payload");
 3975|  8.53k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|  8.53k|        : m_fptr([](storage fn,
  753|  8.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  8.53k|              cvref<T> obj = *get<T>(fn);
  755|  8.53k|              if constexpr (std::is_void_v<R>) {
  756|  8.53k|                  obj(static_cast<decltype(args)>(args)...);
  757|  8.53k|              }
  758|  8.53k|              else {
  759|  8.53k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  8.53k|              }
  761|  8.53k|          }),
  762|  8.53k|          m_storage(std::addressof(f))
  763|  8.53k|    {
  764|  8.53k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  753|   196k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   196k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   196k|              else {
  759|   196k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   196k|              }
  761|   196k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  689|   196k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   196k|        else if constexpr (std::is_object_v<T>) {
  694|   196k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   196k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3960|   196k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|   196k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3961:24): [True: 196k, False: 89]
  ------------------
 3962|   196k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3962:26): [True: 189k, False: 7.44k]
  |  Branch (3962:39): [True: 180k, False: 8.55k]
  |  Branch (3962:54): [True: 2.96k, False: 13.0k]
  |  Branch (3962:67): [True: 2.88k, False: 83]
  ------------------
 3963|   196k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3963:26): [True: 5.62k, False: 7.48k]
  |  Branch (3963:39): [True: 2.82k, False: 2.80k]
  |  Branch (3963:53): [True: 2.72k, False: 7.56k]
  ------------------
 3964|   196k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  8.53k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  8.53k|        {
  668|  8.53k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|   326k|    {
 3908|   326k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   326k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|   287k|{
 2154|   287k|    auto it = read_while_code_unit(range, pred);
 2155|   287k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 134k, False: 152k]
  ------------------
 2156|   134k|        return unexpected(parse_error::error);
 2157|   134k|    }
 2158|   152k|    return it;
 2159|   287k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3980|  81.9k|    {
 3981|  81.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 11.9k, False: 69.9k]
  ------------------
 3982|  11.9k|            auto beg_exp_it = range.begin();
 3983|  11.9k|            auto it = *r;
 3984|       |
 3985|  11.9k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 11.9k, False: 60]
  ------------------
 3986|  11.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  11.9k|                it = r_sign->first;
 3988|  11.9k|            }
 3989|       |
 3990|  11.9k|            if (auto r_exp = read_while1_code_unit(
 3991|  11.9k|                    ranges::subrange{it, range.end()},
 3992|  11.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  11.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 608, False: 11.3k]
  |  |  ------------------
  ------------------
 3994|    608|                it = beg_exp_it;
 3995|    608|            }
 3996|  11.3k|            else {
 3997|  11.3k|                it = *r_exp;
 3998|  11.3k|            }
 3999|       |
 4000|  11.9k|            return it;
 4001|  11.9k|        }
 4002|  69.9k|        return range.begin();
 4003|  81.9k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  752|  11.9k|        : m_fptr([](storage fn,
  753|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  11.9k|              cvref<T> obj = *get<T>(fn);
  755|  11.9k|              if constexpr (std::is_void_v<R>) {
  756|  11.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  11.9k|              }
  758|  11.9k|              else {
  759|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  11.9k|              }
  761|  11.9k|          }),
  762|  11.9k|          m_storage(std::addressof(f))
  763|  11.9k|    {
  764|  11.9k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  753|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  34.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  34.9k|              else {
  759|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  34.9k|              }
  761|  34.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  689|  34.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  34.9k|        else if constexpr (std::is_object_v<T>) {
  694|  34.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  34.9k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3992|  34.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|  11.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  11.9k|        {
  668|  11.9k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|   147k|    {
 4050|   147k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   147k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 91.3k, False: 56.0k]
  |  Branch (4051:50): [True: 12.6k, False: 78.6k]
  ------------------
 4052|       |
 4053|   147k|        auto it = ranges::begin(range);
 4054|   147k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   147k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   147k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 19.0k, False: 128k]
  |  |  ------------------
  ------------------
 4058|  19.0k|            return r.transform_error(
 4059|  19.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  19.0k|                                              "Invalid floating-point value"));
 4061|  19.0k|        }
 4062|   128k|        else {
 4063|   128k|            digits_count += ranges::distance(it, *r);
 4064|   128k|            it = *r;
 4065|   128k|        }
 4066|       |
 4067|   128k|        m_integral_part_length = digits_count;
 4068|   128k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 15.6k, False: 112k]
  ------------------
 4069|   128k|                                             m_locale_options.decimal_point)) {
 4070|  15.6k|            it = *r;
 4071|  15.6k|        }
 4072|       |
 4073|   128k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 13.2k, False: 115k]
  ------------------
 4074|   128k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  13.2k|            digits_count += ranges::distance(it, *r);
 4076|  13.2k|            it = *r;
 4077|  13.2k|        }
 4078|       |
 4079|   128k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   128k|        auto beg_exp_it = it;
 4086|   128k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 81.9k, False: 46.3k]
  ------------------
 4087|  81.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|  81.9k|        }
 4089|   128k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 11.6k, False: 116k]
  |  Branch (4089:29): [True: 8.83k, False: 2.78k]
  ------------------
 4090|  8.83k|            return detail::unexpected_scan_error(
 4091|  8.83k|                scan_error::invalid_scanned_value,
 4092|  8.83k|                "No exponent given to scientific float");
 4093|  8.83k|        }
 4094|       |
 4095|   119k|        m_kind =
 4096|   119k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 108k, False: 11.3k]
  ------------------
 4097|       |
 4098|   119k|        return it;
 4099|   128k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|   275k|    {
 3878|   275k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 275k]
  |  |  |  Branch (1014:45): [True: 0, False: 275k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   275k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   275k|        return read_while1_code_unit(
 3887|   275k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   275k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|   275k|        : m_fptr([](storage fn,
  753|   275k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   275k|              cvref<T> obj = *get<T>(fn);
  755|   275k|              if constexpr (std::is_void_v<R>) {
  756|   275k|                  obj(static_cast<decltype(args)>(args)...);
  757|   275k|              }
  758|   275k|              else {
  759|   275k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   275k|              }
  761|   275k|          }),
  762|   275k|          m_storage(std::addressof(f))
  763|   275k|    {
  764|   275k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  753|   935k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   935k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   935k|              else {
  759|   935k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   935k|              }
  761|   935k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  689|   935k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   935k|        else if constexpr (std::is_object_v<T>) {
  694|   935k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   935k|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3887|   935k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   275k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   275k|        {
  668|   275k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|   513k|    {
 4107|   513k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   513k|        const bool allowed_nonhex =
 4109|   513k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   513k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   513k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 507k, False: 6.02k]
  |  Branch (4112:45): [True: 0, False: 507k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   513k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 6.02k, False: 507k]
  ------------------
 4118|  6.02k|            return *r;
 4119|  6.02k|        }
 4120|       |
 4121|   507k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 475k, False: 32.1k]
  |  Branch (4121:45): [True: 1.46k, False: 473k]
  ------------------
 4122|  1.46k|            return unexpected(r.error());
 4123|  1.46k|        }
 4124|   506k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 32.1k, False: 473k]
  ------------------
 4125|  32.1k|            return *r;
 4126|  32.1k|        }
 4127|       |
 4128|   473k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 326k, False: 147k]
  |  Branch (4128:28): [True: 99.0k, False: 227k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|  99.0k|            auto it = range.begin();
 4132|       |
 4133|  99.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 4.68k, False: 94.3k]
  ------------------
 4134|  4.68k|                m_kind = float_kind::hex_with_prefix;
 4135|  4.68k|                it = *r;
 4136|  4.68k|            }
 4137|  94.3k|            else {
 4138|  94.3k|                m_kind = float_kind::hex_without_prefix;
 4139|  94.3k|            }
 4140|       |
 4141|  99.0k|            return read_hex(ranges::subrange{it, range.end()});
 4142|  99.0k|        }
 4143|   374k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 147k, False: 227k]
  |  Branch (4143:29): [True: 147k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   147k|            m_kind = float_kind::generic;
 4147|   147k|            return read_regular_float(range);
 4148|   147k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   227k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.5k, False: 215k]
  |  |  ------------------
  ------------------
 4154|  11.5k|            m_kind = float_kind::hex_with_prefix;
 4155|  11.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4156|  11.5k|        }
 4157|       |
 4158|   215k|        m_kind = float_kind::generic;
 4159|   215k|        return read_regular(range);
 4160|   227k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|   326k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   326k|                    auto res = read_all(rr);
 3843|   326k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 687, False: 325k]
  |  |  ------------------
  ------------------
 3844|    687|                        return detail::unexpected_scan_error(
 3845|    687|                            scan_error::invalid_scanned_value,
 3846|    687|                            "Invalid float value");
 3847|    687|                    }
 3848|   325k|                    return res;
 3849|   326k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|   326k|{
 1964|   326k|    return ranges::next(range.begin(), range.end());
 1965|   326k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   326k|    {
  313|   326k|        ranges::advance(x, bound);
  314|   326k|        return x;
  315|   326k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   326k|    {
  275|   326k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   326k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   326k|    {
  190|   326k|        i = std::move(bound);
  191|   326k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|   453k|    {
 1701|   453k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   453k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1744|   453k|    {
 1745|   453k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|   453k|                      ranges::sized_range<Range>) {
 1750|   453k|            m_storage.reset();
 1751|   453k|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   453k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  31.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  31.5k|        {
  668|  31.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  87.2k|        : m_fptr([](storage fn,
  753|  87.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.2k|              cvref<T> obj = *get<T>(fn);
  755|  87.2k|              if constexpr (std::is_void_v<R>) {
  756|  87.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  87.2k|              }
  758|  87.2k|              else {
  759|  87.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.2k|              }
  761|  87.2k|          }),
  762|  87.2k|          m_storage(std::addressof(f))
  763|  87.2k|    {
  764|  87.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  87.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  87.2k|              else {
  759|  87.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.2k|              }
  761|  87.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  87.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  87.2k|        else if constexpr (std::is_object_v<T>) {
  694|  87.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  87.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  87.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  87.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  87.2k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|   414k|    {
 3781|   414k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   414k|        return read_source_impl(range);
 3787|   414k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  87.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  87.2k|        {
  668|  87.2k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   134k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   134k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   134k|            auto rd = make_reader<T, char_type>();
 6336|   134k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   134k|    do {                                                            \
  |  | 3985|   134k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   134k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   134k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 134k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   134k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   134k|                return impl(rd, range, value);
 6341|   134k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   134k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   134k|    {
 6261|   134k|        const bool need_skipped_width =
 6262|   134k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 134k]
  |  Branch (6262:33): [True: 0, False: 134k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   134k|        auto it = rng.begin();
 6266|   134k|        std::ptrdiff_t prefix_width = 0;
 6267|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 134k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   134k|        else {
 6275|   134k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.57k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.57k|    }                                                  \
  |  |  |  | 3995|   134k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   132k|            std::tie(it, prefix_width) = prefix_result;
 6277|   132k|        }
 6278|   132k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   132k|        std::ptrdiff_t value_width = 0;
 6282|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 132k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   132k|        else {
 6298|   132k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.0k, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.0k|    }                                                  \
  |  | 3995|   132k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   117k|                                             specs, value, loc));
 6300|       |
 6301|   117k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 117k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   117k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   117k|        std::ptrdiff_t postfix_width = 0;
 6310|   117k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 115k, False: 1.85k]
  ------------------
 6311|   115k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   115k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   115k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   115k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   115k|                                 value_width));
 6315|   115k|            std::tie(it, postfix_width) = postfix_result;
 6316|   115k|        }
 6317|       |
 6318|   117k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   117k|    do {                                                            \
  |  | 3985|   117k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   117k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   117k|            specs, prefix_width, value_width, postfix_width));
 6320|   117k|        return it;
 6321|   117k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|   327k|    {
 3807|   327k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   327k|        const std::ptrdiff_t sign_len =
 3810|   327k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 79.1k, False: 247k]
  ------------------
 3811|       |
 3812|   327k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 11.4k, False: 315k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  11.4k|    }                                                  \
  |  |  |  | 3995|   327k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   315k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   327k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   132k|    {
 4298|   132k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   132k|#if !SCN_DISABLE_LOCALE
 4301|   132k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 36.5k, False: 95.8k]
  ------------------
 4302|  36.5k|            return read_impl<Range>(
 4303|  36.5k|                range, rd,
 4304|  36.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  36.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  36.5k|                },
 4307|  36.5k|                value, loc);
 4308|  36.5k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  95.8k|        return read_impl<Range>(
 4314|  95.8k|            range, rd,
 4315|  95.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  95.8k|                return r.read_source(SCN_FWD(args)...);
 4317|  95.8k|            },
 4318|  95.8k|            value);
 4319|   132k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   183k|    {
 4336|   183k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   183k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.4k, False: 164k]
  |  |  ------------------
  ------------------
 4338|  18.4k|            return unexpected(r.error());
 4339|  18.4k|        }
 4340|       |
 4341|   164k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.19k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.19k|    }                                                  \
  |  |  |  | 3995|   183k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   163k|        return ranges::next(range.begin(), n);
 4343|   164k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  36.5k|        : m_fptr([](storage fn,
  753|  36.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  36.5k|              cvref<T> obj = *get<T>(fn);
  755|  36.5k|              if constexpr (std::is_void_v<R>) {
  756|  36.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  36.5k|              }
  758|  36.5k|              else {
  759|  36.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  36.5k|              }
  761|  36.5k|          }),
  762|  36.5k|          m_storage(std::addressof(f))
  763|  36.5k|    {
  764|  36.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  36.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  36.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  36.5k|              else {
  759|  36.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  36.5k|              }
  761|  36.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  36.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  36.5k|        else if constexpr (std::is_object_v<T>) {
  694|  36.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  36.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  36.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  36.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  36.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  36.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  36.5k|        {
  668|  36.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  95.8k|        : m_fptr([](storage fn,
  753|  95.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  95.8k|              cvref<T> obj = *get<T>(fn);
  755|  95.8k|              if constexpr (std::is_void_v<R>) {
  756|  95.8k|                  obj(static_cast<decltype(args)>(args)...);
  757|  95.8k|              }
  758|  95.8k|              else {
  759|  95.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  95.8k|              }
  761|  95.8k|          }),
  762|  95.8k|          m_storage(std::addressof(f))
  763|  95.8k|    {
  764|  95.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  95.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  95.8k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  95.8k|              else {
  759|  95.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  95.8k|              }
  761|  95.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  95.8k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  95.8k|        else if constexpr (std::is_object_v<T>) {
  694|  95.8k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  95.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  95.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  95.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  95.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  95.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  95.8k|        {
  668|  95.8k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   122k|    {
 4298|   122k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   122k|#if !SCN_DISABLE_LOCALE
 4301|   122k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 33.1k, False: 89.3k]
  ------------------
 4302|  33.1k|            return read_impl<Range>(
 4303|  33.1k|                range, rd,
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  33.1k|                },
 4307|  33.1k|                value, loc);
 4308|  33.1k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  89.3k|        return read_impl<Range>(
 4314|  89.3k|            range, rd,
 4315|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  89.3k|                return r.read_source(SCN_FWD(args)...);
 4317|  89.3k|            },
 4318|  89.3k|            value);
 4319|   122k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   172k|    {
 4336|   172k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.0k, False: 162k]
  |  |  ------------------
  ------------------
 4338|  10.0k|            return unexpected(r.error());
 4339|  10.0k|        }
 4340|       |
 4341|   162k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.2k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.2k|    }                                                  \
  |  |  |  | 3995|   172k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   151k|        return ranges::next(range.begin(), n);
 4343|   162k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  33.1k|        : m_fptr([](storage fn,
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|  33.1k|              if constexpr (std::is_void_v<R>) {
  756|  33.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  33.1k|              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
  762|  33.1k|          m_storage(std::addressof(f))
  763|  33.1k|    {
  764|  33.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  33.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  33.1k|        else if constexpr (std::is_object_v<T>) {
  694|  33.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  33.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  33.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  33.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  33.1k|        {
  668|  33.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  89.3k|        : m_fptr([](storage fn,
  753|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  89.3k|              cvref<T> obj = *get<T>(fn);
  755|  89.3k|              if constexpr (std::is_void_v<R>) {
  756|  89.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  89.3k|              }
  758|  89.3k|              else {
  759|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  89.3k|              }
  761|  89.3k|          }),
  762|  89.3k|          m_storage(std::addressof(f))
  763|  89.3k|    {
  764|  89.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  89.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  89.3k|              else {
  759|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  89.3k|              }
  761|  89.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  89.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  89.3k|        else if constexpr (std::is_object_v<T>) {
  694|  89.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  89.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  89.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  89.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  89.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  89.3k|        {
  668|  89.3k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   137k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   137k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   137k|            auto rd = make_reader<T, char_type>();
 6336|   137k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   137k|    do {                                                            \
  |  | 3985|   137k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 137k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   137k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   137k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 137k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   137k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   137k|                return impl(rd, range, value);
 6341|   137k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   137k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   137k|    {
 6261|   137k|        const bool need_skipped_width =
 6262|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 137k]
  |  Branch (6262:33): [True: 0, False: 137k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   137k|        auto it = rng.begin();
 6266|   137k|        std::ptrdiff_t prefix_width = 0;
 6267|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 137k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   137k|        else {
 6275|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.77k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.77k|    }                                                  \
  |  |  |  | 3995|   137k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   134k|            std::tie(it, prefix_width) = prefix_result;
 6277|   134k|        }
 6278|   134k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   134k|        std::ptrdiff_t value_width = 0;
 6282|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 134k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   134k|        else {
 6298|   134k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 14.8k, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  14.8k|    }                                                  \
  |  | 3995|   134k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   119k|                                             specs, value, loc));
 6300|       |
 6301|   119k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 119k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   119k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   119k|        std::ptrdiff_t postfix_width = 0;
 6310|   119k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 117k, False: 2.02k]
  ------------------
 6311|   117k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   117k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   117k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   117k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   117k|                                 value_width));
 6315|   117k|            std::tie(it, postfix_width) = postfix_result;
 6316|   117k|        }
 6317|       |
 6318|   119k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   119k|    do {                                                            \
  |  | 3985|   119k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   119k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   119k|            specs, prefix_width, value_width, postfix_width));
 6320|   119k|        return it;
 6321|   119k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3806|   332k|    {
 3807|   332k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   332k|        const std::ptrdiff_t sign_len =
 3810|   332k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 82.1k, False: 249k]
  ------------------
 3811|       |
 3812|   332k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.0k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.0k|    }                                                  \
  |  |  |  | 3995|   332k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   321k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   332k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   134k|    {
 4298|   134k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   134k|#if !SCN_DISABLE_LOCALE
 4301|   134k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 37.4k, False: 96.9k]
  ------------------
 4302|  37.4k|            return read_impl<Range>(
 4303|  37.4k|                range, rd,
 4304|  37.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  37.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  37.4k|                },
 4307|  37.4k|                value, loc);
 4308|  37.4k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  96.9k|        return read_impl<Range>(
 4314|  96.9k|            range, rd,
 4315|  96.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.9k|                return r.read_source(SCN_FWD(args)...);
 4317|  96.9k|            },
 4318|  96.9k|            value);
 4319|   134k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   186k|    {
 4336|   186k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   186k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.9k, False: 167k]
  |  |  ------------------
  ------------------
 4338|  18.9k|            return unexpected(r.error());
 4339|  18.9k|        }
 4340|       |
 4341|   167k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 310, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    310|    }                                                  \
  |  |  |  | 3995|   186k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   166k|        return ranges::next(range.begin(), n);
 4343|   167k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  37.4k|        : m_fptr([](storage fn,
  753|  37.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  37.4k|              cvref<T> obj = *get<T>(fn);
  755|  37.4k|              if constexpr (std::is_void_v<R>) {
  756|  37.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  37.4k|              }
  758|  37.4k|              else {
  759|  37.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  37.4k|              }
  761|  37.4k|          }),
  762|  37.4k|          m_storage(std::addressof(f))
  763|  37.4k|    {
  764|  37.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  37.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  37.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  37.4k|              else {
  759|  37.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  37.4k|              }
  761|  37.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  37.4k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  37.4k|        else if constexpr (std::is_object_v<T>) {
  694|  37.4k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  37.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  37.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  37.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  37.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  37.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  37.4k|        {
  668|  37.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  96.9k|        : m_fptr([](storage fn,
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|  96.9k|              if constexpr (std::is_void_v<R>) {
  756|  96.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.9k|              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
  762|  96.9k|          m_storage(std::addressof(f))
  763|  96.9k|    {
  764|  96.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  96.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  96.9k|        else if constexpr (std::is_object_v<T>) {
  694|  96.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  96.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  96.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  96.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  96.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.9k|        {
  668|  96.9k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   124k|    {
 4298|   124k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   124k|#if !SCN_DISABLE_LOCALE
 4301|   124k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 33.9k, False: 90.2k]
  ------------------
 4302|  33.9k|            return read_impl<Range>(
 4303|  33.9k|                range, rd,
 4304|  33.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  33.9k|                },
 4307|  33.9k|                value, loc);
 4308|  33.9k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  90.2k|        return read_impl<Range>(
 4314|  90.2k|            range, rd,
 4315|  90.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.2k|                return r.read_source(SCN_FWD(args)...);
 4317|  90.2k|            },
 4318|  90.2k|            value);
 4319|   124k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   175k|    {
 4336|   175k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.2k, False: 164k]
  |  |  ------------------
  ------------------
 4338|  10.2k|            return unexpected(r.error());
 4339|  10.2k|        }
 4340|       |
 4341|   164k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9.73k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  9.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  9.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  9.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  9.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  9.73k|    }                                                  \
  |  |  |  | 3995|   175k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   155k|        return ranges::next(range.begin(), n);
 4343|   164k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  33.9k|        : m_fptr([](storage fn,
  753|  33.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.9k|              cvref<T> obj = *get<T>(fn);
  755|  33.9k|              if constexpr (std::is_void_v<R>) {
  756|  33.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  33.9k|              }
  758|  33.9k|              else {
  759|  33.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.9k|              }
  761|  33.9k|          }),
  762|  33.9k|          m_storage(std::addressof(f))
  763|  33.9k|    {
  764|  33.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  33.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  33.9k|              else {
  759|  33.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.9k|              }
  761|  33.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  33.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  33.9k|        else if constexpr (std::is_object_v<T>) {
  694|  33.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  33.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  33.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  33.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  33.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  33.9k|        {
  668|  33.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  90.2k|        : m_fptr([](storage fn,
  753|  90.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.2k|              cvref<T> obj = *get<T>(fn);
  755|  90.2k|              if constexpr (std::is_void_v<R>) {
  756|  90.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  90.2k|              }
  758|  90.2k|              else {
  759|  90.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.2k|              }
  761|  90.2k|          }),
  762|  90.2k|          m_storage(std::addressof(f))
  763|  90.2k|    {
  764|  90.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  90.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  90.2k|              else {
  759|  90.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.2k|              }
  761|  90.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  90.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  90.2k|        else if constexpr (std::is_object_v<T>) {
  694|  90.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  90.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  90.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  90.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  90.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  90.2k|        {
  668|  90.2k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|   553k|{
 1055|   553k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   553k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|   553k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|   553k|        else {
 1072|   553k|            return r.begin().contiguous_segment();
 1073|   553k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|   553k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   479k|{
 2220|   479k|    auto it = range.begin();
 2221|   823k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 815k, False: 7.97k]
  ------------------
 2222|   815k|        const auto val =
 2223|   815k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   815k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   815k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 808k, False: 6.32k]
  |  |  ------------------
  ------------------
 2225|   808k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   808k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   808k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   808k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 471k, False: 337k]
  ------------------
 2229|   471k|                return it;
 2230|   471k|            }
 2231|   808k|        }
 2232|   343k|        it = val.iterator;
 2233|   343k|    }
 2234|       |
 2235|  7.97k|    return it;
 2236|   479k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   815k|{
 2024|   815k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   815k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   815k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   815k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   815k|    auto it = range.begin();
 2028|   815k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   815k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   815k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.32k, False: 808k]
  |  |  ------------------
  ------------------
 2031|  6.32k|        ++it;
 2032|  6.32k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  6.32k|        return {it, {}};
 2034|  6.32k|    }
 2035|       |
 2036|   808k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 797k, False: 11.3k]
  ------------------
 2037|   797k|        ++it;
 2038|   797k|        return {it, string_type(1, *range.begin())};
 2039|   797k|    }
 2040|       |
 2041|  11.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  11.3k|    return {it, string_type{range.begin(), it}};
 2043|   808k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  6.32k|{
 1289|  6.32k|    auto it = input.begin();
 1290|  28.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 27.1k, False: 1.04k]
  ------------------
 1291|  27.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 5.28k, False: 21.8k]
  ------------------
 1292|  5.28k|            break;
 1293|  5.28k|        }
 1294|  27.1k|    }
 1295|  6.32k|    return it;
 1296|  6.32k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  11.3k|    {
  283|  11.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  11.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  11.3k|    {
  252|  11.3k|        constexpr iter_difference_t<I> zero{0};
  253|  11.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|  34.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 24.2k, False: 10.5k]
  |  Branch (255:30): [True: 23.5k, False: 741]
  ------------------
  256|  23.5k|            ++i;
  257|  23.5k|            ++counter;
  258|  23.5k|        }
  259|       |
  260|  11.3k|        return counter;
  261|  11.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|   815k|    {
 2015|   815k|        return !codepoint.empty();
 2016|   815k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   479k|{
 2242|   479k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   479k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   553k|{
 3129|   553k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 553k, False: 0]
  ------------------
 3130|   553k|        auto it = read_while_classic_space(range);
 3131|   553k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   553k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.97k, False: 545k]
  |  |  ------------------
  ------------------
 3133|  7.97k|            return unexpected(e);
 3134|  7.97k|        }
 3135|       |
 3136|   545k|        return it;
 3137|   553k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   553k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   553k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   553k|    else {
 2286|   553k|        auto it = range.begin();
 2287|       |
 2288|   553k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|   553k|            auto seg = get_contiguous_beginning(range);
 2290|   553k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|   553k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 74.3k, False: 479k]
  ------------------
 2292|  74.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|  74.3k|            }
 2294|   479k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|   479k|        }
 2296|       |
 2297|   553k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   553k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   553k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   553k|            return detail::is_cp_space(cp);
 2300|   553k|        });
 2301|   553k|    }
 2302|   553k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   479k|        : m_fptr([](storage fn,
  753|   479k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   479k|              cvref<T> obj = *get<T>(fn);
  755|   479k|              if constexpr (std::is_void_v<R>) {
  756|   479k|                  obj(static_cast<decltype(args)>(args)...);
  757|   479k|              }
  758|   479k|              else {
  759|   479k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   479k|              }
  761|   479k|          }),
  762|   479k|          m_storage(std::addressof(f))
  763|   479k|    {
  764|   479k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   808k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   808k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   808k|              else {
  759|   808k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   808k|              }
  761|   808k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   808k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   808k|        else if constexpr (std::is_object_v<T>) {
  694|   808k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   808k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   808k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   808k|            return detail::is_cp_space(cp);
 2300|   808k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   479k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   479k|        {
  668|   479k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   502k|{
  993|   502k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   502k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   502k|        auto beg = r.begin();
 1004|   502k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 502k, False: 0]
  ------------------
 1005|   502k|            return false;
 1006|   502k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   502k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|  1.31M|{
 1982|  1.31M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  1.31M|    else {
 1993|  1.31M|        auto it = range.begin();
 1994|  1.31M|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 787k, False: 531k]
  ------------------
 1995|   787k|            return ranges::next(it, count);
 1996|   787k|        }
 1997|       |
 1998|  2.03M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 1.55M, False: 472k]
  ------------------
 1999|  1.55M|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 58.9k, False: 1.50M]
  ------------------
 2000|  58.9k|                return unexpected(eof_error::eof);
 2001|  58.9k|            }
 2002|  1.55M|        }
 2003|       |
 2004|   472k|        return it;
 2005|   531k|    }
 2006|  1.31M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|  1.31M|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|  1.31M|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|  1.31M|        else {
 1125|  1.31M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 1.31M, False: 0]
  ------------------
 1126|  1.31M|                return static_cast<size_t>(
 1127|  1.31M|                    r.begin().parent()->chars_available() -
 1128|  1.31M|                    r.begin().position());
 1129|  1.31M|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|  1.31M|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|  1.31M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|  3.67M|    {
  773|  3.67M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  3.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  3.67M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.18M|        : m_fptr([](storage fn,
  753|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.18M|              cvref<T> obj = *get<T>(fn);
  755|  1.18M|              if constexpr (std::is_void_v<R>) {
  756|  1.18M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.18M|              }
  758|  1.18M|              else {
  759|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.18M|              }
  761|  1.18M|          }),
  762|  1.18M|          m_storage(std::addressof(f))
  763|  1.18M|    {
  764|  1.18M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|  1.83M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.83M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.83M|              else {
  759|  1.83M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.83M|              }
  761|  1.83M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|  1.83M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.83M|        else if constexpr (std::is_object_v<T>) {
  694|  1.83M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.83M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.18M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.18M|        {
  668|  1.18M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   367k|    {
 6174|   367k|        const bool need_skipped_width =
 6175|   367k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 367k]
  |  Branch (6175:33): [True: 0, False: 367k]
  ------------------
 6176|   367k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   367k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 367k]
  ------------------
 6180|   367k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 367k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   367k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 367k, False: 0]
  |  Branch (6184:56): [True: 367k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   367k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 367k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   730k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.20k, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.20k|    }                                                  \
  |  |  |  | 3995|   367k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   730k|                            make_eof_scan_error));
 6195|       |
 6196|   730k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 363k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   363k|            return result_type{it, 0};
 6204|   730k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   367k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|   887k|{
 2134|   887k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   887k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|   887k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|   887k|    else {
 2105|   887k|        auto first = range.begin();
 2106|  1.38M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 1.37M, False: 4.06k]
  ------------------
 2107|  1.37M|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 883k, False: 494k]
  ------------------
 2108|   883k|                return first;
 2109|   883k|            }
 2110|  1.37M|        }
 2111|  4.06k|        return first;
 2112|   887k|    }
 2113|   887k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   637k|    {
  108|   637k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   637k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   637k|    {
   94|   637k|        iter_difference_t<I> counter{0};
   95|  1.71M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.08M, False: 637k]
  ------------------
   96|  1.08M|            ++i;
   97|  1.08M|            ++counter;
   98|  1.08M|        }
   99|   637k|        return counter;
  100|   637k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1904|   179k|    {
 1905|   179k|        auto stdloc = loc.get<std::locale>();
 1906|   179k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|   179k|        grouping = numpunct.grouping();
 1908|   179k|        thousands_sep =
 1909|   179k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 179k]
  ------------------
 1910|   179k|        decimal_point = numpunct.decimal_point();
 1911|   179k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1841|   179k|{
 1842|   179k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 179k, False: 0]
  ------------------
 1843|   179k|        return std::use_facet<Facet>(stdloc);
 1844|   179k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|   179k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|  1.20M|{
 1971|  1.20M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.75k, False: 1.20M]
  |  |  ------------------
  ------------------
 1972|  2.75k|        return unexpected(e);
 1973|  2.75k|    }
 1974|       |
 1975|  1.20M|    return ranges::next(range.begin());
 1976|  1.20M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  1.84M|{
  961|  1.84M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.07k, False: 1.84M]
  |  |  ------------------
  ------------------
  962|  7.07k|        return eof_error::eof;
  963|  7.07k|    }
  964|  1.84M|    return eof_error::good;
  965|  1.84M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  2.72M|{
  955|  2.72M|    return is_range_eof(r.begin(), r.end());
  956|  2.72M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  2.72M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  2.72M|    {
  948|  2.72M|        return begin == end;
  949|  2.72M|    }
  950|  2.72M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.20M|    {
  296|  1.20M|        ++x;
  297|  1.20M|        return x;
  298|  1.20M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   515k|{
 3321|   515k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   515k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 509k, False: 6.87k]
  ------------------
 3323|   509k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 509k, False: 78]
  ------------------
 3324|   509k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   509k|        }
 3326|     78|        return unexpected(eof_error::eof);
 3327|   509k|    }
 3328|       |
 3329|  6.87k|    auto& it = *r;
 3330|  6.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 5.21k, False: 1.65k]
  ------------------
 3331|  5.21k|        return std::pair{it, sign_type::minus_sign};
 3332|  5.21k|    }
 3333|  1.65k|    return std::pair{it, sign_type::plus_sign};
 3334|  6.87k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|   837k|{
 2435|   837k|    auto it = read_code_unit(range);
 2436|   837k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   837k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.57k, False: 836k]
  |  |  ------------------
  ------------------
 2437|  1.57k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  1.57k|    }
 2439|       |
 2440|  1.67M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.67M, False: 811k]
  ------------------
 2441|  1.67M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 24.4k, False: 1.64M]
  ------------------
 2442|  24.4k|            return *it;
 2443|  24.4k|        }
 2444|  1.67M|    }
 2445|       |
 2446|   811k|    return unexpected(parse_error::error);
 2447|   836k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|  1.31M|{
 2393|  1.31M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.31M|    else {
 2407|  1.31M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.31M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.31M|                return ch;
 2410|  1.31M|            }
 2411|  1.31M|            return static_cast<char_type>(ch +
 2412|  1.31M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.31M|        };
 2414|       |
 2415|  1.31M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.31M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.31M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.31M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 58.9k, False: 1.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  58.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  58.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  58.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  58.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  58.9k|    }                                                  \
  |  |  |  | 3995|  1.31M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.26M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.25M, False: 695]
  |  |  ------------------
  ------------------
 2420|  1.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.26M|                    return ascii_tolower(a) ==
 2422|  1.26M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.26M|                }))) {
 2424|  1.25M|            return unexpected(parse_error::error);
 2425|  1.25M|        }
 2426|       |
 2427|    695|        return it;
 2428|  1.26M|    }
 2429|  1.31M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  1.47M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.47M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.19M, False: 287k]
  |  Branch (2408:29): [True: 272k, False: 15.4k]
  ------------------
 2409|  1.46M|                return ch;
 2410|  1.46M|            }
 2411|  15.4k|            return static_cast<char_type>(ch +
 2412|  15.4k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.47M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|   371k|{
 2308|   371k|    auto it = read_code_unit(range);
 2309|   371k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.17k, False: 370k]
  |  |  ------------------
  ------------------
 2310|  1.17k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  1.17k|    }
 2312|       |
 2313|   370k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 365k, False: 5.20k]
  |  |  ------------------
  ------------------
 2314|   370k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   365k|        return unexpected(parse_error::error);
 2316|   365k|    }
 2317|       |
 2318|  5.20k|    return *it;
 2319|   370k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|   887k|{
 2154|   887k|    auto it = read_while_code_unit(range, pred);
 2155|   887k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 495k, False: 391k]
  ------------------
 2156|   495k|        return unexpected(parse_error::error);
 2157|   495k|    }
 2158|   391k|    return it;
 2159|   887k|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1744|   368k|    {
 1745|   368k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   368k|                           ranges::common_range<Range>) {
 1762|   368k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   368k|            auto end_seg = range.end().contiguous_segment();
 1764|   368k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.0k, False: 346k]
  |  |  ------------------
  ------------------
 1765|   368k|                             detail::to_address(end_seg.end()))) {
 1766|  21.0k|                auto& str = m_storage.emplace();
 1767|  21.0k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  21.0k|                                                     range.begin().position()));
 1769|  21.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  21.0k|                m_view = string_view_type{str.data(), str.size()};
 1771|  21.0k|                return;
 1772|  21.0k|            }
 1773|       |
 1774|   346k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   346k|                                                            end_seg.data());
 1776|   346k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   368k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  3.19M|    {
 1706|  3.19M|        return m_view;
 1707|  3.19M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|  1.99M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   259k|    {
 6216|   259k|        const bool need_skipped_width =
 6217|   259k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 259k]
  |  Branch (6217:33): [True: 0, False: 259k]
  ------------------
 6218|   259k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   259k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 259k]
  ------------------
 6221|   259k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 259k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   259k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 259k, False: 0]
  ------------------
 6230|   259k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 259k]
  ------------------
 6231|   259k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   259k|        return result_type{rng.begin(), 0};
 6255|   259k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1981|  1.32M|{
 1982|  1.32M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|  1.32M|    if constexpr (ranges::sized_range<Range>) {
 1985|  1.32M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|  1.32M|        if (sz < count) {
  ------------------
  |  Branch (1986:13): [True: 59.1k, False: 1.26M]
  ------------------
 1987|  59.1k|            return unexpected(eof_error::eof);
 1988|  59.1k|        }
 1989|       |
 1990|  1.26M|        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|       |    else {
 1993|       |        auto it = range.begin();
 1994|       |        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
 1995|       |            return ranges::next(it, count);
 1996|       |        }
 1997|       |
 1998|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1999|       |            if (it == range.end()) {
 2000|       |                return unexpected(eof_error::eof);
 2001|       |            }
 2002|       |        }
 2003|       |
 2004|       |        return it;
 2005|       |    }
 2006|  1.32M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|  2.16M|{
 2024|  2.16M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  2.16M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  2.16M|    auto it = range.begin();
 2028|  2.16M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  2.16M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  2.16M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 2.16M, False: 0]
  ------------------
 2037|  2.16M|        ++it;
 2038|  2.16M|        return {it, string_type(1, *range.begin())};
 2039|  2.16M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  2.16M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|  3.49M|{
  955|  3.49M|    return is_range_eof(r.begin(), r.end());
  956|  3.49M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|  3.49M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  3.49M|    {
  948|  3.49M|        return begin == end;
  949|  3.49M|    }
  950|  3.49M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   322k|    {
  190|   322k|        i = std::move(bound);
  191|   322k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|  2.16M|    {
 2015|  2.16M|        return !codepoint.empty();
 2016|  2.16M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  1.32M|{
  961|  1.32M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.96k, False: 1.32M]
  |  |  ------------------
  ------------------
  962|  4.96k|        return eof_error::eof;
  963|  4.96k|    }
  964|  1.32M|    return eof_error::good;
  965|  1.32M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   691k|{
 1971|   691k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 640, False: 691k]
  |  |  ------------------
  ------------------
 1972|    640|        return unexpected(e);
 1973|    640|    }
 1974|       |
 1975|   691k|    return ranges::next(range.begin());
 1976|   691k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   691k|    {
  296|   691k|        ++x;
  297|   691k|        return x;
  298|   691k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   505k|{
 3321|   505k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   505k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 500k, False: 4.60k]
  ------------------
 3323|   500k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 500k, False: 24]
  ------------------
 3324|   500k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   500k|        }
 3326|     24|        return unexpected(eof_error::eof);
 3327|   500k|    }
 3328|       |
 3329|  4.60k|    auto& it = *r;
 3330|  4.60k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 3.15k, False: 1.45k]
  ------------------
 3331|  3.15k|        return std::pair{it, sign_type::minus_sign};
 3332|  3.15k|    }
 3333|  1.45k|    return std::pair{it, sign_type::plus_sign};
 3334|  4.60k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   573k|{
 2435|   573k|    auto it = read_code_unit(range);
 2436|   573k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   573k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 340, False: 573k]
  |  |  ------------------
  ------------------
 2437|    340|        return unexpected(make_eof_parse_error(it.error()));
 2438|    340|    }
 2439|       |
 2440|  1.14M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.14M, False: 562k]
  ------------------
 2441|  1.14M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 11.1k, False: 1.13M]
  ------------------
 2442|  11.1k|            return *it;
 2443|  11.1k|        }
 2444|  1.14M|    }
 2445|       |
 2446|   562k|    return unexpected(parse_error::error);
 2447|   573k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  1.32M|{
 2393|  1.32M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.32M|    else {
 2407|  1.32M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.32M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.32M|                return ch;
 2410|  1.32M|            }
 2411|  1.32M|            return static_cast<char_type>(ch +
 2412|  1.32M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.32M|        };
 2414|       |
 2415|  1.32M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 59.1k, False: 1.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  59.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  59.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  59.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  59.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  59.1k|    }                                                  \
  |  |  |  | 3995|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.26M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.26M, False: 695]
  |  |  ------------------
  ------------------
 2420|  1.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.26M|                    return ascii_tolower(a) ==
 2422|  1.26M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.26M|                }))) {
 2424|  1.26M|            return unexpected(parse_error::error);
 2425|  1.26M|        }
 2426|       |
 2427|    695|        return it;
 2428|  1.26M|    }
 2429|  1.32M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  1.47M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.47M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.19M, False: 288k]
  |  Branch (2408:29): [True: 272k, False: 15.5k]
  ------------------
 2409|  1.46M|                return ch;
 2410|  1.46M|            }
 2411|  15.5k|            return static_cast<char_type>(ch +
 2412|  15.5k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.47M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|   118k|{
 2308|   118k|    auto it = read_code_unit(range);
 2309|   118k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 300, False: 117k]
  |  |  ------------------
  ------------------
 2310|    300|        return unexpected(make_eof_parse_error(it.error()));
 2311|    300|    }
 2312|       |
 2313|   117k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 115k, False: 1.96k]
  |  |  ------------------
  ------------------
 2314|   117k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   115k|        return unexpected(parse_error::error);
 2316|   115k|    }
 2317|       |
 2318|  1.96k|    return *it;
 2319|   117k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|   300k|{
 2134|   300k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   300k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|   300k|{
 2101|   300k|    if constexpr (ranges::common_range<Range>) {
 2102|   300k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|   300k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   502k|{
 3129|   502k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 502k, False: 0]
  ------------------
 3130|   502k|        auto it = read_while_classic_space(range);
 3131|   502k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   502k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.72k, False: 498k]
  |  |  ------------------
  ------------------
 3133|  3.72k|            return unexpected(e);
 3134|  3.72k|        }
 3135|       |
 3136|   498k|        return it;
 3137|   502k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   502k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   502k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   502k|    else {
 2286|   502k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   502k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   502k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   502k|            return detail::is_cp_space(cp);
 2300|   502k|        });
 2301|   502k|    }
 2302|   502k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|   502k|{
 2242|   502k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   502k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  1.21M|{
 2220|  1.21M|    auto it = range.begin();
 2221|  2.64M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 2.16M, False: 474k]
  ------------------
 2222|  2.16M|        const auto val =
 2223|  2.16M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  2.16M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  2.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.16M, False: 0]
  |  |  ------------------
  ------------------
 2225|  2.16M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  2.16M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  2.16M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  2.16M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 743k, False: 1.42M]
  ------------------
 2229|   743k|                return it;
 2230|   743k|            }
 2231|  2.16M|        }
 2232|  1.42M|        it = val.iterator;
 2233|  1.42M|    }
 2234|       |
 2235|   474k|    return it;
 2236|  1.21M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|   502k|        : m_fptr([](storage fn,
  753|   502k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   502k|              cvref<T> obj = *get<T>(fn);
  755|   502k|              if constexpr (std::is_void_v<R>) {
  756|   502k|                  obj(static_cast<decltype(args)>(args)...);
  757|   502k|              }
  758|   502k|              else {
  759|   502k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   502k|              }
  761|   502k|          }),
  762|   502k|          m_storage(std::addressof(f))
  763|   502k|    {
  764|   502k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|   875k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   875k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   875k|              else {
  759|   875k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   875k|              }
  761|   875k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|   875k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   875k|        else if constexpr (std::is_object_v<T>) {
  694|   875k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   875k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|   875k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   875k|            return detail::is_cp_space(cp);
 2300|   875k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|   502k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   502k|        {
  668|   502k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.15M|    {
  304|  1.15M|        ranges::advance(x, n);
  305|  1.15M|        return x;
  306|  1.15M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.15M|    {
  268|  1.15M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.15M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.15M|    {
  181|  3.69M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.54M, False: 1.15M]
  ------------------
  182|  2.54M|            ++i;
  183|  2.54M|        }
  184|  1.15M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   115k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   115k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   115k|            auto rd = make_reader<T, char_type>();
 6336|   115k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   115k|    do {                                                            \
  |  | 3985|   115k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   115k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   115k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 115k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   115k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   115k|                return impl(rd, range, value);
 6341|   115k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   115k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|   734k|    {
 3219|   734k|        reader_error_handler eh{};
 3220|   734k|        get_derived().check_specs_impl(specs, eh);
 3221|   734k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   734k|        return {};
 3226|   734k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3230|   734k|    {
 3231|   734k|        return static_cast<Derived&>(*this);
 3232|   734k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|   734k|    {
 4273|   734k|        detail::check_float_type_specs(specs, eh);
 4274|   734k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   115k|    {
 6261|   115k|        const bool need_skipped_width =
 6262|   115k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 115k]
  |  Branch (6262:33): [True: 0, False: 115k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   115k|        auto it = rng.begin();
 6266|   115k|        std::ptrdiff_t prefix_width = 0;
 6267|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 115k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   115k|        else {
 6275|   115k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 984, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    984|    }                                                  \
  |  |  |  | 3995|   115k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   114k|            std::tie(it, prefix_width) = prefix_result;
 6277|   114k|        }
 6278|   114k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   114k|        std::ptrdiff_t value_width = 0;
 6282|   114k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 114k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   114k|        else {
 6298|   114k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.2k, False: 80.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.2k|    }                                                  \
  |  | 3995|   114k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  80.1k|                                             specs, value, loc));
 6300|       |
 6301|  80.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 80.1k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  80.1k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  80.1k|        std::ptrdiff_t postfix_width = 0;
 6310|  80.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 79.6k, False: 478]
  ------------------
 6311|  79.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  79.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  79.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  79.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  79.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 79.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  79.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  79.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  79.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  79.6k|                                 value_width));
 6315|  79.6k|            std::tie(it, postfix_width) = postfix_result;
 6316|  79.6k|        }
 6317|       |
 6318|  80.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  80.1k|    do {                                                            \
  |  | 3985|  80.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 80.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  80.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  80.1k|            specs, prefix_width, value_width, postfix_width));
 6320|  80.1k|        return it;
 6321|  80.1k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3213|  1.52M|    {
 3214|  1.52M|        return true;
 3215|  1.52M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4346|   727k|    {
 4347|   727k|        unsigned options{};
 4348|   727k|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 179k, False: 548k]
  ------------------
 4349|   179k|            options |= float_reader_base::allow_thsep;
 4350|   179k|        }
 4351|       |
 4352|   727k|        SCN_GCC_COMPAT_PUSH
 4353|   727k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|   727k|        switch (specs.type) {
 4356|   140k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 140k, False: 587k]
  ------------------
 4357|   140k|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|  45.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 45.6k, False: 682k]
  ------------------
 4360|  45.6k|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|   196k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 196k, False: 531k]
  ------------------
 4363|   196k|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|   165k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 165k, False: 562k]
  ------------------
 4366|   165k|                return options | float_reader_base::allow_scientific |
 4367|   165k|                       float_reader_base::allow_fixed;
 4368|       |
 4369|   179k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 179k, False: 548k]
  ------------------
 4370|   179k|                return options | float_reader_base::allow_scientific |
 4371|   179k|                       float_reader_base::allow_fixed |
 4372|   179k|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 727k]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|   727k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|   727k|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|   727k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3775|   727k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1895|   996k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1655|  1.99M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3806|   245k|    {
 3807|   245k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   245k|        const std::ptrdiff_t sign_len =
 3810|   245k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.12k, False: 243k]
  ------------------
 3811|       |
 3812|   245k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 25.9k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  25.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  25.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  25.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  25.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  25.9k|    }                                                  \
  |  |  |  | 3995|   245k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   219k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   245k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4163|   805k|    {
 4164|   805k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 805k, False: 0]
  ------------------
 4165|   805k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 805k, False: 0]
  ------------------
 4166|   805k|            return;
 4167|   805k|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1710|  1.62M|    {
 1711|  1.62M|        return m_storage.has_value();
 1712|  1.62M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1715|   892k|    {
 1716|   892k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|   892k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   892k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|   892k|        return *m_storage;
 1718|   892k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   114k|    {
 4298|   114k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   114k|#if !SCN_DISABLE_LOCALE
 4301|   114k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 26.4k, False: 87.9k]
  ------------------
 4302|  26.4k|            return read_impl<Range>(
 4303|  26.4k|                range, rd,
 4304|  26.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  26.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  26.4k|                },
 4307|  26.4k|                value, loc);
 4308|  26.4k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  87.9k|        return read_impl<Range>(
 4314|  87.9k|            range, rd,
 4315|  87.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.9k|                return r.read_source(SCN_FWD(args)...);
 4317|  87.9k|            },
 4318|  87.9k|            value);
 4319|   114k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   154k|    {
 4336|   154k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   154k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42.7k, False: 111k]
  |  |  ------------------
  ------------------
 4338|  42.7k|            return unexpected(r.error());
 4339|  42.7k|        }
 4340|       |
 4341|   111k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.68k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.68k|    }                                                  \
  |  |  |  | 3995|   154k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   109k|        return ranges::next(range.begin(), n);
 4343|   111k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  772|   498k|    {
  773|   498k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   498k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  26.4k|        : m_fptr([](storage fn,
  753|  26.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  26.4k|              cvref<T> obj = *get<T>(fn);
  755|  26.4k|              if constexpr (std::is_void_v<R>) {
  756|  26.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  26.4k|              }
  758|  26.4k|              else {
  759|  26.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  26.4k|              }
  761|  26.4k|          }),
  762|  26.4k|          m_storage(std::addressof(f))
  763|  26.4k|    {
  764|  26.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  26.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  26.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  26.4k|              else {
  759|  26.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  26.4k|              }
  761|  26.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  26.4k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  26.4k|        else if constexpr (std::is_object_v<T>) {
  694|  26.4k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  26.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  26.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  26.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  26.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3794|  89.6k|    {
 3795|  89.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  89.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  89.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 89.6k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  89.6k|        return read_source_impl(range);
 3801|  89.6k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3820|   498k|    {
 3821|   498k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 498k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   498k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   498k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   498k|        auto it = sign_result.first;
 3824|   498k|        m_sign = sign_result.second;
 3825|       |
 3826|   498k|        auto digits_begin = it;
 3827|   498k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|   498k|        else {
 3854|   498k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 130k, False: 368k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|   130k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|   130k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|   130k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|   130k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|   130k|    }                                                  \
  |  | 3995|   498k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|   368k|                it,
 3856|   368k|                do_read_source_impl(
 3857|   368k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|   368k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|   368k|        }
 3860|       |
 3861|   498k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   368k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 368k, False: 0]
  |  Branch (3863:48): [True: 368k, False: 0]
  ------------------
 3864|   368k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 368k, False: 0]
  ------------------
 3865|   368k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 368k, False: 0]
  ------------------
 3866|   368k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   368k|        }
 3868|       |
 3869|   368k|        handle_separators();
 3870|       |
 3871|   368k|        return it;
 3872|   498k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4106|   498k|    {
 4107|   498k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   498k|        const bool allowed_nonhex =
 4109|   498k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   498k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   498k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 498k, False: 0]
  |  Branch (4112:45): [True: 0, False: 498k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   498k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 498k]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|   498k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 498k, False: 0]
  |  Branch (4121:45): [True: 0, False: 498k]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|   498k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 498k]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|   498k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 322k, False: 175k]
  |  Branch (4128:28): [True: 98.3k, False: 224k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|  98.3k|            auto it = range.begin();
 4132|       |
 4133|  98.3k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 210, False: 98.1k]
  ------------------
 4134|    210|                m_kind = float_kind::hex_with_prefix;
 4135|    210|                it = *r;
 4136|    210|            }
 4137|  98.1k|            else {
 4138|  98.1k|                m_kind = float_kind::hex_without_prefix;
 4139|  98.1k|            }
 4140|       |
 4141|  98.3k|            return read_hex(ranges::subrange{it, range.end()});
 4142|  98.3k|        }
 4143|   399k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 175k, False: 224k]
  |  Branch (4143:29): [True: 175k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   175k|            m_kind = float_kind::generic;
 4147|   175k|            return read_regular_float(range);
 4148|   175k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   224k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 485, False: 223k]
  |  |  ------------------
  ------------------
 4154|    485|            m_kind = float_kind::hex_with_prefix;
 4155|    485|            return read_hex(ranges::subrange{*r, range.end()});
 4156|    485|        }
 4157|       |
 4158|   223k|        m_kind = float_kind::generic;
 4159|   223k|        return read_regular(range);
 4160|   224k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3914|   498k|    {
 3915|   498k|        auto it = range.begin();
 3916|   498k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 498k, False: 0]
  ------------------
 3917|   498k|            return unexpected(r.error());
 3918|   498k|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3937|   498k|    {
 3938|   498k|        auto it = range.begin();
 3939|   498k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 498k, False: 0]
  ------------------
 3940|   498k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   498k|                scan_error::invalid_scanned_value,
 3942|   498k|                "Invalid floating-point NaN value"));
 3943|   498k|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3907|   322k|    {
 3908|   322k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   322k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4008|  98.8k|    {
 4009|  98.8k|        auto it = range.begin();
 4010|       |
 4011|  98.8k|        std::ptrdiff_t digits_count = 0;
 4012|  98.8k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|  98.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.0k, False: 78.7k]
  |  |  ------------------
  ------------------
 4014|  20.0k|            return r.transform_error(map_parse_error_to_scan_error(
 4015|  20.0k|                scan_error::invalid_scanned_value,
 4016|  20.0k|                "Invalid hexadecimal floating-point value"));
 4017|  20.0k|        }
 4018|  78.7k|        else {
 4019|  78.7k|            digits_count += ranges::distance(it, *r);
 4020|  78.7k|            it = *r;
 4021|  78.7k|        }
 4022|       |
 4023|  78.7k|        m_integral_part_length = digits_count;
 4024|  78.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 964, False: 77.8k]
  ------------------
 4025|  78.7k|                                             m_locale_options.decimal_point)) {
 4026|    964|            it = *r;
 4027|    964|        }
 4028|       |
 4029|  78.7k|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 800, False: 77.9k]
  ------------------
 4030|  78.7k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|    800|            digits_count += ranges::distance(it, *r);
 4032|    800|            it = *r;
 4033|    800|        }
 4034|       |
 4035|  78.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|  78.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 78.7k]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|  78.7k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|  78.7k|        return it;
 4044|  78.7k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3892|   177k|    {
 3893|   177k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 177k]
  |  |  |  Branch (1014:45): [True: 0, False: 177k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|   177k|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|   177k|        return read_while1_code_unit(
 3902|   177k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|   177k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   177k|        : m_fptr([](storage fn,
  753|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   177k|              cvref<T> obj = *get<T>(fn);
  755|   177k|              if constexpr (std::is_void_v<R>) {
  756|   177k|                  obj(static_cast<decltype(args)>(args)...);
  757|   177k|              }
  758|   177k|              else {
  759|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   177k|              }
  761|   177k|          }),
  762|   177k|          m_storage(std::addressof(f))
  763|   177k|    {
  764|   177k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|   283k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   283k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   283k|              else {
  759|   283k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   283k|              }
  761|   283k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  689|   283k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   283k|        else if constexpr (std::is_object_v<T>) {
  694|   283k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   283k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3902|   283k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   177k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   177k|        {
  668|   177k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3980|   321k|    {
 3981|   321k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 17.6k, False: 304k]
  ------------------
 3982|  17.6k|            auto beg_exp_it = range.begin();
 3983|  17.6k|            auto it = *r;
 3984|       |
 3985|  17.6k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 17.5k, False: 78]
  ------------------
 3986|  17.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  17.5k|                it = r_sign->first;
 3988|  17.5k|            }
 3989|       |
 3990|  17.6k|            if (auto r_exp = read_while1_code_unit(
 3991|  17.6k|                    ranges::subrange{it, range.end()},
 3992|  17.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  17.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.44k, False: 16.1k]
  |  |  ------------------
  ------------------
 3994|  1.44k|                it = beg_exp_it;
 3995|  1.44k|            }
 3996|  16.1k|            else {
 3997|  16.1k|                it = *r_exp;
 3998|  16.1k|            }
 3999|       |
 4000|  17.6k|            return it;
 4001|  17.6k|        }
 4002|   304k|        return range.begin();
 4003|   321k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|  17.6k|        : m_fptr([](storage fn,
  753|  17.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  17.6k|              cvref<T> obj = *get<T>(fn);
  755|  17.6k|              if constexpr (std::is_void_v<R>) {
  756|  17.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  17.6k|              }
  758|  17.6k|              else {
  759|  17.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  17.6k|              }
  761|  17.6k|          }),
  762|  17.6k|          m_storage(std::addressof(f))
  763|  17.6k|    {
  764|  17.6k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  753|  49.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  49.5k|              else {
  759|  49.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.5k|              }
  761|  49.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  689|  49.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  49.5k|        else if constexpr (std::is_object_v<T>) {
  694|  49.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  49.5k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3992|  49.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|  17.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  17.6k|        {
  668|  17.6k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4049|   399k|    {
 4050|   399k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   399k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 329k, False: 70.3k]
  |  Branch (4051:50): [True: 22.8k, False: 306k]
  ------------------
 4052|       |
 4053|   399k|        auto it = ranges::begin(range);
 4054|   399k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   399k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   399k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 106k, False: 292k]
  |  |  ------------------
  ------------------
 4058|   106k|            return r.transform_error(
 4059|   106k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|   106k|                                              "Invalid floating-point value"));
 4061|   106k|        }
 4062|   292k|        else {
 4063|   292k|            digits_count += ranges::distance(it, *r);
 4064|   292k|            it = *r;
 4065|   292k|        }
 4066|       |
 4067|   292k|        m_integral_part_length = digits_count;
 4068|   292k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 4.24k, False: 288k]
  ------------------
 4069|   292k|                                             m_locale_options.decimal_point)) {
 4070|  4.24k|            it = *r;
 4071|  4.24k|        }
 4072|       |
 4073|   292k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 3.47k, False: 289k]
  ------------------
 4074|   292k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  3.47k|            digits_count += ranges::distance(it, *r);
 4076|  3.47k|            it = *r;
 4077|  3.47k|        }
 4078|       |
 4079|   292k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   292k|        auto beg_exp_it = it;
 4086|   292k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 243k, False: 49.6k]
  ------------------
 4087|   243k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|   243k|        }
 4089|   292k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 5.58k, False: 287k]
  |  Branch (4089:29): [True: 3.52k, False: 2.05k]
  ------------------
 4090|  3.52k|            return detail::unexpected_scan_error(
 4091|  3.52k|                scan_error::invalid_scanned_value,
 4092|  3.52k|                "No exponent given to scientific float");
 4093|  3.52k|        }
 4094|       |
 4095|   289k|        m_kind =
 4096|   289k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 273k, False: 15.9k]
  ------------------
 4097|       |
 4098|   289k|        return it;
 4099|   292k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3877|   692k|    {
 3878|   692k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 692k]
  |  |  |  Branch (1014:45): [True: 0, False: 692k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   692k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   692k|        return read_while1_code_unit(
 3887|   692k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   692k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   692k|        : m_fptr([](storage fn,
  753|   692k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   692k|              cvref<T> obj = *get<T>(fn);
  755|   692k|              if constexpr (std::is_void_v<R>) {
  756|   692k|                  obj(static_cast<decltype(args)>(args)...);
  757|   692k|              }
  758|   692k|              else {
  759|   692k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   692k|              }
  761|   692k|          }),
  762|   692k|          m_storage(std::addressof(f))
  763|   692k|    {
  764|   692k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.04M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.04M|              else {
  759|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.04M|              }
  761|  1.04M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  689|  1.04M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.04M|        else if constexpr (std::is_object_v<T>) {
  694|  1.04M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.04M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3887|  1.04M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   692k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   692k|        {
  668|   692k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1700|   368k|    {
 1701|   368k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   368k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  26.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  26.4k|        {
  668|  26.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  87.9k|        : m_fptr([](storage fn,
  753|  87.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.9k|              cvref<T> obj = *get<T>(fn);
  755|  87.9k|              if constexpr (std::is_void_v<R>) {
  756|  87.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  87.9k|              }
  758|  87.9k|              else {
  759|  87.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.9k|              }
  761|  87.9k|          }),
  762|  87.9k|          m_storage(std::addressof(f))
  763|  87.9k|    {
  764|  87.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  87.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  87.9k|              else {
  759|  87.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.9k|              }
  761|  87.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  87.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  87.9k|        else if constexpr (std::is_object_v<T>) {
  694|  87.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  87.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  87.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  87.9k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3780|   408k|    {
 3781|   408k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   408k|        return read_source_impl(range);
 3787|   408k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  87.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  87.9k|        {
  668|  87.9k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   114k|    {
 4298|   114k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   114k|#if !SCN_DISABLE_LOCALE
 4301|   114k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 26.4k, False: 87.9k]
  ------------------
 4302|  26.4k|            return read_impl<Range>(
 4303|  26.4k|                range, rd,
 4304|  26.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  26.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  26.4k|                },
 4307|  26.4k|                value, loc);
 4308|  26.4k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  87.9k|        return read_impl<Range>(
 4314|  87.9k|            range, rd,
 4315|  87.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.9k|                return r.read_source(SCN_FWD(args)...);
 4317|  87.9k|            },
 4318|  87.9k|            value);
 4319|   114k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   154k|    {
 4336|   154k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   154k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.2k, False: 133k]
  |  |  ------------------
  ------------------
 4338|  20.2k|            return unexpected(r.error());
 4339|  20.2k|        }
 4340|       |
 4341|   133k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.2k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.2k|    }                                                  \
  |  |  |  | 3995|   154k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   109k|        return ranges::next(range.begin(), n);
 4343|   133k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|   498k|    {
  773|   498k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   498k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  26.4k|        : m_fptr([](storage fn,
  753|  26.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  26.4k|              cvref<T> obj = *get<T>(fn);
  755|  26.4k|              if constexpr (std::is_void_v<R>) {
  756|  26.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  26.4k|              }
  758|  26.4k|              else {
  759|  26.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  26.4k|              }
  761|  26.4k|          }),
  762|  26.4k|          m_storage(std::addressof(f))
  763|  26.4k|    {
  764|  26.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  26.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  26.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  26.4k|              else {
  759|  26.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  26.4k|              }
  761|  26.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  26.4k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  26.4k|        else if constexpr (std::is_object_v<T>) {
  694|  26.4k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  26.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  26.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  26.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  26.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|  89.7k|    {
 3795|  89.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  89.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  89.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  89.7k|        return read_source_impl(range);
 3801|  89.7k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|   498k|    {
 3821|   498k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 498k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   498k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   498k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   498k|        auto it = sign_result.first;
 3824|   498k|        m_sign = sign_result.second;
 3825|       |
 3826|   498k|        auto digits_begin = it;
 3827|   498k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|   498k|                      ranges::sized_range<Range>) {
 3830|   498k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|   997k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 498k]
  |  |  |  Branch (1014:45): [True: 0, False: 498k]
  |  |  |  Branch (1014:45): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 3831|   498k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|   498k|            else {
 3840|   498k|                auto cb = [&](const auto& rr)
 3841|   498k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   498k|                    auto res = read_all(rr);
 3843|   498k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|   498k|                        return detail::unexpected_scan_error(
 3845|   498k|                            scan_error::invalid_scanned_value,
 3846|   498k|                            "Invalid float value");
 3847|   498k|                    }
 3848|   498k|                    return res;
 3849|   498k|                };
 3850|   498k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 61.3k, False: 437k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  61.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  61.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  61.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  61.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  61.3k|    }                                                  \
  |  | 3995|   498k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|   437k|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|   498k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   437k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 437k, False: 0]
  |  Branch (3863:48): [True: 437k, False: 0]
  ------------------
 3864|   437k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 437k, False: 0]
  ------------------
 3865|   437k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 437k, False: 0]
  ------------------
 3866|   437k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   437k|        }
 3868|       |
 3869|   437k|        handle_separators();
 3870|       |
 3871|   437k|        return it;
 3872|   498k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|   498k|    {
 3915|   498k|        auto it = range.begin();
 3916|   498k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 498k, False: 0]
  ------------------
 3917|   498k|            return unexpected(r.error());
 3918|   498k|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|   498k|    {
 3938|   498k|        auto it = range.begin();
 3939|   498k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 498k, False: 0]
  ------------------
 3940|   498k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   498k|                scan_error::invalid_scanned_value,
 3942|   498k|                "Invalid floating-point NaN value"));
 3943|   498k|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|   322k|    {
 3908|   322k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   322k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|   300k|{
 2154|   300k|    auto it = read_while_code_unit(range, pred);
 2155|   300k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 174k, False: 125k]
  ------------------
 2156|   174k|        return unexpected(parse_error::error);
 2157|   174k|    }
 2158|   125k|    return it;
 2159|   300k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3980|  68.5k|    {
 3981|  68.5k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 6.58k, False: 61.9k]
  ------------------
 3982|  6.58k|            auto beg_exp_it = range.begin();
 3983|  6.58k|            auto it = *r;
 3984|       |
 3985|  6.58k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 6.56k, False: 24]
  ------------------
 3986|  6.58k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  6.56k|                it = r_sign->first;
 3988|  6.56k|            }
 3989|       |
 3990|  6.58k|            if (auto r_exp = read_while1_code_unit(
 3991|  6.58k|                    ranges::subrange{it, range.end()},
 3992|  6.58k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  6.58k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 556, False: 6.03k]
  |  |  ------------------
  ------------------
 3994|    556|                it = beg_exp_it;
 3995|    556|            }
 3996|  6.03k|            else {
 3997|  6.03k|                it = *r_exp;
 3998|  6.03k|            }
 3999|       |
 4000|  6.58k|            return it;
 4001|  6.58k|        }
 4002|  61.9k|        return range.begin();
 4003|  68.5k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  752|  6.58k|        : m_fptr([](storage fn,
  753|  6.58k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  6.58k|              cvref<T> obj = *get<T>(fn);
  755|  6.58k|              if constexpr (std::is_void_v<R>) {
  756|  6.58k|                  obj(static_cast<decltype(args)>(args)...);
  757|  6.58k|              }
  758|  6.58k|              else {
  759|  6.58k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  6.58k|              }
  761|  6.58k|          }),
  762|  6.58k|          m_storage(std::addressof(f))
  763|  6.58k|    {
  764|  6.58k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  753|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  17.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  17.9k|              else {
  759|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  17.9k|              }
  761|  17.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  689|  17.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  17.9k|        else if constexpr (std::is_object_v<T>) {
  694|  17.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  17.9k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3992|  17.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|  6.58k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  6.58k|        {
  668|  6.58k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|   175k|    {
 4050|   175k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   175k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 105k, False: 70.3k]
  |  Branch (4051:50): [True: 22.8k, False: 82.6k]
  ------------------
 4052|       |
 4053|   175k|        auto it = ranges::begin(range);
 4054|   175k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   175k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 57.6k, False: 118k]
  |  |  ------------------
  ------------------
 4058|  57.6k|            return r.transform_error(
 4059|  57.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  57.6k|                                              "Invalid floating-point value"));
 4061|  57.6k|        }
 4062|   118k|        else {
 4063|   118k|            digits_count += ranges::distance(it, *r);
 4064|   118k|            it = *r;
 4065|   118k|        }
 4066|       |
 4067|   118k|        m_integral_part_length = digits_count;
 4068|   118k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 1.96k, False: 116k]
  ------------------
 4069|   118k|                                             m_locale_options.decimal_point)) {
 4070|  1.96k|            it = *r;
 4071|  1.96k|        }
 4072|       |
 4073|   118k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 1.59k, False: 116k]
  ------------------
 4074|   118k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  1.59k|            digits_count += ranges::distance(it, *r);
 4076|  1.59k|            it = *r;
 4077|  1.59k|        }
 4078|       |
 4079|   118k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   118k|        auto beg_exp_it = it;
 4086|   118k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 68.5k, False: 49.6k]
  ------------------
 4087|  68.5k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|  68.5k|        }
 4089|   118k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 5.58k, False: 112k]
  |  Branch (4089:29): [True: 3.52k, False: 2.05k]
  ------------------
 4090|  3.52k|            return detail::unexpected_scan_error(
 4091|  3.52k|                scan_error::invalid_scanned_value,
 4092|  3.52k|                "No exponent given to scientific float");
 4093|  3.52k|        }
 4094|       |
 4095|   114k|        m_kind =
 4096|   114k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 108k, False: 6.03k]
  ------------------
 4097|       |
 4098|   114k|        return it;
 4099|   118k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|   294k|    {
 3878|   294k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 294k]
  |  |  |  Branch (1014:45): [True: 0, False: 294k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   294k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   294k|        return read_while1_code_unit(
 3887|   294k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   294k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|   294k|        : m_fptr([](storage fn,
  753|   294k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   294k|              cvref<T> obj = *get<T>(fn);
  755|   294k|              if constexpr (std::is_void_v<R>) {
  756|   294k|                  obj(static_cast<decltype(args)>(args)...);
  757|   294k|              }
  758|   294k|              else {
  759|   294k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   294k|              }
  761|   294k|          }),
  762|   294k|          m_storage(std::addressof(f))
  763|   294k|    {
  764|   294k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  753|   439k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   439k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   439k|              else {
  759|   439k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   439k|              }
  761|   439k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  689|   439k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   439k|        else if constexpr (std::is_object_v<T>) {
  694|   439k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   439k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3887|   439k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   294k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   294k|        {
  668|   294k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|   498k|    {
 4107|   498k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   498k|        const bool allowed_nonhex =
 4109|   498k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   498k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   498k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 498k, False: 0]
  |  Branch (4112:45): [True: 0, False: 498k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   498k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 498k]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|   498k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 498k, False: 0]
  |  Branch (4121:45): [True: 0, False: 498k]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|   498k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 498k]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|   498k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 322k, False: 175k]
  |  Branch (4128:28): [True: 98.4k, False: 224k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|  98.4k|            auto it = range.begin();
 4132|       |
 4133|  98.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 210, False: 98.2k]
  ------------------
 4134|    210|                m_kind = float_kind::hex_with_prefix;
 4135|    210|                it = *r;
 4136|    210|            }
 4137|  98.2k|            else {
 4138|  98.2k|                m_kind = float_kind::hex_without_prefix;
 4139|  98.2k|            }
 4140|       |
 4141|  98.4k|            return read_hex(ranges::subrange{it, range.end()});
 4142|  98.4k|        }
 4143|   400k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 175k, False: 224k]
  |  Branch (4143:29): [True: 175k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   175k|            m_kind = float_kind::generic;
 4147|   175k|            return read_regular_float(range);
 4148|   175k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   224k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 485, False: 223k]
  |  |  ------------------
  ------------------
 4154|    485|            m_kind = float_kind::hex_with_prefix;
 4155|    485|            return read_hex(ranges::subrange{*r, range.end()});
 4156|    485|        }
 4157|       |
 4158|   223k|        m_kind = float_kind::generic;
 4159|   223k|        return read_regular(range);
 4160|   224k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|   322k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   322k|                    auto res = read_all(rr);
 3843|   322k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 155, False: 322k]
  |  |  ------------------
  ------------------
 3844|    155|                        return detail::unexpected_scan_error(
 3845|    155|                            scan_error::invalid_scanned_value,
 3846|    155|                            "Invalid float value");
 3847|    155|                    }
 3848|   322k|                    return res;
 3849|   322k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|   322k|{
 1964|   322k|    return ranges::next(range.begin(), range.end());
 1965|   322k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   322k|    {
  313|   322k|        ranges::advance(x, bound);
  314|   322k|        return x;
  315|   322k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   322k|    {
  275|   322k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   322k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|   437k|    {
 1701|   437k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   437k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1744|   437k|    {
 1745|   437k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|   437k|                      ranges::sized_range<Range>) {
 1750|   437k|            m_storage.reset();
 1751|   437k|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   437k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  26.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  26.4k|        {
  668|  26.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  87.9k|        : m_fptr([](storage fn,
  753|  87.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.9k|              cvref<T> obj = *get<T>(fn);
  755|  87.9k|              if constexpr (std::is_void_v<R>) {
  756|  87.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  87.9k|              }
  758|  87.9k|              else {
  759|  87.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.9k|              }
  761|  87.9k|          }),
  762|  87.9k|          m_storage(std::addressof(f))
  763|  87.9k|    {
  764|  87.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  87.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  87.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  87.9k|              else {
  759|  87.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  87.9k|              }
  761|  87.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  87.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  87.9k|        else if constexpr (std::is_object_v<T>) {
  694|  87.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  87.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  87.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  87.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  87.9k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|   408k|    {
 3781|   408k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   408k|        return read_source_impl(range);
 3787|   408k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  87.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  87.9k|        {
  668|  87.9k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   124k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   124k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   124k|            auto rd = make_reader<T, char_type>();
 6336|   124k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   124k|    do {                                                            \
  |  | 3985|   124k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   124k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   124k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 124k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   124k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   124k|                return impl(rd, range, value);
 6341|   124k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   124k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   124k|    {
 6261|   124k|        const bool need_skipped_width =
 6262|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 124k]
  |  Branch (6262:33): [True: 0, False: 124k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   124k|        auto it = rng.begin();
 6266|   124k|        std::ptrdiff_t prefix_width = 0;
 6267|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 124k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   124k|        else {
 6275|   124k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.07k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.07k|    }                                                  \
  |  |  |  | 3995|   124k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   123k|            std::tie(it, prefix_width) = prefix_result;
 6277|   123k|        }
 6278|   123k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   123k|        std::ptrdiff_t value_width = 0;
 6282|   123k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 123k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   123k|        else {
 6298|   123k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.1k, False: 89.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.1k|    }                                                  \
  |  | 3995|   123k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  89.3k|                                             specs, value, loc));
 6300|       |
 6301|  89.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 89.3k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  89.3k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  89.3k|        std::ptrdiff_t postfix_width = 0;
 6310|  89.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 88.7k, False: 540]
  ------------------
 6311|  88.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  88.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  88.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  88.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 88.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  88.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  88.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  88.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  88.7k|                                 value_width));
 6315|  88.7k|            std::tie(it, postfix_width) = postfix_result;
 6316|  88.7k|        }
 6317|       |
 6318|  89.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  89.3k|    do {                                                            \
  |  | 3985|  89.3k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 89.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  89.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  89.3k|            specs, prefix_width, value_width, postfix_width));
 6320|  89.3k|        return it;
 6321|  89.3k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|   276k|    {
 3807|   276k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   276k|        const std::ptrdiff_t sign_len =
 3810|   276k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.16k, False: 274k]
  ------------------
 3811|       |
 3812|   276k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.8k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.8k|    }                                                  \
  |  |  |  | 3995|   276k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   251k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   276k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   123k|    {
 4298|   123k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   123k|#if !SCN_DISABLE_LOCALE
 4301|   123k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 30.9k, False: 92.4k]
  ------------------
 4302|  30.9k|            return read_impl<Range>(
 4303|  30.9k|                range, rd,
 4304|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  30.9k|                },
 4307|  30.9k|                value, loc);
 4308|  30.9k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  92.4k|        return read_impl<Range>(
 4314|  92.4k|            range, rd,
 4315|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  92.4k|                return r.read_source(SCN_FWD(args)...);
 4317|  92.4k|            },
 4318|  92.4k|            value);
 4319|   123k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   169k|    {
 4336|   169k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 43.4k, False: 126k]
  |  |  ------------------
  ------------------
 4338|  43.4k|            return unexpected(r.error());
 4339|  43.4k|        }
 4340|       |
 4341|   126k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 899, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    899|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    899|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    899|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    899|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    899|    }                                                  \
  |  |  |  | 3995|   169k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   125k|        return ranges::next(range.begin(), n);
 4343|   126k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  30.9k|        : m_fptr([](storage fn,
  753|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  30.9k|              cvref<T> obj = *get<T>(fn);
  755|  30.9k|              if constexpr (std::is_void_v<R>) {
  756|  30.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  30.9k|              }
  758|  30.9k|              else {
  759|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  30.9k|              }
  761|  30.9k|          }),
  762|  30.9k|          m_storage(std::addressof(f))
  763|  30.9k|    {
  764|  30.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  30.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  30.9k|              else {
  759|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  30.9k|              }
  761|  30.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  30.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  30.9k|        else if constexpr (std::is_object_v<T>) {
  694|  30.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  30.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  30.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  30.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  30.9k|        {
  668|  30.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  92.4k|        : m_fptr([](storage fn,
  753|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  92.4k|              cvref<T> obj = *get<T>(fn);
  755|  92.4k|              if constexpr (std::is_void_v<R>) {
  756|  92.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  92.4k|              }
  758|  92.4k|              else {
  759|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  92.4k|              }
  761|  92.4k|          }),
  762|  92.4k|          m_storage(std::addressof(f))
  763|  92.4k|    {
  764|  92.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  92.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  92.4k|              else {
  759|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  92.4k|              }
  761|  92.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  92.4k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  92.4k|        else if constexpr (std::is_object_v<T>) {
  694|  92.4k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  92.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  92.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  92.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  92.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  92.4k|        {
  668|  92.4k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   123k|    {
 4298|   123k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   123k|#if !SCN_DISABLE_LOCALE
 4301|   123k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 31.0k, False: 92.5k]
  ------------------
 4302|  31.0k|            return read_impl<Range>(
 4303|  31.0k|                range, rd,
 4304|  31.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  31.0k|                },
 4307|  31.0k|                value, loc);
 4308|  31.0k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  92.5k|        return read_impl<Range>(
 4314|  92.5k|            range, rd,
 4315|  92.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  92.5k|                return r.read_source(SCN_FWD(args)...);
 4317|  92.5k|            },
 4318|  92.5k|            value);
 4319|   123k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   170k|    {
 4336|   170k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   170k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.4k, False: 149k]
  |  |  ------------------
  ------------------
 4338|  20.4k|            return unexpected(r.error());
 4339|  20.4k|        }
 4340|       |
 4341|   149k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.9k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.9k|    }                                                  \
  |  |  |  | 3995|   170k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   125k|        return ranges::next(range.begin(), n);
 4343|   149k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  31.0k|        : m_fptr([](storage fn,
  753|  31.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.0k|              cvref<T> obj = *get<T>(fn);
  755|  31.0k|              if constexpr (std::is_void_v<R>) {
  756|  31.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  31.0k|              }
  758|  31.0k|              else {
  759|  31.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.0k|              }
  761|  31.0k|          }),
  762|  31.0k|          m_storage(std::addressof(f))
  763|  31.0k|    {
  764|  31.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  31.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  31.0k|              else {
  759|  31.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.0k|              }
  761|  31.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  31.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  31.0k|        else if constexpr (std::is_object_v<T>) {
  694|  31.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  31.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  31.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  31.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  31.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  31.0k|        {
  668|  31.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  92.5k|        : m_fptr([](storage fn,
  753|  92.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  92.5k|              cvref<T> obj = *get<T>(fn);
  755|  92.5k|              if constexpr (std::is_void_v<R>) {
  756|  92.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  92.5k|              }
  758|  92.5k|              else {
  759|  92.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  92.5k|              }
  761|  92.5k|          }),
  762|  92.5k|          m_storage(std::addressof(f))
  763|  92.5k|    {
  764|  92.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  92.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  92.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  92.5k|              else {
  759|  92.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  92.5k|              }
  761|  92.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  92.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  92.5k|        else if constexpr (std::is_object_v<T>) {
  694|  92.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  92.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  92.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  92.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  92.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  92.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  92.5k|        {
  668|  92.5k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   127k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   127k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   127k|            auto rd = make_reader<T, char_type>();
 6336|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   127k|    do {                                                            \
  |  | 3985|   127k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   127k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   127k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 127k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   127k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   127k|                return impl(rd, range, value);
 6341|   127k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   127k|    {
 6261|   127k|        const bool need_skipped_width =
 6262|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 127k]
  |  Branch (6262:33): [True: 0, False: 127k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   127k|        auto it = rng.begin();
 6266|   127k|        std::ptrdiff_t prefix_width = 0;
 6267|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 127k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   127k|        else {
 6275|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.15k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.15k|    }                                                  \
  |  |  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   125k|            std::tie(it, prefix_width) = prefix_result;
 6277|   125k|        }
 6278|   125k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   125k|        std::ptrdiff_t value_width = 0;
 6282|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 125k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   125k|        else {
 6298|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.0k, False: 91.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.0k|    }                                                  \
  |  | 3995|   125k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  91.9k|                                             specs, value, loc));
 6300|       |
 6301|  91.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 91.9k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  91.9k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  91.9k|        std::ptrdiff_t postfix_width = 0;
 6310|  91.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 91.3k, False: 598]
  ------------------
 6311|  91.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  91.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  91.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  91.3k|                                 value_width));
 6315|  91.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  91.3k|        }
 6317|       |
 6318|  91.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  91.9k|    do {                                                            \
  |  | 3985|  91.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  91.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  91.9k|            specs, prefix_width, value_width, postfix_width));
 6320|  91.9k|        return it;
 6321|  91.9k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3806|   283k|    {
 3807|   283k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   283k|        const std::ptrdiff_t sign_len =
 3810|   283k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.21k, False: 281k]
  ------------------
 3811|       |
 3812|   283k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.6k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.6k|    }                                                  \
  |  |  |  | 3995|   283k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   260k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   283k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   125k|    {
 4298|   125k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   125k|#if !SCN_DISABLE_LOCALE
 4301|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 32.2k, False: 93.7k]
  ------------------
 4302|  32.2k|            return read_impl<Range>(
 4303|  32.2k|                range, rd,
 4304|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  32.2k|                },
 4307|  32.2k|                value, loc);
 4308|  32.2k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  93.7k|        return read_impl<Range>(
 4314|  93.7k|            range, rd,
 4315|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.7k|                return r.read_source(SCN_FWD(args)...);
 4317|  93.7k|            },
 4318|  93.7k|            value);
 4319|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   174k|    {
 4336|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 44.0k, False: 130k]
  |  |  ------------------
  ------------------
 4338|  44.0k|            return unexpected(r.error());
 4339|  44.0k|        }
 4340|       |
 4341|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 133, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    133|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    133|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    133|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    133|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    133|    }                                                  \
  |  |  |  | 3995|   174k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   130k|        return ranges::next(range.begin(), n);
 4343|   130k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  32.2k|        : m_fptr([](storage fn,
  753|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  32.2k|              cvref<T> obj = *get<T>(fn);
  755|  32.2k|              if constexpr (std::is_void_v<R>) {
  756|  32.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  32.2k|              }
  758|  32.2k|              else {
  759|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  32.2k|              }
  761|  32.2k|          }),
  762|  32.2k|          m_storage(std::addressof(f))
  763|  32.2k|    {
  764|  32.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  32.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  32.2k|              else {
  759|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  32.2k|              }
  761|  32.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  32.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  32.2k|        else if constexpr (std::is_object_v<T>) {
  694|  32.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  32.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  32.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  32.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  32.2k|        {
  668|  32.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  93.7k|        : m_fptr([](storage fn,
  753|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.7k|              cvref<T> obj = *get<T>(fn);
  755|  93.7k|              if constexpr (std::is_void_v<R>) {
  756|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  93.7k|              }
  758|  93.7k|              else {
  759|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.7k|              }
  761|  93.7k|          }),
  762|  93.7k|          m_storage(std::addressof(f))
  763|  93.7k|    {
  764|  93.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  93.7k|              else {
  759|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.7k|              }
  761|  93.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  93.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  93.7k|        else if constexpr (std::is_object_v<T>) {
  694|  93.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  93.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  93.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  93.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  93.7k|        {
  668|  93.7k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   126k|    {
 4298|   126k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   126k|#if !SCN_DISABLE_LOCALE
 4301|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 32.2k, False: 93.8k]
  ------------------
 4302|  32.2k|            return read_impl<Range>(
 4303|  32.2k|                range, rd,
 4304|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  32.2k|                },
 4307|  32.2k|                value, loc);
 4308|  32.2k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  93.8k|        return read_impl<Range>(
 4314|  93.8k|            range, rd,
 4315|  93.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.8k|                return r.read_source(SCN_FWD(args)...);
 4317|  93.8k|            },
 4318|  93.8k|            value);
 4319|   126k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   174k|    {
 4336|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.6k, False: 153k]
  |  |  ------------------
  ------------------
 4338|  20.6k|            return unexpected(r.error());
 4339|  20.6k|        }
 4340|       |
 4341|   153k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.5k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.5k|    }                                                  \
  |  |  |  | 3995|   174k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   130k|        return ranges::next(range.begin(), n);
 4343|   153k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  32.2k|        : m_fptr([](storage fn,
  753|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  32.2k|              cvref<T> obj = *get<T>(fn);
  755|  32.2k|              if constexpr (std::is_void_v<R>) {
  756|  32.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  32.2k|              }
  758|  32.2k|              else {
  759|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  32.2k|              }
  761|  32.2k|          }),
  762|  32.2k|          m_storage(std::addressof(f))
  763|  32.2k|    {
  764|  32.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  32.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  32.2k|              else {
  759|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  32.2k|              }
  761|  32.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  32.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  32.2k|        else if constexpr (std::is_object_v<T>) {
  694|  32.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  32.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  32.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  32.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  32.2k|        {
  668|  32.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  93.8k|        : m_fptr([](storage fn,
  753|  93.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.8k|              cvref<T> obj = *get<T>(fn);
  755|  93.8k|              if constexpr (std::is_void_v<R>) {
  756|  93.8k|                  obj(static_cast<decltype(args)>(args)...);
  757|  93.8k|              }
  758|  93.8k|              else {
  759|  93.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.8k|              }
  761|  93.8k|          }),
  762|  93.8k|          m_storage(std::addressof(f))
  763|  93.8k|    {
  764|  93.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  93.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  93.8k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  93.8k|              else {
  759|  93.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  93.8k|              }
  761|  93.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  93.8k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  93.8k|        else if constexpr (std::is_object_v<T>) {
  694|  93.8k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  93.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  93.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  93.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  93.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  93.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  93.8k|        {
  668|  93.8k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   502k|{
 2220|   502k|    auto it = range.begin();
 2221|   879k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 875k, False: 3.72k]
  ------------------
 2222|   875k|        const auto val =
 2223|   875k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   875k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   875k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 875k, False: 0]
  |  |  ------------------
  ------------------
 2225|   875k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   875k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   875k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   875k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 498k, False: 377k]
  ------------------
 2229|   498k|                return it;
 2230|   498k|            }
 2231|   875k|        }
 2232|   377k|        it = val.iterator;
 2233|   377k|    }
 2234|       |
 2235|  3.72k|    return it;
 2236|   502k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   875k|{
 2024|   875k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   875k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   875k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   875k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   875k|    auto it = range.begin();
 2028|   875k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   875k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 875k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   875k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 875k, False: 0]
  ------------------
 2037|   875k|        ++it;
 2038|   875k|        return {it, string_type(1, *range.begin())};
 2039|   875k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   875k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|   875k|    {
 2015|   875k|        return !codepoint.empty();
 2016|   875k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   502k|{
 2242|   502k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   502k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   502k|{
 3129|   502k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 502k, False: 0]
  ------------------
 3130|   502k|        auto it = read_while_classic_space(range);
 3131|   502k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   502k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.72k, False: 498k]
  |  |  ------------------
  ------------------
 3133|  3.72k|            return unexpected(e);
 3134|  3.72k|        }
 3135|       |
 3136|   498k|        return it;
 3137|   502k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   502k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   502k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   502k|    else {
 2286|   502k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   502k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   502k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   502k|            return detail::is_cp_space(cp);
 2300|   502k|        });
 2301|   502k|    }
 2302|   502k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   502k|        : m_fptr([](storage fn,
  753|   502k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   502k|              cvref<T> obj = *get<T>(fn);
  755|   502k|              if constexpr (std::is_void_v<R>) {
  756|   502k|                  obj(static_cast<decltype(args)>(args)...);
  757|   502k|              }
  758|   502k|              else {
  759|   502k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   502k|              }
  761|   502k|          }),
  762|   502k|          m_storage(std::addressof(f))
  763|   502k|    {
  764|   502k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   875k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   875k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   875k|              else {
  759|   875k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   875k|              }
  761|   875k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   875k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   875k|        else if constexpr (std::is_object_v<T>) {
  694|   875k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   875k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   875k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   875k|            return detail::is_cp_space(cp);
 2300|   875k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   502k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   502k|        {
  668|   502k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3650|  15.1k|    {
 3651|  15.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  15.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  15.1k|        return read_default_with_base(range, value, 10);
 3653|  15.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3614|  15.1k|    {
 3615|  15.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  15.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.35k, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.35k|    }                                                  \
  |  |  |  | 3995|  15.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  12.8k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  12.8k|        if constexpr (!std::is_signed_v<T>) {
 3619|  12.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 0, False: 12.8k]
  ------------------
 3620|      0|                return detail::unexpected_scan_error(
 3621|      0|                    scan_error::invalid_scanned_value,
 3622|      0|                    "Unexpected '-' sign when parsing an "
 3623|      0|                    "unsigned value");
 3624|      0|            }
 3625|  12.8k|        }
 3626|       |
 3627|  12.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 12.8k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  25.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  25.6k|                parse_integer_digits_without_thsep(
 3634|  25.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  25.6k|                    prefix_result.parsed_base));
 3636|       |
 3637|  25.6k|        auto buf = make_contiguous_buffer(
 3638|  25.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  25.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.47k, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.47k|    }                                                  \
  |  |  |  | 3995|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  11.3k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  11.3k|        return ranges::next(prefix_result.iterator,
 3644|  11.3k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  25.6k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3439|  15.1k|{
 3440|  15.1k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|  15.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  15.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  15.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.35k, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.35k|    }                                                  \
  |  |  |  | 3995|  15.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.8k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|  12.8k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|  12.8k|        parse_integer_base_prefix(
 3445|  12.8k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|  12.8k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 0, False: 12.8k]
  ------------------
 3448|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 0, False: 0]
  ------------------
 3449|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 0, False: 0]
  ------------------
 3450|      0|            digits_begin_it = base_prefix_begin_it;
 3451|      0|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|      0|    }
 3456|  12.8k|    else {
 3457|  12.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 12.8k]
  ------------------
 3458|  12.8k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 276, False: 12.5k]
  ------------------
 3459|    276|            digits_begin_it = base_prefix_begin_it;
 3460|    276|        }
 3461|  12.8k|    }
 3462|       |
 3463|  12.8k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 12.8k, False: 0]
  ------------------
 3464|  12.8k|        sign = sign_type::plus_sign;
 3465|  12.8k|    }
 3466|  12.8k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|  12.8k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|  15.1k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3320|  15.1k|{
 3321|  15.1k|    auto r = read_one_of_code_unit(range, "+-");
 3322|  15.1k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 15.1k, False: 0]
  ------------------
 3323|  15.1k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 12.8k, False: 2.35k]
  ------------------
 3324|  12.8k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|  12.8k|        }
 3326|  2.35k|        return unexpected(eof_error::eof);
 3327|  15.1k|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2434|  15.1k|{
 2435|  15.1k|    auto it = read_code_unit(range);
 2436|  15.1k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.35k, False: 12.8k]
  |  |  ------------------
  ------------------
 2437|  2.35k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  2.35k|    }
 2439|       |
 2440|  25.6k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 25.6k, False: 12.8k]
  ------------------
 2441|  25.6k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 25.6k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  25.6k|    }
 2445|       |
 2446|  12.8k|    return unexpected(parse_error::error);
 2447|  12.8k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1970|  15.1k|{
 1971|  15.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.35k, False: 12.8k]
  |  |  ------------------
  ------------------
 1972|  2.35k|        return unexpected(e);
 1973|  2.35k|    }
 1974|       |
 1975|  12.8k|    return ranges::next(range.begin());
 1976|  15.1k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  960|  15.1k|{
  961|  15.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.35k, False: 12.8k]
  |  |  ------------------
  ------------------
  962|  2.35k|        return eof_error::eof;
  963|  2.35k|    }
  964|  12.8k|    return eof_error::good;
  965|  15.1k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  954|  15.1k|{
  955|  15.1k|    return is_range_eof(r.begin(), r.end());
  956|  15.1k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2247|   818k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|   818k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|   818k|        auto buf = make_contiguous_buffer(range);
 2252|   818k|        auto it = find_classic_space_narrow_fast(buf.view());
 2253|   818k|        return ranges::next(range.begin(),
 2254|   818k|                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|       |    else {
 2257|       |        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|       |        return read_until_code_point(
 2269|       |            ranges::subrange{it, range.end()},
 2270|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|       |    }
 2272|   818k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1807|   818k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   818k|                  ranges::sized_range<Range>) {
 1811|   818k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   818k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1612|   818k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   818k|    {
 1614|   818k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1700|   818k|    {
 1701|   818k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   818k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1744|   818k|    {
 1745|   818k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|   818k|                                          std::basic_string<CharT>>) {
 1755|   818k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1085|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1756|   818k|            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   818k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4206|   302k|    {
 4207|   302k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 35.9k, False: 266k]
  ------------------
 4208|  35.9k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  35.9k|        }
 4210|   266k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   302k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2247|   715k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   715k|    else {
 2257|   715k|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|   715k|        return read_until_code_point(
 2269|   715k|            ranges::subrange{it, range.end()},
 2270|   715k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   715k|    }
 2272|   715k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  752|   715k|        : m_fptr([](storage fn,
  753|   715k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   715k|              cvref<T> obj = *get<T>(fn);
  755|   715k|              if constexpr (std::is_void_v<R>) {
  756|   715k|                  obj(static_cast<decltype(args)>(args)...);
  757|   715k|              }
  758|   715k|              else {
  759|   715k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   715k|              }
  761|   715k|          }),
  762|   715k|          m_storage(std::addressof(f))
  763|   715k|    {
  764|   715k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  753|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.29M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.29M|              else {
  759|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.29M|              }
  761|  1.29M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  689|  1.29M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.29M|        else if constexpr (std::is_object_v<T>) {
  694|  1.29M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.29M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2270|  1.29M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  666|   715k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   715k|        {
  668|   715k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1700|   715k|    {
 1701|   715k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   715k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   715k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1744|   715k|    {
 1745|   715k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|   715k|                                          std::basic_string<CharT>>) {
 1755|   715k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1085|   715k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1756|   715k|            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   715k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4206|   219k|    {
 4207|   219k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.13k, False: 218k]
  ------------------
 4208|  1.13k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.13k|        }
 4210|   218k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   219k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4206|   315k|    {
 4207|   315k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 38.1k, False: 277k]
  ------------------
 4208|  38.1k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  38.1k|        }
 4210|   277k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   315k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4206|   251k|    {
 4207|   251k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.17k, False: 250k]
  ------------------
 4208|  1.17k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.17k|        }
 4210|   250k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   251k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4206|   321k|    {
 4207|   321k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 40.1k, False: 281k]
  ------------------
 4208|  40.1k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  40.1k|        }
 4210|   281k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   321k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4206|   260k|    {
 4207|   260k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.31k, False: 258k]
  ------------------
 4208|  1.31k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.31k|        }
 4210|   258k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   260k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   150k|{
 5922|   150k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 148k]
  |  |  ------------------
  ------------------
 5923|  1.80k|        return unexpected(e);
 5924|  1.80k|    }
 5925|       |
 5926|   148k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 148k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   148k|    return skip_classic_whitespace(range);
 5931|   148k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6009|  47.9k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  47.9k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  47.9k|            auto rd = make_reader<T, char_type>();
 6015|  47.9k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  47.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  47.9k|    {
 6002|  47.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 609, False: 47.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    609|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    609|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    609|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    609|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    609|    }                                                  \
  |  |  |  | 3995|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  47.3k|                        .transform_error(make_eof_scan_error));
 6004|  47.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  47.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  47.3k|    {
 4280|  47.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  47.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  47.3k|        float_reader<CharT> rd{};
 4283|  47.3k|        return read_impl<Range>(
 4284|  47.3k|            range, rd,
 4285|  47.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.3k|                return r.read_source(SCN_FWD(args)...);
 4287|  47.3k|            },
 4288|  47.3k|            value);
 4289|  47.3k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3773|   299k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3759|   568k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  47.3k|        : m_fptr([](storage fn,
  753|  47.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.3k|              cvref<T> obj = *get<T>(fn);
  755|  47.3k|              if constexpr (std::is_void_v<R>) {
  756|  47.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  47.3k|              }
  758|  47.3k|              else {
  759|  47.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.3k|              }
  761|  47.3k|          }),
  762|  47.3k|          m_storage(std::addressof(f))
  763|  47.3k|    {
  764|  47.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  47.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  47.3k|              else {
  759|  47.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.3k|              }
  761|  47.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  47.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  47.3k|        else if constexpr (std::is_object_v<T>) {
  694|  47.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  47.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  47.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  47.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  47.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  47.3k|        {
  668|  47.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|  50.4k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  50.4k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  50.4k|            auto rd = make_reader<T, char_type>();
 6015|  50.4k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  50.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  50.4k|    {
 6002|  50.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 717, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    717|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    717|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    717|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    717|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    717|    }                                                  \
  |  |  |  | 3995|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  49.6k|                        .transform_error(make_eof_scan_error));
 6004|  49.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  50.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  49.6k|    {
 4280|  49.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  49.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  49.6k|        float_reader<CharT> rd{};
 4283|  49.6k|        return read_impl<Range>(
 4284|  49.6k|            range, rd,
 4285|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.6k|                return r.read_source(SCN_FWD(args)...);
 4287|  49.6k|            },
 4288|  49.6k|            value);
 4289|  49.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  49.6k|        : m_fptr([](storage fn,
  753|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.6k|              cvref<T> obj = *get<T>(fn);
  755|  49.6k|              if constexpr (std::is_void_v<R>) {
  756|  49.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  49.6k|              }
  758|  49.6k|              else {
  759|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.6k|              }
  761|  49.6k|          }),
  762|  49.6k|          m_storage(std::addressof(f))
  763|  49.6k|    {
  764|  49.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  49.6k|              else {
  759|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.6k|              }
  761|  49.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  49.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  49.6k|        else if constexpr (std::is_object_v<T>) {
  694|  49.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  49.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  49.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  49.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  49.6k|        {
  668|  49.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6009|  51.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  51.8k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  51.8k|            auto rd = make_reader<T, char_type>();
 6015|  51.8k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  51.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  51.8k|    {
 6002|  51.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 816, False: 50.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    816|    }                                                  \
  |  |  |  | 3995|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  50.9k|                        .transform_error(make_eof_scan_error));
 6004|  50.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  51.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  50.9k|    {
 4280|  50.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  50.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  50.9k|        float_reader<CharT> rd{};
 4283|  50.9k|        return read_impl<Range>(
 4284|  50.9k|            range, rd,
 4285|  50.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.9k|                return r.read_source(SCN_FWD(args)...);
 4287|  50.9k|            },
 4288|  50.9k|            value);
 4289|  50.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  50.9k|        : m_fptr([](storage fn,
  753|  50.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.9k|              cvref<T> obj = *get<T>(fn);
  755|  50.9k|              if constexpr (std::is_void_v<R>) {
  756|  50.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  50.9k|              }
  758|  50.9k|              else {
  759|  50.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.9k|              }
  761|  50.9k|          }),
  762|  50.9k|          m_storage(std::addressof(f))
  763|  50.9k|    {
  764|  50.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  50.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  50.9k|              else {
  759|  50.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.9k|              }
  761|  50.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  50.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  50.9k|        else if constexpr (std::is_object_v<T>) {
  694|  50.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  50.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  50.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  50.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  50.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  50.9k|        {
  668|  50.9k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   153k|{
 5922|   153k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.82k, False: 151k]
  |  |  ------------------
  ------------------
 5923|  1.82k|        return unexpected(e);
 5924|  1.82k|    }
 5925|       |
 5926|   151k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 151k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   151k|    return skip_classic_whitespace(range);
 5931|   151k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  49.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  49.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  49.3k|            auto rd = make_reader<T, char_type>();
 6019|  49.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 49.3k, False: 0]
  ------------------
 6020|  49.3k|                return impl(rd, range, value);
 6021|  49.3k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  49.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  49.3k|    {
 6002|  49.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 621, False: 48.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    621|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    621|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    621|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    621|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    621|    }                                                  \
  |  |  |  | 3995|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  48.7k|                        .transform_error(make_eof_scan_error));
 6004|  48.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  49.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  48.7k|    {
 4280|  48.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  48.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  48.7k|        float_reader<CharT> rd{};
 4283|  48.7k|        return read_impl<Range>(
 4284|  48.7k|            range, rd,
 4285|  48.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.7k|                return r.read_source(SCN_FWD(args)...);
 4287|  48.7k|            },
 4288|  48.7k|            value);
 4289|  48.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  48.7k|        : m_fptr([](storage fn,
  753|  48.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.7k|              cvref<T> obj = *get<T>(fn);
  755|  48.7k|              if constexpr (std::is_void_v<R>) {
  756|  48.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  48.7k|              }
  758|  48.7k|              else {
  759|  48.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.7k|              }
  761|  48.7k|          }),
  762|  48.7k|          m_storage(std::addressof(f))
  763|  48.7k|    {
  764|  48.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  48.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  48.7k|              else {
  759|  48.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.7k|              }
  761|  48.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  48.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  48.7k|        else if constexpr (std::is_object_v<T>) {
  694|  48.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  48.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  48.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  48.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  48.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  48.7k|        {
  668|  48.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  51.5k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  51.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  51.5k|            auto rd = make_reader<T, char_type>();
 6019|  51.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 51.5k, False: 0]
  ------------------
 6020|  51.5k|                return impl(rd, range, value);
 6021|  51.5k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  51.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  51.5k|    {
 6002|  51.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 726, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    726|    }                                                  \
  |  |  |  | 3995|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  50.8k|                        .transform_error(make_eof_scan_error));
 6004|  50.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  51.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  50.8k|    {
 4280|  50.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  50.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  50.8k|        float_reader<CharT> rd{};
 4283|  50.8k|        return read_impl<Range>(
 4284|  50.8k|            range, rd,
 4285|  50.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.8k|                return r.read_source(SCN_FWD(args)...);
 4287|  50.8k|            },
 4288|  50.8k|            value);
 4289|  50.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  50.8k|        : m_fptr([](storage fn,
  753|  50.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.8k|              cvref<T> obj = *get<T>(fn);
  755|  50.8k|              if constexpr (std::is_void_v<R>) {
  756|  50.8k|                  obj(static_cast<decltype(args)>(args)...);
  757|  50.8k|              }
  758|  50.8k|              else {
  759|  50.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.8k|              }
  761|  50.8k|          }),
  762|  50.8k|          m_storage(std::addressof(f))
  763|  50.8k|    {
  764|  50.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  50.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.8k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  50.8k|              else {
  759|  50.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.8k|              }
  761|  50.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  50.8k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  50.8k|        else if constexpr (std::is_object_v<T>) {
  694|  50.8k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  50.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  50.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  50.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  50.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  50.8k|        {
  668|  50.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  52.4k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  52.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  52.4k|            auto rd = make_reader<T, char_type>();
 6019|  52.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 52.4k, False: 0]
  ------------------
 6020|  52.4k|                return impl(rd, range, value);
 6021|  52.4k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  52.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  52.4k|    {
 6002|  52.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 816, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    816|    }                                                  \
  |  |  |  | 3995|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  51.6k|                        .transform_error(make_eof_scan_error));
 6004|  51.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  52.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  51.6k|    {
 4280|  51.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  51.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  51.6k|        float_reader<CharT> rd{};
 4283|  51.6k|        return read_impl<Range>(
 4284|  51.6k|            range, rd,
 4285|  51.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.6k|                return r.read_source(SCN_FWD(args)...);
 4287|  51.6k|            },
 4288|  51.6k|            value);
 4289|  51.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  51.6k|        : m_fptr([](storage fn,
  753|  51.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.6k|              cvref<T> obj = *get<T>(fn);
  755|  51.6k|              if constexpr (std::is_void_v<R>) {
  756|  51.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  51.6k|              }
  758|  51.6k|              else {
  759|  51.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.6k|              }
  761|  51.6k|          }),
  762|  51.6k|          m_storage(std::addressof(f))
  763|  51.6k|    {
  764|  51.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  51.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  51.6k|              else {
  759|  51.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.6k|              }
  761|  51.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  51.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  51.6k|        else if constexpr (std::is_object_v<T>) {
  694|  51.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  51.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  51.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  51.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  51.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  51.6k|        {
  668|  51.6k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|   371k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   371k|    static_cast<    \
  |  | 1084|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   371k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   371k|          m_current(m_range.begin())
 3050|   371k|    {
 3051|   371k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   689k|    {
 3060|   689k|        return m_range.end();
 3061|   689k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|   318k|    {
 3075|   318k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   318k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   318k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 318k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   318k|        }
 3081|   318k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   318k|    static_cast<    \
  |  | 1084|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   318k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|   371k|    {
 3065|   371k|        return ranges::subrange{begin(), end()};
 3066|   371k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   371k|    {
 6174|   371k|        const bool need_skipped_width =
 6175|   371k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 371k]
  |  Branch (6175:33): [True: 0, False: 371k]
  ------------------
 6176|   371k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   371k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 371k]
  ------------------
 6180|   371k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 371k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   371k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 371k, False: 0]
  |  Branch (6184:56): [True: 371k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   371k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 371k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   736k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.76k, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.76k|    }                                                  \
  |  |  |  | 3995|   371k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   736k|                            make_eof_scan_error));
 6195|       |
 6196|   736k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 365k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   365k|            return result_type{it, 0};
 6204|   736k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   371k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   313k|    {
 6216|   313k|        const bool need_skipped_width =
 6217|   313k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 313k]
  |  Branch (6217:33): [True: 0, False: 313k]
  ------------------
 6218|   313k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   313k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 313k]
  ------------------
 6221|   313k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 313k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   313k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 313k, False: 0]
  ------------------
 6230|   313k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 313k]
  ------------------
 6231|   313k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   313k|        return result_type{rng.begin(), 0};
 6255|   313k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6325|   120k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   120k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   120k|            auto rd = make_reader<T, char_type>();
 6331|   120k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   120k|    do {                                                            \
  |  | 3985|   120k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 120k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   120k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   120k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   120k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   120k|    {
 6261|   120k|        const bool need_skipped_width =
 6262|   120k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 120k]
  |  Branch (6262:33): [True: 0, False: 120k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   120k|        auto it = rng.begin();
 6266|   120k|        std::ptrdiff_t prefix_width = 0;
 6267|   120k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 120k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   120k|        else {
 6275|   120k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.74k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.74k|    }                                                  \
  |  |  |  | 3995|   120k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   118k|            std::tie(it, prefix_width) = prefix_result;
 6277|   118k|        }
 6278|   118k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   118k|        std::ptrdiff_t value_width = 0;
 6282|   118k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 118k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   118k|        else {
 6298|   118k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.8k|    }                                                  \
  |  | 3995|   118k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   103k|                                             specs, value, loc));
 6300|       |
 6301|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 103k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   103k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   103k|        std::ptrdiff_t postfix_width = 0;
 6310|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 101k, False: 1.42k]
  ------------------
 6311|   101k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   101k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   101k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   101k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   101k|                                 value_width));
 6315|   101k|            std::tie(it, postfix_width) = postfix_result;
 6316|   101k|        }
 6317|       |
 6318|   103k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   103k|    do {                                                            \
  |  | 3985|   103k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   103k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   103k|            specs, prefix_width, value_width, postfix_width));
 6320|   103k|        return it;
 6321|   103k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|   124k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   124k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   124k|            auto rd = make_reader<T, char_type>();
 6331|   124k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   124k|    do {                                                            \
  |  | 3985|   124k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   124k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   124k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   124k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   124k|    {
 6261|   124k|        const bool need_skipped_width =
 6262|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 124k]
  |  Branch (6262:33): [True: 0, False: 124k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   124k|        auto it = rng.begin();
 6266|   124k|        std::ptrdiff_t prefix_width = 0;
 6267|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 124k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   124k|        else {
 6275|   124k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.92k, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.92k|    }                                                  \
  |  |  |  | 3995|   124k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   122k|            std::tie(it, prefix_width) = prefix_result;
 6277|   122k|        }
 6278|   122k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   122k|        std::ptrdiff_t value_width = 0;
 6282|   122k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 122k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   122k|        else {
 6298|   122k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.6k, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.6k|    }                                                  \
  |  | 3995|   122k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   106k|                                             specs, value, loc));
 6300|       |
 6301|   106k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 106k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   106k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   106k|        std::ptrdiff_t postfix_width = 0;
 6310|   106k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 105k, False: 1.59k]
  ------------------
 6311|   105k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   105k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   105k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   105k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   105k|                                 value_width));
 6315|   105k|            std::tie(it, postfix_width) = postfix_result;
 6316|   105k|        }
 6317|       |
 6318|   106k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   106k|    do {                                                            \
  |  | 3985|   106k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   106k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   106k|            specs, prefix_width, value_width, postfix_width));
 6320|   106k|        return it;
 6321|   106k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6325|   126k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   126k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   126k|            auto rd = make_reader<T, char_type>();
 6331|   126k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   126k|    do {                                                            \
  |  | 3985|   126k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   126k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   126k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   126k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   126k|    {
 6261|   126k|        const bool need_skipped_width =
 6262|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 126k]
  |  Branch (6262:33): [True: 0, False: 126k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   126k|        auto it = rng.begin();
 6266|   126k|        std::ptrdiff_t prefix_width = 0;
 6267|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 126k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   126k|        else {
 6275|   126k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.09k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.09k|    }                                                  \
  |  |  |  | 3995|   126k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   124k|            std::tie(it, prefix_width) = prefix_result;
 6277|   124k|        }
 6278|   124k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   124k|        std::ptrdiff_t value_width = 0;
 6282|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 124k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   124k|        else {
 6298|   124k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.5k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.5k|    }                                                  \
  |  | 3995|   124k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   108k|                                             specs, value, loc));
 6300|       |
 6301|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 108k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   108k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   108k|        std::ptrdiff_t postfix_width = 0;
 6310|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 106k, False: 1.73k]
  ------------------
 6311|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   106k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   106k|                                 value_width));
 6315|   106k|            std::tie(it, postfix_width) = postfix_result;
 6316|   106k|        }
 6317|       |
 6318|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   108k|    do {                                                            \
  |  | 3985|   108k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   108k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   108k|            specs, prefix_width, value_width, postfix_width));
 6320|   108k|        return it;
 6321|   108k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   135k|{
 5922|   135k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 594, False: 135k]
  |  |  ------------------
  ------------------
 5923|    594|        return unexpected(e);
 5924|    594|    }
 5925|       |
 5926|   135k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 135k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   135k|    return skip_classic_whitespace(range);
 5931|   135k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6009|  40.0k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  40.0k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  40.0k|            auto rd = make_reader<T, char_type>();
 6015|  40.0k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  40.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  40.0k|    {
 6002|  40.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  40.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 318, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    318|    }                                                  \
  |  |  |  | 3995|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  39.7k|                        .transform_error(make_eof_scan_error));
 6004|  39.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  40.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  39.7k|    {
 4280|  39.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  39.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  39.7k|        float_reader<CharT> rd{};
 4283|  39.7k|        return read_impl<Range>(
 4284|  39.7k|            range, rd,
 4285|  39.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  39.7k|                return r.read_source(SCN_FWD(args)...);
 4287|  39.7k|            },
 4288|  39.7k|            value);
 4289|  39.7k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3773|   269k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  39.7k|        : m_fptr([](storage fn,
  753|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  39.7k|              cvref<T> obj = *get<T>(fn);
  755|  39.7k|              if constexpr (std::is_void_v<R>) {
  756|  39.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  39.7k|              }
  758|  39.7k|              else {
  759|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  39.7k|              }
  761|  39.7k|          }),
  762|  39.7k|          m_storage(std::addressof(f))
  763|  39.7k|    {
  764|  39.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  39.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  39.7k|              else {
  759|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  39.7k|              }
  761|  39.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  39.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  39.7k|        else if constexpr (std::is_object_v<T>) {
  694|  39.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  39.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  39.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  39.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  39.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  39.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  39.7k|        {
  668|  39.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|  46.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  46.8k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  46.8k|            auto rd = make_reader<T, char_type>();
 6015|  46.8k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  46.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  46.8k|    {
 6002|  46.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 372, False: 46.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    372|    }                                                  \
  |  |  |  | 3995|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  46.5k|                        .transform_error(make_eof_scan_error));
 6004|  46.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  46.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  46.5k|    {
 4280|  46.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  46.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  46.5k|        float_reader<CharT> rd{};
 4283|  46.5k|        return read_impl<Range>(
 4284|  46.5k|            range, rd,
 4285|  46.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  46.5k|                return r.read_source(SCN_FWD(args)...);
 4287|  46.5k|            },
 4288|  46.5k|            value);
 4289|  46.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  46.5k|        : m_fptr([](storage fn,
  753|  46.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  46.5k|              cvref<T> obj = *get<T>(fn);
  755|  46.5k|              if constexpr (std::is_void_v<R>) {
  756|  46.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  46.5k|              }
  758|  46.5k|              else {
  759|  46.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  46.5k|              }
  761|  46.5k|          }),
  762|  46.5k|          m_storage(std::addressof(f))
  763|  46.5k|    {
  764|  46.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  46.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  46.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  46.5k|              else {
  759|  46.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  46.5k|              }
  761|  46.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  46.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  46.5k|        else if constexpr (std::is_object_v<T>) {
  694|  46.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  46.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  46.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  46.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  46.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  46.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  46.5k|        {
  668|  46.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6009|  48.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  48.7k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  48.7k|            auto rd = make_reader<T, char_type>();
 6015|  48.7k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  48.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  48.7k|    {
 6002|  48.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  48.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  48.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  48.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 423, False: 48.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    423|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    423|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    423|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    423|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    423|    }                                                  \
  |  |  |  | 3995|  48.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  48.3k|                        .transform_error(make_eof_scan_error));
 6004|  48.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  48.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  48.3k|    {
 4280|  48.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  48.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  48.3k|        float_reader<CharT> rd{};
 4283|  48.3k|        return read_impl<Range>(
 4284|  48.3k|            range, rd,
 4285|  48.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.3k|                return r.read_source(SCN_FWD(args)...);
 4287|  48.3k|            },
 4288|  48.3k|            value);
 4289|  48.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  48.3k|        : m_fptr([](storage fn,
  753|  48.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.3k|              cvref<T> obj = *get<T>(fn);
  755|  48.3k|              if constexpr (std::is_void_v<R>) {
  756|  48.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  48.3k|              }
  758|  48.3k|              else {
  759|  48.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.3k|              }
  761|  48.3k|          }),
  762|  48.3k|          m_storage(std::addressof(f))
  763|  48.3k|    {
  764|  48.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  48.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  48.3k|              else {
  759|  48.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.3k|              }
  761|  48.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  48.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  48.3k|        else if constexpr (std::is_object_v<T>) {
  694|  48.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  48.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  48.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  48.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  48.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  48.3k|        {
  668|  48.3k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   367k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   367k|    static_cast<    \
  |  | 1084|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   367k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   367k|          m_current(m_range.begin())
 3050|   367k|    {
 3051|   367k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|   628k|    {
 3060|   628k|        return m_range.end();
 3061|   628k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|   261k|    {
 3075|   261k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   261k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   261k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 261k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   261k|        }
 3081|   261k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   261k|    static_cast<    \
  |  | 1084|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   261k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   367k|    {
 3065|   367k|        return ranges::subrange{begin(), end()};
 3066|   367k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   367k|    {
 6174|   367k|        const bool need_skipped_width =
 6175|   367k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 367k]
  |  Branch (6175:33): [True: 0, False: 367k]
  ------------------
 6176|   367k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   367k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 367k]
  ------------------
 6180|   367k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 367k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   367k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 367k, False: 0]
  |  Branch (6184:56): [True: 367k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   367k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 367k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   731k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.20k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.20k|    }                                                  \
  |  |  |  | 3995|   367k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   731k|                            make_eof_scan_error));
 6195|       |
 6196|   731k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 364k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   364k|            return result_type{it, 0};
 6204|   731k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   367k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   259k|    {
 6216|   259k|        const bool need_skipped_width =
 6217|   259k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 259k]
  |  Branch (6217:33): [True: 0, False: 259k]
  ------------------
 6218|   259k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   259k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 259k]
  ------------------
 6221|   259k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 259k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   259k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 259k, False: 0]
  ------------------
 6230|   259k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 259k]
  ------------------
 6231|   259k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   259k|        return result_type{rng.begin(), 0};
 6255|   259k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6325|   115k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   115k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   115k|            auto rd = make_reader<T, char_type>();
 6331|   115k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   115k|    do {                                                            \
  |  | 3985|   115k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   115k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   115k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   115k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   115k|    {
 6261|   115k|        const bool need_skipped_width =
 6262|   115k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 115k]
  |  Branch (6262:33): [True: 0, False: 115k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   115k|        auto it = rng.begin();
 6266|   115k|        std::ptrdiff_t prefix_width = 0;
 6267|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 115k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   115k|        else {
 6275|   115k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 984, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    984|    }                                                  \
  |  |  |  | 3995|   115k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   114k|            std::tie(it, prefix_width) = prefix_result;
 6277|   114k|        }
 6278|   114k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   114k|        std::ptrdiff_t value_width = 0;
 6282|   114k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 114k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   114k|        else {
 6298|   114k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.2k, False: 80.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.2k|    }                                                  \
  |  | 3995|   114k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  80.2k|                                             specs, value, loc));
 6300|       |
 6301|  80.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 80.2k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  80.2k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  80.2k|        std::ptrdiff_t postfix_width = 0;
 6310|  80.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 79.7k, False: 478]
  ------------------
 6311|  79.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  79.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  79.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  79.7k|                                 value_width));
 6315|  79.7k|            std::tie(it, postfix_width) = postfix_result;
 6316|  79.7k|        }
 6317|       |
 6318|  80.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  80.2k|    do {                                                            \
  |  | 3985|  80.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  80.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 80.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  80.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  80.2k|            specs, prefix_width, value_width, postfix_width));
 6320|  80.2k|        return it;
 6321|  80.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|   124k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   124k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   124k|            auto rd = make_reader<T, char_type>();
 6331|   124k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   124k|    do {                                                            \
  |  | 3985|   124k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   124k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   124k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   124k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   124k|    {
 6261|   124k|        const bool need_skipped_width =
 6262|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 124k]
  |  Branch (6262:33): [True: 0, False: 124k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   124k|        auto it = rng.begin();
 6266|   124k|        std::ptrdiff_t prefix_width = 0;
 6267|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 124k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   124k|        else {
 6275|   124k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.07k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.07k|    }                                                  \
  |  |  |  | 3995|   124k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   123k|            std::tie(it, prefix_width) = prefix_result;
 6277|   123k|        }
 6278|   123k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   123k|        std::ptrdiff_t value_width = 0;
 6282|   123k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 123k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   123k|        else {
 6298|   123k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.1k, False: 89.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.1k|    }                                                  \
  |  | 3995|   123k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  89.3k|                                             specs, value, loc));
 6300|       |
 6301|  89.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 89.3k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  89.3k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  89.3k|        std::ptrdiff_t postfix_width = 0;
 6310|  89.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 88.8k, False: 540]
  ------------------
 6311|  88.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  88.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  88.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  88.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  88.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  88.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  88.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  88.8k|                                 value_width));
 6315|  88.8k|            std::tie(it, postfix_width) = postfix_result;
 6316|  88.8k|        }
 6317|       |
 6318|  89.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  89.3k|    do {                                                            \
  |  | 3985|  89.3k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 89.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  89.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  89.3k|            specs, prefix_width, value_width, postfix_width));
 6320|  89.3k|        return it;
 6321|  89.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6325|   127k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   127k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   127k|            auto rd = make_reader<T, char_type>();
 6331|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   127k|    do {                                                            \
  |  | 3985|   127k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   127k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   127k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   127k|    {
 6261|   127k|        const bool need_skipped_width =
 6262|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 127k]
  |  Branch (6262:33): [True: 0, False: 127k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   127k|        auto it = rng.begin();
 6266|   127k|        std::ptrdiff_t prefix_width = 0;
 6267|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 127k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   127k|        else {
 6275|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.15k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.15k|    }                                                  \
  |  |  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   126k|            std::tie(it, prefix_width) = prefix_result;
 6277|   126k|        }
 6278|   126k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   126k|        std::ptrdiff_t value_width = 0;
 6282|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 126k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   126k|        else {
 6298|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.0k, False: 91.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.0k|    }                                                  \
  |  | 3995|   126k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  91.9k|                                             specs, value, loc));
 6300|       |
 6301|  91.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 91.9k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  91.9k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  91.9k|        std::ptrdiff_t postfix_width = 0;
 6310|  91.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 91.3k, False: 598]
  ------------------
 6311|  91.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  91.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  91.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  91.3k|                                 value_width));
 6315|  91.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  91.3k|        }
 6317|       |
 6318|  91.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  91.9k|    do {                                                            \
  |  | 3985|  91.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  91.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  91.9k|            specs, prefix_width, value_width, postfix_width));
 6320|  91.9k|        return it;
 6321|  91.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   135k|{
 5922|   135k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 594, False: 134k]
  |  |  ------------------
  ------------------
 5923|    594|        return unexpected(e);
 5924|    594|    }
 5925|       |
 5926|   134k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 134k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   134k|    return skip_classic_whitespace(range);
 5931|   134k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  40.0k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  40.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  40.0k|            auto rd = make_reader<T, char_type>();
 6019|  40.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 40.0k, False: 0]
  ------------------
 6020|  40.0k|                return impl(rd, range, value);
 6021|  40.0k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  40.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  40.0k|    {
 6002|  40.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  40.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 318, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    318|    }                                                  \
  |  |  |  | 3995|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  39.6k|                        .transform_error(make_eof_scan_error));
 6004|  39.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  40.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  39.6k|    {
 4280|  39.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  39.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  39.6k|        float_reader<CharT> rd{};
 4283|  39.6k|        return read_impl<Range>(
 4284|  39.6k|            range, rd,
 4285|  39.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  39.6k|                return r.read_source(SCN_FWD(args)...);
 4287|  39.6k|            },
 4288|  39.6k|            value);
 4289|  39.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  39.6k|        : m_fptr([](storage fn,
  753|  39.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  39.6k|              cvref<T> obj = *get<T>(fn);
  755|  39.6k|              if constexpr (std::is_void_v<R>) {
  756|  39.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  39.6k|              }
  758|  39.6k|              else {
  759|  39.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  39.6k|              }
  761|  39.6k|          }),
  762|  39.6k|          m_storage(std::addressof(f))
  763|  39.6k|    {
  764|  39.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  39.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  39.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  39.6k|              else {
  759|  39.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  39.6k|              }
  761|  39.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  39.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  39.6k|        else if constexpr (std::is_object_v<T>) {
  694|  39.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  39.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  39.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  39.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  39.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  39.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  39.6k|        {
  668|  39.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  46.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  46.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  46.8k|            auto rd = make_reader<T, char_type>();
 6019|  46.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 46.8k, False: 0]
  ------------------
 6020|  46.8k|                return impl(rd, range, value);
 6021|  46.8k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  46.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  46.8k|    {
 6002|  46.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 372, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    372|    }                                                  \
  |  |  |  | 3995|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  46.4k|                        .transform_error(make_eof_scan_error));
 6004|  46.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  46.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  46.4k|    {
 4280|  46.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  46.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  46.4k|        float_reader<CharT> rd{};
 4283|  46.4k|        return read_impl<Range>(
 4284|  46.4k|            range, rd,
 4285|  46.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  46.4k|                return r.read_source(SCN_FWD(args)...);
 4287|  46.4k|            },
 4288|  46.4k|            value);
 4289|  46.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  46.4k|        : m_fptr([](storage fn,
  753|  46.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  46.4k|              cvref<T> obj = *get<T>(fn);
  755|  46.4k|              if constexpr (std::is_void_v<R>) {
  756|  46.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  46.4k|              }
  758|  46.4k|              else {
  759|  46.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  46.4k|              }
  761|  46.4k|          }),
  762|  46.4k|          m_storage(std::addressof(f))
  763|  46.4k|    {
  764|  46.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  46.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  46.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  46.4k|              else {
  759|  46.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  46.4k|              }
  761|  46.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  46.4k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  46.4k|        else if constexpr (std::is_object_v<T>) {
  694|  46.4k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  46.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  46.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  46.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  46.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  46.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  46.4k|        {
  668|  46.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  48.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  48.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  48.7k|            auto rd = make_reader<T, char_type>();
 6019|  48.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 48.7k, False: 0]
  ------------------
 6020|  48.7k|                return impl(rd, range, value);
 6021|  48.7k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  48.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  48.7k|    {
 6002|  48.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  48.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  48.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  48.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 423, False: 48.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    423|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    423|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    423|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    423|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    423|    }                                                  \
  |  |  |  | 3995|  48.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  48.3k|                        .transform_error(make_eof_scan_error));
 6004|  48.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  48.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  48.3k|    {
 4280|  48.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  48.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  48.3k|        float_reader<CharT> rd{};
 4283|  48.3k|        return read_impl<Range>(
 4284|  48.3k|            range, rd,
 4285|  48.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.3k|                return r.read_source(SCN_FWD(args)...);
 4287|  48.3k|            },
 4288|  48.3k|            value);
 4289|  48.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  48.3k|        : m_fptr([](storage fn,
  753|  48.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.3k|              cvref<T> obj = *get<T>(fn);
  755|  48.3k|              if constexpr (std::is_void_v<R>) {
  756|  48.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  48.3k|              }
  758|  48.3k|              else {
  759|  48.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.3k|              }
  761|  48.3k|          }),
  762|  48.3k|          m_storage(std::addressof(f))
  763|  48.3k|    {
  764|  48.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  48.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  48.3k|              else {
  759|  48.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  48.3k|              }
  761|  48.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  48.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  48.3k|        else if constexpr (std::is_object_v<T>) {
  694|  48.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  48.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  48.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  48.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  48.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  48.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  48.3k|        {
  668|  48.3k|        }

LLVMFuzzerTestOneInput:
   54|  1.76k|{
   55|  1.76k|    scn::fuzz::run(data, size);
   56|  1.76k|    return 0;
   57|  1.76k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  1.76k|{
   33|  1.76k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 1.76k]
  |  Branch (33:35): [True: 0, False: 1.76k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  1.76k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  1.76k|    const auto& f =
   40|  1.76k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  1.76k|    do_basic_run(sv, f);
   42|       |
   43|  1.76k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  1.76k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  1.76k|    do_basic_run(wsv_reinterpret, wf);
   46|  1.76k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.76k, False: 0]
  ------------------
   47|  1.76k|        do_basic_run(wsv_transcode, wf);
   48|  1.76k|    }
   49|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.76k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.76k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.76k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.76k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.52k|{
   25|  3.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.52k|{
   25|  3.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.52k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.76k|{
   53|  1.76k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.76k|    string_buffer.resize(size);
   57|  1.76k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.76k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.76k|    const auto wsv_reinterpret_size =
   62|  1.76k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 70, False: 1.69k]
  ------------------
   63|  1.76k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.76k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.76k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.76k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.76k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.76k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.76k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.76k|{
  123|  1.76k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.76k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.76k|    buf.resize(sizeof...(Args));
  126|  1.76k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.76k|    return buf;
  128|  1.76k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.76k|{
  109|  1.76k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.76k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.76k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.76k|{
  186|  1.76k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.76k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.76k|                                   format_strings);
  189|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  76.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  76.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  76.3k|            auto result = scn::scan<T>(
  140|  76.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  76.3k|                scn::runtime_format(f));
  142|  76.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 65.7k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  65.7k|            it = result->begin();
  146|  65.7k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  76.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  76.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  76.3k|            auto result = scn::scan<T>(
  155|  76.3k|                global_locale,
  156|  76.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  76.3k|                scn::runtime_format(f));
  158|  76.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 65.7k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  65.7k|            it = result->begin();
  162|  65.7k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  15.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.9k|            auto result = scn::scan_value<T>(
  171|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 14.2k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  14.2k|            it = result->begin();
  176|  14.2k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  79.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.0k|            auto result = scn::scan<T>(
  140|  79.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.0k|                scn::runtime_format(f));
  142|  79.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 68.4k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  68.4k|            it = result->begin();
  146|  68.4k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  79.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.0k|            auto result = scn::scan<T>(
  155|  79.0k|                global_locale,
  156|  79.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.0k|                scn::runtime_format(f));
  158|  79.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 68.4k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  68.4k|            it = result->begin();
  162|  68.4k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  16.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.8k|            auto result = scn::scan_value<T>(
  171|  16.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 15.0k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  15.0k|            it = result->begin();
  176|  15.0k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  80.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  80.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.4k|            auto result = scn::scan<T>(
  140|  80.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.4k|                scn::runtime_format(f));
  142|  80.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 69.8k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  69.8k|            it = result->begin();
  146|  69.8k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  80.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  80.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.4k|            auto result = scn::scan<T>(
  155|  80.4k|                global_locale,
  156|  80.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.4k|                scn::runtime_format(f));
  158|  80.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 69.8k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  69.8k|            it = result->begin();
  162|  69.8k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  17.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.2k|            auto result = scn::scan_value<T>(
  171|  17.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 15.5k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  15.5k|            it = result->begin();
  176|  15.5k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  81.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  81.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  81.4k|            auto result = scn::scan<T>(
  140|  81.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  81.4k|                scn::runtime_format(f));
  142|  81.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 70.9k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  70.9k|            it = result->begin();
  146|  70.9k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  81.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  81.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  81.4k|            auto result = scn::scan<T>(
  155|  81.4k|                global_locale,
  156|  81.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  81.4k|                scn::runtime_format(f));
  158|  81.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 70.9k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  70.9k|            it = result->begin();
  162|  70.9k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  16.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.4k|            auto result = scn::scan_value<T>(
  171|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 14.6k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  84.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  84.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  84.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  84.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  84.6k|            auto result = scn::scan<T>(
  140|  84.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  84.6k|                scn::runtime_format(f));
  142|  84.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 74.1k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  74.1k|            it = result->begin();
  146|  74.1k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  84.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  84.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  84.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  84.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  84.6k|            auto result = scn::scan<T>(
  155|  84.6k|                global_locale,
  156|  84.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  84.6k|                scn::runtime_format(f));
  158|  84.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 74.1k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  74.1k|            it = result->begin();
  162|  74.1k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  17.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.1k|            auto result = scn::scan_value<T>(
  171|  17.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 15.4k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  15.4k|            it = result->begin();
  176|  15.4k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  86.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.0k|            auto result = scn::scan<T>(
  140|  86.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.0k|                scn::runtime_format(f));
  142|  86.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 75.5k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  75.5k|            it = result->begin();
  146|  75.5k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  86.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.0k|            auto result = scn::scan<T>(
  155|  86.0k|                global_locale,
  156|  86.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.0k|                scn::runtime_format(f));
  158|  86.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 75.5k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  75.5k|            it = result->begin();
  162|  75.5k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  17.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.4k|            auto result = scn::scan_value<T>(
  171|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 15.7k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  15.7k|            it = result->begin();
  176|  15.7k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.76k|{
   91|  1.76k|    using char_type = ranges::range_value_t<Source>;
   92|  1.76k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.76k|    deque.clear();
   94|  1.76k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.76k|              std::back_inserter(deque));
   96|  1.76k|    return deque;
   97|  1.76k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.76k|{
   80|  1.76k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.76k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.76k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.76k|{
  123|  1.76k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.76k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.76k|    buf.resize(sizeof...(Args));
  126|  1.76k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.76k|    return buf;
  128|  1.76k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.76k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.76k|    else {
  113|  1.76k|        return wformat_string_view_buffer;
  114|  1.76k|    }
  115|  1.76k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  3.52k|{
  186|  3.52k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  3.52k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  3.52k|                                   format_strings);
  189|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  71.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  71.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  71.0k|            auto result = scn::scan<T>(
  140|  71.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  71.0k|                scn::runtime_format(f));
  142|  71.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 49.9k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  49.9k|            it = result->begin();
  146|  49.9k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  71.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  71.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  71.0k|            auto result = scn::scan<T>(
  155|  71.0k|                global_locale,
  156|  71.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  71.0k|                scn::runtime_format(f));
  158|  71.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 49.9k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  49.9k|            it = result->begin();
  162|  49.9k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  13.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.3k|            auto result = scn::scan_value<T>(
  171|  13.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 9.82k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  9.82k|            it = result->begin();
  176|  9.82k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  77.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  77.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  77.9k|            auto result = scn::scan<T>(
  140|  77.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  77.9k|                scn::runtime_format(f));
  142|  77.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 56.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  56.8k|            it = result->begin();
  146|  56.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  77.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  77.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  77.9k|            auto result = scn::scan<T>(
  155|  77.9k|                global_locale,
  156|  77.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.9k|                scn::runtime_format(f));
  158|  77.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 56.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  56.8k|            it = result->begin();
  162|  56.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  15.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.6k|            auto result = scn::scan_value<T>(
  171|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.1k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.1k|            it = result->begin();
  176|  12.1k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  79.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.8k|            auto result = scn::scan<T>(
  140|  79.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.8k|                scn::runtime_format(f));
  142|  79.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 58.7k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  58.7k|            it = result->begin();
  146|  58.7k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  79.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.8k|            auto result = scn::scan<T>(
  155|  79.8k|                global_locale,
  156|  79.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.8k|                scn::runtime_format(f));
  158|  79.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 58.7k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  58.7k|            it = result->begin();
  162|  58.7k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.7k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  71.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  71.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  71.0k|            auto result = scn::scan<T>(
  140|  71.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  71.0k|                scn::runtime_format(f));
  142|  71.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 49.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  49.8k|            it = result->begin();
  146|  49.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  71.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  71.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  71.0k|            auto result = scn::scan<T>(
  155|  71.0k|                global_locale,
  156|  71.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  71.0k|                scn::runtime_format(f));
  158|  71.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 49.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  49.8k|            it = result->begin();
  162|  49.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  13.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.3k|            auto result = scn::scan_value<T>(
  171|  13.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 9.81k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  9.81k|            it = result->begin();
  176|  9.81k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  77.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  77.8k|            auto result = scn::scan<T>(
  140|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  77.8k|                scn::runtime_format(f));
  142|  77.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 56.7k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  56.7k|            it = result->begin();
  146|  56.7k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  77.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  77.8k|            auto result = scn::scan<T>(
  155|  77.8k|                global_locale,
  156|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.8k|                scn::runtime_format(f));
  158|  77.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 56.7k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  56.7k|            it = result->begin();
  162|  56.7k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  15.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.6k|            auto result = scn::scan_value<T>(
  171|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.0k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.0k|            it = result->begin();
  176|  12.0k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  79.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.8k|            auto result = scn::scan<T>(
  140|  79.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.8k|                scn::runtime_format(f));
  142|  79.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 58.6k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  58.6k|            it = result->begin();
  146|  58.6k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  79.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.8k|            auto result = scn::scan<T>(
  155|  79.8k|                global_locale,
  156|  79.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.8k|                scn::runtime_format(f));
  158|  79.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 58.6k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  58.6k|            it = result->begin();
  162|  58.6k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.7k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  3.52k|{
   91|  3.52k|    using char_type = ranges::range_value_t<Source>;
   92|  3.52k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  3.52k|    deque.clear();
   94|  3.52k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  3.52k|              std::back_inserter(deque));
   96|  3.52k|    return deque;
   97|  3.52k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  3.52k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  3.52k|    else {
   84|  3.52k|        return wnoncontiguous_buffer;
   85|  3.52k|    }
   86|  3.52k|}

