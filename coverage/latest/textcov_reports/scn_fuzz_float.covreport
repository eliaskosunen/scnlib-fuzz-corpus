_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   850k|                    parse_options_t<UC> options) noexcept {
  286|   850k|  chars_format const fmt = options.format;
  287|   850k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   850k|  parsed_number_string_t<UC> answer;
  290|   850k|  answer.valid = false;
  291|   850k|  answer.too_many_digits = false;
  292|   850k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   850k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 850k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   850k|  UC const *const start_digits = p;
  318|       |
  319|   850k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  4.44M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.02M, False: 422k]
  |  Branch (321:25): [True: 3.59M, False: 428k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  3.59M|    i = 10 * i +
  325|  3.59M|        uint64_t(*p -
  326|  3.59M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  3.59M|    ++p;
  328|  3.59M|  }
  329|   850k|  UC const *const end_of_integer_part = p;
  330|   850k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   850k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   850k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   850k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 850k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   850k|  int64_t exponent = 0;
  344|   850k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 428k, False: 422k]
  |  Branch (344:49): [True: 159k, False: 268k]
  ------------------
  345|   850k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 159k, False: 691k]
  ------------------
  346|   159k|    ++p;
  347|   159k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   159k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   670k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 571k, False: 98.8k]
  |  Branch (352:27): [True: 510k, False: 60.4k]
  ------------------
  353|   510k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   510k|      ++p;
  355|   510k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   510k|    }
  357|   159k|    exponent = before - p;
  358|   159k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|   159k|    digit_count -= exponent;
  360|   159k|  }
  361|   850k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   850k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 850k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   850k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 850k]
  ------------------
  368|   850k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   850k|  int64_t exp_number = 0; // explicit exponential part
  372|   850k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 732k, False: 118k]
  |  Branch (372:44): [True: 329k, False: 403k]
  ------------------
  373|   850k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 74.2k, False: 255k]
  |  Branch (373:28): [True: 43.6k, False: 211k]
  ------------------
  374|   850k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   732k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 732k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   732k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   117k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   117k|    UC const *location_of_e = p;
  378|   117k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 74.2k, False: 43.6k]
  |  Branch (378:28): [True: 43.6k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   117k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   117k|      ++p;
  381|   117k|    }
  382|   117k|    bool neg_exp = false;
  383|   117k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 117k, False: 105]
  |  Branch (383:24): [True: 6.63k, False: 111k]
  ------------------
  384|  6.63k|      neg_exp = true;
  385|  6.63k|      ++p;
  386|   111k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 111k, False: 105]
  ------------------
  387|   111k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 28.9k, False: 82.2k]
  ------------------
  388|   111k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  28.9k|      ++p;
  390|  28.9k|    }
  391|   117k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 165, False: 117k]
  |  Branch (391:24): [True: 485, False: 117k]
  ------------------
  392|    650|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 650]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    650|      p = location_of_e;
  400|   117k|    } else {
  401|   367k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 280k, False: 86.5k]
  |  Branch (401:29): [True: 250k, False: 30.6k]
  ------------------
  402|   250k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   250k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 231k, False: 18.7k]
  ------------------
  404|   231k|          exp_number = 10 * exp_number + digit;
  405|   231k|        }
  406|   250k|        ++p;
  407|   250k|      }
  408|   117k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.58k, False: 110k]
  ------------------
  409|  6.58k|        exp_number = -exp_number;
  410|  6.58k|      }
  411|   117k|      exponent += exp_number;
  412|   117k|    }
  413|   732k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   732k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 614k, False: 118k]
  |  Branch (415:45): [True: 0, False: 614k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   732k|  }
  419|   850k|  answer.lastmatch = p;
  420|   850k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   850k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 143k, False: 706k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|   143k|    UC const *start = start_digits;
  433|   640k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 638k, False: 1.56k]
  |  Branch (433:32): [True: 488k, False: 150k]
  |  Branch (433:53): [True: 8.00k, False: 142k]
  ------------------
  434|   496k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 488k, False: 8.00k]
  ------------------
  435|   488k|        digit_count--;
  436|   488k|      }
  437|   496k|      start++;
  438|   496k|    }
  439|       |
  440|   143k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 138k, False: 5.05k]
  ------------------
  441|   138k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|   138k|      i = 0;
  446|   138k|      p = answer.integer.ptr;
  447|   138k|      UC const *int_end = p + answer.integer.len();
  448|   138k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  1.35M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 1.31M, False: 34.8k]
  |  Branch (449:54): [True: 1.21M, False: 103k]
  ------------------
  450|  1.21M|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  1.21M|        ++p;
  452|  1.21M|      }
  453|   138k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 34.8k, False: 103k]
  ------------------
  454|  34.8k|        exponent = end_of_integer_part - p + exp_number;
  455|   103k|      } else { // We have a value with a fractional component.
  456|   103k|        p = answer.fraction.ptr;
  457|   103k|        UC const *frac_end = p + answer.fraction.len();
  458|  1.87M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 1.77M, False: 103k]
  |  Branch (458:56): [True: 1.77M, False: 0]
  ------------------
  459|  1.77M|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  1.77M|          ++p;
  461|  1.77M|        }
  462|   103k|        exponent = answer.fraction.ptr - p + exp_number;
  463|   103k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|   138k|    }
  466|   143k|  }
  467|   850k|  answer.exponent = exponent;
  468|   850k|  answer.mantissa = i;
  469|   850k|  return answer;
  470|   850k|}
_ZN10fast_float10is_integerIcEEbT_:
   34|  4.99M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  4.99M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 135k, False: 4.85M]
  |  Branch (35:27): [True: 384k, False: 4.47M]
  ------------------
   36|  4.99M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   159k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   607k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 497k, False: 110k]
  ------------------
  227|   607k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 448k, False: 48.8k]
  ------------------
  228|   448k|    i = i * 100000000 +
  229|   448k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   448k|            p)); // in rare cases, this will overflow, but that's ok
  231|   448k|    p += 8;
  232|   448k|  }
  233|   159k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   497k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   497k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   497k|            0x8080808080808080));
  145|   497k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.14M|read8_to_u64(const UC *chars) {
   49|  1.14M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.14M|  uint64_t val;
   58|  1.14M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.14M|  return val;
   64|  1.14M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   644k|parse_eight_digits_unrolled(uint64_t val) {
  121|   644k|  const uint64_t mask = 0x000000FF000000FF;
  122|   644k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   644k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   644k|  val -= 0x3030303030303030;
  125|   644k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   644k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   644k|  return uint32_t(val);
  128|   644k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   195k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   195k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   195k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   195k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   195k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   432k|                    parse_options_t<UC> options) noexcept {
  286|   432k|  chars_format const fmt = options.format;
  287|   432k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   432k|  parsed_number_string_t<UC> answer;
  290|   432k|  answer.valid = false;
  291|   432k|  answer.too_many_digits = false;
  292|   432k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   432k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 432k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   432k|  UC const *const start_digits = p;
  318|       |
  319|   432k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   942k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 655k, False: 286k]
  |  Branch (321:25): [True: 509k, False: 145k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   509k|    i = 10 * i +
  325|   509k|        uint64_t(*p -
  326|   509k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   509k|    ++p;
  328|   509k|  }
  329|   432k|  UC const *const end_of_integer_part = p;
  330|   432k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   432k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   432k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   432k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 432k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   432k|  int64_t exponent = 0;
  344|   432k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 145k, False: 286k]
  |  Branch (344:49): [True: 5.10k, False: 140k]
  ------------------
  345|   432k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 5.10k, False: 427k]
  ------------------
  346|  5.10k|    ++p;
  347|  5.10k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  5.10k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  50.3k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 46.8k, False: 3.54k]
  |  Branch (352:27): [True: 45.2k, False: 1.56k]
  ------------------
  353|  45.2k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  45.2k|      ++p;
  355|  45.2k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  45.2k|    }
  357|  5.10k|    exponent = before - p;
  358|  5.10k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|  5.10k|    digit_count -= exponent;
  360|  5.10k|  }
  361|   432k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   432k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 432k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   432k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 432k]
  ------------------
  368|   432k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   432k|  int64_t exp_number = 0; // explicit exponential part
  372|   432k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 356k, False: 75.7k]
  |  Branch (372:44): [True: 142k, False: 214k]
  ------------------
  373|   432k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 142k]
  |  Branch (373:28): [True: 17.9k, False: 124k]
  ------------------
  374|   432k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   414k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 414k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   414k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  18.1k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  18.1k|    UC const *location_of_e = p;
  378|  18.1k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 17.9k]
  |  Branch (378:28): [True: 17.9k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  18.1k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  18.1k|      ++p;
  381|  18.1k|    }
  382|  18.1k|    bool neg_exp = false;
  383|  18.1k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 18.1k, False: 20]
  |  Branch (383:24): [True: 3.41k, False: 14.7k]
  ------------------
  384|  3.41k|      neg_exp = true;
  385|  3.41k|      ++p;
  386|  14.7k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 14.7k, False: 20]
  ------------------
  387|  14.7k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 423, False: 14.3k]
  ------------------
  388|  14.7k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    423|      ++p;
  390|    423|    }
  391|  18.1k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 50, False: 18.1k]
  |  Branch (391:24): [True: 405, False: 17.7k]
  ------------------
  392|    455|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 455]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    455|      p = location_of_e;
  400|  17.7k|    } else {
  401|  60.4k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 48.0k, False: 12.3k]
  |  Branch (401:29): [True: 42.7k, False: 5.31k]
  ------------------
  402|  42.7k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  42.7k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 40.1k, False: 2.58k]
  ------------------
  404|  40.1k|          exp_number = 10 * exp_number + digit;
  405|  40.1k|        }
  406|  42.7k|        ++p;
  407|  42.7k|      }
  408|  17.7k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.39k, False: 14.3k]
  ------------------
  409|  3.39k|        exp_number = -exp_number;
  410|  3.39k|      }
  411|  17.7k|      exponent += exp_number;
  412|  17.7k|    }
  413|   414k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   414k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 338k, False: 75.7k]
  |  Branch (415:45): [True: 0, False: 338k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   414k|  }
  419|   432k|  answer.lastmatch = p;
  420|   432k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   432k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 2.44k, False: 430k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|  2.44k|    UC const *start = start_digits;
  433|  4.03k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 4.03k, False: 0]
  |  Branch (433:32): [True: 1.06k, False: 2.97k]
  |  Branch (433:53): [True: 532, False: 2.44k]
  ------------------
  434|  1.59k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 1.06k, False: 532]
  ------------------
  435|  1.06k|        digit_count--;
  436|  1.06k|      }
  437|  1.59k|      start++;
  438|  1.59k|    }
  439|       |
  440|  2.44k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 2.21k, False: 236]
  ------------------
  441|  2.21k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|  2.21k|      i = 0;
  446|  2.21k|      p = answer.integer.ptr;
  447|  2.21k|      UC const *int_end = p + answer.integer.len();
  448|  2.21k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  27.3k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 26.3k, False: 906]
  |  Branch (449:54): [True: 25.0k, False: 1.30k]
  ------------------
  450|  25.0k|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  25.0k|        ++p;
  452|  25.0k|      }
  453|  2.21k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 906, False: 1.30k]
  ------------------
  454|    906|        exponent = end_of_integer_part - p + exp_number;
  455|  1.30k|      } else { // We have a value with a fractional component.
  456|  1.30k|        p = answer.fraction.ptr;
  457|  1.30k|        UC const *frac_end = p + answer.fraction.len();
  458|  18.9k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 17.6k, False: 1.30k]
  |  Branch (458:56): [True: 17.6k, False: 0]
  ------------------
  459|  17.6k|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  17.6k|          ++p;
  461|  17.6k|        }
  462|  1.30k|        exponent = answer.fraction.ptr - p + exp_number;
  463|  1.30k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|  2.21k|    }
  466|  2.44k|  }
  467|   432k|  answer.exponent = exponent;
  468|   432k|  answer.mantissa = i;
  469|   432k|  return answer;
  470|   432k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   768k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   768k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 146k, False: 621k]
  |  Branch (35:27): [True: 6.45k, False: 615k]
  ------------------
   36|   768k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  5.10k|loop_parse_if_eight_digits(const UC *&p, const UC *const pend, uint64_t &i) {
  212|  5.10k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  5.10k|    return;
  214|  5.10k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    324|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    324|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    324|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    324|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    324|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    324|read8_to_u64(const UC *chars) {
   49|    324|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    324|    uint64_t val = 0;
   51|  2.91k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 2.59k, False: 324]
  ------------------
   52|  2.59k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  2.59k|      ++chars;
   54|  2.59k|    }
   55|    324|    return val;
   56|    324|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    324|}

_ZN10fast_float6bigintC2Ev:
  425|  48.9k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   109k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  577|   172k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   256k|                                            limb y) noexcept {
  276|   256k|  limb carry = 0;
  277|  1.09M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (277:26): [True: 839k, False: 256k]
  ------------------
  278|   839k|    vec[index] = scalar_mul(vec[index], y, carry);
  279|   839k|  }
  280|   256k|  if (carry != 0) {
  ------------------
  |  Branch (280:7): [True: 153k, False: 103k]
  ------------------
  281|   153k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   153k|  {                                                                            \
  |  |  179|   153k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 153k]
  |  |  ------------------
  |  |  180|   153k|      return false;                                                            \
  |  |  181|   153k|  }
  ------------------
  282|   153k|  }
  283|   256k|  return true;
  284|   256k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   75|  2.04M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  222|   839k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  223|   839k|#ifdef FASTFLOAT_64BIT_LIMB
  224|   839k|#if defined(__SIZEOF_INT128__)
  225|       |  // GCC and clang both define it as an extension.
  226|   839k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  227|   839k|  carry = limb(z >> limb_bits);
  228|   839k|  return limb(z);
  229|       |#else
  230|       |  // fallback, no native 128-bit integer multiplication with carry.
  231|       |  // on msvc, this optimizes identically, somehow.
  232|       |  value128 z = full_multiplication(x, y);
  233|       |  bool overflow;
  234|       |  z.low = scalar_add(z.low, carry, overflow);
  235|       |  z.high += uint64_t(overflow); // cannot overflow
  236|       |  carry = z.high;
  237|       |  return z.low;
  238|       |#endif
  239|       |#else
  240|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  241|       |  carry = limb(z >> limb_bits);
  242|       |  return limb(z);
  243|       |#endif
  244|   839k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.29M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.29M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  2.29M|  { ((void)(x)); }
  ------------------
   58|  2.29M|    return data[index];
   59|  2.29M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   84|   211k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   85|   211k|    if (len() < capacity()) {
  ------------------
  |  Branch (85:9): [True: 211k, False: 0]
  ------------------
   86|   211k|      push_unchecked(value);
   87|   211k|      return true;
   88|   211k|    } else {
   89|      0|      return false;
   90|      0|    }
   91|   211k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   77|   250k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   79|   257k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   80|   257k|    data[length] = value;
   81|   257k|    length++;
   82|   257k|  }
_ZN10fast_float6bigint3addEm:
  579|   172k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  268|   172k|small_add(stackvec<size> &vec, limb y) noexcept {
  269|   172k|  return small_add_from(vec, y, 0);
  270|   172k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  250|   172k|                                                 size_t start) noexcept {
  251|   172k|  size_t index = start;
  252|   172k|  limb carry = y;
  253|   172k|  bool overflow;
  254|   259k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (254:10): [True: 136k, False: 123k]
  |  Branch (254:24): [True: 87.6k, False: 48.9k]
  ------------------
  255|  87.6k|    vec[index] = scalar_add(vec[index], carry, overflow);
  256|  87.6k|    carry = limb(overflow);
  257|  87.6k|    index += 1;
  258|  87.6k|  }
  259|   172k|  if (carry != 0) {
  ------------------
  |  Branch (259:7): [True: 48.9k, False: 123k]
  ------------------
  260|  48.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  48.9k|  {                                                                            \
  |  |  179|  48.9k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 48.9k]
  |  |  ------------------
  |  |  180|  48.9k|      return false;                                                            \
  |  |  181|  48.9k|  }
  ------------------
  261|  48.9k|  }
  262|   172k|  return true;
  263|   172k|}
_ZN10fast_float10scalar_addEmmRb:
  202|   235k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  203|   235k|  limb z;
  204|       |// gcc and clang
  205|   235k|#if defined(__has_builtin)
  206|   235k|#if __has_builtin(__builtin_add_overflow)
  207|   235k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|   235k|    overflow = __builtin_add_overflow(x, y, &z);
  209|   235k|    return z;
  210|   235k|  }
  211|      0|#endif
  212|      0|#endif
  213|       |
  214|       |  // generic, this still optimizes correctly on MSVC.
  215|      0|  z = x + y;
  216|      0|  overflow = z < x;
  217|      0|  return z;
  218|   235k|}
_ZN10fast_float6bigint5pow10Ej:
  616|  3.26k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  617|  3.26k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.26k|  {                                                                            \
  |  |  179|  3.26k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.26k]
  |  |  ------------------
  |  |  180|  3.26k|      return false;                                                            \
  |  |  181|  3.26k|  }
  ------------------
  618|  3.26k|    return pow2(exp);
  619|  3.26k|  }
_ZN10fast_float6bigint4pow5Ej:
  585|  48.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  586|       |    // multiply by a power of 5
  587|  48.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  588|  48.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  589|  52.5k|    while (exp >= large_step) {
  ------------------
  |  Branch (589:12): [True: 3.60k, False: 48.9k]
  ------------------
  590|  3.60k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.60k|  {                                                                            \
  |  |  179|  3.60k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.60k]
  |  |  ------------------
  |  |  180|  3.60k|      return false;                                                            \
  |  |  181|  3.60k|  }
  ------------------
  591|  3.60k|      exp -= large_step;
  592|  3.60k|    }
  593|  48.9k|#ifdef FASTFLOAT_64BIT_LIMB
  594|  48.9k|    uint32_t small_step = 27;
  595|  48.9k|    limb max_native = 7450580596923828125UL;
  596|       |#else
  597|       |    uint32_t small_step = 13;
  598|       |    limb max_native = 1220703125U;
  599|       |#endif
  600|  72.1k|    while (exp >= small_step) {
  ------------------
  |  Branch (600:12): [True: 23.2k, False: 48.9k]
  ------------------
  601|  23.2k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.2k|  {                                                                            \
  |  |  179|  23.2k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 23.2k]
  |  |  ------------------
  |  |  180|  23.2k|      return false;                                                            \
  |  |  181|  23.2k|  }
  ------------------
  602|  23.2k|      exp -= small_step;
  603|  23.2k|    }
  604|  48.9k|    if (exp != 0) {
  ------------------
  |  Branch (604:9): [True: 42.9k, False: 6.00k]
  ------------------
  605|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  606|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  607|       |      // except the workaround described there don't work here
  608|  42.9k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  178|  42.9k|  {                                                                            \
  |  |  179|  42.9k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 42.9k]
  |  |  ------------------
  |  |  180|  42.9k|      return false;                                                            \
  |  |  181|  42.9k|  }
  ------------------
  609|  42.9k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  610|  42.9k|    }
  611|       |
  612|  48.9k|    return true;
  613|  48.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  355|  3.60k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  356|  3.60k|  if (y.len() == 1) {
  ------------------
  |  Branch (356:7): [True: 0, False: 3.60k]
  ------------------
  357|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  358|  3.60k|  } else {
  359|  3.60k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.60k|  {                                                                            \
  |  |  179|  3.60k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.60k]
  |  |  ------------------
  |  |  180|  3.60k|      return false;                                                            \
  |  |  181|  3.60k|  }
  ------------------
  360|  3.60k|  }
  361|  3.60k|  return true;
  362|  3.60k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  327|  3.60k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  328|  3.60k|  limb_span xs = limb_span(x.data, x.len());
  329|  3.60k|  stackvec<size> z(xs);
  330|  3.60k|  limb_span zs = limb_span(z.data, z.len());
  331|       |
  332|  3.60k|  if (y.len() != 0) {
  ------------------
  |  Branch (332:7): [True: 3.60k, False: 0]
  ------------------
  333|  3.60k|    limb y0 = y[0];
  334|  3.60k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.60k|  {                                                                            \
  |  |  179|  3.60k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.60k]
  |  |  ------------------
  |  |  180|  3.60k|      return false;                                                            \
  |  |  181|  3.60k|  }
  ------------------
  335|  18.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (335:28): [True: 14.4k, False: 3.60k]
  ------------------
  336|  14.4k|      limb yi = y[index];
  337|  14.4k|      stackvec<size> zi;
  338|  14.4k|      if (yi != 0) {
  ------------------
  |  Branch (338:11): [True: 14.4k, False: 0]
  ------------------
  339|       |        // re-use the same buffer throughout
  340|  14.4k|        zi.set_len(0);
  341|  14.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.4k|  {                                                                            \
  |  |  179|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  180|  14.4k|      return false;                                                            \
  |  |  181|  14.4k|  }
  ------------------
  342|  14.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.4k|  {                                                                            \
  |  |  179|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  180|  14.4k|      return false;                                                            \
  |  |  181|  14.4k|  }
  ------------------
  343|  14.4k|        limb_span zis = limb_span(zi.data, zi.len());
  344|  14.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.4k|  {                                                                            \
  |  |  179|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  180|  14.4k|      return false;                                                            \
  |  |  181|  14.4k|  }
  ------------------
  345|  14.4k|      }
  346|  14.4k|    }
  347|  3.60k|  }
  348|       |
  349|  3.60k|  x.normalize();
  350|  3.60k|  return true;
  351|  3.60k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.60k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.60k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  168|  3.60k|  { ((void)(x)); }
  ------------------
   54|  3.60k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   72|  52.9k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   73|  52.9k|    length = uint16_t(len);
   74|  52.9k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
   99|  18.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  100|  18.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (100:9): [True: 18.0k, False: 0]
  ------------------
  101|  18.0k|      extend_unchecked(s);
  102|  18.0k|      return true;
  103|  18.0k|    } else {
  104|      0|      return false;
  105|      0|    }
  106|  18.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
   93|  18.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
   94|  18.0k|    limb *ptr = data + length;
   95|  18.0k|    std::copy_n(s.ptr, s.len(), ptr);
   96|  18.0k|    set_len(len() + s.len());
   97|  18.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  290|  14.4k|                                          size_t start) noexcept {
  291|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  292|       |  // if we can't get that current range.
  293|  14.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (293:7): [True: 0, False: 14.4k]
  |  Branch (293:26): [True: 14.1k, False: 284]
  ------------------
  294|  14.1k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  14.1k|  {                                                                            \
  |  |  179|  14.1k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.1k]
  |  |  ------------------
  |  |  180|  14.1k|      return false;                                                            \
  |  |  181|  14.1k|  }
  ------------------
  295|  14.1k|  }
  296|       |
  297|  14.4k|  bool carry = false;
  298|   121k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (298:26): [True: 107k, False: 14.4k]
  ------------------
  299|   107k|    limb xi = x[index + start];
  300|   107k|    limb yi = y[index];
  301|   107k|    bool c1 = false;
  302|   107k|    bool c2 = false;
  303|   107k|    xi = scalar_add(xi, yi, c1);
  304|   107k|    if (carry) {
  ------------------
  |  Branch (304:9): [True: 40.5k, False: 66.8k]
  ------------------
  305|  40.5k|      xi = scalar_add(xi, 1, c2);
  306|  40.5k|    }
  307|   107k|    x[index + start] = xi;
  308|   107k|    carry = c1 | c2;
  309|   107k|  }
  310|       |
  311|       |  // handle overflow
  312|  14.4k|  if (carry) {
  ------------------
  |  Branch (312:7): [True: 0, False: 14.4k]
  ------------------
  313|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  314|      0|  }
  315|  14.4k|  return true;
  316|  14.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  123|  14.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  124|  14.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (124:9): [True: 0, False: 14.1k]
  ------------------
  125|      0|      return false;
  126|  14.1k|    } else {
  127|  14.1k|      resize_unchecked(new_len, value);
  128|  14.1k|      return true;
  129|  14.1k|    }
  130|  14.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  111|  14.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  112|  14.1k|    if (new_len > len()) {
  ------------------
  |  Branch (112:9): [True: 14.1k, False: 0]
  ------------------
  113|  14.1k|      size_t count = new_len - len();
  114|  14.1k|      limb *first = data + len();
  115|  14.1k|      limb *last = first + count;
  116|  14.1k|      ::std::fill(first, last, value);
  117|  14.1k|      set_len(new_len);
  118|  14.1k|    } else {
  119|      0|      set_len(new_len);
  120|      0|    }
  121|  14.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  144|  49.3k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  145|  49.3k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (145:12): [True: 49.3k, False: 0]
  |  Branch (145:25): [True: 0, False: 49.3k]
  ------------------
  146|      0|      length--;
  147|      0|    }
  148|  49.3k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   65|  58.7k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   66|  58.7k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  58.7k|  { ((void)(x)); }
  ------------------
   67|  58.7k|    size_t rindex = length - index - 1;
   68|  58.7k|    return data[rindex];
   69|  58.7k|  }
_ZN10fast_float6bigint4pow2Ej:
  582|  48.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  544|  48.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  545|  48.8k|    size_t rem = n % limb_bits;
  546|  48.8k|    size_t div = n / limb_bits;
  547|  48.8k|    if (rem != 0) {
  ------------------
  |  Branch (547:9): [True: 45.8k, False: 3.07k]
  ------------------
  548|  45.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  45.8k|  {                                                                            \
  |  |  179|  45.8k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 45.8k]
  |  |  ------------------
  |  |  180|  45.8k|      return false;                                                            \
  |  |  181|  45.8k|  }
  ------------------
  549|  45.8k|    }
  550|  48.8k|    if (div != 0) {
  ------------------
  |  Branch (550:9): [True: 6.42k, False: 42.4k]
  ------------------
  551|  6.42k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.42k|  {                                                                            \
  |  |  179|  6.42k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 6.42k]
  |  |  ------------------
  |  |  180|  6.42k|      return false;                                                            \
  |  |  181|  6.42k|  }
  ------------------
  552|  6.42k|    }
  553|  48.8k|    return true;
  554|  48.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  497|  45.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  498|       |    // Internally, for each item, we shift left by n, and add the previous
  499|       |    // right shifted limb-bits.
  500|       |    // For example, we transform (for u8) shifted left 2, to:
  501|       |    //      b10100100 b01000010
  502|       |    //      b10 b10010001 b00001000
  503|  45.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  45.8k|  { ((void)(x)); }
  ------------------
  504|  45.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  173|  45.8k|  { ((void)(x)); }
  ------------------
  505|       |
  506|  45.8k|    size_t shl = n;
  507|  45.8k|    size_t shr = limb_bits - shl;
  508|  45.8k|    limb prev = 0;
  509|   156k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (509:28): [True: 110k, False: 45.8k]
  ------------------
  510|   110k|      limb xi = vec[index];
  511|   110k|      vec[index] = (xi << shl) | (prev >> shr);
  512|   110k|      prev = xi;
  513|   110k|    }
  514|       |
  515|  45.8k|    limb carry = prev >> shr;
  516|  45.8k|    if (carry != 0) {
  ------------------
  |  Branch (516:9): [True: 9.56k, False: 36.2k]
  ------------------
  517|  9.56k|      return vec.try_push(carry);
  518|  9.56k|    }
  519|  36.2k|    return true;
  520|  45.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  523|  6.42k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  524|  6.42k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  6.42k|  { ((void)(x)); }
  ------------------
  525|  6.42k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (525:9): [True: 0, False: 6.42k]
  ------------------
  526|      0|      return false;
  527|  6.42k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (527:16): [True: 6.42k, False: 0]
  ------------------
  528|       |      // move limbs
  529|  6.42k|      limb *dst = vec.data + n;
  530|  6.42k|      const limb *src = vec.data;
  531|  6.42k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  532|       |      // fill in empty limbs
  533|  6.42k|      limb *first = vec.data;
  534|  6.42k|      limb *last = first + n;
  535|  6.42k|      ::std::fill(first, last, 0);
  536|  6.42k|      vec.set_len(n + vec.len());
  537|  6.42k|      return true;
  538|  6.42k|    } else {
  539|      0|      return true;
  540|      0|    }
  541|  6.42k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   76|  9.68k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  443|  3.26k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  444|  3.26k|#ifdef FASTFLOAT_64BIT_LIMB
  445|  3.26k|    if (vec.len() == 0) {
  ------------------
  |  Branch (445:9): [True: 0, False: 3.26k]
  ------------------
  446|      0|      return empty_hi64(truncated);
  447|  3.26k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (447:16): [True: 949, False: 2.31k]
  ------------------
  448|    949|      return uint64_hi64(vec.rindex(0), truncated);
  449|  2.31k|    } else {
  450|  2.31k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  451|  2.31k|      truncated |= vec.nonzero(2);
  452|  2.31k|      return result;
  453|  2.31k|    }
  454|       |#else
  455|       |    if (vec.len() == 0) {
  456|       |      return empty_hi64(truncated);
  457|       |    } else if (vec.len() == 1) {
  458|       |      return uint32_hi64(vec.rindex(0), truncated);
  459|       |    } else if (vec.len() == 2) {
  460|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  461|       |    } else {
  462|       |      uint64_t result =
  463|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  464|       |      truncated |= vec.nonzero(3);
  465|       |      return result;
  466|       |    }
  467|       |#endif
  468|  3.26k|  }
_ZN10fast_float11uint64_hi64EmRb:
  158|    949|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  159|    949|  truncated = false;
  160|    949|  int shl = leading_zeroes(r0);
  161|    949|  return r0 << shl;
  162|    949|}
_ZN10fast_float11uint64_hi64EmmRb:
  165|  2.31k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  166|  2.31k|  int shl = leading_zeroes(r0);
  167|  2.31k|  if (shl == 0) {
  ------------------
  |  Branch (167:7): [True: 38, False: 2.27k]
  ------------------
  168|     38|    truncated = r1 != 0;
  169|     38|    return r0;
  170|  2.27k|  } else {
  171|  2.27k|    int shr = 64 - shl;
  172|  2.27k|    truncated = (r1 << shl) != 0;
  173|  2.27k|    return (r0 << shl) | (r1 >> shr);
  174|  2.27k|  }
  175|  2.31k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  134|  2.31k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  135|  2.35k|    while (index < len()) {
  ------------------
  |  Branch (135:12): [True: 572, False: 1.78k]
  ------------------
  136|    572|      if (rindex(index) != 0) {
  ------------------
  |  Branch (136:11): [True: 532, False: 40]
  ------------------
  137|    532|        return true;
  138|    532|      }
  139|     40|      index++;
  140|     40|    }
  141|  1.78k|    return false;
  142|  2.31k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  572|  3.26k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  573|  3.26k|    int lz = ctlz();
  574|  3.26k|    return int(limb_bits * vec.len()) - lz;
  575|  3.26k|  }
_ZNK10fast_float6bigint4ctlzEv:
  557|  3.26k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  558|  3.26k|    if (vec.is_empty()) {
  ------------------
  |  Branch (558:9): [True: 0, False: 3.26k]
  ------------------
  559|      0|      return 0;
  560|  3.26k|    } else {
  561|  3.26k|#ifdef FASTFLOAT_64BIT_LIMB
  562|  3.26k|      return leading_zeroes(vec.rindex(0));
  563|       |#else
  564|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  565|       |      uint64_t r0 = vec.rindex(0);
  566|       |      return leading_zeroes(r0 << 32);
  567|       |#endif
  568|  3.26k|    }
  569|  3.26k|  }
_ZN10fast_float6bigintC2Em:
  431|  45.7k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  432|  45.7k|#ifdef FASTFLOAT_64BIT_LIMB
  433|  45.7k|    vec.push_unchecked(value);
  434|       |#else
  435|       |    vec.push_unchecked(uint32_t(value));
  436|       |    vec.push_unchecked(uint32_t(value >> 32));
  437|       |#endif
  438|  45.7k|    vec.normalize();
  439|  45.7k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  476|  45.7k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint &other) const noexcept {
  477|  45.7k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (477:9): [True: 0, False: 45.7k]
  ------------------
  478|      0|      return 1;
  479|  45.7k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (479:16): [True: 0, False: 45.7k]
  ------------------
  480|      0|      return -1;
  481|  45.7k|    } else {
  482|  89.8k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (482:38): [True: 86.0k, False: 3.74k]
  ------------------
  483|  86.0k|        limb xi = vec[index - 1];
  484|  86.0k|        limb yi = other.vec[index - 1];
  485|  86.0k|        if (xi > yi) {
  ------------------
  |  Branch (485:13): [True: 11.5k, False: 74.5k]
  ------------------
  486|  11.5k|          return 1;
  487|  74.5k|        } else if (xi < yi) {
  ------------------
  |  Branch (487:20): [True: 30.4k, False: 44.1k]
  ------------------
  488|  30.4k|          return -1;
  489|  30.4k|        }
  490|  86.0k|      }
  491|  3.74k|      return 0;
  492|  45.7k|    }
  493|  45.7k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   60|   172k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   61|   172k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   172k|  { ((void)(x)); }
  ------------------
   62|   172k|    return data[index];
   63|   172k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   190k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   190k|  adjusted_mantissa answer;
  105|   190k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.43k, False: 186k]
  |  Branch (105:19): [True: 1.27k, False: 185k]
  ------------------
  106|  4.71k|    answer.power2 = 0;
  107|  4.71k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.71k|    return answer;
  110|  4.71k|  }
  111|   185k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.37k, False: 177k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.37k|    answer.power2 = binary::infinite_power();
  114|  7.37k|    answer.mantissa = 0;
  115|  7.37k|    return answer;
  116|  7.37k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   177k|  int lz = leading_zeroes(w);
  122|   177k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   177k|  value128 product =
  131|   177k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   177k|  int upperbit = int(product.high >> 63);
  142|   177k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   177k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   177k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   177k|                          binary::minimum_exponent());
  148|   177k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 980, False: 177k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|    980|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 892]
  ------------------
  151|    980|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    892|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|    892|    answer.mantissa += (answer.mantissa & 1); // round up
  163|    892|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|    892|    answer.power2 =
  172|    892|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 892, False: 0]
  ------------------
  173|    892|            ? 0
  174|    892|            : 1;
  175|    892|    return answer;
  176|    980|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   177k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 58.5k, False: 118k]
  |  Branch (181:29): [True: 56.9k, False: 1.64k]
  ------------------
  182|   177k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 52.2k, False: 4.66k]
  ------------------
  183|   177k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 7.82k, False: 44.4k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  7.82k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.90k, False: 3.92k]
  ------------------
  190|  3.90k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.90k|    }
  192|  7.82k|  }
  193|       |
  194|   177k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   177k|  answer.mantissa >>= 1;
  196|   177k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 10.7k, False: 166k]
  ------------------
  197|  10.7k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  10.7k|    answer.power2++; // undo previous addition
  199|  10.7k|  }
  200|       |
  201|   177k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   177k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 1.17k, False: 175k]
  ------------------
  203|  1.17k|    answer.power2 = binary::infinite_power();
  204|  1.17k|    answer.mantissa = 0;
  205|  1.17k|  }
  206|   177k|  return answer;
  207|   177k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   196k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   196k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   196k|  value128 firstproduct =
   28|   196k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   196k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   196k|                " precision should  be in (0,64]");
   31|   196k|  constexpr uint64_t precision_mask =
   32|   196k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   196k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   196k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 36.9k, False: 159k]
  ------------------
   35|   196k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  36.9k|    value128 secondproduct =
   40|  36.9k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  36.9k|    firstproduct.low += secondproduct.high;
   42|  36.9k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 26.7k, False: 10.1k]
  ------------------
   43|  26.7k|      firstproduct.high++;
   44|  26.7k|    }
   45|  36.9k|  }
   46|   196k|  return firstproduct;
   47|   196k|}
_ZN10fast_float6detail5powerEi:
   65|   397k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   397k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   397k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  18.8k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  18.8k|  int lz = leading_zeroes(w);
   90|  18.8k|  w <<= lz;
   91|  18.8k|  value128 product =
   92|  18.8k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  18.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  18.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  18.8k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  18.8k|  int hilz = int(w >> 63) ^ 1;
   76|  18.8k|  adjusted_mantissa answer;
   77|  18.8k|  answer.mantissa = w << hilz;
   78|  18.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  18.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  18.8k|                          invalid_am_bias);
   81|  18.8k|  return answer;
   82|  18.8k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   177k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   177k|  adjusted_mantissa answer;
  105|   177k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.24k, False: 174k]
  |  Branch (105:19): [True: 371, False: 174k]
  ------------------
  106|  3.61k|    answer.power2 = 0;
  107|  3.61k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  3.61k|    return answer;
  110|  3.61k|  }
  111|   174k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.78k, False: 170k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.78k|    answer.power2 = binary::infinite_power();
  114|  3.78k|    answer.mantissa = 0;
  115|  3.78k|    return answer;
  116|  3.78k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   170k|  int lz = leading_zeroes(w);
  122|   170k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   170k|  value128 product =
  131|   170k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   170k|  int upperbit = int(product.high >> 63);
  142|   170k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   170k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   170k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   170k|                          binary::minimum_exponent());
  148|   170k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 2.79k, False: 167k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  2.79k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 2.70k]
  ------------------
  151|  2.79k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.70k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  2.70k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  2.70k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  2.70k|    answer.power2 =
  172|  2.70k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 2.70k, False: 0]
  ------------------
  173|  2.70k|            ? 0
  174|  2.70k|            : 1;
  175|  2.70k|    return answer;
  176|  2.79k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   167k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 48.2k, False: 119k]
  |  Branch (181:29): [True: 27.1k, False: 21.1k]
  ------------------
  182|   167k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 22.4k, False: 4.68k]
  ------------------
  183|   167k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 4.78k, False: 17.6k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  4.78k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.70k, False: 1.07k]
  ------------------
  190|  3.70k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.70k|    }
  192|  4.78k|  }
  193|       |
  194|   167k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   167k|  answer.mantissa >>= 1;
  196|   167k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 9.97k, False: 157k]
  ------------------
  197|  9.97k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  9.97k|    answer.power2++; // undo previous addition
  199|  9.97k|  }
  200|       |
  201|   167k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   167k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 336, False: 167k]
  ------------------
  203|    336|    answer.power2 = binary::infinite_power();
  204|    336|    answer.mantissa = 0;
  205|    336|  }
  206|   167k|  return answer;
  207|   170k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   200k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   200k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   200k|  value128 firstproduct =
   28|   200k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   200k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   200k|                " precision should  be in (0,64]");
   31|   200k|  constexpr uint64_t precision_mask =
   32|   200k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   200k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   200k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 78.7k, False: 121k]
  ------------------
   35|   200k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  78.7k|    value128 secondproduct =
   40|  78.7k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  78.7k|    firstproduct.low += secondproduct.high;
   42|  78.7k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 24.3k, False: 54.4k]
  ------------------
   43|  24.3k|      firstproduct.high++;
   44|  24.3k|    }
   45|  78.7k|  }
   46|   200k|  return firstproduct;
   47|   200k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  30.1k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  30.1k|  int lz = leading_zeroes(w);
   90|  30.1k|  w <<= lz;
   91|  30.1k|  value128 product =
   92|  30.1k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  30.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  30.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  30.1k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  30.1k|  int hilz = int(w >> 63) ^ 1;
   76|  30.1k|  adjusted_mantissa answer;
   77|  30.1k|  answer.mantissa = w << hilz;
   78|  30.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  30.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  30.1k|                          invalid_am_bias);
   81|  30.1k|  return answer;
   82|  30.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  18.8k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  18.8k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  18.8k|  int32_t sci_exp = scientific_exponent(num);
  440|  18.8k|  size_t max_digits = binary_format<T>::max_digits();
  441|  18.8k|  size_t digits = 0;
  442|  18.8k|  bigint bigmant;
  443|  18.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  18.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  18.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 514, False: 18.3k]
  ------------------
  447|    514|    return positive_digit_comp<T>(bigmant, exponent);
  448|  18.3k|  } else {
  449|  18.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  18.3k|  }
  451|  18.8k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  48.7k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  48.7k|  uint64_t mantissa = num.mantissa;
   45|  48.7k|  int32_t exponent = int32_t(num.exponent);
   46|   243k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 195k, False: 48.7k]
  ------------------
   47|   195k|    mantissa /= 10000;
   48|   195k|    exponent += 4;
   49|   195k|  }
   50|  97.5k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 48.7k, False: 48.7k]
  ------------------
   51|  48.7k|    mantissa /= 100;
   52|  48.7k|    exponent += 2;
   53|  48.7k|  }
   54|  48.7k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 48.7k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  48.7k|  return exponent;
   59|  48.7k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|  48.7k|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|  48.7k|  size_t counter = 0;
  265|  48.7k|  digits = 0;
  266|  48.7k|  limb value = 0;
  267|  48.7k|#ifdef FASTFLOAT_64BIT_LIMB
  268|  48.7k|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|  48.7k|  UC const *p = num.integer.ptr;
  275|  48.7k|  UC const *pend = p + num.integer.len();
  276|  48.7k|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|   108k|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 60.2k, False: 48.5k]
  ------------------
  279|   101k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 53.8k, False: 48.0k]
  |  Branch (279:45): [True: 41.8k, False: 11.9k]
  ------------------
  280|   101k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 41.6k, False: 257]
  ------------------
  281|  41.6k|      parse_eight_digits(p, value, counter, digits);
  282|  41.6k|    }
  283|   188k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 174k, False: 14.2k]
  |  Branch (283:30): [True: 128k, False: 45.7k]
  |  Branch (283:43): [True: 128k, False: 257]
  ------------------
  284|   128k|      parse_one_digit(p, value, counter, digits);
  285|   128k|    }
  286|  60.2k|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 257, False: 60.0k]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|    257|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|    257|      bool truncated = is_truncated(p, pend);
  290|    257|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 219, False: 38]
  ------------------
  291|    219|        truncated |= is_truncated(num.fraction);
  292|    219|      }
  293|    257|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 153, False: 104]
  ------------------
  294|    153|        round_up_bigint(result, digits);
  295|    153|      }
  296|    257|      return;
  297|  60.0k|    } else {
  298|  60.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|  60.0k|      counter = 0;
  300|  60.0k|      value = 0;
  301|  60.0k|    }
  302|  60.2k|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|  48.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 45.6k, False: 2.83k]
  ------------------
  306|  45.6k|    p = num.fraction.ptr;
  307|  45.6k|    pend = p + num.fraction.len();
  308|  45.6k|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 2.75k, False: 42.9k]
  ------------------
  309|  2.75k|      skip_zeros(p, pend);
  310|  2.75k|    }
  311|       |    // process all digits, in increments of step per loop
  312|   152k|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 109k, False: 42.8k]
  ------------------
  313|   263k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 207k, False: 55.6k]
  |  Branch (313:47): [True: 155k, False: 52.2k]
  ------------------
  314|   263k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 153k, False: 1.29k]
  ------------------
  315|   153k|        parse_eight_digits(p, value, counter, digits);
  316|   153k|      }
  317|   454k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 389k, False: 65.0k]
  |  Branch (317:32): [True: 347k, False: 41.9k]
  |  Branch (317:45): [True: 345k, False: 2.25k]
  ------------------
  318|   345k|        parse_one_digit(p, value, counter, digits);
  319|   345k|      }
  320|   109k|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 2.82k, False: 106k]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|  2.82k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|  2.82k|        bool truncated = is_truncated(p, pend);
  324|  2.82k|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 1.98k, False: 834]
  ------------------
  325|  1.98k|          round_up_bigint(result, digits);
  326|  1.98k|        }
  327|  2.82k|        return;
  328|   106k|      } else {
  329|   106k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|   106k|        counter = 0;
  331|   106k|        value = 0;
  332|   106k|      }
  333|   109k|    }
  334|  45.6k|  }
  335|       |
  336|  45.7k|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 45.7k]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|  45.7k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  175|  51.5k|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|  51.5k|  uint64_t val;
  177|  63.6k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|  63.6k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 29.8k, False: 33.8k]
  ------------------
  179|  29.8k|    ::memcpy(&val, first, sizeof(uint64_t));
  180|  29.8k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 17.7k, False: 12.1k]
  ------------------
  181|  17.7k|      break;
  182|  17.7k|    }
  183|  12.1k|    first += int_cmp_len<UC>();
  184|  12.1k|  }
  185|  95.7k|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 93.0k, False: 2.75k]
  ------------------
  186|  93.0k|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 48.7k, False: 44.2k]
  ------------------
  187|  48.7k|      break;
  188|  48.7k|    }
  189|  44.2k|    first++;
  190|  44.2k|  }
  191|  51.5k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  225|   195k|                   size_t &count) noexcept {
  226|   195k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|   195k|  p += 8;
  228|   195k|  counter += 8;
  229|   195k|  count += 8;
  230|   195k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  235|   473k|                size_t &count) noexcept {
  236|   473k|  value = value * 10 + limb(*p - UC('0'));
  237|   473k|  p++;
  238|   473k|  counter++;
  239|   473k|  count++;
  240|   473k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  243|   172k|add_native(bigint &big, limb power, limb value) noexcept {
  244|   172k|  big.mul(power);
  245|   172k|  big.add(value);
  246|   172k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  197|  3.29k|is_truncated(UC const *first, UC const *last) noexcept {
  198|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  199|  3.29k|  uint64_t val;
  200|  6.04k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (200:10): [Folded - Ignored]
  ------------------
  201|  6.04k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (201:10): [True: 3.77k, False: 2.27k]
  ------------------
  202|  3.77k|    ::memcpy(&val, first, sizeof(uint64_t));
  203|  3.77k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (203:9): [True: 1.02k, False: 2.75k]
  ------------------
  204|  1.02k|      return true;
  205|  1.02k|    }
  206|  2.75k|    first += int_cmp_len<UC>();
  207|  2.75k|  }
  208|  3.86k|  while (first != last) {
  ------------------
  |  Branch (208:10): [True: 2.79k, False: 1.07k]
  ------------------
  209|  2.79k|    if (*first != UC('0')) {
  ------------------
  |  Branch (209:9): [True: 1.19k, False: 1.59k]
  ------------------
  210|  1.19k|      return true;
  211|  1.19k|    }
  212|  1.59k|    ++first;
  213|  1.59k|  }
  214|  1.07k|  return false;
  215|  2.27k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  218|    219|is_truncated(span<const UC> s) noexcept {
  219|    219|  return is_truncated(s.ptr, s.ptr + s.len());
  220|    219|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  249|  2.14k|round_up_bigint(bigint &big, size_t &count) noexcept {
  250|       |  // need to round-up the digits, but need to avoid rounding
  251|       |  // ....9999 to ...10000, which could cause a false halfway point.
  252|  2.14k|  add_native(big, 10, 1);
  253|  2.14k|  count++;
  254|  2.14k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  343|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|    514|  { ((void)(x)); }
  ------------------
  345|    514|  adjusted_mantissa answer;
  346|    514|  bool truncated;
  347|    514|  answer.mantissa = bigmant.hi64(truncated);
  348|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|    514|             binary_format<T>::minimum_exponent();
  350|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
  360|       |
  361|    514|  return answer;
  362|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 74, False: 440]
  |  Branch (356:31): [True: 348, False: 92]
  |  Branch (356:45): [True: 58, False: 290]
  ------------------
  357|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 56, False: 326]
  |  Branch (357:29): [True: 32, False: 24]
  ------------------
  358|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  18.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  18.3k|  bigint &real_digits = bigmant;
  373|  18.3k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  18.3k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  18.3k|  round<T>(am_b,
  380|  18.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  18.3k|  T b;
  382|  18.3k|  to_float(false, am_b, b);
  383|  18.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  18.3k|  bigint theor_digits(theor.mantissa);
  385|  18.3k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  18.3k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  18.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  18.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 18.3k, False: 0]
  ------------------
  391|  18.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  18.3k|  { ((void)(x)); }
  ------------------
  392|  18.3k|  }
  393|  18.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 18.3k, False: 0]
  ------------------
  394|  18.3k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  18.3k|  { ((void)(x)); }
  ------------------
  395|  18.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 0, False: 0]
  ------------------
  396|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|      0|  { ((void)(x)); }
  ------------------
  397|      0|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  18.3k|  int ord = real_digits.compare(theor_digits);
  401|  18.3k|  adjusted_mantissa answer = am;
  402|  18.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  18.3k|    round_nearest_tie_even(
  404|  18.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.3k|          (void)_;  // not needed, since we've done our comparison
  406|  18.3k|          (void)__; // not needed, since we've done our comparison
  407|  18.3k|          if (ord > 0) {
  408|  18.3k|            return true;
  409|  18.3k|          } else if (ord < 0) {
  410|  18.3k|            return false;
  411|  18.3k|          } else {
  412|  18.3k|            return is_odd;
  413|  18.3k|          }
  414|  18.3k|        });
  415|  18.3k|  });
  416|       |
  417|  18.3k|  return answer;
  418|  18.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  18.3k|                                                         callback cb) noexcept {
  111|  18.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.3k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.3k]
  ------------------
  129|  18.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  18.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  45.7k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  45.7k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 45.7k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  45.7k|  } else {
  169|  45.7k|    am.mantissa >>= shift;
  170|  45.7k|  }
  171|  45.7k|  am.power2 += shift;
  172|  45.7k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  18.3k|to_extended_halfway(T value) noexcept {
  100|  18.3k|  adjusted_mantissa am = to_extended(value);
  101|  18.3k|  am.mantissa <<= 1;
  102|  18.3k|  am.mantissa += 1;
  103|  18.3k|  am.power2 -= 1;
  104|  18.3k|  return am;
  105|  18.3k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  18.3k|to_extended(T value) noexcept {
   65|  18.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  18.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  18.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  18.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  18.3k|  adjusted_mantissa am;
   71|  18.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  18.3k|                 binary_format<T>::minimum_exponent();
   73|  18.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  18.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  18.3k|#endif
   79|  18.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 18.3k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  18.3k|  } else {
   84|       |    // normal
   85|  18.3k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  18.3k|                        binary_format<T>::mantissa_explicit_bits());
   87|  18.3k|    am.power2 -= bias;
   88|  18.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  18.3k|  }
   90|       |
   91|  18.3k|  return am;
   92|  18.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  18.3k|                                                         callback cb) noexcept {
  111|  18.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.3k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.3k]
  ------------------
  129|  18.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  18.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  18.3k|    round_nearest_tie_even(
  404|  18.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.3k|          (void)_;  // not needed, since we've done our comparison
  406|  18.3k|          (void)__; // not needed, since we've done our comparison
  407|  18.3k|          if (ord > 0) {
  408|  18.3k|            return true;
  409|  18.3k|          } else if (ord < 0) {
  410|  18.3k|            return false;
  411|  18.3k|          } else {
  412|  18.3k|            return is_odd;
  413|  18.3k|          }
  414|  18.3k|        });
  415|  18.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  18.3k|                       callback cb) noexcept {
  146|  18.3k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 18.3k]
  ------------------
  147|  18.3k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 18.3k]
  ------------------
  148|  18.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  18.3k|  bool is_above = truncated_bits > halfway;
  150|  18.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  18.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 18.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  18.3k|  } else {
  156|  18.3k|    am.mantissa >>= shift;
  157|  18.3k|  }
  158|  18.3k|  am.power2 += shift;
  159|       |
  160|  18.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  18.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  18.3k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  18.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.3k|          (void)_;  // not needed, since we've done our comparison
  406|  18.3k|          (void)__; // not needed, since we've done our comparison
  407|  18.3k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 210, False: 18.1k]
  ------------------
  408|    210|            return true;
  409|  18.1k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 14.8k, False: 3.27k]
  ------------------
  410|  14.8k|            return false;
  411|  14.8k|          } else {
  412|  3.27k|            return is_odd;
  413|  3.27k|          }
  414|  18.3k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|    180|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|    180|  uint64_t mantissa = num.mantissa;
   45|    180|  int32_t exponent = int32_t(num.exponent);
   46|    900|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 720, False: 180]
  ------------------
   47|    720|    mantissa /= 10000;
   48|    720|    exponent += 4;
   49|    720|  }
   50|    360|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 180, False: 180]
  ------------------
   51|    180|    mantissa /= 100;
   52|    180|    exponent += 2;
   53|    180|  }
   54|    180|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 180]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|    180|  return exponent;
   59|    180|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|    180|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|    180|  size_t counter = 0;
  265|    180|  digits = 0;
  266|    180|  limb value = 0;
  267|    180|#ifdef FASTFLOAT_64BIT_LIMB
  268|    180|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|    180|  UC const *p = num.integer.ptr;
  275|    180|  UC const *pend = p + num.integer.len();
  276|    180|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|    410|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 230, False: 180]
  ------------------
  279|    330|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 118, False: 212]
  |  Branch (279:45): [True: 100, False: 18]
  ------------------
  280|    330|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 100, False: 0]
  ------------------
  281|    100|      parse_eight_digits(p, value, counter, digits);
  282|    100|    }
  283|  1.44k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 1.39k, False: 50]
  |  Branch (283:30): [True: 1.21k, False: 180]
  |  Branch (283:43): [True: 1.21k, False: 0]
  ------------------
  284|  1.21k|      parse_one_digit(p, value, counter, digits);
  285|  1.21k|    }
  286|    230|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 0, False: 230]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|      0|      bool truncated = is_truncated(p, pend);
  290|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 0, False: 0]
  ------------------
  291|      0|        truncated |= is_truncated(num.fraction);
  292|      0|      }
  293|      0|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        round_up_bigint(result, digits);
  295|      0|      }
  296|      0|      return;
  297|    230|    } else {
  298|    230|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|    230|      counter = 0;
  300|    230|      value = 0;
  301|    230|    }
  302|    230|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|    180|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 130, False: 50]
  ------------------
  306|    130|    p = num.fraction.ptr;
  307|    130|    pend = p + num.fraction.len();
  308|    130|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 0, False: 130]
  ------------------
  309|      0|      skip_zeros(p, pend);
  310|      0|    }
  311|       |    // process all digits, in increments of step per loop
  312|    336|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 206, False: 130]
  ------------------
  313|    430|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 246, False: 184]
  |  Branch (313:47): [True: 224, False: 22]
  ------------------
  314|    430|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 224, False: 0]
  ------------------
  315|    224|        parse_eight_digits(p, value, counter, digits);
  316|    224|      }
  317|    904|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 828, False: 76]
  |  Branch (317:32): [True: 698, False: 130]
  |  Branch (317:45): [True: 698, False: 0]
  ------------------
  318|    698|        parse_one_digit(p, value, counter, digits);
  319|    698|      }
  320|    206|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 0, False: 206]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|      0|        bool truncated = is_truncated(p, pend);
  324|      0|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 0, False: 0]
  ------------------
  325|      0|          round_up_bigint(result, digits);
  326|      0|        }
  327|      0|        return;
  328|    206|      } else {
  329|    206|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|    206|        counter = 0;
  331|    206|        value = 0;
  332|    206|      }
  333|    206|    }
  334|    130|  }
  335|       |
  336|    180|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 180]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|    180|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  175|    180|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|    180|  uint64_t val;
  177|    180|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|    180|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 180, False: 0]
  ------------------
  179|    180|    ::memcpy(&val, first, sizeof(uint64_t));
  180|    180|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 180, False: 0]
  ------------------
  181|    180|      break;
  182|    180|    }
  183|      0|    first += int_cmp_len<UC>();
  184|      0|  }
  185|    216|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 216, False: 0]
  ------------------
  186|    216|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 180, False: 36]
  ------------------
  187|    180|      break;
  188|    180|    }
  189|     36|    first++;
  190|     36|  }
  191|    180|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  225|    324|                   size_t &count) noexcept {
  226|    324|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|    324|  p += 8;
  228|    324|  counter += 8;
  229|    324|  count += 8;
  230|    324|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  235|  1.91k|                size_t &count) noexcept {
  236|  1.91k|  value = value * 10 + limb(*p - UC('0'));
  237|  1.91k|  p++;
  238|  1.91k|  counter++;
  239|  1.91k|  count++;
  240|  1.91k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  29.9k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  29.9k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  29.9k|  int32_t sci_exp = scientific_exponent(num);
  440|  29.9k|  size_t max_digits = binary_format<T>::max_digits();
  441|  29.9k|  size_t digits = 0;
  442|  29.9k|  bigint bigmant;
  443|  29.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  29.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  29.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 2.69k, False: 27.2k]
  ------------------
  447|  2.69k|    return positive_digit_comp<T>(bigmant, exponent);
  448|  27.2k|  } else {
  449|  27.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  27.2k|  }
  451|  29.9k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  343|  2.74k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|  2.74k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|  2.74k|  { ((void)(x)); }
  ------------------
  345|  2.74k|  adjusted_mantissa answer;
  346|  2.74k|  bool truncated;
  347|  2.74k|  answer.mantissa = bigmant.hi64(truncated);
  348|  2.74k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|  2.74k|             binary_format<T>::minimum_exponent();
  350|  2.74k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.74k|    round_nearest_tie_even(
  354|  2.74k|        a, shift,
  355|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.74k|          return is_above || (is_halfway && truncated) ||
  357|  2.74k|                 (is_odd && is_halfway);
  358|  2.74k|        });
  359|  2.74k|  });
  360|       |
  361|  2.74k|  return answer;
  362|  2.74k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  2.74k|                                                         callback cb) noexcept {
  111|  2.74k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  2.74k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 2.74k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  2.74k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  2.74k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 429, False: 2.31k]
  ------------------
  129|  2.74k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    429|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    429|    am.power2++;
  132|    429|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  2.74k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  2.74k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 2.74k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  2.74k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.74k|    round_nearest_tie_even(
  354|  2.74k|        a, shift,
  355|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.74k|          return is_above || (is_halfway && truncated) ||
  357|  2.74k|                 (is_odd && is_halfway);
  358|  2.74k|        });
  359|  2.74k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  2.74k|                       callback cb) noexcept {
  146|  2.74k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 2.74k]
  ------------------
  147|  2.74k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 2.74k]
  ------------------
  148|  2.74k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  2.74k|  bool is_above = truncated_bits > halfway;
  150|  2.74k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  2.74k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 2.74k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  2.74k|  } else {
  156|  2.74k|    am.mantissa >>= shift;
  157|  2.74k|  }
  158|  2.74k|  am.power2 += shift;
  159|       |
  160|  2.74k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  2.74k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  2.74k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.74k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 479, False: 2.26k]
  |  Branch (356:31): [True: 1.58k, False: 681]
  |  Branch (356:45): [True: 615, False: 972]
  ------------------
  357|  2.74k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 247, False: 1.40k]
  |  Branch (357:29): [True: 60, False: 187]
  ------------------
  358|  2.74k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  27.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  27.3k|  bigint &real_digits = bigmant;
  373|  27.3k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  27.3k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  27.3k|  round<T>(am_b,
  380|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  27.3k|  T b;
  382|  27.3k|  to_float(false, am_b, b);
  383|  27.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  27.3k|  bigint theor_digits(theor.mantissa);
  385|  27.3k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  27.3k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  27.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  27.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 27.3k, False: 0]
  ------------------
  391|  27.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  27.3k|  { ((void)(x)); }
  ------------------
  392|  27.3k|  }
  393|  27.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 2.51k, False: 24.8k]
  ------------------
  394|  2.51k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  2.51k|  { ((void)(x)); }
  ------------------
  395|  24.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 24.7k, False: 74]
  ------------------
  396|  24.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|  24.7k|  { ((void)(x)); }
  ------------------
  397|  24.7k|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  27.3k|  int ord = real_digits.compare(theor_digits);
  401|  27.3k|  adjusted_mantissa answer = am;
  402|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  27.3k|    round_nearest_tie_even(
  404|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.3k|          (void)_;  // not needed, since we've done our comparison
  406|  27.3k|          (void)__; // not needed, since we've done our comparison
  407|  27.3k|          if (ord > 0) {
  408|  27.3k|            return true;
  409|  27.3k|          } else if (ord < 0) {
  410|  27.3k|            return false;
  411|  27.3k|          } else {
  412|  27.3k|            return is_odd;
  413|  27.3k|          }
  414|  27.3k|        });
  415|  27.3k|  });
  416|       |
  417|  27.3k|  return answer;
  418|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 27.2k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  27.3k|to_extended_halfway(T value) noexcept {
  100|  27.3k|  adjusted_mantissa am = to_extended(value);
  101|  27.3k|  am.mantissa <<= 1;
  102|  27.3k|  am.mantissa += 1;
  103|  27.3k|  am.power2 -= 1;
  104|  27.3k|  return am;
  105|  27.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  27.3k|to_extended(T value) noexcept {
   65|  27.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  27.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  27.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  27.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  27.3k|  adjusted_mantissa am;
   71|  27.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  27.3k|                 binary_format<T>::minimum_exponent();
   73|  27.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  27.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  27.3k|#endif
   79|  27.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 108, False: 27.2k]
  ------------------
   80|       |    // denormal
   81|    108|    am.power2 = 1 - bias;
   82|    108|    am.mantissa = bits & mantissa_mask;
   83|  27.2k|  } else {
   84|       |    // normal
   85|  27.2k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  27.2k|                        binary_format<T>::mantissa_explicit_bits());
   87|  27.2k|    am.power2 -= bias;
   88|  27.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  27.2k|  }
   90|       |
   91|  27.3k|  return am;
   92|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 27.2k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  27.3k|    round_nearest_tie_even(
  404|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.3k|          (void)_;  // not needed, since we've done our comparison
  406|  27.3k|          (void)__; // not needed, since we've done our comparison
  407|  27.3k|          if (ord > 0) {
  408|  27.3k|            return true;
  409|  27.3k|          } else if (ord < 0) {
  410|  27.3k|            return false;
  411|  27.3k|          } else {
  412|  27.3k|            return is_odd;
  413|  27.3k|          }
  414|  27.3k|        });
  415|  27.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  27.3k|                       callback cb) noexcept {
  146|  27.3k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 27.3k]
  ------------------
  147|  27.3k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 27.3k]
  ------------------
  148|  27.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  27.3k|  bool is_above = truncated_bits > halfway;
  150|  27.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  27.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 27.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  27.3k|  } else {
  156|  27.3k|    am.mantissa >>= shift;
  157|  27.3k|  }
  158|  27.3k|  am.power2 += shift;
  159|       |
  160|  27.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  27.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  27.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  27.3k|          (void)_;  // not needed, since we've done our comparison
  406|  27.3k|          (void)__; // not needed, since we've done our comparison
  407|  27.3k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 11.3k, False: 16.0k]
  ------------------
  408|  11.3k|            return true;
  409|  16.0k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 15.5k, False: 470]
  ------------------
  410|  15.5k|            return false;
  411|  15.5k|          } else {
  412|    470|            return is_odd;
  413|    470|          }
  414|  27.3k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|    180|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|    180|  am.power2 -= invalid_am_bias;
  438|       |
  439|    180|  int32_t sci_exp = scientific_exponent(num);
  440|    180|  size_t max_digits = binary_format<T>::max_digits();
  441|    180|  size_t digits = 0;
  442|    180|  bigint bigmant;
  443|    180|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|    180|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|    180|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 50, False: 130]
  ------------------
  447|     50|    return positive_digit_comp<T>(bigmant, exponent);
  448|    130|  } else {
  449|    130|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|    130|  }
  451|    180|}

_ZN10fast_float4spanIKcEC2Ev:
  234|  1.70M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  233|  1.00M|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  236|   336k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  497|   607k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  498|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  499|       |  return 0;
  500|       |#else
  501|   607k|  return -10;
  502|   607k|#endif
  503|   607k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  560|   570k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  561|   570k|  return 10;
  562|   570k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  578|   507k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  579|   507k|  return uint64_t(2) << mantissa_explicit_bits();
  580|   507k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  510|  1.35M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  511|  1.35M|  return 23;
  512|  1.35M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  598|   486k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  599|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  600|   486k|  return (void)powers_of_ten[0], powers_of_ten[power];
  601|   486k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  362|   465k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  614|   186k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  615|   186k|  return -64;
  616|   186k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  606|   185k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  607|   185k|  return 38;
  608|   185k|}
_ZN10fast_float14leading_zeroesEm:
  282|   403k|leading_zeroes(uint64_t input_num) {
  283|   403k|  assert(input_num > 0);
  284|   403k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (284:7): [Folded - Ignored]
  ------------------
  285|      0|    return leading_zeroes_generic(input_num);
  286|      0|  }
  287|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  288|       |#if defined(_M_X64) || defined(_M_ARM64)
  289|       |  unsigned long leading_zero = 0;
  290|       |  // Search the mask data from most significant bit (MSB)
  291|       |  // to least significant bit (LSB) for a set bit (1).
  292|       |  _BitScanReverse64(&leading_zero, input_num);
  293|       |  return (int)(63 - leading_zero);
  294|       |#else
  295|       |  return leading_zeroes_generic(input_num);
  296|       |#endif
  297|       |#else
  298|   403k|  return __builtin_clzll(input_num);
  299|   403k|#endif
  300|   403k|}
_ZN10fast_float19full_multiplicationEmm:
  334|   513k|full_multiplication(uint64_t a, uint64_t b) {
  335|   513k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (335:7): [Folded - Ignored]
  ------------------
  336|      0|    value128 answer;
  337|      0|    answer.low = umul128_generic(a, b, &answer.high);
  338|      0|    return answer;
  339|      0|  }
  340|   513k|  value128 answer;
  341|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  342|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  343|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  344|       |  answer.high = __umulh(a, b);
  345|       |  answer.low = a * b;
  346|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  347|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  348|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  349|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  350|       |  __uint128_t r = ((__uint128_t)a) * b;
  351|   513k|  answer.low = uint64_t(r);
  352|   513k|  answer.high = uint64_t(r >> 64);
  353|       |#else
  354|       |  answer.low = umul128_generic(a, b, &answer.high);
  355|       |#endif
  356|   513k|  return answer;
  357|   513k|}
_ZN10fast_float8value128C2Ev:
  248|   513k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  537|   215k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  538|   215k|  return -127;
  539|   215k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  530|  58.5k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  531|  58.5k|  return -17;
  532|  58.5k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  520|  56.9k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  521|  56.9k|  return 10;
  522|  56.9k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  366|   140k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  367|   140k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (367:12): [True: 48.9k, False: 91.7k]
  |  Branch (367:38): [True: 0, False: 91.7k]
  ------------------
  368|   140k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  621|  18.8k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  622|  18.8k|  return 114;
  623|  18.8k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  707|  84.5k|template <typename UC> static constexpr int int_cmp_len() {
  708|  84.5k|  return sizeof(uint64_t) / sizeof(UC);
  709|  84.5k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  698|  33.6k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|  33.6k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|  33.6k|                "Unsupported character size");
  701|  33.6k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|  33.6k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|  33.6k|}
_ZN10fast_float4spanImEC2EPKmm:
  233|  70.5k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  236|   229k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  238|   125k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  239|   125k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   125k|  { ((void)(x)); }
  ------------------
  240|   125k|    return ptr[index];
  241|   125k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  660|   139k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   139k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   139k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   139k|  word |= fastfloat_uint(am.power2)
  664|   139k|          << binary_format<T>::mantissa_explicit_bits();
  665|   139k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   139k|  ::memcpy(&value, &word, sizeof(T));
  670|   139k|#endif
  671|   139k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  551|   139k|template <> inline constexpr int binary_format<float>::sign_index() {
  552|   139k|  return 31;
  553|   139k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  544|   342k|template <> inline constexpr int binary_format<float>::infinite_power() {
  545|   342k|  return 0xFF;
  546|   342k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   44|   850k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  234|   865k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|   437k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  236|  3.82k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  707|    180|template <typename UC> static constexpr int int_cmp_len() {
  708|    180|  return sizeof(uint64_t) / sizeof(UC);
  709|    180|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  698|    180|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|    180|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|    180|                "Unsupported character size");
  701|    180|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|    180|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|    180|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|    180|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|    180|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|   432k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|   675k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|   675k|  return -22;
  493|   675k|#endif
  494|   675k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|   667k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|   667k|  return 22;
  558|   667k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|   574k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|   574k|  return uint64_t(2) << mantissa_explicit_bits();
  567|   574k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|  1.48M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|  1.48M|  return 52;
  508|  1.48M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|   569k|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|   569k|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|   569k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  611|   174k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  612|   174k|  return -342;
  613|   174k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  603|   174k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  604|   174k|  return 308;
  605|   174k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  534|   230k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  535|   230k|  return -1023;
  536|   230k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  525|  48.2k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  526|  48.2k|  return -4;
  527|  48.2k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  515|  27.1k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  516|  27.1k|  return 23;
  517|  27.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  618|  30.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  619|  30.1k|  return 769;
  620|  30.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  660|   133k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   133k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   133k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   133k|  word |= fastfloat_uint(am.power2)
  664|   133k|          << binary_format<T>::mantissa_explicit_bits();
  665|   133k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   133k|  ::memcpy(&value, &word, sizeof(T));
  670|   133k|#endif
  671|   133k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  548|   133k|template <> inline constexpr int binary_format<double>::sign_index() {
  549|   133k|  return 63;
  550|   133k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  541|   334k|template <> inline constexpr int binary_format<double>::infinite_power() {
  542|   334k|  return 0x7FF;
  543|   334k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   414k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   414k|  return from_chars_caller<T>::call(first, last, value,
  191|   414k|                                    parse_options_t<UC>(fmt));
  192|   414k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   414k|       parse_options_t<UC> options) noexcept {
  148|   414k|    return from_chars_advanced(first, last, value, options);
  149|   414k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   414k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   414k|  static_assert(is_supported_float_type<T>(),
  293|   414k|                "only some floating-point types are supported");
  294|   414k|  static_assert(is_supported_char_type<UC>(),
  295|   414k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   414k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   414k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 414k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   414k|  parsed_number_string_t<UC> pns =
  309|   414k|      parse_number_string<UC>(first, last, options);
  310|   414k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 414k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   414k|  return from_chars_advanced(pns, value);
  322|   414k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   414k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   414k|  static_assert(is_supported_float_type<T>(),
  204|   414k|                "only some floating-point types are supported");
  205|   414k|  static_assert(is_supported_char_type<UC>(),
  206|   414k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   414k|  from_chars_result_t<UC> answer;
  209|       |
  210|   414k|  answer.ec = std::errc(); // be optimistic
  211|   414k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   414k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 378k, False: 35.9k]
  ------------------
  218|   414k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 356k, False: 22.3k]
  ------------------
  219|   414k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 320k, False: 36.2k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   320k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 320k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   320k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 299k, False: 20.4k]
  ------------------
  231|   299k|        value = T(pns.mantissa);
  232|   299k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 6.93k, False: 292k]
  ------------------
  233|  6.93k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   292k|        } else {
  235|   292k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   292k|        }
  237|   299k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 299k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   299k|        return answer;
  241|   299k|      }
  242|   320k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   320k|  }
  265|   115k|  adjusted_mantissa am =
  266|   115k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   115k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 67.4k, False: 47.5k]
  |  Branch (267:30): [True: 67.4k, False: 0]
  ------------------
  268|  67.4k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 18.8k, False: 48.6k]
  ------------------
  269|  18.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  18.8k|    }
  271|  67.4k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   115k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 18.8k, False: 96.2k]
  ------------------
  276|  18.8k|    am = digit_comp<T>(pns, am);
  277|  18.8k|  }
  278|   115k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   115k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 112k, False: 2.82k]
  |  Branch (280:29): [True: 12.4k, False: 99.8k]
  |  Branch (280:49): [True: 839, False: 11.5k]
  ------------------
  281|   115k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 4.02k, False: 110k]
  ------------------
  282|  4.85k|    answer.ec = std::errc::result_out_of_range;
  283|  4.85k|  }
  284|   115k|  return answer;
  285|   414k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   81|  1.08M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|  1.08M|  static volatile float fmin = std::numeric_limits<float>::min();
  103|  1.08M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|  1.08M|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|  1.08M|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|  1.08M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   193k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   193k|  return from_chars_caller<T>::call(first, last, value,
  191|   193k|                                    parse_options_t<UC>(fmt));
  192|   193k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   193k|       parse_options_t<UC> options) noexcept {
  148|   193k|    return from_chars_advanced(first, last, value, options);
  149|   193k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   193k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   193k|  static_assert(is_supported_float_type<T>(),
  293|   193k|                "only some floating-point types are supported");
  294|   193k|  static_assert(is_supported_char_type<UC>(),
  295|   193k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   193k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   193k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 193k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   193k|  parsed_number_string_t<UC> pns =
  309|   193k|      parse_number_string<UC>(first, last, options);
  310|   193k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 193k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   193k|  return from_chars_advanced(pns, value);
  322|   193k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   193k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   193k|  static_assert(is_supported_float_type<T>(),
  204|   193k|                "only some floating-point types are supported");
  205|   193k|  static_assert(is_supported_char_type<UC>(),
  206|   193k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   193k|  from_chars_result_t<UC> answer;
  209|       |
  210|   193k|  answer.ec = std::errc(); // be optimistic
  211|   193k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   193k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 191k, False: 1.81k]
  ------------------
  218|   193k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 187k, False: 3.66k]
  ------------------
  219|   193k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 187k, False: 344]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   187k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 187k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   187k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 186k, False: 574]
  ------------------
  231|   186k|        value = T(pns.mantissa);
  232|   186k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.29k, False: 185k]
  ------------------
  233|  1.29k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   185k|        } else {
  235|   185k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   185k|        }
  237|   186k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 186k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   186k|        return answer;
  241|   186k|      }
  242|   187k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   187k|  }
  265|  6.40k|  adjusted_mantissa am =
  266|  6.40k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  6.40k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 1.09k, False: 5.30k]
  |  Branch (267:30): [True: 1.09k, False: 0]
  ------------------
  268|  1.09k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 1.09k]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|  1.09k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  6.40k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 6.40k]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|  6.40k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  6.40k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 5.80k, False: 602]
  |  Branch (280:29): [True: 3.73k, False: 2.06k]
  |  Branch (280:49): [True: 836, False: 2.89k]
  ------------------
  281|  6.40k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.89k, False: 2.66k]
  ------------------
  282|  3.73k|    answer.ec = std::errc::result_out_of_range;
  283|  3.73k|  }
  284|  6.40k|  return answer;
  285|   193k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   435k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   435k|  return from_chars_caller<T>::call(first, last, value,
  191|   435k|                                    parse_options_t<UC>(fmt));
  192|   435k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   435k|       parse_options_t<UC> options) noexcept {
  148|   435k|    return from_chars_advanced(first, last, value, options);
  149|   435k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   435k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   435k|  static_assert(is_supported_float_type<T>(),
  293|   435k|                "only some floating-point types are supported");
  294|   435k|  static_assert(is_supported_char_type<UC>(),
  295|   435k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   435k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   435k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 435k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   435k|  parsed_number_string_t<UC> pns =
  309|   435k|      parse_number_string<UC>(first, last, options);
  310|   435k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 435k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   435k|  return from_chars_advanced(pns, value);
  322|   435k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   435k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   435k|  static_assert(is_supported_float_type<T>(),
  204|   435k|                "only some floating-point types are supported");
  205|   435k|  static_assert(is_supported_char_type<UC>(),
  206|   435k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   435k|  from_chars_result_t<UC> answer;
  209|       |
  210|   435k|  answer.ec = std::errc(); // be optimistic
  211|   435k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   435k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 429k, False: 6.02k]
  ------------------
  218|   435k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 407k, False: 22.0k]
  ------------------
  219|   435k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 341k, False: 65.7k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   341k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 341k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   341k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 337k, False: 4.23k]
  ------------------
  231|   337k|        value = T(pns.mantissa);
  232|   337k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 18.2k, False: 319k]
  ------------------
  233|  18.2k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   319k|        } else {
  235|   319k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   319k|        }
  237|   337k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 337k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   337k|        return answer;
  241|   337k|      }
  242|   341k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   341k|  }
  265|  98.0k|  adjusted_mantissa am =
  266|  98.0k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  98.0k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 71.0k, False: 26.9k]
  |  Branch (267:30): [True: 71.0k, False: 0]
  ------------------
  268|  71.0k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 29.9k, False: 41.0k]
  ------------------
  269|  29.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  29.9k|    }
  271|  71.0k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  98.0k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 29.9k, False: 68.0k]
  ------------------
  276|  29.9k|    am = digit_comp<T>(pns, am);
  277|  29.9k|  }
  278|  98.0k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  98.0k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 95.4k, False: 2.59k]
  |  Branch (280:29): [True: 7.61k, False: 87.7k]
  |  Branch (280:49): [True: 255, False: 7.36k]
  ------------------
  281|  98.0k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.08k, False: 95.6k]
  ------------------
  282|  2.34k|    answer.ec = std::errc::result_out_of_range;
  283|  2.34k|  }
  284|  98.0k|  return answer;
  285|   435k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   239k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   239k|  return from_chars_caller<T>::call(first, last, value,
  191|   239k|                                    parse_options_t<UC>(fmt));
  192|   239k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   239k|       parse_options_t<UC> options) noexcept {
  148|   239k|    return from_chars_advanced(first, last, value, options);
  149|   239k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   239k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   239k|  static_assert(is_supported_float_type<T>(),
  293|   239k|                "only some floating-point types are supported");
  294|   239k|  static_assert(is_supported_char_type<UC>(),
  295|   239k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   239k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   239k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 239k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   239k|  parsed_number_string_t<UC> pns =
  309|   239k|      parse_number_string<UC>(first, last, options);
  310|   239k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 239k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   239k|  return from_chars_advanced(pns, value);
  322|   239k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   239k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   239k|  static_assert(is_supported_float_type<T>(),
  204|   239k|                "only some floating-point types are supported");
  205|   239k|  static_assert(is_supported_char_type<UC>(),
  206|   239k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   239k|  from_chars_result_t<UC> answer;
  209|       |
  210|   239k|  answer.ec = std::errc(); // be optimistic
  211|   239k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   239k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 237k, False: 1.83k]
  ------------------
  218|   239k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 233k, False: 4.66k]
  ------------------
  219|   239k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 232k, False: 920]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   232k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 232k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   232k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 231k, False: 252]
  ------------------
  231|   231k|        value = T(pns.mantissa);
  232|   231k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.55k, False: 230k]
  ------------------
  233|  1.55k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   230k|        } else {
  235|   230k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   230k|        }
  237|   231k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 231k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   231k|        return answer;
  241|   231k|      }
  242|   232k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   232k|  }
  265|  7.67k|  adjusted_mantissa am =
  266|  7.67k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  7.67k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 1.11k, False: 6.56k]
  |  Branch (267:30): [True: 1.11k, False: 0]
  ------------------
  268|  1.11k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 180, False: 932]
  ------------------
  269|    180|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|    180|    }
  271|  1.11k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  7.67k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 180, False: 7.49k]
  ------------------
  276|    180|    am = digit_comp<T>(pns, am);
  277|    180|  }
  278|  7.67k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  7.67k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 7.03k, False: 644]
  |  Branch (280:29): [True: 1.82k, False: 5.21k]
  |  Branch (280:49): [True: 198, False: 1.62k]
  ------------------
  281|  7.67k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 1.62k, False: 5.85k]
  ------------------
  282|  1.82k|    answer.ec = std::errc::result_out_of_range;
  283|  1.82k|  }
  284|  7.67k|  return answer;
  285|   239k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  3.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.93M|{
 4068|  2.93M|    if constexpr (sizeof(U) == 1) {
 4069|  2.93M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.93M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.93M|{
 4032|  2.93M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.93M|    SCN_GCC_COMPAT_PUSH
 4035|  2.93M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.93M|    constexpr char lengths[] =
 4037|  2.93M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.93M|        "\1\1\1\1\1\1\1\1"
 4039|  2.93M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.93M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.93M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.93M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.93M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.93M|    SCN_GCC_COMPAT_POP
 4046|  2.93M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.64M|{
 4274|  2.64M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.64M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.64M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.64M|{
 4087|  2.64M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.64M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.64M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.64M|    };
 4092|       |
 4093|  2.64M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.58M, False: 60.8k]
  ------------------
 4094|  2.58M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 707, False: 2.58M]
  ------------------
 4095|    707|            SCN_UNLIKELY_ATTR
 4096|    707|            return invalid_code_point;
 4097|    707|        }
 4098|  2.58M|        return static_cast<char32_t>(input[0]);
 4099|  2.58M|    }
 4100|       |
 4101|  60.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 55.8k, False: 4.99k]
  ------------------
 4102|  55.8k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 142, False: 55.6k]
  ------------------
 4103|    142|            SCN_UNLIKELY_ATTR
 4104|    142|            return invalid_code_point;
 4105|    142|        }
 4106|  55.6k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 4.59k, False: 51.0k]
  ------------------
 4107|  4.59k|            SCN_UNLIKELY_ATTR
 4108|  4.59k|            return invalid_code_point;
 4109|  4.59k|        }
 4110|       |
 4111|  51.0k|        char32_t cp{};
 4112|  51.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  51.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  51.0k|        return cp;
 4115|  55.6k|    }
 4116|       |
 4117|  4.99k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.30k, False: 2.68k]
  ------------------
 4118|  2.30k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 161, False: 2.14k]
  ------------------
 4119|    161|            SCN_UNLIKELY_ATTR
 4120|    161|            return invalid_code_point;
 4121|    161|        }
 4122|  2.14k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 528, False: 1.62k]
  ------------------
 4123|  2.14k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 818, False: 802]
  ------------------
 4124|  1.34k|            SCN_UNLIKELY_ATTR
 4125|  1.34k|            return invalid_code_point;
 4126|  1.34k|        }
 4127|       |
 4128|    802|        char32_t cp{};
 4129|    802|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    802|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    802|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    802|        return cp;
 4133|  2.14k|    }
 4134|       |
 4135|  2.68k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.68k, False: 0]
  ------------------
 4136|  2.68k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.68k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.68k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 465, False: 2.21k]
  ------------------
 4141|    465|            SCN_UNLIKELY_ATTR
 4142|    465|            return invalid_code_point;
 4143|    465|        }
 4144|  2.21k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 528, False: 1.68k]
  ------------------
 4145|  2.21k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 556, False: 1.13k]
  ------------------
 4146|  2.21k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 828, False: 304]
  ------------------
 4147|  1.91k|            SCN_UNLIKELY_ATTR
 4148|  1.91k|            return invalid_code_point;
 4149|  1.91k|        }
 4150|       |
 4151|    304|        char32_t cp{};
 4152|    304|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    304|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    304|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    304|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    304|        return cp;
 4157|  2.21k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  64.4k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  64.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  64.4k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.41M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.41M|    else {
 3966|  4.41M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.41M|                                       to_address(first), to_address(last)))};
 3968|  4.41M|    }
 3969|  4.41M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.4M|{
  316|  13.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  21.7M|{
  294|  21.7M|    return p;
  295|  21.7M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  6.92M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  6.92M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  6.92M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  6.92M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  6.92M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  6.92M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  93.6k|    {
 2869|  93.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  93.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  93.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  93.6k|    {
 2850|  93.6k|        return decay_copy(t.begin());
 2851|  93.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  11.2M|{
 2094|  11.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  11.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.87M|    {
 2926|  1.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.87M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.87M|    {
 2908|  1.87M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.87M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   136k|{
 9705|   136k|    auto result = make_scan_result<Source, Args...>();
 9706|   136k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   136k|                                   make_scan_args(result->values())));
 9708|   136k|    return result;
 9709|   136k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9660|   303k|{
 9661|   303k|    return scan_result_type<Source, Args...>();
 9662|   303k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   303k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   303k|        : m_value(T{}), m_has_value(true)
  427|   303k|    {
  428|   303k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6610|   303k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   936k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   936k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6384|  1.02M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   303k|{
 9646|   303k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 272k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   272k|    else {
 9650|   272k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   272k|    static_cast<    \
  |  |  935|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   272k|    }
 9652|   303k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   936k|    {
 1740|   936k|        return has_value();
 1741|   936k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.87M|    {
  490|  1.87M|        return m_has_value;
  491|  1.87M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  91.2k|    {
 1746|  91.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  91.2k|        return this->get_unexpected().error();
 1748|  91.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  91.2k|    {
  473|  91.2k|        return m_unexpected;
  474|  91.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.3M|    {
  365|  14.3M|        return m_unexpected;
  366|  14.3M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.55M|        : m_unexpected(std::forward<Err>(e))
  350|  3.55M|    {
  351|  3.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.55M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.6M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.6M|    {
  360|  10.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  10.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.6M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   848k|    {
  456|   848k|        return m_value;
  457|   848k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   547k|{
  396|   547k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   547k|        T(std::forward<Args>(args)...);
  398|   547k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   845k|    {
 6485|   845k|        m_range = std::forward<Other>(r);
 6486|   845k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   845k|    {
 1795|   845k|        return value();
 1796|   845k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   845k|    {
 1769|   845k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   845k|        return this->get_value();
 1771|   845k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   845k|    {
  456|   845k|        return m_value;
  457|   845k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|   422k|{
 9485|   422k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   422k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   422k|{
 9422|   422k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   422k|    auto result = vscan_impl(buffer, format, args);
 9425|   422k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.1k, False: 380k]
  |  |  ------------------
  ------------------
 9426|  42.1k|        return unexpected(result.error());
 9427|  42.1k|    }
 9428|   380k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   422k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   936k|{
 5381|   936k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   936k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   936k|                  "\n"
 5385|   936k|                  "Unsupported range type given as input to a scanning "
 5386|   936k|                  "function.\n"
 5387|   936k|                  "A range needs to have a character type (value type) "
 5388|   936k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   936k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   936k|                  "to be included.\n"
 5391|   936k|                  "See the scnlib documentation for more details.");
 5392|   936k|    static_assert(
 5393|   936k|        !std::is_same_v<T, custom_char_traits>,
 5394|   936k|        "\n"
 5395|   936k|        "Unsupported range type given as input to a scanning "
 5396|   936k|        "function.\n"
 5397|   936k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   936k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   936k|        "not supported.");
 5400|   936k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   936k|                  "\n"
 5402|   936k|                  "Unsupported range type given as input to a scanning "
 5403|   936k|                  "function.\n"
 5404|   936k|                  "file_marker_found cannot be used as an "
 5405|   936k|                  "source range type to scn::scan.\n"
 5406|   936k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   936k|                  "and do not provide an explicit source range, "
 5408|   936k|                  "or use scn::scan with a FILE* directly.");
 5409|   936k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   936k|                  "\n"
 5411|   936k|                  "Unsupported range type given as input to a scanning "
 5412|   936k|                  "function.\n"
 5413|   936k|                  "In order to be scannable, a range needs to satisfy "
 5414|   936k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   936k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   936k|                  "\n"
 5417|   936k|                  "Unsupported range type given as input to a scanning "
 5418|   936k|                  "function.\n"
 5419|   936k|                  "A range needs to model forward_range and have a valid "
 5420|   936k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   936k|                  "Examples of scannable ranges are std::string, "
 5422|   936k|                  "std::string_view, "
 5423|   936k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   936k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   936k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   936k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   936k|{
 5320|   936k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   936k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   936k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   936k|    {
 3000|   936k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   936k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   936k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   936k|    {
 2981|   936k|        return t.data();
 2982|   936k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   936k|    {
 3383|   936k|        return detail::to_address(ranges::begin(derived()));
 3384|   936k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  8.32M|{
  316|  8.32M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  8.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  8.32M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.78M|    {
 2869|  1.78M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.78M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.78M|    {
 2850|  1.78M|        return decay_copy(t.begin());
 2851|  1.78M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  23.8M|    {
 3480|  23.8M|        return m_iterator;
 3481|  23.8M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   936k|    {
 3339|   936k|        return static_cast<const D&>(*this);
 3340|   936k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   936k|    {
 3075|   936k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   936k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   936k|    {
 3041|   936k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   936k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   936k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.35M|{
 2094|  5.35M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.35M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  5.81M|    {
 3496|  5.81M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  5.81M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  13.4M|    {
 1740|  13.4M|        return has_value();
 1741|  13.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  24.0M|    {
  490|  24.0M|        return m_has_value;
  491|  24.0M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.11M|    {
 1746|  1.11M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.11M|        return this->get_unexpected().error();
 1748|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.11M|    {
  473|  1.11M|        return m_unexpected;
  474|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  91.2k|        : base(unexpect, std::move(e.error())),
 1616|  91.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  91.2k|    {
 1618|  91.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  91.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  91.2k|          m_has_value(false)
  451|  91.2k|    {
  452|  91.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   936k|    {
 1316|   936k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   845k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   845k|                      ranges::iterator_t<SourceRange>>) {
 6717|   845k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   845k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  6.60M|    {
 2869|  6.60M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  6.60M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  6.60M|    {
 2850|  6.60M|        return decay_copy(t.begin());
 2851|  6.60M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   845k|{
 6702|   845k|    return ranges::end(source);
 6703|   845k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   845k|    {
 2926|   845k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   845k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   845k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   845k|    {
 2908|   845k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   845k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   845k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  10.9M|    {
 3484|  10.9M|        return m_sentinel;
 3485|  10.9M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.11M|    {
 1795|  4.11M|        return value();
 1796|  4.11M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  9.50M|    {
 1769|  9.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.50M|        return this->get_value();
 1771|  9.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  9.50M|    {
  456|  9.50M|        return m_value;
  457|  9.50M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   845k|        : base(std::in_place, std::forward<U>(val)),
 1570|   845k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   845k|    {
 1572|   845k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   845k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   845k|    {
  442|   845k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   273k|    {
 8783|   273k|        return m_str;
 8784|   273k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   587k|{
 6115|   587k|    detail::check_scan_arg_types<Args...>();
 6116|   587k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   587k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5829|  1.02M|{
 5830|  1.02M|    constexpr bool default_constructible_constraint =
 5831|  1.02M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.02M|    static_assert(default_constructible_constraint,
 5833|  1.02M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.02M|    constexpr bool destructible_constraint =
 5836|  1.02M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.02M|    static_assert(destructible_constraint,
 5838|  1.02M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.02M|    constexpr bool non_reference_constraint =
 5841|  1.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.02M|    static_assert(non_reference_constraint,
 5843|  1.02M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.02M|    constexpr bool movable_constraint =
 5846|  1.02M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.02M|    static_assert(movable_constraint,
 5848|  1.02M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.02M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.02M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.02M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   587k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   587k|    {
 6092|   587k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   587k|    {
 6100|   587k|        return {detail::make_arg<
 6101|   587k|            kind, Context,
 6102|   587k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   587k|                                 typename Context::char_type>::value>(args)...};
 6104|   587k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   587k|{
 5880|   587k|    return make_value<Context>(value).ref_value;
 5881|   587k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5814|   649k|{
 5815|   649k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   649k|                                  needs_context_tag>) {
 5819|   649k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   649k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5653|   649k|    {                                                                        \
 5654|   649k|        return val;                                                          \
 5655|   649k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5783|  1.02M|{
 5784|  1.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.02M|    constexpr bool scannable_char =
 5788|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.02M|    static_assert(scannable_char,
 5790|  1.02M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.02M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.02M|    constexpr bool scannable_const =
 5794|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.02M|    constexpr bool scannable_disabled =
 5798|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.02M|    static_assert(scannable_disabled,
 5800|  1.02M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.02M|    static_assert(
 5805|  1.02M|        scannable,
 5806|  1.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.02M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.02M|    return arg_value{arg};
 5810|  1.02M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5596|  1.02M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.02M|    {
 5598|  1.02M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6393|   929k|    {
 6394|   929k|        return m_values;
 6395|   929k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   587k|        : basic_scan_args(store.desc, store.args.data())
 6141|   587k|    {
 6142|   587k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|  1.82M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.82M|    {
 6194|  1.82M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  9.42M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.42M|    static_cast<    \
  |  |  935|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.42M|    static_cast<    \
  |  |  935|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  9.42M|    {
 3466|  9.42M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|  1.82M|{
 8444|  1.82M|    return s;
 8445|  1.82M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|  1.82M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   273k|        : m_str(r.str)
 8778|   273k|    {
 8779|   273k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   303k|    {
 1740|   303k|        return has_value();
 1741|   303k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   848k|    {
 1815|   848k|        return &value();
 1816|   848k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   848k|    {
 1769|   848k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   848k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   848k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   848k|        return this->get_value();
 1771|   848k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   845k|    {
 6474|   845k|        return ranges::begin(m_range);
 6475|   845k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   136k|{
 9774|   136k|    auto result = make_scan_result<Source, Args...>();
 9775|   136k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   136k|                                   make_scan_args(result->values())));
 9777|   136k|    return result;
 9778|   136k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|   422k|{
 9503|   422k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   422k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   422k|{
 9438|   422k|#if !SCN_DISABLE_LOCALE
 9439|   422k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   422k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   422k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   422k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   422k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.1k, False: 380k]
  |  |  ------------------
  ------------------
 9446|  42.1k|        return unexpected(result.error());
 9447|  42.1k|    }
 9448|   380k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   422k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  29.5k|{
 9815|  29.5k|    auto result = make_scan_result<Source, T>();
 9816|  29.5k|    fill_scan_result(
 9817|  29.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  29.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  29.5k|    return result;
 9820|  29.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  92.1k|{
 9516|  92.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  92.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  92.1k|{
 9462|  92.1k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  92.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  92.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.02k, False: 85.0k]
  |  |  ------------------
  ------------------
 9466|  7.02k|        return unexpected(result.error());
 9467|  7.02k|    }
 9468|  85.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  92.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  61.7k|{
 5865|  61.7k|    check_scan_arg_types<T>();
 5866|       |
 5867|  61.7k|    basic_scan_arg<Context> arg;
 5868|  61.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  61.7k|    arg.m_value = make_value<Context>(value);
 5870|  61.7k|    return arg;
 5871|  61.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|  2.01M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  3.24M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  93.4k|    {
 6416|  93.4k|        return std::get<0>(m_values);
 6417|  93.4k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   141k|{
 9705|   141k|    auto result = make_scan_result<Source, Args...>();
 9706|   141k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   141k|                                   make_scan_args(result->values())));
 9708|   141k|    return result;
 9709|   141k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9660|   314k|{
 9661|   314k|    return scan_result_type<Source, Args...>();
 9662|   314k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   314k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   314k|        : m_value(T{}), m_has_value(true)
  427|   314k|    {
  428|   314k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6610|   314k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6384|  1.10M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   314k|{
 9646|   314k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 284k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   284k|    else {
 9650|   284k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   284k|    }
 9652|   314k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   883k|    {
  456|   883k|        return m_value;
  457|   883k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   283k|    {
 8783|   283k|        return m_str;
 8784|   283k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   614k|{
 6115|   614k|    detail::check_scan_arg_types<Args...>();
 6116|   614k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   614k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5829|  1.10M|{
 5830|  1.10M|    constexpr bool default_constructible_constraint =
 5831|  1.10M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.10M|    static_assert(default_constructible_constraint,
 5833|  1.10M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.10M|    constexpr bool destructible_constraint =
 5836|  1.10M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.10M|    static_assert(destructible_constraint,
 5838|  1.10M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.10M|    constexpr bool non_reference_constraint =
 5841|  1.10M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.10M|    static_assert(non_reference_constraint,
 5843|  1.10M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.10M|    constexpr bool movable_constraint =
 5846|  1.10M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.10M|    static_assert(movable_constraint,
 5848|  1.10M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.10M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.10M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.10M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   614k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   614k|    {
 6092|   614k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   614k|    {
 6100|   614k|        return {detail::make_arg<
 6101|   614k|            kind, Context,
 6102|   614k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   614k|                                 typename Context::char_type>::value>(args)...};
 6104|   614k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   614k|{
 5880|   614k|    return make_value<Context>(value).ref_value;
 5881|   614k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5814|   679k|{
 5815|   679k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   679k|                                  needs_context_tag>) {
 5819|   679k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   679k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   679k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5653|   679k|    {                                                                        \
 5654|   679k|        return val;                                                          \
 5655|   679k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5783|  1.10M|{
 5784|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.10M|    constexpr bool scannable_char =
 5788|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.10M|    static_assert(scannable_char,
 5790|  1.10M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.10M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.10M|    constexpr bool scannable_const =
 5794|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.10M|    constexpr bool scannable_disabled =
 5798|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.10M|    static_assert(scannable_disabled,
 5800|  1.10M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.10M|    static_assert(
 5805|  1.10M|        scannable,
 5806|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.10M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.10M|    return arg_value{arg};
 5810|  1.10M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5596|  1.10M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.10M|    {
 5598|  1.10M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6393|   997k|    {
 6394|   997k|        return m_values;
 6395|   997k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   614k|        : basic_scan_args(store.desc, store.args.data())
 6141|   614k|    {
 6142|   614k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   283k|        : m_str(r.str)
 8778|   283k|    {
 8779|   283k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   314k|    {
 1740|   314k|        return has_value();
 1741|   314k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   883k|    {
 1815|   883k|        return &value();
 1816|   883k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   883k|    {
 1769|   883k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   883k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   883k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   883k|        return this->get_value();
 1771|   883k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   141k|{
 9774|   141k|    auto result = make_scan_result<Source, Args...>();
 9775|   141k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   141k|                                   make_scan_args(result->values())));
 9777|   141k|    return result;
 9778|   141k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  30.9k|{
 9815|  30.9k|    auto result = make_scan_result<Source, T>();
 9816|  30.9k|    fill_scan_result(
 9817|  30.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  30.9k|                            detail::make_arg<scan_context>(result->value())));
 9819|  30.9k|    return result;
 9820|  30.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  65.1k|{
 5865|  65.1k|    check_scan_arg_types<T>();
 5866|       |
 5867|  65.1k|    basic_scan_arg<Context> arg;
 5868|  65.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  65.1k|    arg.m_value = make_value<Context>(value);
 5870|  65.1k|    return arg;
 5871|  65.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   103k|    {
 6416|   103k|        return std::get<0>(m_values);
 6417|   103k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   143k|{
 9705|   143k|    auto result = make_scan_result<Source, Args...>();
 9706|   143k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   143k|                                   make_scan_args(result->values())));
 9708|   143k|    return result;
 9709|   143k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9660|   318k|{
 9661|   318k|    return scan_result_type<Source, Args...>();
 9662|   318k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   318k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   318k|        : m_value(T{}), m_has_value(true)
  427|   318k|    {
  428|   318k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6610|   318k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6384|  1.11M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   318k|{
 9646|   318k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 288k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   288k|    else {
 9650|   288k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   288k|    static_cast<    \
  |  |  935|   288k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   288k|    }
 9652|   318k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   895k|    {
  456|   895k|        return m_value;
  457|   895k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   287k|    {
 8783|   287k|        return m_str;
 8784|   287k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   621k|{
 6115|   621k|    detail::check_scan_arg_types<Args...>();
 6116|   621k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   621k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5829|  1.11M|{
 5830|  1.11M|    constexpr bool default_constructible_constraint =
 5831|  1.11M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.11M|    static_assert(default_constructible_constraint,
 5833|  1.11M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.11M|    constexpr bool destructible_constraint =
 5836|  1.11M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.11M|    static_assert(destructible_constraint,
 5838|  1.11M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.11M|    constexpr bool non_reference_constraint =
 5841|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.11M|    static_assert(non_reference_constraint,
 5843|  1.11M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.11M|    constexpr bool movable_constraint =
 5846|  1.11M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.11M|    static_assert(movable_constraint,
 5848|  1.11M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.11M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.11M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.11M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   621k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   621k|    {
 6092|   621k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   621k|    {
 6100|   621k|        return {detail::make_arg<
 6101|   621k|            kind, Context,
 6102|   621k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   621k|                                 typename Context::char_type>::value>(args)...};
 6104|   621k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   621k|{
 5880|   621k|    return make_value<Context>(value).ref_value;
 5881|   621k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5814|   687k|{
 5815|   687k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   687k|                                  needs_context_tag>) {
 5819|   687k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   687k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5653|   687k|    {                                                                        \
 5654|   687k|        return val;                                                          \
 5655|   687k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5783|  1.11M|{
 5784|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.11M|    constexpr bool scannable_char =
 5788|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.11M|    static_assert(scannable_char,
 5790|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.11M|    constexpr bool scannable_const =
 5794|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.11M|    constexpr bool scannable_disabled =
 5798|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.11M|    static_assert(scannable_disabled,
 5800|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.11M|    static_assert(
 5805|  1.11M|        scannable,
 5806|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.11M|    return arg_value{arg};
 5810|  1.11M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5596|  1.11M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.11M|    {
 5598|  1.11M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6393|  1.01M|    {
 6394|  1.01M|        return m_values;
 6395|  1.01M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   621k|        : basic_scan_args(store.desc, store.args.data())
 6141|   621k|    {
 6142|   621k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   287k|        : m_str(r.str)
 8778|   287k|    {
 8779|   287k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   318k|    {
 1740|   318k|        return has_value();
 1741|   318k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   895k|    {
 1815|   895k|        return &value();
 1816|   895k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   895k|    {
 1769|   895k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   895k|        return this->get_value();
 1771|   895k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   143k|{
 9774|   143k|    auto result = make_scan_result<Source, Args...>();
 9775|   143k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   143k|                                   make_scan_args(result->values())));
 9777|   143k|    return result;
 9778|   143k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  31.5k|{
 9815|  31.5k|    auto result = make_scan_result<Source, T>();
 9816|  31.5k|    fill_scan_result(
 9817|  31.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  31.5k|                            detail::make_arg<scan_context>(result->value())));
 9819|  31.5k|    return result;
 9820|  31.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  66.0k|{
 5865|  66.0k|    check_scan_arg_types<T>();
 5866|       |
 5867|  66.0k|    basic_scan_arg<Context> arg;
 5868|  66.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  66.0k|    arg.m_value = make_value<Context>(value);
 5870|  66.0k|    return arg;
 5871|  66.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   105k|    {
 6416|   105k|        return std::get<0>(m_values);
 6417|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  91.2k|    {
 2869|  91.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  91.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  91.2k|    {
 2850|  91.2k|        return decay_copy(t.begin());
 2851|  91.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  47.0M|{
 2094|  47.0M|    return SCN_FWD(t);
  ------------------
  |  |  936|  47.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  47.0M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.15M|    {
 2926|  2.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.15M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.15M|    {
 2908|  2.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.15M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   156k|{
 9705|   156k|    auto result = make_scan_result<Source, Args...>();
 9706|   156k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   156k|                                   make_scan_args(result->values())));
 9708|   156k|    return result;
 9709|   156k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9660|   345k|{
 9661|   345k|    return scan_result_type<Source, Args...>();
 9662|   345k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   345k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   345k|        : m_value(T{}), m_has_value(true)
  427|   345k|    {
  428|   345k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6610|   345k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  1.07M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.07M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   345k|{
 9646|   345k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 315k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   315k|    else {
 9650|   315k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   315k|    static_cast<    \
  |  |  935|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   315k|    }
 9652|   345k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.07M|    {
 1740|  1.07M|        return has_value();
 1741|  1.07M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.15M|    {
  490|  2.15M|        return m_has_value;
  491|  2.15M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  91.2k|    {
 1746|  91.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  91.2k|        return this->get_unexpected().error();
 1748|  91.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  91.2k|    {
  473|  91.2k|        return m_unexpected;
  474|  91.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.38M|    {
  490|  1.38M|        return m_has_value;
  491|  1.38M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   976k|    {
  456|   976k|        return m_value;
  457|   976k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   987k|    {
 6485|   987k|        m_range = std::forward<Other>(r);
 6486|   987k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   987k|    {
 1795|   987k|        return value();
 1796|   987k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   987k|    {
 1769|   987k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   987k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   987k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   987k|        return this->get_value();
 1771|   987k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   987k|    {
  456|   987k|        return m_value;
  457|   987k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|   489k|{
 9485|   489k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   489k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   489k|{
 9422|   489k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   489k|    auto result = vscan_impl(buffer, format, args);
 9425|   489k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.1k, False: 446k]
  |  |  ------------------
  ------------------
 9426|  42.1k|        return unexpected(result.error());
 9427|  42.1k|    }
 9428|   446k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   489k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  1.07M|{
 5381|  1.07M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.07M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.07M|                  "\n"
 5385|  1.07M|                  "Unsupported range type given as input to a scanning "
 5386|  1.07M|                  "function.\n"
 5387|  1.07M|                  "A range needs to have a character type (value type) "
 5388|  1.07M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.07M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.07M|                  "to be included.\n"
 5391|  1.07M|                  "See the scnlib documentation for more details.");
 5392|  1.07M|    static_assert(
 5393|  1.07M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.07M|        "\n"
 5395|  1.07M|        "Unsupported range type given as input to a scanning "
 5396|  1.07M|        "function.\n"
 5397|  1.07M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.07M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.07M|        "not supported.");
 5400|  1.07M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.07M|                  "\n"
 5402|  1.07M|                  "Unsupported range type given as input to a scanning "
 5403|  1.07M|                  "function.\n"
 5404|  1.07M|                  "file_marker_found cannot be used as an "
 5405|  1.07M|                  "source range type to scn::scan.\n"
 5406|  1.07M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.07M|                  "and do not provide an explicit source range, "
 5408|  1.07M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.07M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.07M|                  "\n"
 5411|  1.07M|                  "Unsupported range type given as input to a scanning "
 5412|  1.07M|                  "function.\n"
 5413|  1.07M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.07M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.07M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.07M|                  "\n"
 5417|  1.07M|                  "Unsupported range type given as input to a scanning "
 5418|  1.07M|                  "function.\n"
 5419|  1.07M|                  "A range needs to model forward_range and have a valid "
 5420|  1.07M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.07M|                  "Examples of scannable ranges are std::string, "
 5422|  1.07M|                  "std::string_view, "
 5423|  1.07M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.07M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.07M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.07M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  1.07M|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  1.07M|    else {
 5366|  1.07M|        return make_forward_scan_buffer(r);
 5367|  1.07M|    }
 5368|  1.07M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  1.07M|{
 5185|  1.07M|    return basic_scan_forward_buffer_impl(range);
 5186|  1.07M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  1.07M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  1.07M|          m_cursor(ranges::begin(*m_range))
 4766|  1.07M|    {
 4767|  1.07M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  1.07M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  1.07M|    {
 4738|  1.07M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  1.07M|        : m_current_view(sv), m_is_contiguous(false)
 4428|  1.07M|    {
 4429|  1.07M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.07M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.06M|    {
 2869|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.06M|    {
 2850|  2.06M|        return decay_copy(t.begin());
 2851|  2.06M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  3.05M|    {
 3480|  3.05M|        return m_iterator;
 3481|  3.05M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  13.7M|    {
 4771|  13.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 290k, False: 13.4M]
  ------------------
 4772|   290k|            return false;
 4773|   290k|        }
 4774|  13.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  13.4M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  13.4M|        }
 4777|  13.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 12.4M, False: 1.06M]
  ------------------
 4778|  12.4M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  12.4M|                                          this->m_current_view.begin(),
 4780|  12.4M|                                          this->m_current_view.end());
 4781|  12.4M|        }
 4782|  13.4M|        m_latest = *m_cursor;
 4783|  13.4M|        ++m_cursor;
 4784|  13.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  13.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  13.4M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  13.4M|        }
 4788|  13.4M|        return true;
 4789|  13.7M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  40.7M|    {
 2926|  40.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  40.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  40.7M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  40.7M|    {
 2908|  40.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  40.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  40.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  41.7M|    {
 3484|  41.7M|        return m_sentinel;
 3485|  41.7M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.07M|    {
 4346|  1.07M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  1.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.07M|        return true;
 4348|  1.07M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  91.2k|        : base(unexpect, std::move(e.error())),
 1616|  91.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  91.2k|    {
 1618|  91.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  91.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  91.2k|          m_has_value(false)
  451|  91.2k|    {
  452|  91.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.07M|    {
 1316|  1.07M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   987k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   987k|                      ranges::iterator_t<SourceRange>>) {
 6717|   987k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   987k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   987k|    {
 2869|   987k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   987k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   987k|    {
 2850|   987k|        return decay_copy(t.begin());
 2851|   987k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   987k|{
 6702|   987k|    return ranges::end(source);
 6703|   987k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   987k|    {
 2926|   987k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   987k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   987k|    {
 2908|   987k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   987k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   987k|        : base(std::in_place, std::forward<U>(val)),
 1570|   987k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   987k|    {
 1572|   987k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   987k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   987k|    {
  442|   987k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   313k|    {
 8783|   313k|        return m_str;
 8784|   313k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  2.06M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.06M|    static_cast<    \
  |  |  935|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.06M|    static_cast<    \
  |  |  935|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.06M|    {
 3466|  2.06M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   313k|        : m_str(r.str)
 8778|   313k|    {
 8779|   313k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   345k|    {
 1740|   345k|        return has_value();
 1741|   345k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   976k|    {
 1815|   976k|        return &value();
 1816|   976k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   976k|    {
 1769|   976k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   976k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   976k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   976k|        return this->get_value();
 1771|   976k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   987k|    {
 6474|   987k|        return ranges::begin(m_range);
 6475|   987k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   156k|{
 9774|   156k|    auto result = make_scan_result<Source, Args...>();
 9775|   156k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   156k|                                   make_scan_args(result->values())));
 9777|   156k|    return result;
 9778|   156k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|   489k|{
 9503|   489k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   489k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   489k|{
 9438|   489k|#if !SCN_DISABLE_LOCALE
 9439|   489k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   489k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   489k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   489k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   489k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.1k, False: 446k]
  |  |  ------------------
  ------------------
 9446|  42.1k|        return unexpected(result.error());
 9447|  42.1k|    }
 9448|   446k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   489k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  32.1k|{
 9815|  32.1k|    auto result = make_scan_result<Source, T>();
 9816|  32.1k|    fill_scan_result(
 9817|  32.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  32.1k|                            detail::make_arg<scan_context>(result->value())));
 9819|  32.1k|    return result;
 9820|  32.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|   100k|{
 9516|   100k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|   100k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   100k|{
 9462|   100k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   100k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   100k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.02k, False: 93.7k]
  |  |  ------------------
  ------------------
 9466|  7.02k|        return unexpected(result.error());
 9467|  7.02k|    }
 9468|  93.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   100k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   165k|{
 9705|   165k|    auto result = make_scan_result<Source, Args...>();
 9706|   165k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   165k|                                   make_scan_args(result->values())));
 9708|   165k|    return result;
 9709|   165k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9660|   364k|{
 9661|   364k|    return scan_result_type<Source, Args...>();
 9662|   364k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   364k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   364k|        : m_value(T{}), m_has_value(true)
  427|   364k|    {
  428|   364k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6610|   364k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   364k|{
 9646|   364k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 334k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   334k|    else {
 9650|   334k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   334k|    static_cast<    \
  |  |  935|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   334k|    }
 9652|   364k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.45M|    {
  490|  1.45M|        return m_has_value;
  491|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   330k|    {
 8783|   330k|        return m_str;
 8784|   330k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   330k|        : m_str(r.str)
 8778|   330k|    {
 8779|   330k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   364k|    {
 1740|   364k|        return has_value();
 1741|   364k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.03M|    {
 1815|  1.03M|        return &value();
 1816|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   165k|{
 9774|   165k|    auto result = make_scan_result<Source, Args...>();
 9775|   165k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   165k|                                   make_scan_args(result->values())));
 9777|   165k|    return result;
 9778|   165k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.1k|{
 9815|  34.1k|    auto result = make_scan_result<Source, T>();
 9816|  34.1k|    fill_scan_result(
 9817|  34.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.1k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.1k|    return result;
 9820|  34.1k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   166k|{
 9705|   166k|    auto result = make_scan_result<Source, Args...>();
 9706|   166k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   166k|                                   make_scan_args(result->values())));
 9708|   166k|    return result;
 9709|   166k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9660|   368k|{
 9661|   368k|    return scan_result_type<Source, Args...>();
 9662|   368k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   368k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   368k|        : m_value(T{}), m_has_value(true)
  427|   368k|    {
  428|   368k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6610|   368k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   368k|{
 9646|   368k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.4k, False: 338k]
  |  |  ------------------
  ------------------
 9647|  30.4k|        out = unexpected(in.error());
 9648|  30.4k|    }
 9649|   338k|    else {
 9650|   338k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   338k|    static_cast<    \
  |  |  935|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   338k|    }
 9652|   368k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.4k|        : base(unexpect, std::move(e.error())),
 1616|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.4k|    {
 1618|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.4k|          m_has_value(false)
  451|  30.4k|    {
  452|  30.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.4k|    {
 1316|  30.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.4k|    {
  903|  30.4k|        assign_common(std::move(other));
  904|  30.4k|        return *this;
  905|  30.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.4k|    {
  950|  30.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.4k, False: 0]
  ------------------
  951|  30.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.04M|    {
  456|  1.04M|        return m_value;
  457|  1.04M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.4k|    {
 1046|  30.4k|        this->destroy_value();
 1047|  30.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.4k|    {
  504|  30.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.4k|                                  std::forward<Args>(args)...);
  506|  30.4k|        m_has_value = false;
  507|  30.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.4k|    {
  473|  30.4k|        return m_unexpected;
  474|  30.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.4k|    {
  481|  30.4k|        return std::move(m_unexpected);
  482|  30.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   333k|    {
 8783|   333k|        return m_str;
 8784|   333k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   333k|        : m_str(r.str)
 8778|   333k|    {
 8779|   333k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   368k|    {
 1740|   368k|        return has_value();
 1741|   368k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.04M|    {
 1815|  1.04M|        return &value();
 1816|  1.04M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.04M|    {
 1769|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.04M|        return this->get_value();
 1771|  1.04M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   166k|{
 9774|   166k|    auto result = make_scan_result<Source, Args...>();
 9775|   166k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   166k|                                   make_scan_args(result->values())));
 9777|   166k|    return result;
 9778|   166k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.4k|{
 9815|  34.4k|    auto result = make_scan_result<Source, T>();
 9816|  34.4k|    fill_scan_result(
 9817|  34.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.4k|    return result;
 9820|  34.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   187k|    {
 2869|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   187k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   187k|    {
 2850|   187k|        return decay_copy(t.begin());
 2851|   187k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  4.96M|{
 2094|  4.96M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.96M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.23M|    {
 2926|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.23M|    {
 2908|  1.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.23M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9660|   186k|{
 9661|   186k|    return scan_result_type<Source, Args...>();
 9662|   186k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   186k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   186k|        : m_value(T{}), m_has_value(true)
  427|   186k|    {
  428|   186k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6610|   186k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|   613k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   613k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   186k|{
 9646|   186k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 126k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   126k|    else {
 9650|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   126k|    static_cast<    \
  |  |  935|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   126k|    }
 9652|   186k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   613k|    {
 1740|   613k|        return has_value();
 1741|   613k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   182k|    {
 1746|   182k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   182k|        return this->get_unexpected().error();
 1748|   182k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   182k|    {
  473|   182k|        return m_unexpected;
  474|   182k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   747k|    {
  490|   747k|        return m_has_value;
  491|   747k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   439k|    {
  456|   439k|        return m_value;
  457|   439k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|   430k|    {
 6485|   430k|        m_range = std::forward<Other>(r);
 6486|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   430k|    {
 1795|   430k|        return value();
 1796|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   430k|    {
 1769|   430k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   430k|        return this->get_value();
 1771|   430k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   430k|    {
  456|   430k|        return m_value;
  457|   430k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   279k|{
 9422|   279k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   279k|    auto result = vscan_impl(buffer, format, args);
 9425|   279k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.2k, False: 194k]
  |  |  ------------------
  ------------------
 9426|  84.2k|        return unexpected(result.error());
 9427|  84.2k|    }
 9428|   194k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   279k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   613k|{
 5381|   613k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   613k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   613k|                  "\n"
 5385|   613k|                  "Unsupported range type given as input to a scanning "
 5386|   613k|                  "function.\n"
 5387|   613k|                  "A range needs to have a character type (value type) "
 5388|   613k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   613k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   613k|                  "to be included.\n"
 5391|   613k|                  "See the scnlib documentation for more details.");
 5392|   613k|    static_assert(
 5393|   613k|        !std::is_same_v<T, custom_char_traits>,
 5394|   613k|        "\n"
 5395|   613k|        "Unsupported range type given as input to a scanning "
 5396|   613k|        "function.\n"
 5397|   613k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   613k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   613k|        "not supported.");
 5400|   613k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   613k|                  "\n"
 5402|   613k|                  "Unsupported range type given as input to a scanning "
 5403|   613k|                  "function.\n"
 5404|   613k|                  "file_marker_found cannot be used as an "
 5405|   613k|                  "source range type to scn::scan.\n"
 5406|   613k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   613k|                  "and do not provide an explicit source range, "
 5408|   613k|                  "or use scn::scan with a FILE* directly.");
 5409|   613k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   613k|                  "\n"
 5411|   613k|                  "Unsupported range type given as input to a scanning "
 5412|   613k|                  "function.\n"
 5413|   613k|                  "In order to be scannable, a range needs to satisfy "
 5414|   613k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   613k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   613k|                  "\n"
 5417|   613k|                  "Unsupported range type given as input to a scanning "
 5418|   613k|                  "function.\n"
 5419|   613k|                  "A range needs to model forward_range and have a valid "
 5420|   613k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   613k|                  "Examples of scannable ranges are std::string, "
 5422|   613k|                  "std::string_view, "
 5423|   613k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   613k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   613k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   613k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   613k|{
 5320|   613k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   613k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   613k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   613k|    {
 3000|   613k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   613k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   613k|    {
 2981|   613k|        return t.data();
 2982|   613k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   613k|    {
 3383|   613k|        return detail::to_address(ranges::begin(derived()));
 3384|   613k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.90M|{
  316|  2.90M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.90M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.90M|{
  294|  2.90M|    return p;
  295|  2.90M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.04M|    {
 2869|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.04M|    {
 2850|  1.04M|        return decay_copy(t.begin());
 2851|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  22.6M|    {
 3480|  22.6M|        return m_iterator;
 3481|  22.6M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   613k|    {
 3339|   613k|        return static_cast<const D&>(*this);
 3340|   613k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   613k|    {
 3075|   613k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   613k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   613k|    {
 3041|   613k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   613k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.20M|    {
 3496|  3.20M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.20M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   182k|        : base(unexpect, std::move(e.error())),
 1616|   182k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   182k|    {
 1618|   182k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   182k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   182k|          m_has_value(false)
  451|   182k|    {
  452|   182k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   613k|    {
 1316|   613k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   430k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   430k|                      ranges::iterator_t<SourceRange>>) {
 6717|   430k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   430k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.06M|    {
 2869|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.06M|    {
 2850|  2.06M|        return decay_copy(t.begin());
 2851|  2.06M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|   430k|{
 6702|   430k|    return ranges::end(source);
 6703|   430k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   430k|    {
 2926|   430k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   430k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   430k|    {
 2908|   430k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   430k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  12.6M|    {
 3484|  12.6M|        return m_sentinel;
 3485|  12.6M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   430k|        : base(std::in_place, std::forward<U>(val)),
 1570|   430k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   430k|    {
 1572|   430k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   430k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   430k|    {
  442|   430k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   171k|    {
 8783|   171k|        return m_str;
 8784|   171k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   342k|{
 6115|   342k|    detail::check_scan_arg_types<Args...>();
 6116|   342k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   342k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   342k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   342k|    {
 6092|   342k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   342k|    {
 6100|   342k|        return {detail::make_arg<
 6101|   342k|            kind, Context,
 6102|   342k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   342k|                                 typename Context::char_type>::value>(args)...};
 6104|   342k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   342k|{
 5880|   342k|    return make_value<Context>(value).ref_value;
 5881|   342k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5814|   373k|{
 5815|   373k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   373k|                                  needs_context_tag>) {
 5819|   373k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   373k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5653|   373k|    {                                                                        \
 5654|   373k|        return val;                                                          \
 5655|   373k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   342k|        : basic_scan_args(store.desc, store.args.data())
 6141|   342k|    {
 6142|   342k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.11M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.11M|    {
 6194|  1.11M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  8.23M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.23M|    static_cast<    \
  |  |  935|  8.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.23M|    static_cast<    \
  |  |  935|  8.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  8.23M|    {
 3466|  8.23M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.11M|{
 8449|  1.11M|    return s;
 8450|  1.11M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.11M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   171k|        : m_str(r.str)
 8778|   171k|    {
 8779|   171k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   186k|    {
 1740|   186k|        return has_value();
 1741|   186k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   439k|    {
 1815|   439k|        return &value();
 1816|   439k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   439k|    {
 1769|   439k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   439k|        return this->get_value();
 1771|   439k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|   430k|    {
 6474|   430k|        return ranges::begin(m_range);
 6475|   430k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   279k|{
 9438|   279k|#if !SCN_DISABLE_LOCALE
 9439|   279k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   279k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   279k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   279k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   279k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.2k, False: 194k]
  |  |  ------------------
  ------------------
 9446|  84.2k|        return unexpected(result.error());
 9447|  84.2k|    }
 9448|   194k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   279k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.1k|{
 9462|  55.1k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.0k, False: 41.0k]
  |  |  ------------------
  ------------------
 9466|  14.0k|        return unexpected(result.error());
 9467|  14.0k|    }
 9468|  41.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  31.7k|{
 5865|  31.7k|    check_scan_arg_types<T>();
 5866|       |
 5867|  31.7k|    basic_scan_arg<Context> arg;
 5868|  31.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  31.7k|    arg.m_value = make_value<Context>(value);
 5870|  31.7k|    return arg;
 5871|  31.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  1.22M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9660|   211k|{
 9661|   211k|    return scan_result_type<Source, Args...>();
 9662|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   211k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   211k|        : m_value(T{}), m_has_value(true)
  427|   211k|    {
  428|   211k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6610|   211k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   211k|{
 9646|   211k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 150k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   150k|    else {
 9650|   150k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   150k|    static_cast<    \
  |  |  935|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   150k|    }
 9652|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   844k|    {
  490|   844k|        return m_has_value;
  491|   844k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   511k|    {
  456|   511k|        return m_value;
  457|   511k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   191k|    {
 8783|   191k|        return m_str;
 8784|   191k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   383k|{
 6115|   383k|    detail::check_scan_arg_types<Args...>();
 6116|   383k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   383k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   383k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   383k|    {
 6092|   383k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   383k|    {
 6100|   383k|        return {detail::make_arg<
 6101|   383k|            kind, Context,
 6102|   383k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   383k|                                 typename Context::char_type>::value>(args)...};
 6104|   383k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   383k|{
 5880|   383k|    return make_value<Context>(value).ref_value;
 5881|   383k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5814|   422k|{
 5815|   422k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   422k|                                  needs_context_tag>) {
 5819|   422k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   422k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5653|   422k|    {                                                                        \
 5654|   422k|        return val;                                                          \
 5655|   422k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   383k|        : basic_scan_args(store.desc, store.args.data())
 6141|   383k|    {
 6142|   383k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   191k|        : m_str(r.str)
 8778|   191k|    {
 8779|   191k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   211k|    {
 1740|   211k|        return has_value();
 1741|   211k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   511k|    {
 1815|   511k|        return &value();
 1816|   511k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   511k|    {
 1769|   511k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   511k|        return this->get_value();
 1771|   511k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  38.6k|{
 5865|  38.6k|    check_scan_arg_types<T>();
 5866|       |
 5867|  38.6k|    basic_scan_arg<Context> arg;
 5868|  38.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  38.6k|    arg.m_value = make_value<Context>(value);
 5870|  38.6k|    return arg;
 5871|  38.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9660|   215k|{
 9661|   215k|    return scan_result_type<Source, Args...>();
 9662|   215k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   215k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   215k|        : m_value(T{}), m_has_value(true)
  427|   215k|    {
  428|   215k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6610|   215k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   215k|{
 9646|   215k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 154k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   154k|    else {
 9650|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   154k|    }
 9652|   215k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   861k|    {
  490|   861k|        return m_has_value;
  491|   861k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   524k|    {
  456|   524k|        return m_value;
  457|   524k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   195k|    {
 8783|   195k|        return m_str;
 8784|   195k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   390k|{
 6115|   390k|    detail::check_scan_arg_types<Args...>();
 6116|   390k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   390k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   390k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   390k|    {
 6092|   390k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   390k|    {
 6100|   390k|        return {detail::make_arg<
 6101|   390k|            kind, Context,
 6102|   390k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   390k|                                 typename Context::char_type>::value>(args)...};
 6104|   390k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   390k|{
 5880|   390k|    return make_value<Context>(value).ref_value;
 5881|   390k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5814|   430k|{
 5815|   430k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   430k|                                  needs_context_tag>) {
 5819|   430k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   430k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5653|   430k|    {                                                                        \
 5654|   430k|        return val;                                                          \
 5655|   430k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   390k|        : basic_scan_args(store.desc, store.args.data())
 6141|   390k|    {
 6142|   390k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   195k|        : m_str(r.str)
 8778|   195k|    {
 8779|   195k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   215k|    {
 1740|   215k|        return has_value();
 1741|   215k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   524k|    {
 1815|   524k|        return &value();
 1816|   524k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   524k|    {
 1769|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   524k|        return this->get_value();
 1771|   524k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  39.8k|{
 5865|  39.8k|    check_scan_arg_types<T>();
 5866|       |
 5867|  39.8k|    basic_scan_arg<Context> arg;
 5868|  39.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  39.8k|    arg.m_value = make_value<Context>(value);
 5870|  39.8k|    return arg;
 5871|  39.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   182k|    {
 2869|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   182k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   182k|    {
 2850|   182k|        return decay_copy(t.begin());
 2851|   182k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  12.3M|{
 2094|  12.3M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.22M|    {
 2926|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.22M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.22M|    {
 2908|  1.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.22M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9660|   186k|{
 9661|   186k|    return scan_result_type<Source, Args...>();
 9662|   186k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   186k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   186k|        : m_value(T{}), m_has_value(true)
  427|   186k|    {
  428|   186k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6610|   186k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   613k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   613k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   186k|{
 9646|   186k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 125k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   125k|    else {
 9650|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   125k|    static_cast<    \
  |  |  935|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   125k|    }
 9652|   186k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   613k|    {
 1740|   613k|        return has_value();
 1741|   613k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   182k|    {
 1746|   182k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   182k|        return this->get_unexpected().error();
 1748|   182k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   182k|    {
  473|   182k|        return m_unexpected;
  474|   182k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   747k|    {
  490|   747k|        return m_has_value;
  491|   747k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   438k|    {
  456|   438k|        return m_value;
  457|   438k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   430k|    {
 6485|   430k|        m_range = std::forward<Other>(r);
 6486|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   430k|    {
 1795|   430k|        return value();
 1796|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   430k|    {
 1769|   430k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   430k|        return this->get_value();
 1771|   430k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   430k|    {
  456|   430k|        return m_value;
  457|   430k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   279k|{
 9422|   279k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   279k|    auto result = vscan_impl(buffer, format, args);
 9425|   279k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.2k, False: 194k]
  |  |  ------------------
  ------------------
 9426|  84.2k|        return unexpected(result.error());
 9427|  84.2k|    }
 9428|   194k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   279k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   613k|{
 5381|   613k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   613k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   613k|                  "\n"
 5385|   613k|                  "Unsupported range type given as input to a scanning "
 5386|   613k|                  "function.\n"
 5387|   613k|                  "A range needs to have a character type (value type) "
 5388|   613k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   613k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   613k|                  "to be included.\n"
 5391|   613k|                  "See the scnlib documentation for more details.");
 5392|   613k|    static_assert(
 5393|   613k|        !std::is_same_v<T, custom_char_traits>,
 5394|   613k|        "\n"
 5395|   613k|        "Unsupported range type given as input to a scanning "
 5396|   613k|        "function.\n"
 5397|   613k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   613k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   613k|        "not supported.");
 5400|   613k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   613k|                  "\n"
 5402|   613k|                  "Unsupported range type given as input to a scanning "
 5403|   613k|                  "function.\n"
 5404|   613k|                  "file_marker_found cannot be used as an "
 5405|   613k|                  "source range type to scn::scan.\n"
 5406|   613k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   613k|                  "and do not provide an explicit source range, "
 5408|   613k|                  "or use scn::scan with a FILE* directly.");
 5409|   613k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   613k|                  "\n"
 5411|   613k|                  "Unsupported range type given as input to a scanning "
 5412|   613k|                  "function.\n"
 5413|   613k|                  "In order to be scannable, a range needs to satisfy "
 5414|   613k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   613k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   613k|                  "\n"
 5417|   613k|                  "Unsupported range type given as input to a scanning "
 5418|   613k|                  "function.\n"
 5419|   613k|                  "A range needs to model forward_range and have a valid "
 5420|   613k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   613k|                  "Examples of scannable ranges are std::string, "
 5422|   613k|                  "std::string_view, "
 5423|   613k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   613k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   613k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   613k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   613k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   613k|    else {
 5366|   613k|        return make_forward_scan_buffer(r);
 5367|   613k|    }
 5368|   613k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   613k|{
 5185|   613k|    return basic_scan_forward_buffer_impl(range);
 5186|   613k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   613k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   613k|          m_cursor(ranges::begin(*m_range))
 4766|   613k|    {
 4767|   613k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   613k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   613k|    {
 4738|   613k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   613k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   613k|    {
 4429|   613k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   613k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.04M|    {
 2869|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.04M|    {
 2850|  1.04M|        return decay_copy(t.begin());
 2851|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.47M|    {
 3480|  1.47M|        return m_iterator;
 3481|  1.47M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  3.13M|    {
 4771|  3.13M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 203k, False: 2.92M]
  ------------------
 4772|   203k|            return false;
 4773|   203k|        }
 4774|  2.92M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.92M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.92M|        }
 4777|  2.92M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 2.31M, False: 610k]
  ------------------
 4778|  2.31M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  2.31M|                                          this->m_current_view.begin(),
 4780|  2.31M|                                          this->m_current_view.end());
 4781|  2.31M|        }
 4782|  2.92M|        m_latest = *m_cursor;
 4783|  2.92M|        ++m_cursor;
 4784|  2.92M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.92M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.92M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.92M|        }
 4788|  2.92M|        return true;
 4789|  3.13M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  8.98M|    {
 2926|  8.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  8.98M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  8.98M|    {
 2908|  8.98M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  8.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  8.98M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  9.42M|    {
 3484|  9.42M|        return m_sentinel;
 3485|  9.42M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   613k|    {
 4346|   613k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   613k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   613k|        return true;
 4348|   613k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   182k|        : base(unexpect, std::move(e.error())),
 1616|   182k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   182k|    {
 1618|   182k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   182k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   182k|          m_has_value(false)
  451|   182k|    {
  452|   182k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   613k|    {
 1316|   613k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   430k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   430k|                      ranges::iterator_t<SourceRange>>) {
 6717|   430k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   430k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   430k|    {
 2869|   430k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   430k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   430k|    {
 2850|   430k|        return decay_copy(t.begin());
 2851|   430k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   430k|{
 6702|   430k|    return ranges::end(source);
 6703|   430k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   430k|    {
 2926|   430k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   430k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   430k|    {
 2908|   430k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   430k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   430k|        : base(std::in_place, std::forward<U>(val)),
 1570|   430k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   430k|    {
 1572|   430k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   430k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   430k|    {
  442|   430k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   170k|    {
 8783|   170k|        return m_str;
 8784|   170k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.04M|    static_cast<    \
  |  |  935|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.04M|    static_cast<    \
  |  |  935|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.04M|    {
 3466|  1.04M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   170k|        : m_str(r.str)
 8778|   170k|    {
 8779|   170k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   186k|    {
 1740|   186k|        return has_value();
 1741|   186k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   438k|    {
 1815|   438k|        return &value();
 1816|   438k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   438k|    {
 1769|   438k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   438k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   438k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   438k|        return this->get_value();
 1771|   438k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   430k|    {
 6474|   430k|        return ranges::begin(m_range);
 6475|   430k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   279k|{
 9438|   279k|#if !SCN_DISABLE_LOCALE
 9439|   279k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   279k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   279k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   279k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   279k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.2k, False: 194k]
  |  |  ------------------
  ------------------
 9446|  84.2k|        return unexpected(result.error());
 9447|  84.2k|    }
 9448|   194k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   279k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.0k|{
 9462|  55.0k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.0k, False: 41.0k]
  |  |  ------------------
  ------------------
 9466|  14.0k|        return unexpected(result.error());
 9467|  14.0k|    }
 9468|  41.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9660|   211k|{
 9661|   211k|    return scan_result_type<Source, Args...>();
 9662|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   211k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   211k|        : m_value(T{}), m_has_value(true)
  427|   211k|    {
  428|   211k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6610|   211k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   211k|{
 9646|   211k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 150k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   150k|    else {
 9650|   150k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   150k|    static_cast<    \
  |  |  935|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   150k|    }
 9652|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   844k|    {
  490|   844k|        return m_has_value;
  491|   844k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   511k|    {
  456|   511k|        return m_value;
  457|   511k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   191k|    {
 8783|   191k|        return m_str;
 8784|   191k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   191k|        : m_str(r.str)
 8778|   191k|    {
 8779|   191k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   211k|    {
 1740|   211k|        return has_value();
 1741|   211k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   511k|    {
 1815|   511k|        return &value();
 1816|   511k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   511k|    {
 1769|   511k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   511k|        return this->get_value();
 1771|   511k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9660|   215k|{
 9661|   215k|    return scan_result_type<Source, Args...>();
 9662|   215k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   215k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   215k|        : m_value(T{}), m_has_value(true)
  427|   215k|    {
  428|   215k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6610|   215k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   215k|{
 9646|   215k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.8k, False: 154k]
  |  |  ------------------
  ------------------
 9647|  60.8k|        out = unexpected(in.error());
 9648|  60.8k|    }
 9649|   154k|    else {
 9650|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   154k|    }
 9652|   215k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.8k|        : base(unexpect, std::move(e.error())),
 1616|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.8k|    {
 1618|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.8k|          m_has_value(false)
  451|  60.8k|    {
  452|  60.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.8k|    {
  903|  60.8k|        assign_common(std::move(other));
  904|  60.8k|        return *this;
  905|  60.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.8k|    {
  950|  60.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.8k, False: 0]
  ------------------
  951|  60.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   861k|    {
  490|   861k|        return m_has_value;
  491|   861k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   524k|    {
  456|   524k|        return m_value;
  457|   524k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.8k|    {
 1046|  60.8k|        this->destroy_value();
 1047|  60.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.8k|    {
  504|  60.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.8k|                                  std::forward<Args>(args)...);
  506|  60.8k|        m_has_value = false;
  507|  60.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.8k|    {
  473|  60.8k|        return m_unexpected;
  474|  60.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.8k|    {
  481|  60.8k|        return std::move(m_unexpected);
  482|  60.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   195k|    {
 8783|   195k|        return m_str;
 8784|   195k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   195k|        : m_str(r.str)
 8778|   195k|    {
 8779|   195k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   215k|    {
 1740|   215k|        return has_value();
 1741|   215k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   524k|    {
 1815|   524k|        return &value();
 1816|   524k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   524k|    {
 1769|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   524k|        return this->get_value();
 1771|   524k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  3.63M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  3.63M|    {
 3742|  3.63M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  3.63M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   281k|    {
 3753|   281k|        return m_code;
 3754|   281k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  2.49k|    {
 3758|  2.49k|        return m_msg;
 3759|  2.49k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   801k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   801k|    else {
 3981|   801k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   801k|    }
 3983|   801k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  48.3M|    {
 3480|  48.3M|        return m_iterator;
 3481|  48.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  25.8M|    {
 3480|  25.8M|        return m_iterator;
 3481|  25.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  18.7M|    {
  572|  18.7M|        return m_has_value;
  573|  18.7M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  3.84M|    {
  555|  3.84M|        return m_unexpected;
  556|  3.84M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   436k|    {
 1746|   436k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   436k|        return this->get_unexpected().error();
 1748|   436k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  2.33M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.70M|    {
 7059|  1.70M|        m_specs.type = type;
 7060|  1.70M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  2.33M|    {
 7132|  2.33M|        return m_error;
 7133|  2.33M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  3.59M|{
 3918|  3.59M|    return unexpected(scan_error{c, m});
 3919|  3.59M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  4.95M|{
 4308|       |    // Pattern_White_Space property
 4309|  4.95M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.73M, False: 215k]
  |  Branch (4309:27): [True: 783k, False: 3.95M]
  ------------------
 4310|  4.95M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 50.5k, False: 4.11M]
  ------------------
 4311|  4.95M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 52.7k, False: 4.06M]
  ------------------
 4312|  4.95M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.41k, False: 4.06M]
  ------------------
 4313|  4.95M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 18.7k, False: 4.04M]
  ------------------
 4314|  4.95M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.02M, False: 3.02M]
  ------------------
 4315|  4.95M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 308, False: 3.02M]
  ------------------
 4316|  4.95M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|   626k|{
 7815|   626k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 626k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 626k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 626k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 626k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 626k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 626k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 626k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 626k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 626k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 626k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 626k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 626k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 626k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 626k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 626k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 626k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|   192k|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 192k, False: 433k]
  ------------------
 7843|   407k|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 214k, False: 411k]
  ------------------
 7844|   626k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 219k, False: 407k]
  ------------------
 7845|   626k|            return arg_type_category::floating;
 7846|       |
 7847|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 626k]
  ------------------
 7848|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 626k]
  ------------------
 7849|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 0, False: 626k]
  ------------------
 7850|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 626k]
  ------------------
 7851|      0|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 626k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 626k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|   626k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|   626k|            SCN_CLANG_POP
 7862|   626k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|   626k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.41M|    {
 1756|  3.41M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.41M|        return std::move(this->get_unexpected().error());
 1758|  3.41M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.69M|    {
 3041|  2.69M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.69M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  2.69M|    {
 3075|  2.69M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.69M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  2.69M|    {
 3098|  2.69M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  2.69M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  2.69M|    {
 3107|  2.69M|        return fn::impl(std::forward<T>(t));
 3108|  2.69M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7944|  2.33M|{
 7945|  2.33M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7945:9): [True: 1.70M, False: 626k]
  ------------------
 7946|  2.33M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7946:10): [True: 0, False: 1.70M]
  ------------------
 7947|  1.70M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7947:10): [True: 0, False: 1.70M]
  ------------------
 7948|      0|        SCN_UNLIKELY_ATTR
 7949|      0|        return handler.on_error("Invalid type specifier for float type");
 7950|      0|    }
 7951|  2.33M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  14.9M|    {
 1740|  14.9M|        return has_value();
 1741|  14.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|   310M|    {
 4473|   310M|        assert(m_begin);
 4474|   310M|        return m_end == nullptr;
 4475|   310M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  4.03M|    {
 4490|  4.03M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 4.03M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  4.03M|        return parent()->get_segment_starting_at(position());
 4496|  4.03M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|   172M|    {
 4484|   172M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   172M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   172M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   172M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   172M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  4.03M|    {
 4377|  4.03M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  4.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.73M, False: 2.30M]
  |  |  ------------------
  ------------------
 4378|  4.03M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.73M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.73M|        }
 4381|  2.30M|        const auto start = pos - m_putback_buffer.size();
 4382|  2.30M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  2.30M|        return m_current_view.substr(start);
 4384|  2.30M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|  2.82M|    {
 4479|  2.82M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  2.82M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  2.82M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  7.43M|    {
 4468|  7.43M|        return m_position;
 4469|  7.43M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  3.23M|    {
 4399|  3.23M|        return m_is_contiguous;
 4400|  3.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  83.8M|    {
 4473|  83.8M|        assert(m_begin);
 4474|  83.8M|        return m_end == nullptr;
 4475|  83.8M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   414k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   414k|    else {
 3981|   414k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   414k|    }
 3983|   414k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.48M|    {
 4490|  1.48M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.48M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.48M|        return parent()->get_segment_starting_at(position());
 4496|  1.48M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  44.9M|    {
 4484|  44.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  44.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  44.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  44.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.48M|    {
 4377|  1.48M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846k, False: 633k]
  |  |  ------------------
  ------------------
 4378|  1.48M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   846k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   846k|        }
 4381|   633k|        const auto start = pos - m_putback_buffer.size();
 4382|   633k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   633k|        return m_current_view.substr(start);
 4384|   633k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|  1.61M|    {
 4479|  1.61M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  1.61M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  1.61M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.25M|    {
 4468|  3.25M|        return m_position;
 4469|  3.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.83M|    {
 4399|  1.83M|        return m_is_contiguous;
 4400|  1.83M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  5.50M|    {
 3334|  5.50M|        return static_cast<D&>(*this);
 3335|  5.50M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  5.50M|    {
 3375|  5.50M|        return detail::to_address(ranges::begin(derived()));
 3376|  5.50M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.42M|    {
 3334|  1.42M|        return static_cast<D&>(*this);
 3335|  1.42M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.42M|    {
 3375|  1.42M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.42M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   776k|    {
 8980|   776k|        return ranges::subrange{begin(), end()};
 8981|   776k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   776k|    {
 8972|   776k|        return ranges::default_sentinel;
 8973|   776k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  11.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.7M|    static_cast<    \
  |  |  935|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  11.7M|    static_cast<    \
  |  |  935|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  11.7M|    {
 3466|  11.7M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  4.95M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.07M|    {
 1979|  1.07M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.07M|                                            std::forward<F>(f));
 1981|  1.07M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 19.5k]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|  19.5k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.5k|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.4M|    {
  490|  11.4M|        return m_has_value;
  491|  11.4M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.85M|    {
 1805|  3.85M|        return std::move(value());
 1806|  3.85M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.42M|    {
 1769|  4.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.42M|        return this->get_value();
 1771|  4.42M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.42M|    {
  456|  4.42M|        return m_value;
  457|  4.42M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  4.72M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.72M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.72M|    {
 1572|  4.72M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.72M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.72M|    {
  442|  4.72M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.08M|    {
 1316|  6.08M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  44.6k|{
 1350|  44.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  44.6k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  54.7k|    {
 1756|  54.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  54.7k|        return std::move(this->get_unexpected().error());
 1758|  54.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.4k|    {
  473|  74.4k|        return m_unexpected;
  474|  74.4k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   453k|    {
  365|   453k|        return m_unexpected;
  366|   453k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.07M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.07M|    {
 1628|  1.07M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30M|          m_has_value(false)
  451|  1.30M|    {
  452|  1.30M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   447k|    {
 8980|   447k|        return ranges::subrange{begin(), end()};
 8981|   447k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   447k|    {
 8972|   447k|        return ranges::default_sentinel;
 8973|   447k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  6.26M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.26M|    static_cast<    \
  |  |  935|  6.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.26M|    static_cast<    \
  |  |  935|  6.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.26M|    {
 3466|  6.26M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   613k|    {
 1979|   613k|        return detail::transform_error_impl(std::move(*this),
 1980|   613k|                                            std::forward<F>(f));
 1981|   613k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   613k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   613k|    else {
 1472|   613k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   613k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   613k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 608k, False: 4.56k]
  |  |  ------------------
  ------------------
 1474|   613k|                   ? result(*std::forward<Exp>(exp))
 1475|   613k|                   : result(unexpect,
 1476|  4.56k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.56k|                                           std::forward<Exp>(exp).error()));
 1478|   613k|    }
 1479|   613k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.91M|    {
  490|  5.91M|        return m_has_value;
  491|  5.91M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.16M|    {
 1805|  2.16M|        return std::move(value());
 1806|  2.16M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.18M|    {
 1769|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.18M|        return this->get_value();
 1771|  2.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.18M|    {
  456|  2.18M|        return m_value;
  457|  2.18M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.21M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.21M|    {
 1572|  2.21M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.21M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.21M|    {
  442|  2.21M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.49M|    {
 1316|  3.49M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  63.8k|    {
 1756|  63.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  63.8k|        return std::move(this->get_unexpected().error());
 1758|  63.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  66.6k|    {
  473|  66.6k|        return m_unexpected;
  474|  66.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   784k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   784k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   784k|    {
 1628|   784k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.28M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.28M|          m_has_value(false)
  451|  1.28M|    {
  452|  1.28M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.59M|        : m_unexpected(std::forward<Err>(e))
  350|  3.59M|    {
  351|  3.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.59M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   833k|        : base(unexpect, std::move(e.error())),
 1616|   833k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   833k|    {
 1618|   833k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   833k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   833k|          m_has_value(false)
  451|   833k|    {
  452|   833k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.91M|    {
 1316|  8.91M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   202k|        : base(unexpect, std::move(e.error())),
 1616|   202k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   202k|    {
 1618|   202k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.10M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.10M|          m_has_value(false)
  451|  1.10M|    {
  452|  1.10M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.27M|    {
 1316|  5.27M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.11M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.11M|    {
 1572|  4.11M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.11M|    {
  442|  4.11M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  6.18M|    {
 1740|  6.18M|        return has_value();
 1741|  6.18M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.71M|    {
  490|  9.71M|        return m_has_value;
  491|  9.71M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   242k|    {
 1746|   242k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   242k|        return this->get_unexpected().error();
 1748|   242k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   242k|    {
  473|   242k|        return m_unexpected;
  474|   242k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.64M|    {
 1805|  2.64M|        return std::move(value());
 1806|  2.64M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.28M|    {
 1769|  3.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.28M|        return this->get_value();
 1771|  3.28M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.28M|    {
  456|  3.28M|        return m_value;
  457|  3.28M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   405k|        : base(unexpect, std::move(e.error())),
 1616|   405k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   405k|    {
 1618|   405k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.09M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.09M|          m_has_value(false)
  451|  1.09M|    {
  452|  1.09M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.49M|    {
 1316|  3.49M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.40M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.40M|    {
 1572|  2.40M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.40M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.40M|    {
  442|  2.40M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  4.10M|    {
 1740|  4.10M|        return has_value();
 1741|  4.10M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.47M|    {
  490|  6.47M|        return m_has_value;
  491|  6.47M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   488k|    {
 1746|   488k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   488k|        return this->get_unexpected().error();
 1748|   488k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   488k|    {
  473|   488k|        return m_unexpected;
  474|   488k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.87M|    {
 1769|  1.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.87M|        return this->get_value();
 1771|  1.87M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.87M|    {
  456|  1.87M|        return m_value;
  457|  1.87M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   936k|    {
 1979|   936k|        return detail::transform_error_impl(std::move(*this),
 1980|   936k|                                            std::forward<F>(f));
 1981|   936k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   936k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   936k|    else {
 1472|   936k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   936k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   936k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 920k, False: 15.9k]
  |  |  ------------------
  ------------------
 1474|   936k|                   ? result(*std::forward<Exp>(exp))
 1475|   936k|                   : result(unexpect,
 1476|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1477|  15.9k|                                           std::forward<Exp>(exp).error()));
 1478|   936k|    }
 1479|   936k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.56M|    {
  490|  3.56M|        return m_has_value;
  491|  3.56M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   920k|    {
 1805|   920k|        return std::move(value());
 1806|   920k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  15.9k|    {
 1756|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  15.9k|        return std::move(this->get_unexpected().error());
 1758|  15.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   906k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   906k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   906k|    {
 1628|   906k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|  2.25M|    {
 8964|  2.25M|        return m_current;
 8965|  2.25M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|  1.43M|    {
 8857|  1.43M|        return m_locale;
 8858|  1.43M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|  1.43M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.43M|    static_cast<    \
  |  |  935|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.43M|    static_cast<    \
  |  |  935|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  1.43M|    {
 8864|  1.43M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   836k|    {
 3000|   836k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   836k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   836k|    {
 2981|   836k|        return t.data();
 2982|   836k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   228k|        : base(unexpect, std::move(e.error())),
 1616|   228k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   228k|    {
 1618|   228k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  58.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  58.5k|    {
 1572|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  58.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  58.5k|    {
  442|  58.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|  1.20M|    {
 8964|  1.20M|        return m_current;
 8965|  1.20M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   896k|    {
 8857|   896k|        return m_locale;
 8858|   896k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   896k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   896k|    static_cast<    \
  |  |  935|   896k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   896k|    static_cast<    \
  |  |  935|   896k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   896k|    {
 8864|   896k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   498k|        : base(unexpect, std::move(e.error())),
 1616|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   498k|    {
 1618|   498k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  3.84M|        : base(unexpect, std::move(e.error())),
 1616|  3.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.84M|    {
 1618|  3.84M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  3.84M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  3.84M|          m_has_value(false)
  550|  3.84M|    {
  551|  3.84M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.84M|    {
 1316|  3.84M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  12.5M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  12.5M|        : m_deferred_init(), m_has_value(true)
  529|  12.5M|    {
  530|  12.5M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  9.38M|    {
 4559|  9.38M|        return x.is_at_end();
 4560|  9.38M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  23.3M|    {
 4603|  23.3M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 23.3M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  23.3M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 23.3M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  23.3M|        return !read_at_position();
 4610|  23.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|   101M|    {
 4583|   101M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   101M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   101M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   101M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 101M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   101M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   101M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 87.6M, False: 13.7M]
  |  |  ------------------
  ------------------
 4590|  87.6M|            return true;
 4591|  87.6M|        }
 4592|       |
 4593|  27.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 13.7M, False: 13.4M]
  ------------------
 4594|  13.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 290k, False: 13.4M]
  ------------------
 4595|   290k|                return false;
 4596|   290k|            }
 4597|  13.7M|        }
 4598|  13.4M|        return true;
 4599|  13.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  26.2M|    {
 4518|  26.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  26.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  26.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 26.2M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  26.2M|        auto res = read_at_position();
 4527|  26.2M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  26.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  26.2M|        return parent()->get_character_at(m_position);
 4529|  26.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  26.2M|    {
 4388|  26.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  26.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.4M, False: 9.84M]
  |  |  ------------------
  ------------------
 4389|  26.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  16.4M|            return m_putback_buffer[pos];
 4391|  16.4M|        }
 4392|  9.84M|        const auto start = pos - m_putback_buffer.size();
 4393|  9.84M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  9.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  9.84M|        return m_current_view[start];
 4395|  9.84M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  6.85M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.85M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.85M|    {
 1572|  6.85M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.85M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.85M|    {
  442|  6.85M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.93M|    {
 1316|  6.93M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   154k|        : m_unexpected(std::forward<Err>(e))
  350|   154k|    {
  351|   154k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   154k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   154k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  74.4k|        : base(unexpect, std::move(e.error())),
 1616|  74.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.4k|    {
 1618|  74.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.4k|          m_has_value(false)
  451|  74.4k|    {
  452|  74.4k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   227k|        : m_unexpected(std::forward<Args>(args)...)
  359|   227k|    {
  360|   227k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   227k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   227k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  51.8M|    {
 4504|  51.8M|        ++m_position;
 4505|  51.8M|        (void)read_at_position();
 4506|  51.8M|        return *this;
 4507|  51.8M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  3.02M|    {
 1740|  3.02M|        return has_value();
 1741|  3.02M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   576k|    {
 1795|   576k|        return value();
 1796|   576k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  24.9M|    {
 4553|  24.9M|        return !(lhs == rhs);
 4554|  24.9M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  27.7M|    {
 4548|  27.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 27.7M, False: 0]
  |  Branch (4548:46): [True: 3.54M, False: 24.1M]
  ------------------
 4549|  27.7M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  72.7k|        : m_unexpected(std::forward<Err>(e))
  350|  72.7k|    {
  351|  72.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  72.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  72.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  14.7k|        : base(unexpect, std::move(e.error())),
 1616|  14.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.7k|    {
 1618|  14.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.7k|          m_has_value(false)
  451|  14.7k|    {
  452|  14.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.47M|    {
 1316|  1.47M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.45M|    {
 1572|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.45M|    {
  442|  1.45M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.47M|    {
 1740|  1.47M|        return has_value();
 1741|  1.47M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.94M|    {
  490|  2.94M|        return m_has_value;
  491|  2.94M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  14.7k|    {
 1746|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.7k|        return this->get_unexpected().error();
 1748|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.7k|    {
  473|  14.7k|        return m_unexpected;
  474|  14.7k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.45M|    {
 1805|  1.45M|        return std::move(value());
 1806|  1.45M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.45M|    {
 1769|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.45M|        return this->get_value();
 1771|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.45M|    {
  456|  1.45M|        return m_value;
  457|  1.45M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  33.2M|    {
 3484|  33.2M|        return m_sentinel;
 3485|  33.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  63.2k|        : m_unexpected(std::forward<Err>(e))
  350|  63.2k|    {
  351|  63.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  63.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  63.2k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  12.9M|    {
  365|  12.9M|        return m_unexpected;
  366|  12.9M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.54M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.54M|    {
  360|  3.54M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.54M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  15.7M|        : m_unexpected(std::forward<Err>(e))
  350|  15.7M|    {
  351|  15.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.7M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  15.7M|    {
  365|  15.7M|        return m_unexpected;
  366|  15.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  15.7M|        : m_unexpected(std::forward<Args>(args)...)
  359|  15.7M|    {
  360|  15.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  15.7M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   153k|{
 1350|   153k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   153k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.33M|        : m_unexpected(std::forward<Err>(e))
  350|  3.33M|    {
  351|  3.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.33M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  19.7k|    {
 1746|  19.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.7k|        return this->get_unexpected().error();
 1748|  19.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.10M|        : base(unexpect, std::move(e.error())),
 1616|  1.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.10M|    {
 1618|  1.10M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.13M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.13M|          m_has_value(false)
  451|  1.13M|    {
  452|  1.13M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.7M|    {
 1316|  11.7M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   581k|        : base(std::in_place, std::forward<U>(val)),
 1570|   581k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   581k|    {
 1572|   581k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   581k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   581k|    {
  442|   581k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  5.96M|        : base(unexpect, std::move(e.error())),
 1616|  5.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.96M|    {
 1618|  5.96M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.96M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.96M|          m_has_value(false)
  451|  5.96M|    {
  452|  5.96M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  12.8M|    {
 1740|  12.8M|        return has_value();
 1741|  12.8M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  22.7M|    {
  490|  22.7M|        return m_has_value;
  491|  22.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.02M|    {
 1746|  3.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.02M|        return this->get_unexpected().error();
 1748|  3.02M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.02M|    {
  473|  3.02M|        return m_unexpected;
  474|  3.02M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  1.16M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.16M|    {
 1572|  1.16M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.16M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.16M|    {
  442|  1.16M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.16M|    {
 1316|  1.16M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    279|        : base(unexpect, std::move(e.error())),
 1616|    279|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    279|    {
 1618|    279|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    279|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    279|          m_has_value(false)
  451|    279|    {
  452|    279|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.01M|    {
 1795|  3.01M|        return value();
 1796|  3.01M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  5.81M|    {
 1769|  5.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.81M|        return this->get_value();
 1771|  5.81M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.81M|    {
  456|  5.81M|        return m_value;
  457|  5.81M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   106k|    {
 1740|   106k|        return has_value();
 1741|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.33M|    {
  490|  2.33M|        return m_has_value;
  491|  2.33M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.16M|    {
 1769|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.16M|        return this->get_value();
 1771|  1.16M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.16M|    {
  456|  1.16M|        return m_value;
  457|  1.16M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.82M|    {
 1979|  2.82M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.82M|                                            std::forward<F>(f));
 1981|  2.82M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.82M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.82M|    else {
 1472|  2.82M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.82M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.82M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.79M, False: 35.1k]
  |  |  ------------------
  ------------------
 1474|  2.82M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.82M|                   : result(unexpect,
 1476|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  35.1k|                                           std::forward<Exp>(exp).error()));
 1478|  2.82M|    }
 1479|  2.82M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  4.11M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.11M|    {
 1572|  4.11M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.11M|    {
  442|  4.11M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  35.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  35.1k|    {
 1628|  35.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.79M|    {
 1805|  2.79M|        return std::move(value());
 1806|  2.79M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.13M|    {
 1740|  7.13M|        return has_value();
 1741|  7.13M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.2M|    {
  490|  11.2M|        return m_has_value;
  491|  11.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   301k|    {
 1746|   301k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   301k|        return this->get_unexpected().error();
 1748|   301k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   301k|    {
  473|   301k|        return m_unexpected;
  474|   301k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.03M|    {
 1805|  3.03M|        return std::move(value());
 1806|  3.03M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.79M|    {
 1769|  3.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.79M|        return this->get_value();
 1771|  3.79M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.79M|    {
  456|  3.79M|        return m_value;
  457|  3.79M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  1.22M|    {
 3480|  1.22M|        return m_iterator;
 3481|  1.22M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  1.22M|    {
 3484|  1.22M|        return m_sentinel;
 3485|  1.22M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   942k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   942k|    static_cast<    \
  |  |  935|   942k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   942k|    static_cast<    \
  |  |  935|   942k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   942k|    {
 3466|   942k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  13.9M|    {
 4570|  13.9M|        return !x.is_at_end();
 4571|  13.9M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.31M|    {
 1316|  2.31M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.29M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.29M|    {
 1572|  2.29M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.29M|    {
  442|  2.29M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.37M|    {
 1740|  1.37M|        return has_value();
 1741|  1.37M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   307k|    {
 1795|   307k|        return value();
 1796|   307k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.24M|    {
 1316|  1.24M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.22M|    {
 1572|  1.22M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.22M|    {
  442|  1.22M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  1.24M|    {
 1740|  1.24M|        return has_value();
 1741|  1.24M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.48M|    {
  490|  2.48M|        return m_has_value;
  491|  2.48M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  11.4k|    {
 1746|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.4k|        return this->get_unexpected().error();
 1748|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.22M|    {
 1805|  1.22M|        return std::move(value());
 1806|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  4.84k|    {
 1746|  4.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.84k|        return this->get_unexpected().error();
 1748|  4.84k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   951k|        : base(unexpect, std::move(e.error())),
 1616|   951k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   951k|    {
 1618|   951k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   951k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   951k|          m_has_value(false)
  451|   951k|    {
  452|   951k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.26M|    {
 1316|  5.26M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   311k|        : base(std::in_place, std::forward<U>(val)),
 1570|   311k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   311k|    {
 1572|   311k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   311k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   311k|    {
  442|   311k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.60M|        : base(unexpect, std::move(e.error())),
 1616|  3.60M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.60M|    {
 1618|  3.60M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.60M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.60M|          m_has_value(false)
  451|  3.60M|    {
  452|  3.60M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  6.18M|    {
 1740|  6.18M|        return has_value();
 1741|  6.18M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.5M|    {
  490|  10.5M|        return m_has_value;
  491|  10.5M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  2.51M|    {
 1746|  2.51M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.51M|        return this->get_unexpected().error();
 1748|  2.51M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.51M|    {
  473|  2.51M|        return m_unexpected;
  474|  2.51M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   946k|        : base(std::in_place, std::forward<U>(val)),
 1570|   946k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   946k|    {
 1572|   946k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   946k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   946k|    {
  442|   946k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   946k|    {
 1316|   946k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     90|        : base(unexpect, std::move(e.error())),
 1616|     90|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     90|    {
 1618|     90|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     90|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     90|          m_has_value(false)
  451|     90|    {
  452|     90|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   980k|    {
 1795|   980k|        return value();
 1796|   980k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   980k|    {
 1769|   980k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   980k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   980k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   980k|        return this->get_value();
 1771|   980k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   980k|    {
  456|   980k|        return m_value;
  457|   980k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  25.6k|    {
 1740|  25.6k|        return has_value();
 1741|  25.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.89M|    {
  490|  1.89M|        return m_has_value;
  491|  1.89M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   920k|    {
 1805|   920k|        return std::move(value());
 1806|   920k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   946k|    {
 1769|   946k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   946k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   946k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   946k|        return this->get_value();
 1771|   946k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   946k|    {
  456|   946k|        return m_value;
  457|   946k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   396k|        : base(std::in_place, std::forward<U>(val)),
 1570|   396k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   396k|    {
 1572|   396k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   396k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   396k|    {
  442|   396k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.08M|    {
 3000|  3.08M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.08M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.08M|    {
 2981|  3.08M|        return t.data();
 2982|  3.08M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  7.98M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.98M|    {
 1572|  7.98M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  7.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.98M|    {
  442|  7.98M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  5.38M|    {
 1805|  5.38M|        return std::move(value());
 1806|  5.38M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  3.41M|{
 1350|  3.41M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.41M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.05M|    {
 1979|  1.05M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.05M|                                            std::forward<F>(f));
 1981|  1.05M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.05M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.05M|    else {
 1472|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.05M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.05M|    }
 1479|  1.05M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.05M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.05M|    {
 1572|  1.05M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.05M|    {
  442|  1.05M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.05M|    {
 1316|  1.05M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.05M|    {
 1740|  1.05M|        return has_value();
 1741|  1.05M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.11M|    {
  490|  2.11M|        return m_has_value;
  491|  2.11M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.05M|    {
 1769|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.05M|        return this->get_value();
 1771|  1.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.05M|    {
 1965|  1.05M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.05M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.05M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.05M|    else {
 1472|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1474|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.05M|                   : result(unexpect,
 1476|  1.05M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.05M|                                           std::forward<Exp>(exp).error()));
 1478|  1.05M|    }
 1479|  1.05M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   751k|    {
 1795|   751k|        return value();
 1796|   751k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   252k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   106k|    {
 1815|   106k|        return &value();
 1816|   106k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   750k|    {
 2869|   750k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   750k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   750k|    {
 2850|   750k|        return decay_copy(t.begin());
 2851|   750k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   750k|{
 2094|   750k|    return SCN_FWD(t);
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   750k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   458k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   920k|    {
 1979|   920k|        return detail::transform_error_impl(std::move(*this),
 1980|   920k|                                            std::forward<F>(f));
 1981|   920k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   920k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   920k|    else {
 1472|   920k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   920k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   920k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 920k, False: 0]
  |  |  ------------------
  ------------------
 1474|   920k|                   ? result(*std::forward<Exp>(exp))
 1475|   920k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   920k|    }
 1479|   920k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   920k|        : base(std::in_place, std::forward<U>(val)),
 1570|   920k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   920k|    {
 1572|   920k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   920k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   920k|    {
  442|   920k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   920k|    {
 1316|   920k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   920k|    {
 1740|   920k|        return has_value();
 1741|   920k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.84M|    {
  490|  1.84M|        return m_has_value;
  491|  1.84M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   920k|    {
 1805|   920k|        return std::move(value());
 1806|   920k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   920k|    {
 1769|   920k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   920k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   920k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   920k|        return this->get_value();
 1771|   920k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   920k|    {
  456|   920k|        return m_value;
  457|   920k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|   890k|    {
 1965|   890k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   890k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   890k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   890k|    else {
 1472|   890k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   890k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   890k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 890k]
  |  |  ------------------
  ------------------
 1474|   890k|                   ? result(*std::forward<Exp>(exp))
 1475|   890k|                   : result(unexpect,
 1476|   890k|                            trivial_invoke(std::forward<F>(f),
 1477|   890k|                                           std::forward<Exp>(exp).error()));
 1478|   890k|    }
 1479|   890k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  56.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  56.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  56.8k|    {
 1572|  56.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  56.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  56.8k|    {
  442|  56.8k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   890k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   890k|    static_cast<    \
  |  |  935|   890k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   890k|    {
 3912|   890k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   634k|    {
 1795|   634k|        return value();
 1796|   634k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  25.5k|    {
 1815|  25.5k|        return &value();
 1816|  25.5k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.05M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.05M|    static_cast<    \
  |  |  935|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.05M|    {
 3912|  1.05M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  5.16M|    {
 4559|  5.16M|        return x.is_at_end();
 4560|  5.16M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  8.19M|    {
 4603|  8.19M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 8.19M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  8.19M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 8.19M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  8.19M|        return !read_at_position();
 4610|  8.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  26.0M|    {
 4583|  26.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  26.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  26.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 26.0M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  26.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  26.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22.9M, False: 3.13M]
  |  |  ------------------
  ------------------
 4590|  22.9M|            return true;
 4591|  22.9M|        }
 4592|       |
 4593|  6.06M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 3.13M, False: 2.92M]
  ------------------
 4594|  3.13M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 203k, False: 2.92M]
  ------------------
 4595|   203k|                return false;
 4596|   203k|            }
 4597|  3.13M|        }
 4598|  2.92M|        return true;
 4599|  3.13M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  33.7M|    {
 4357|  33.7M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  33.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  8.14M|    {
 4518|  8.14M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  8.14M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 8.14M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  8.14M|        auto res = read_at_position();
 4527|  8.14M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  8.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  8.14M|        return parent()->get_character_at(m_position);
 4529|  8.14M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  8.14M|    {
 4388|  8.14M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  8.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.88M, False: 1.26M]
  |  |  ------------------
  ------------------
 4389|  8.14M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  6.88M|            return m_putback_buffer[pos];
 4391|  6.88M|        }
 4392|  1.26M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.26M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.26M|        return m_current_view[start];
 4395|  1.26M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.59M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.59M|    {
 1572|  3.59M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.59M|    {
  442|  3.59M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.66M|    {
 1316|  3.66M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  66.6k|        : base(unexpect, std::move(e.error())),
 1616|  66.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  66.6k|    {
 1618|  66.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  66.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  66.6k|          m_has_value(false)
  451|  66.6k|    {
  452|  66.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  9.74M|    {
 4504|  9.74M|        ++m_position;
 4505|  9.74M|        (void)read_at_position();
 4506|  9.74M|        return *this;
 4507|  9.74M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  1.44M|    {
 1740|  1.44M|        return has_value();
 1741|  1.44M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  26.9k|    {
 1795|  26.9k|        return value();
 1796|  26.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  4.01M|    {
 4553|  4.01M|        return !(lhs == rhs);
 4554|  4.01M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  5.41M|    {
 4548|  5.41M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.41M, False: 0]
  |  Branch (4548:46): [True: 1.70M, False: 3.71M]
  ------------------
 4549|  5.41M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  2.93M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  2.93M|    else {
 4075|       |        // utf-32
 4076|  2.93M|        static_assert(sizeof(U) == 4);
 4077|  2.93M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  2.93M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  2.93M|        return 1;
 4079|  2.93M|    }
 4080|  2.93M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.93M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  2.93M|    else {
 4281|  2.93M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  2.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  2.93M|        auto cp = static_cast<char32_t>(input.front());
 4283|  2.93M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 181k, False: 2.75M]
  |  |  ------------------
  ------------------
 4284|   181k|            return invalid_code_point;
 4285|   181k|        }
 4286|  2.75M|        return cp;
 4287|  2.93M|    }
 4288|  2.93M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.38k|        : base(unexpect, std::move(e.error())),
 1616|  3.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.38k|    {
 1618|  3.38k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.38k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.38k|          m_has_value(false)
  451|  3.38k|    {
  452|  3.38k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   753k|    {
 1316|   753k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   750k|        : base(std::in_place, std::forward<U>(val)),
 1570|   750k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   750k|    {
 1572|   750k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   750k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   750k|    {
  442|   750k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   753k|    {
 1740|   753k|        return has_value();
 1741|   753k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.50M|    {
  490|  1.50M|        return m_has_value;
  491|  1.50M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  3.38k|    {
 1746|  3.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.38k|        return this->get_unexpected().error();
 1748|  3.38k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.38k|    {
  473|  3.38k|        return m_unexpected;
  474|  3.38k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   750k|    {
 1805|   750k|        return std::move(value());
 1806|   750k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   750k|    {
 1769|   750k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   750k|        return this->get_value();
 1771|   750k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   750k|    {
  456|   750k|        return m_value;
  457|   750k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  13.4M|    {
 3484|  13.4M|        return m_sentinel;
 3485|  13.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.80k|    {
 1746|  2.80k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.80k|        return this->get_unexpected().error();
 1748|  2.80k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   670k|        : base(unexpect, std::move(e.error())),
 1616|   670k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   670k|    {
 1618|   670k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   729k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   729k|          m_has_value(false)
  451|   729k|    {
  452|   729k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.33M|    {
 1316|  6.33M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  26.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  26.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  26.9k|    {
 1572|  26.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  26.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  26.9k|    {
  442|  26.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.56M|        : base(unexpect, std::move(e.error())),
 1616|  3.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.56M|    {
 1618|  3.56M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.56M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.56M|          m_has_value(false)
  451|  3.56M|    {
  452|  3.56M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  6.94M|    {
 1740|  6.94M|        return has_value();
 1741|  6.94M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.2M|    {
  490|  12.2M|        return m_has_value;
  491|  12.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  2.06M|    {
 1746|  2.06M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.06M|        return this->get_unexpected().error();
 1748|  2.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.06M|    {
  473|  2.06M|        return m_unexpected;
  474|  2.06M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   623k|        : base(std::in_place, std::forward<U>(val)),
 1570|   623k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   623k|    {
 1572|   623k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   623k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   623k|    {
  442|   623k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   623k|    {
 1316|   623k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     72|        : base(unexpect, std::move(e.error())),
 1616|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     72|    {
 1618|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     72|          m_has_value(false)
  451|     72|    {
  452|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   925k|    {
 1795|   925k|        return value();
 1796|   925k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.47M|    {
 1769|  2.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.47M|        return this->get_value();
 1771|  2.47M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.47M|    {
  456|  2.47M|        return m_value;
  457|  2.47M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  15.3k|    {
 1740|  15.3k|        return has_value();
 1741|  15.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   608k|    {
 1805|   608k|        return std::move(value());
 1806|   608k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   623k|    {
 1769|   623k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   623k|        return this->get_value();
 1771|   623k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   623k|    {
  456|   623k|        return m_value;
  457|   623k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.61M|    {
 1979|  1.61M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.61M|                                            std::forward<F>(f));
 1981|  1.61M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.61M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.61M|    else {
 1472|  1.61M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.61M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.55M, False: 59.3k]
  |  |  ------------------
  ------------------
 1474|  1.61M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.61M|                   : result(unexpect,
 1476|  59.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  59.3k|                                           std::forward<Exp>(exp).error()));
 1478|  1.61M|    }
 1479|  1.61M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  2.00M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.00M|    {
 1572|  2.00M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.00M|    {
  442|  2.00M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  59.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  59.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  59.3k|    {
 1628|  59.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  1.55M|    {
 1805|  1.55M|        return std::move(value());
 1806|  1.55M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  4.10M|    {
 1740|  4.10M|        return has_value();
 1741|  4.10M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.55M|    {
  490|  6.55M|        return m_has_value;
  491|  6.55M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   674k|    {
 1746|   674k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   674k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   674k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   674k|        return this->get_unexpected().error();
 1748|   674k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   674k|    {
  473|   674k|        return m_unexpected;
  474|   674k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.47M|    {
 1805|  1.47M|        return std::move(value());
 1806|  1.47M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.78M|    {
 1769|  1.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.78M|        return this->get_value();
 1771|  1.78M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.78M|    {
  456|  1.78M|        return m_value;
  457|  1.78M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   471k|    {
 3480|   471k|        return m_iterator;
 3481|   471k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   471k|    {
 3484|   471k|        return m_sentinel;
 3485|   471k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   433k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   433k|    static_cast<    \
  |  |  935|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   433k|    static_cast<    \
  |  |  935|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   433k|    {
 3466|   433k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  3.03M|    {
 4570|  3.03M|        return !x.is_at_end();
 4571|  3.03M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  64.7k|        : base(unexpect, std::move(e.error())),
 1616|  64.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  64.7k|    {
 1618|  64.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  64.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  64.7k|          m_has_value(false)
  451|  64.7k|    {
  452|  64.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.05M|    {
 1316|  3.05M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.99M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.99M|    {
 1572|  2.99M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.99M|    {
  442|  2.99M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   831k|    {
 1740|   831k|        return has_value();
 1741|   831k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.29M|    {
  490|  5.29M|        return m_has_value;
  491|  5.29M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  11.7k|    {
 1795|  11.7k|        return value();
 1796|  11.7k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.17M|    {
 1769|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.17M|        return this->get_value();
 1771|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.17M|    {
  456|  2.17M|        return m_value;
  457|  2.17M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.38k|        : base(unexpect, std::move(e.error())),
 1616|  3.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.38k|    {
 1618|  3.38k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  3.38k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.38k|          m_has_value(false)
  451|  3.38k|    {
  452|  3.38k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   754k|    {
 1316|   754k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   750k|        : base(std::in_place, std::forward<U>(val)),
 1570|   750k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   750k|    {
 1572|   750k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   750k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   750k|    {
  442|   750k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   613k|    {
 1979|   613k|        return detail::transform_error_impl(std::move(*this),
 1980|   613k|                                            std::forward<F>(f));
 1981|   613k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   613k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   613k|    else {
 1472|   613k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   613k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   613k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 608k, False: 4.56k]
  |  |  ------------------
  ------------------
 1474|   613k|                   ? result(*std::forward<Exp>(exp))
 1475|   613k|                   : result(unexpect,
 1476|  4.56k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.56k|                                           std::forward<Exp>(exp).error()));
 1478|   613k|    }
 1479|   613k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.16M|    {
 1805|  2.16M|        return std::move(value());
 1806|  2.16M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  64.0k|    {
 1756|  64.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  64.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  64.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  64.0k|        return std::move(this->get_unexpected().error());
 1758|  64.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  64.7k|    {
  473|  64.7k|        return m_unexpected;
  474|  64.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   691k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   691k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   691k|    {
 1628|   691k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   754k|    {
 1740|   754k|        return has_value();
 1741|   754k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.50M|    {
  490|  1.50M|        return m_has_value;
  491|  1.50M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  3.38k|    {
 1746|  3.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.38k|        return this->get_unexpected().error();
 1748|  3.38k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.38k|    {
  473|  3.38k|        return m_unexpected;
  474|  3.38k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   750k|    {
 1805|   750k|        return std::move(value());
 1806|   750k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   750k|    {
 1769|   750k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   750k|        return this->get_value();
 1771|   750k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   750k|    {
  456|   750k|        return m_value;
  457|   750k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    714|    {
 1746|    714|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    714|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    714|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    714|        return this->get_unexpected().error();
 1748|    714|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   669k|        : base(unexpect, std::move(e.error())),
 1616|   669k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   669k|    {
 1618|   669k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   728k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   728k|          m_has_value(false)
  451|   728k|    {
  452|   728k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.02M|    {
 1316|  5.02M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  11.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  11.7k|    {
 1572|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  11.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.7k|    {
  442|  11.7k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.58M|        : base(unexpect, std::move(e.error())),
 1616|  2.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.58M|    {
 1618|  2.58M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.58M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.58M|          m_has_value(false)
  451|  2.58M|    {
  452|  2.58M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  5.63M|    {
 1740|  5.63M|        return has_value();
 1741|  5.63M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.1M|    {
  490|  10.1M|        return m_has_value;
  491|  10.1M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  1.96M|    {
 1746|  1.96M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.96M|        return this->get_unexpected().error();
 1748|  1.96M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.96M|    {
  473|  1.96M|        return m_unexpected;
  474|  1.96M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   614k|        : base(std::in_place, std::forward<U>(val)),
 1570|   614k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   614k|    {
 1572|   614k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   614k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   614k|    {
  442|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   614k|    {
 1316|   614k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     24|          m_has_value(false)
  451|     24|    {
  452|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   294k|    {
 1795|   294k|        return value();
 1796|   294k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.84M|    {
 1769|  1.84M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.84M|        return this->get_value();
 1771|  1.84M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.84M|    {
  456|  1.84M|        return m_value;
  457|  1.84M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  5.41k|    {
 1740|  5.41k|        return has_value();
 1741|  5.41k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   608k|    {
 1805|   608k|        return std::move(value());
 1806|   608k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   614k|    {
 1769|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   614k|        return this->get_value();
 1771|   614k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   614k|    {
  456|   614k|        return m_value;
  457|   614k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.61M|    {
 1979|  1.61M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.61M|                                            std::forward<F>(f));
 1981|  1.61M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.61M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.61M|    else {
 1472|  1.61M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.61M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.55M, False: 59.4k]
  |  |  ------------------
  ------------------
 1474|  1.61M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.61M|                   : result(unexpect,
 1476|  59.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  59.4k|                                           std::forward<Exp>(exp).error()));
 1478|  1.61M|    }
 1479|  1.61M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.69M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.69M|    {
 1572|  1.69M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.69M|    {
  442|  1.69M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  59.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  59.4k|    {
 1628|  59.4k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.55M|    {
 1805|  1.55M|        return std::move(value());
 1806|  1.55M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.42M|    {
 3000|  1.42M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.42M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.42M|    {
 2981|  1.42M|        return t.data();
 2982|  1.42M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   608k|    {
 1979|   608k|        return detail::transform_error_impl(std::move(*this),
 1980|   608k|                                            std::forward<F>(f));
 1981|   608k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   608k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   608k|    else {
 1472|   608k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   608k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   608k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 608k, False: 0]
  |  |  ------------------
  ------------------
 1474|   608k|                   ? result(*std::forward<Exp>(exp))
 1475|   608k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   608k|    }
 1479|   608k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   608k|        : base(std::in_place, std::forward<U>(val)),
 1570|   608k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   608k|    {
 1572|   608k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   608k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   608k|    {
  442|   608k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   608k|    {
 1316|   608k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   608k|    {
 1740|   608k|        return has_value();
 1741|   608k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   608k|    {
 1805|   608k|        return std::move(value());
 1806|   608k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   608k|    {
 1769|   608k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   608k|        return this->get_value();
 1771|   608k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   608k|    {
  456|   608k|        return m_value;
  457|   608k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|   779k|    {
 1965|   779k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   779k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|   779k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   779k|    else {
 1472|   779k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   779k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   779k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 779k]
  |  |  ------------------
  ------------------
 1474|   779k|                   ? result(*std::forward<Exp>(exp))
 1475|   779k|                   : result(unexpect,
 1476|   779k|                            trivial_invoke(std::forward<F>(f),
 1477|   779k|                                           std::forward<Exp>(exp).error()));
 1478|   779k|    }
 1479|   779k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   307k|    {
 1795|   307k|        return value();
 1796|   307k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   121k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  15.2k|    {
 1815|  15.2k|        return &value();
 1816|  15.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   487k|    {
 2869|   487k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   487k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   487k|    {
 2850|   487k|        return decay_copy(t.begin());
 2851|   487k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   487k|{
 2094|   487k|    return SCN_FWD(t);
  ------------------
  |  |  936|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   487k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   272k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   608k|    {
 1979|   608k|        return detail::transform_error_impl(std::move(*this),
 1980|   608k|                                            std::forward<F>(f));
 1981|   608k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   608k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   608k|    else {
 1472|   608k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   608k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   608k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 608k, False: 0]
  |  |  ------------------
  ------------------
 1474|   608k|                   ? result(*std::forward<Exp>(exp))
 1475|   608k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   608k|    }
 1479|   608k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   608k|        : base(std::in_place, std::forward<U>(val)),
 1570|   608k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   608k|    {
 1572|   608k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   608k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   608k|    {
  442|   608k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   608k|    {
 1316|   608k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   608k|    {
 1740|   608k|        return has_value();
 1741|   608k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   608k|    {
 1805|   608k|        return std::move(value());
 1806|   608k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   608k|    {
 1769|   608k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   608k|        return this->get_value();
 1771|   608k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   608k|    {
  456|   608k|        return m_value;
  457|   608k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|   686k|    {
 1965|   686k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   686k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   686k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   686k|    else {
 1472|   686k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   686k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   686k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 1474|   686k|                   ? result(*std::forward<Exp>(exp))
 1475|   686k|                   : result(unexpect,
 1476|   686k|                            trivial_invoke(std::forward<F>(f),
 1477|   686k|                                           std::forward<Exp>(exp).error()));
 1478|   686k|    }
 1479|   686k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   686k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   686k|    static_cast<    \
  |  |  935|   686k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   686k|    {
 3912|   686k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   307k|    {
 1795|   307k|        return value();
 1796|   307k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  5.38k|    {
 1815|  5.38k|        return &value();
 1816|  5.38k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   779k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   779k|    static_cast<    \
  |  |  935|   779k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   779k|    {
 3912|   779k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|   131M|    {
 4357|   131M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   131M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1569|   101k|        : base(std::in_place, std::forward<U>(val)),
 1570|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   101k|    {
 1572|   101k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  440|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   101k|    {
  442|   101k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|  1.82M|    {
 6182|  1.82M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.82M|        return static_cast<std::size_t>(m_desc &
 6187|  1.82M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.82M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|  3.64M|    {
 6208|  3.64M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.64M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|  1.82M|    {
 6150|  1.82M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.82M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.82M|        const auto t = type(id);
 6162|  1.82M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.82M|        basic_scan_arg<Context> arg;
 6167|  1.82M|        arg.m_type = t;
 6168|  1.82M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.82M, False: 0]
  ------------------
 6169|  1.82M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.82M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.82M|        return arg;
 6175|  1.82M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|  1.82M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.82M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.82M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.82M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.82M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|  1.82M|    {
 6212|  1.82M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.82M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|  3.45M|    {
 5966|  3.45M|        return m_type != detail::arg_type::none_type;
 5967|  3.45M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   276k|{
 9324|   276k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   276k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   276k|{
 9225|   276k|#define SCN_VISIT(Type)                                                \
 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   276k|    }                                                                  \
 9229|   276k|    else {                                                             \
 9230|   276k|        return vis(monostate_val);                                     \
 9231|   276k|    }
 9232|       |
 9233|   276k|    monostate monostate_val{};
 9234|       |
 9235|   276k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 276k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 276k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 276k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 276k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 276k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 276k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 276k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 276k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 276k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 276k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 276k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 276k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 276k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 276k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 276k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  88.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 88.7k, False: 187k]
  ------------------
 9267|  88.7k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  88.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.7k|    }                                                                  \
  |  | 9229|  88.7k|    else {                                                             \
  |  | 9230|  88.7k|        return vis(monostate_val);                                     \
  |  | 9231|  88.7k|    }
  ------------------
 9268|   181k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 92.9k, False: 183k]
  ------------------
 9269|   181k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   181k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   181k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   181k|    }                                                                  \
  |  | 9229|   181k|    else {                                                             \
  |  | 9230|   181k|        return vis(monostate_val);                                     \
  |  | 9231|   181k|    }
  ------------------
 9270|   276k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 94.6k, False: 181k]
  ------------------
 9271|   276k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9272|   276k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 276k]
  ------------------
 9273|   276k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9274|   276k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 276k]
  ------------------
 9275|   276k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9276|   276k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 276k]
  ------------------
 9277|   276k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9278|   276k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 276k]
  ------------------
 9279|   276k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9280|   276k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 276k]
  ------------------
 9281|   276k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9282|   276k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 276k]
  ------------------
 9283|   276k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   276k|    }                                                                  \
  |  | 9229|   276k|    else {                                                             \
  |  | 9230|   276k|        return vis(monostate_val);                                     \
  |  | 9231|   276k|    }
  ------------------
 9284|       |
 9285|   276k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 276k]
  ------------------
 9286|   276k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   276k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   276k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 276k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 276k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   276k|            SCN_CLANG_POP
 9303|   276k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.89M|{
 6011|  4.89M|    return arg.m_type;
 6012|  4.89M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.01M|{
 6023|  2.01M|    return arg.m_value;
 6024|  2.01M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   776k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   776k|    {
 8949|   776k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|  1.07M|{
 4691|  1.07M|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 1.07M]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|  1.07M|    return ranges::subrange{forward_iterator{this, 0},
 4696|  1.07M|                            ranges::default_sentinel};
 4697|  1.07M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  1.07M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  1.07M|    {
 4455|  1.07M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.07M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  1.07M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   302k|{
 9324|   302k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   302k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   302k|{
 9225|   302k|#define SCN_VISIT(Type)                                                \
 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   302k|    }                                                                  \
 9229|   302k|    else {                                                             \
 9230|   302k|        return vis(monostate_val);                                     \
 9231|   302k|    }
 9232|       |
 9233|   302k|    monostate monostate_val{};
 9234|       |
 9235|   302k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 302k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 302k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 302k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 302k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 302k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 302k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 302k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 302k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 302k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 302k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 302k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 302k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 302k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 302k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 302k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  96.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 96.4k, False: 205k]
  ------------------
 9267|  96.4k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  96.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  96.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  96.4k|    }                                                                  \
  |  | 9229|  96.4k|    else {                                                             \
  |  | 9230|  96.4k|        return vis(monostate_val);                                     \
  |  | 9231|  96.4k|    }
  ------------------
 9268|   198k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 102k, False: 199k]
  ------------------
 9269|   198k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   198k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   198k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   198k|    }                                                                  \
  |  | 9229|   198k|    else {                                                             \
  |  | 9230|   198k|        return vis(monostate_val);                                     \
  |  | 9231|   198k|    }
  ------------------
 9270|   302k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 103k, False: 198k]
  ------------------
 9271|   302k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9272|   302k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 302k]
  ------------------
 9273|   302k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9274|   302k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 302k]
  ------------------
 9275|   302k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9276|   302k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 302k]
  ------------------
 9277|   302k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9278|   302k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 302k]
  ------------------
 9279|   302k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9280|   302k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 302k]
  ------------------
 9281|   302k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9282|   302k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 302k]
  ------------------
 9283|   302k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   302k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   302k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   302k|    }                                                                  \
  |  | 9229|   302k|    else {                                                             \
  |  | 9230|   302k|        return vis(monostate_val);                                     \
  |  | 9231|   302k|    }
  ------------------
 9284|       |
 9285|   302k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 302k]
  ------------------
 9286|   302k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   302k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   302k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 302k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 302k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   302k|            SCN_CLANG_POP
 9303|   302k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   660k|        : m_format{format},
 6280|   660k|          m_next_arg_id{next_arg_id},
 6281|   660k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   660k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   660k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   660k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   660k|    {
 6287|   660k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   660k|    {
 3075|   660k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   660k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   660k|    {
 3041|   660k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   660k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   660k|{
 7796|   660k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   660k|    handler.check_args_exhausted();
 7798|   660k|    return handler.get_error();
 7799|   660k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   660k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   660k|    auto begin = format.data();
 7764|   660k|    auto it = begin;
 7765|   660k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.25M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 660k, False: 590k]
  ------------------
 7768|   660k|        const auto ch = *it++;
 7769|   660k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 660k, False: 0]
  ------------------
 7770|   660k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   660k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   660k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.2k, False: 590k]
  ------------------
 7774|  70.2k|                return;
 7775|  70.2k|            }
 7776|   660k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   660k|    }
 7787|       |
 7788|   590k|    handler.on_literal_text(begin, end);
 7789|   590k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   660k|{
 7693|   660k|    struct id_adapter {
 7694|   660k|        constexpr void operator()()
 7695|   660k|        {
 7696|   660k|            arg_id = handler.on_arg_id();
 7697|   660k|        }
 7698|   660k|        constexpr void operator()(std::size_t id)
 7699|   660k|        {
 7700|   660k|            arg_id = handler.on_arg_id(id);
 7701|   660k|        }
 7702|       |
 7703|   660k|        constexpr void on_error(const char* msg)
 7704|   660k|        {
 7705|   660k|            SCN_UNLIKELY_ATTR
 7706|   660k|            handler.on_error(msg);
 7707|   660k|        }
 7708|       |
 7709|   660k|        Handler& handler;
 7710|   660k|        std::size_t arg_id;
 7711|   660k|    };
 7712|       |
 7713|   660k|    ++begin;
 7714|   660k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   660k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 660k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   660k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 660k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   660k|    else {
 7726|   660k|        auto adapter = id_adapter{handler, 0};
 7727|   660k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   660k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   660k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 660k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   660k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 660k, False: 0]
  ------------------
 7738|   660k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   660k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   660k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  |  Branch (865:45): [True: 0, False: 660k]
  |  |  |  Branch (865:45): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   660k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   660k|    }
 7754|   660k|    return begin + 1;
 7755|   660k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|  1.43M|    {
 8847|  1.43M|        return m_args.get(id);
 8848|  1.43M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|  1.43M|    {
 6315|  1.43M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|  1.43M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  1.43M|        do_check_arg_id(id);
 6323|  1.43M|        return id;
 6324|  1.43M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|  1.43M|{
 6809|  1.43M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  1.43M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  1.43M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   660k|{
 7194|   660k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   660k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   660k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   660k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 660k, False: 0]
  |  Branch (7195:26): [True: 0, False: 660k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   660k|    handler();
 7200|   660k|    return begin;
 7201|   660k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   660k|        {
 7696|   660k|            arg_id = handler.on_arg_id();
 7697|   660k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|  1.43M|    {
 6310|  1.43M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  1.43M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|  2.87M|    {
 6299|  2.87M|        return m_format.data();
 6300|  2.87M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   660k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   660k|    {
 7874|   660k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   660k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   660k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   660k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   660k|{
 7609|   660k|    auto do_presentation = [&]() -> const CharT* {
 7610|   660k|        if (*begin == CharT{'['}) {
 7611|   660k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   660k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   660k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   660k|                return begin;
 7617|   660k|            }
 7618|   660k|            handler.on_character_set_string(set);
 7619|   660k|            return begin;
 7620|   660k|        }
 7621|   660k|        if (*begin == CharT{'/'}) {
 7622|   660k|            return parse_presentation_regex(begin, end, handler);
 7623|   660k|        }
 7624|   660k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   660k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   660k|            handler.on_error("Invalid type specifier in format string");
 7627|   660k|            return begin;
 7628|   660k|        }
 7629|   660k|        handler.on_type(type);
 7630|   660k|        return begin;
 7631|   660k|    };
 7632|       |
 7633|   660k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 660k, False: 0]
  |  Branch (7633:28): [True: 660k, False: 0]
  ------------------
 7634|   660k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 660k, False: 0]
  |  Branch (7634:36): [True: 476k, False: 184k]
  ------------------
 7635|   476k|        return do_presentation();
 7636|   476k|    }
 7637|       |
 7638|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   184k|    begin = parse_align(begin, end, handler);
 7644|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   184k|    begin = parse_width(begin, end, handler);
 7650|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   184k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 184k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   184k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 184k, False: 0]
  ------------------
 7669|   184k|        handler.on_localized();
 7670|   184k|        ++begin;
 7671|   184k|    }
 7672|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   184k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 184k, False: 0]
  |  Branch (7677:25): [True: 0, False: 184k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   184k|    return begin;
 7686|   184k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|  1.43M|{
 7258|  1.43M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 1.03M, False: 405k]
  |  Branch (7258:33): [True: 1.03M, False: 0]
  ------------------
 7259|  1.43M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 405k, False: 0]
  |  Branch (7259:33): [True: 405k, False: 0]
  ------------------
 7260|  1.43M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   476k|    auto do_presentation = [&]() -> const CharT* {
 7610|   476k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 476k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   476k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 476k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   476k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   476k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 476k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   476k|        handler.on_type(type);
 7630|   476k|        return begin;
 7631|   476k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|  1.03M|{
 7206|  1.03M|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.03M]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 1.03M]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 1.03M]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 1.03M]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 1.03M]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.03M]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.03M]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.03M]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 1.03M]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.03M]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   439k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 439k, False: 591k]
  ------------------
 7225|   439k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.03M]
  ------------------
 7226|   439k|            return presentation_type::float_hex;
 7227|  42.6k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 42.6k, False: 988k]
  ------------------
 7228|  42.6k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.03M]
  ------------------
 7229|  42.6k|            return presentation_type::float_scientific;
 7230|   211k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 211k, False: 819k]
  ------------------
 7231|   211k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.03M]
  ------------------
 7232|   211k|            return presentation_type::float_fixed;
 7233|   337k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 337k, False: 694k]
  ------------------
 7234|   337k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 1.03M]
  ------------------
 7235|   337k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 1.03M]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 1.03M]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 1.03M]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.03M]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 1.03M]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 1.03M]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 1.03M]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|  1.03M|    }
 7253|  1.03M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|   184k|{
 7283|   184k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   184k|    auto check_align = [](wchar_t ch) {
 7286|   184k|        switch (ch) {
 7287|   184k|            case L'<':
 7288|   184k|                return align_type::left;
 7289|   184k|            case L'>':
 7290|   184k|                return align_type::right;
 7291|   184k|            case L'^':
 7292|   184k|                return align_type::center;
 7293|   184k|            default:
 7294|   184k|                return align_type::none;
 7295|   184k|        }
 7296|   184k|    };
 7297|       |
 7298|   184k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   184k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  |  Branch (865:45): [True: 0, False: 184k]
  |  |  |  Branch (865:45): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7300|   184k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   184k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   184k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   184k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   184k|    const auto begin_before_fill = begin;
 7310|   184k|    begin += potential_fill_len;
 7311|       |
 7312|   184k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 184k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   184k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   184k|    const auto begin_after_fill = begin;
 7318|   184k|    ++begin;
 7319|       |
 7320|   184k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 184k, False: 0]
  ------------------
 7321|   184k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   184k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 184k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   184k|    }
 7329|       |
 7330|   184k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 184k, False: 0]
  ------------------
 7331|   184k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 184k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   184k|        return begin_before_fill;
 7336|   184k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   184k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|   405k|{
 7265|   405k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|   405k|    else {
 7270|   405k|        const auto lengths =
 7271|   405k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|   405k|            "\3\4";
 7273|   405k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|   405k|        return len;
 7275|   405k|    }
 7276|   405k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   368k|    auto check_align = [](wchar_t ch) {
 7286|   368k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 368k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 368k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 368k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   368k|            default:
  ------------------
  |  Branch (7293:13): [True: 368k, False: 0]
  ------------------
 7294|   368k|                return align_type::none;
 7295|   368k|        }
 7296|   368k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|   184k|{
 7348|   184k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   184k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 184k, False: 0]
  |  Branch (7350:33): [True: 0, False: 184k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   184k|    return begin;
 7361|   184k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|   184k|    {
 7879|   184k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   184k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 184k, False: 0]
  ------------------
 7881|   184k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 184k, False: 0]
  ------------------
 7882|   184k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 184k]
  ------------------
 7883|   184k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   184k|        Handler::on_localized();
 7891|   184k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7027|   626k|    {
 7028|   626k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7029|   626k|            m_specs.localized = true;
 7030|       |        }
 7031|       |        else {
 7032|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7033|       |        }
 7034|   626k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   660k|{
 9324|   660k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   660k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   660k|{
 9225|   660k|#define SCN_VISIT(Type)                                                \
 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   660k|    }                                                                  \
 9229|   660k|    else {                                                             \
 9230|   660k|        return vis(monostate_val);                                     \
 9231|   660k|    }
 9232|       |
 9233|   660k|    monostate monostate_val{};
 9234|       |
 9235|   660k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 660k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 660k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 660k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 660k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 660k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 660k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 660k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 660k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 660k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 660k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 660k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 660k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 660k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 660k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 660k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   214k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 214k, False: 446k]
  ------------------
 9267|   214k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   214k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   214k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   214k|    }                                                                  \
  |  | 9229|   214k|    else {                                                             \
  |  | 9230|   214k|        return vis(monostate_val);                                     \
  |  | 9231|   214k|    }
  ------------------
 9268|   436k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 221k, False: 438k]
  ------------------
 9269|   436k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   436k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   436k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   436k|    }                                                                  \
  |  | 9229|   436k|    else {                                                             \
  |  | 9230|   436k|        return vis(monostate_val);                                     \
  |  | 9231|   436k|    }
  ------------------
 9270|   660k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 224k, False: 436k]
  ------------------
 9271|   660k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9272|   660k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 660k]
  ------------------
 9273|   660k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9274|   660k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 660k]
  ------------------
 9275|   660k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9276|   660k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 660k]
  ------------------
 9277|   660k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9278|   660k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 660k]
  ------------------
 9279|   660k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9280|   660k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 660k]
  ------------------
 9281|   660k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9282|   660k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 660k]
  ------------------
 9283|   660k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   660k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   660k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   660k|    }                                                                  \
  |  | 9229|   660k|    else {                                                             \
  |  | 9230|   660k|        return vis(monostate_val);                                     \
  |  | 9231|   660k|    }
  ------------------
 9284|       |
 9285|   660k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 660k]
  ------------------
 9286|   660k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   660k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   660k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 660k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 660k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   660k|            SCN_CLANG_POP
 9303|   660k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|   776k|        : m_format{format},
 6280|   776k|          m_next_arg_id{next_arg_id},
 6281|   776k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   776k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   776k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   776k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   776k|    {
 6287|   776k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   776k|{
 7796|   776k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   776k|    handler.check_args_exhausted();
 7798|   776k|    return handler.get_error();
 7799|   776k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   776k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   776k|    auto begin = format.data();
 7764|   776k|    auto it = begin;
 7765|   776k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.48M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 776k, False: 706k]
  ------------------
 7768|   776k|        const auto ch = *it++;
 7769|   776k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 776k, False: 0]
  ------------------
 7770|   776k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   776k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   776k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.2k, False: 706k]
  ------------------
 7774|  70.2k|                return;
 7775|  70.2k|            }
 7776|   776k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   776k|    }
 7787|       |
 7788|   706k|    handler.on_literal_text(begin, end);
 7789|   706k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   706k|    {
 8986|   706k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   706k|    static_cast<    \
  |  |  935|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   706k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|   776k|{
 7693|   776k|    struct id_adapter {
 7694|   776k|        constexpr void operator()()
 7695|   776k|        {
 7696|   776k|            arg_id = handler.on_arg_id();
 7697|   776k|        }
 7698|   776k|        constexpr void operator()(std::size_t id)
 7699|   776k|        {
 7700|   776k|            arg_id = handler.on_arg_id(id);
 7701|   776k|        }
 7702|       |
 7703|   776k|        constexpr void on_error(const char* msg)
 7704|   776k|        {
 7705|   776k|            SCN_UNLIKELY_ATTR
 7706|   776k|            handler.on_error(msg);
 7707|   776k|        }
 7708|       |
 7709|   776k|        Handler& handler;
 7710|   776k|        std::size_t arg_id;
 7711|   776k|    };
 7712|       |
 7713|   776k|    ++begin;
 7714|   776k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   776k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 776k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   776k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 776k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   776k|    else {
 7726|   776k|        auto adapter = id_adapter{handler, 0};
 7727|   776k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   776k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   776k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 776k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   776k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 776k, False: 0]
  ------------------
 7738|   776k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   776k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   776k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  |  Branch (865:45): [True: 0, False: 776k]
  |  |  |  Branch (865:45): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   776k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   776k|    }
 7754|   776k|    return begin + 1;
 7755|   776k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   776k|{
 7194|   776k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   776k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 776k, False: 0]
  |  Branch (7195:26): [True: 0, False: 776k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   776k|    handler();
 7200|   776k|    return begin;
 7201|   776k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   776k|        {
 7696|   776k|            arg_id = handler.on_arg_id();
 7697|   776k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   776k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   776k|    {
 7874|   776k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   776k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|   776k|{
 7609|   776k|    auto do_presentation = [&]() -> const CharT* {
 7610|   776k|        if (*begin == CharT{'['}) {
 7611|   776k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   776k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   776k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   776k|                return begin;
 7617|   776k|            }
 7618|   776k|            handler.on_character_set_string(set);
 7619|   776k|            return begin;
 7620|   776k|        }
 7621|   776k|        if (*begin == CharT{'/'}) {
 7622|   776k|            return parse_presentation_regex(begin, end, handler);
 7623|   776k|        }
 7624|   776k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   776k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   776k|            handler.on_error("Invalid type specifier in format string");
 7627|   776k|            return begin;
 7628|   776k|        }
 7629|   776k|        handler.on_type(type);
 7630|   776k|        return begin;
 7631|   776k|    };
 7632|       |
 7633|   776k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 776k, False: 0]
  |  Branch (7633:28): [True: 776k, False: 0]
  ------------------
 7634|   776k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 776k, False: 0]
  |  Branch (7634:36): [True: 554k, False: 221k]
  ------------------
 7635|   554k|        return do_presentation();
 7636|   554k|    }
 7637|       |
 7638|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   221k|    begin = parse_align(begin, end, handler);
 7644|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   221k|    begin = parse_width(begin, end, handler);
 7650|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   221k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 221k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   221k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 221k, False: 0]
  ------------------
 7669|   221k|        handler.on_localized();
 7670|   221k|        ++begin;
 7671|   221k|    }
 7672|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   221k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 221k, False: 0]
  |  Branch (7677:25): [True: 0, False: 221k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   221k|    return begin;
 7686|   221k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   554k|    auto do_presentation = [&]() -> const CharT* {
 7610|   554k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 554k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   554k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 554k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   554k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   554k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 554k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   554k|        handler.on_type(type);
 7630|   554k|        return begin;
 7631|   554k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|   221k|{
 7283|   221k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   221k|    auto check_align = [](wchar_t ch) {
 7286|   221k|        switch (ch) {
 7287|   221k|            case L'<':
 7288|   221k|                return align_type::left;
 7289|   221k|            case L'>':
 7290|   221k|                return align_type::right;
 7291|   221k|            case L'^':
 7292|   221k|                return align_type::center;
 7293|   221k|            default:
 7294|   221k|                return align_type::none;
 7295|   221k|        }
 7296|   221k|    };
 7297|       |
 7298|   221k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   221k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  |  Branch (865:45): [True: 0, False: 221k]
  |  |  |  Branch (865:45): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7300|   221k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   221k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   221k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   221k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   221k|    const auto begin_before_fill = begin;
 7310|   221k|    begin += potential_fill_len;
 7311|       |
 7312|   221k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 221k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   221k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   221k|    const auto begin_after_fill = begin;
 7318|   221k|    ++begin;
 7319|       |
 7320|   221k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 221k, False: 0]
  ------------------
 7321|   221k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   221k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 221k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   221k|    }
 7329|       |
 7330|   221k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 221k, False: 0]
  ------------------
 7331|   221k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 221k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   221k|        return begin_before_fill;
 7336|   221k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   221k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   443k|    auto check_align = [](wchar_t ch) {
 7286|   443k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 443k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 443k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 443k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   443k|            default:
  ------------------
  |  Branch (7293:13): [True: 443k, False: 0]
  ------------------
 7294|   443k|                return align_type::none;
 7295|   443k|        }
 7296|   443k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|   221k|{
 7348|   221k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   221k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 221k, False: 0]
  |  Branch (7350:33): [True: 0, False: 221k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   221k|    return begin;
 7361|   221k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|   221k|    {
 7879|   221k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   221k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 221k, False: 0]
  ------------------
 7881|   221k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 221k, False: 0]
  ------------------
 7882|   221k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 221k]
  ------------------
 7883|   221k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   221k|        Handler::on_localized();
 7891|   221k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   776k|{
 9324|   776k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   776k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   776k|{
 9225|   776k|#define SCN_VISIT(Type)                                                \
 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   776k|    }                                                                  \
 9229|   776k|    else {                                                             \
 9230|   776k|        return vis(monostate_val);                                     \
 9231|   776k|    }
 9232|       |
 9233|   776k|    monostate monostate_val{};
 9234|       |
 9235|   776k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 776k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 776k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 776k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 776k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 776k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 776k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 776k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 776k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 776k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 776k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 776k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 776k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 776k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 776k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 776k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   249k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 249k, False: 527k]
  ------------------
 9267|   249k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   249k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   249k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   249k|    }                                                                  \
  |  | 9229|   249k|    else {                                                             \
  |  | 9230|   249k|        return vis(monostate_val);                                     \
  |  | 9231|   249k|    }
  ------------------
 9268|   511k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 262k, False: 514k]
  ------------------
 9269|   511k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   511k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   511k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   511k|    }                                                                  \
  |  | 9229|   511k|    else {                                                             \
  |  | 9230|   511k|        return vis(monostate_val);                                     \
  |  | 9231|   511k|    }
  ------------------
 9270|   776k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 264k, False: 511k]
  ------------------
 9271|   776k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9272|   776k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 776k]
  ------------------
 9273|   776k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9274|   776k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 776k]
  ------------------
 9275|   776k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9276|   776k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 776k]
  ------------------
 9277|   776k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9278|   776k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 776k]
  ------------------
 9279|   776k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9280|   776k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 776k]
  ------------------
 9281|   776k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9282|   776k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 776k]
  ------------------
 9283|   776k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   776k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   776k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   776k|    }                                                                  \
  |  | 9229|   776k|    else {                                                             \
  |  | 9230|   776k|        return vis(monostate_val);                                     \
  |  | 9231|   776k|    }
  ------------------
 9284|       |
 9285|   776k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 776k]
  ------------------
 9286|   776k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   776k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   776k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 776k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 776k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   776k|            SCN_CLANG_POP
 9303|   776k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  91.2k|    {
 4352|  91.2k|        return sync(0);
 4353|  91.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.11M|    {
 6182|  1.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.11M|        return static_cast<std::size_t>(m_desc &
 6187|  1.11M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  2.23M|    {
 6208|  2.23M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  2.23M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.11M|    {
 6150|  1.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.11M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.11M|        const auto t = type(id);
 6162|  1.11M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.11M|        basic_scan_arg<Context> arg;
 6167|  1.11M|        arg.m_type = t;
 6168|  1.11M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.11M, False: 0]
  ------------------
 6169|  1.11M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.11M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.11M|        return arg;
 6175|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.11M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.11M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.11M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.11M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.11M|    {
 6212|  1.11M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.11M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  2.12M|    {
 5966|  2.12M|        return m_type != detail::arg_type::none_type;
 5967|  2.12M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   165k|{
 9324|   165k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   165k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   165k|{
 9225|   165k|#define SCN_VISIT(Type)                                                \
 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   165k|    }                                                                  \
 9229|   165k|    else {                                                             \
 9230|   165k|        return vis(monostate_val);                                     \
 9231|   165k|    }
 9232|       |
 9233|   165k|    monostate monostate_val{};
 9234|       |
 9235|   165k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 165k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 165k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 165k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 165k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 165k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 165k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 165k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 165k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 165k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 165k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 165k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 165k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 165k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 165k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 165k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  47.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 47.6k, False: 117k]
  ------------------
 9267|  47.6k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  47.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  47.6k|    }                                                                  \
  |  | 9229|  47.6k|    else {                                                             \
  |  | 9230|  47.6k|        return vis(monostate_val);                                     \
  |  | 9231|  47.6k|    }
  ------------------
 9268|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 57.9k, False: 107k]
  ------------------
 9269|   105k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   105k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   105k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   105k|    }                                                                  \
  |  | 9229|   105k|    else {                                                             \
  |  | 9230|   105k|        return vis(monostate_val);                                     \
  |  | 9231|   105k|    }
  ------------------
 9270|   165k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 59.7k, False: 105k]
  ------------------
 9271|   165k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9272|   165k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 165k]
  ------------------
 9273|   165k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9274|   165k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 165k]
  ------------------
 9275|   165k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9276|   165k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 165k]
  ------------------
 9277|   165k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9278|   165k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 165k]
  ------------------
 9279|   165k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9280|   165k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 165k]
  ------------------
 9281|   165k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9282|   165k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 165k]
  ------------------
 9283|   165k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9284|       |
 9285|   165k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 165k]
  ------------------
 9286|   165k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   165k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   165k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 165k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 165k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   165k|            SCN_CLANG_POP
 9303|   165k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  3.01M|{
 6011|  3.01M|    return arg.m_type;
 6012|  3.01M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  1.22M|{
 6023|  1.22M|    return arg.m_value;
 6024|  1.22M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   447k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   447k|    {
 8949|   447k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   448k|        : m_format{format},
 6280|   448k|          m_next_arg_id{next_arg_id},
 6281|   448k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   448k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   448k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   448k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   448k|    {
 6287|   448k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   448k|    {
 3075|   448k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   448k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   448k|    {
 3041|   448k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   448k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   448k|{
 7796|   448k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   448k|    handler.check_args_exhausted();
 7798|   448k|    return handler.get_error();
 7799|   448k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   448k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   448k|    auto begin = format.data();
 7764|   448k|    auto it = begin;
 7765|   448k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   755k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 448k, False: 307k]
  ------------------
 7768|   448k|        const auto ch = *it++;
 7769|   448k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 448k, False: 0]
  ------------------
 7770|   448k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   448k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   448k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 140k, False: 307k]
  ------------------
 7774|   140k|                return;
 7775|   140k|            }
 7776|   448k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   448k|    }
 7787|       |
 7788|   307k|    handler.on_literal_text(begin, end);
 7789|   307k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   448k|{
 7693|   448k|    struct id_adapter {
 7694|   448k|        constexpr void operator()()
 7695|   448k|        {
 7696|   448k|            arg_id = handler.on_arg_id();
 7697|   448k|        }
 7698|   448k|        constexpr void operator()(std::size_t id)
 7699|   448k|        {
 7700|   448k|            arg_id = handler.on_arg_id(id);
 7701|   448k|        }
 7702|       |
 7703|   448k|        constexpr void on_error(const char* msg)
 7704|   448k|        {
 7705|   448k|            SCN_UNLIKELY_ATTR
 7706|   448k|            handler.on_error(msg);
 7707|   448k|        }
 7708|       |
 7709|   448k|        Handler& handler;
 7710|   448k|        std::size_t arg_id;
 7711|   448k|    };
 7712|       |
 7713|   448k|    ++begin;
 7714|   448k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   448k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 448k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   448k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 448k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   448k|    else {
 7726|   448k|        auto adapter = id_adapter{handler, 0};
 7727|   448k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   448k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   448k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 448k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   448k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 448k, False: 0]
  ------------------
 7738|   448k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   448k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   448k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  |  Branch (865:45): [True: 0, False: 448k]
  |  |  |  Branch (865:45): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   448k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   448k|    }
 7754|   448k|    return begin + 1;
 7755|   448k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   896k|    {
 8847|   896k|        return m_args.get(id);
 8848|   896k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   896k|    {
 6315|   896k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 896k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   896k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   896k|        do_check_arg_id(id);
 6323|   896k|        return id;
 6324|   896k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   896k|{
 6809|   896k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   896k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   896k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   448k|{
 7194|   448k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   448k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 448k, False: 0]
  |  Branch (7195:26): [True: 0, False: 448k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   448k|    handler();
 7200|   448k|    return begin;
 7201|   448k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   448k|        {
 7696|   448k|            arg_id = handler.on_arg_id();
 7697|   448k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   896k|    {
 6310|   896k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   896k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   613k|{
 4691|   613k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 613k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   613k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   613k|                            ranges::default_sentinel};
 4697|   613k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   613k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   613k|    {
 4455|   613k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   613k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   613k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.79M|    {
 6299|  1.79M|        return m_format.data();
 6300|  1.79M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   448k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   448k|    {
 7874|   448k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   448k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   448k|{
 7609|   448k|    auto do_presentation = [&]() -> const CharT* {
 7610|   448k|        if (*begin == CharT{'['}) {
 7611|   448k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   448k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   448k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   448k|                return begin;
 7617|   448k|            }
 7618|   448k|            handler.on_character_set_string(set);
 7619|   448k|            return begin;
 7620|   448k|        }
 7621|   448k|        if (*begin == CharT{'/'}) {
 7622|   448k|            return parse_presentation_regex(begin, end, handler);
 7623|   448k|        }
 7624|   448k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   448k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   448k|            handler.on_error("Invalid type specifier in format string");
 7627|   448k|            return begin;
 7628|   448k|        }
 7629|   448k|        handler.on_type(type);
 7630|   448k|        return begin;
 7631|   448k|    };
 7632|       |
 7633|   448k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 448k, False: 0]
  |  Branch (7633:28): [True: 448k, False: 0]
  ------------------
 7634|   448k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 448k, False: 0]
  |  Branch (7634:36): [True: 337k, False: 110k]
  ------------------
 7635|   337k|        return do_presentation();
 7636|   337k|    }
 7637|       |
 7638|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   110k|    begin = parse_align(begin, end, handler);
 7644|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   110k|    begin = parse_width(begin, end, handler);
 7650|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 110k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 110k, False: 0]
  ------------------
 7669|   110k|        handler.on_localized();
 7670|   110k|        ++begin;
 7671|   110k|    }
 7672|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 110k, False: 0]
  |  Branch (7677:25): [True: 0, False: 110k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   110k|    return begin;
 7686|   110k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   896k|{
 7258|   896k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 675k, False: 220k]
  |  Branch (7258:33): [True: 675k, False: 0]
  ------------------
 7259|   896k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 220k, False: 0]
  |  Branch (7259:33): [True: 220k, False: 0]
  ------------------
 7260|   896k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   337k|    auto do_presentation = [&]() -> const CharT* {
 7610|   337k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 337k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   337k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 337k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   337k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   337k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   337k|        handler.on_type(type);
 7630|   337k|        return begin;
 7631|   337k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   675k|{
 7206|   675k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 675k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 675k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 675k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 675k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 675k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 675k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 675k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 675k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 675k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 675k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   243k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 243k, False: 432k]
  ------------------
 7225|   243k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 675k]
  ------------------
 7226|   243k|            return presentation_type::float_hex;
 7227|  58.5k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 58.5k, False: 617k]
  ------------------
 7228|  58.5k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 675k]
  ------------------
 7229|  58.5k|            return presentation_type::float_scientific;
 7230|   169k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 169k, False: 505k]
  ------------------
 7231|   169k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 675k]
  ------------------
 7232|   169k|            return presentation_type::float_fixed;
 7233|   204k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 204k, False: 471k]
  ------------------
 7234|   204k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 675k]
  ------------------
 7235|   204k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 675k]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 675k]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 675k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 675k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 675k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 675k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 675k]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|   675k|    }
 7253|   675k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|   110k|{
 7283|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   110k|    auto check_align = [](wchar_t ch) {
 7286|   110k|        switch (ch) {
 7287|   110k|            case L'<':
 7288|   110k|                return align_type::left;
 7289|   110k|            case L'>':
 7290|   110k|                return align_type::right;
 7291|   110k|            case L'^':
 7292|   110k|                return align_type::center;
 7293|   110k|            default:
 7294|   110k|                return align_type::none;
 7295|   110k|        }
 7296|   110k|    };
 7297|       |
 7298|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7300|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   110k|    const auto begin_before_fill = begin;
 7310|   110k|    begin += potential_fill_len;
 7311|       |
 7312|   110k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 110k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   110k|    const auto begin_after_fill = begin;
 7318|   110k|    ++begin;
 7319|       |
 7320|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 110k, False: 0]
  ------------------
 7321|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 110k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   110k|    }
 7329|       |
 7330|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 110k, False: 0]
  ------------------
 7331|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 110k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   110k|        return begin_before_fill;
 7336|   110k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   110k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|   220k|{
 7265|   220k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|   220k|    if constexpr (sizeof(CharT) != 1) {
 7267|   220k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|   220k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   220k|    auto check_align = [](wchar_t ch) {
 7286|   220k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 220k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 220k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 220k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   220k|            default:
  ------------------
  |  Branch (7293:13): [True: 220k, False: 0]
  ------------------
 7294|   220k|                return align_type::none;
 7295|   220k|        }
 7296|   220k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|   110k|{
 7348|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 110k, False: 0]
  |  Branch (7350:33): [True: 0, False: 110k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   110k|    return begin;
 7361|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|   110k|    {
 7879|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 110k, False: 0]
  ------------------
 7881|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 110k, False: 0]
  ------------------
 7882|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 110k]
  ------------------
 7883|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   110k|        Handler::on_localized();
 7891|   110k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   448k|{
 9324|   448k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   448k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   448k|{
 9225|   448k|#define SCN_VISIT(Type)                                                \
 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   448k|    }                                                                  \
 9229|   448k|    else {                                                             \
 9230|   448k|        return vis(monostate_val);                                     \
 9231|   448k|    }
 9232|       |
 9233|   448k|    monostate monostate_val{};
 9234|       |
 9235|   448k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 448k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 448k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 448k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 448k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 448k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 448k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 448k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 448k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 448k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 448k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 448k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 448k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 448k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 448k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 448k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   139k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 139k, False: 308k]
  ------------------
 9267|   139k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   139k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   139k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   139k|    }                                                                  \
  |  | 9229|   139k|    else {                                                             \
  |  | 9230|   139k|        return vis(monostate_val);                                     \
  |  | 9231|   139k|    }
  ------------------
 9268|   292k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 153k, False: 295k]
  ------------------
 9269|   292k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   292k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   292k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   292k|    }                                                                  \
  |  | 9229|   292k|    else {                                                             \
  |  | 9230|   292k|        return vis(monostate_val);                                     \
  |  | 9231|   292k|    }
  ------------------
 9270|   448k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 155k, False: 292k]
  ------------------
 9271|   448k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9272|   448k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 448k]
  ------------------
 9273|   448k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9274|   448k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 448k]
  ------------------
 9275|   448k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9276|   448k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 448k]
  ------------------
 9277|   448k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9278|   448k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 448k]
  ------------------
 9279|   448k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9280|   448k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 448k]
  ------------------
 9281|   448k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9282|   448k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 448k]
  ------------------
 9283|   448k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   448k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   448k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   448k|    }                                                                  \
  |  | 9229|   448k|    else {                                                             \
  |  | 9230|   448k|        return vis(monostate_val);                                     \
  |  | 9231|   448k|    }
  ------------------
 9284|       |
 9285|   448k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 448k]
  ------------------
 9286|   448k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   448k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   448k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 448k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 448k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   448k|            SCN_CLANG_POP
 9303|   448k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   165k|{
 9324|   165k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   165k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   165k|{
 9225|   165k|#define SCN_VISIT(Type)                                                \
 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   165k|    }                                                                  \
 9229|   165k|    else {                                                             \
 9230|   165k|        return vis(monostate_val);                                     \
 9231|   165k|    }
 9232|       |
 9233|   165k|    monostate monostate_val{};
 9234|       |
 9235|   165k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 165k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 165k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 165k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 165k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 165k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 165k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 165k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 165k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 165k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 165k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 165k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 165k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 165k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 165k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 165k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  47.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 47.5k, False: 117k]
  ------------------
 9267|  47.5k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  47.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  47.5k|    }                                                                  \
  |  | 9229|  47.5k|    else {                                                             \
  |  | 9230|  47.5k|        return vis(monostate_val);                                     \
  |  | 9231|  47.5k|    }
  ------------------
 9268|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 57.9k, False: 107k]
  ------------------
 9269|   105k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   105k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   105k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   105k|    }                                                                  \
  |  | 9229|   105k|    else {                                                             \
  |  | 9230|   105k|        return vis(monostate_val);                                     \
  |  | 9231|   105k|    }
  ------------------
 9270|   165k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 59.6k, False: 105k]
  ------------------
 9271|   165k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9272|   165k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 165k]
  ------------------
 9273|   165k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9274|   165k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 165k]
  ------------------
 9275|   165k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9276|   165k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 165k]
  ------------------
 9277|   165k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9278|   165k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 165k]
  ------------------
 9279|   165k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9280|   165k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 165k]
  ------------------
 9281|   165k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9282|   165k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 165k]
  ------------------
 9283|   165k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   165k|    }                                                                  \
  |  | 9229|   165k|    else {                                                             \
  |  | 9230|   165k|        return vis(monostate_val);                                     \
  |  | 9231|   165k|    }
  ------------------
 9284|       |
 9285|   165k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 165k]
  ------------------
 9286|   165k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   165k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   165k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 165k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 165k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   165k|            SCN_CLANG_POP
 9303|   165k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   447k|        : m_format{format},
 6280|   447k|          m_next_arg_id{next_arg_id},
 6281|   447k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   447k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   447k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   447k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   447k|    {
 6287|   447k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   447k|{
 7796|   447k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   447k|    handler.check_args_exhausted();
 7798|   447k|    return handler.get_error();
 7799|   447k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   447k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   447k|    auto begin = format.data();
 7764|   447k|    auto it = begin;
 7765|   447k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   755k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 447k, False: 307k]
  ------------------
 7768|   447k|        const auto ch = *it++;
 7769|   447k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 447k, False: 0]
  ------------------
 7770|   447k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   447k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   447k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 140k, False: 307k]
  ------------------
 7774|   140k|                return;
 7775|   140k|            }
 7776|   447k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   447k|    }
 7787|       |
 7788|   307k|    handler.on_literal_text(begin, end);
 7789|   307k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   307k|    {
 8986|   307k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   307k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   447k|{
 7693|   447k|    struct id_adapter {
 7694|   447k|        constexpr void operator()()
 7695|   447k|        {
 7696|   447k|            arg_id = handler.on_arg_id();
 7697|   447k|        }
 7698|   447k|        constexpr void operator()(std::size_t id)
 7699|   447k|        {
 7700|   447k|            arg_id = handler.on_arg_id(id);
 7701|   447k|        }
 7702|       |
 7703|   447k|        constexpr void on_error(const char* msg)
 7704|   447k|        {
 7705|   447k|            SCN_UNLIKELY_ATTR
 7706|   447k|            handler.on_error(msg);
 7707|   447k|        }
 7708|       |
 7709|   447k|        Handler& handler;
 7710|   447k|        std::size_t arg_id;
 7711|   447k|    };
 7712|       |
 7713|   447k|    ++begin;
 7714|   447k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   447k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 447k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   447k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 447k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   447k|    else {
 7726|   447k|        auto adapter = id_adapter{handler, 0};
 7727|   447k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   447k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   447k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 447k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   447k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 447k, False: 0]
  ------------------
 7738|   447k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   447k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   447k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  |  Branch (865:45): [True: 0, False: 447k]
  |  |  |  Branch (865:45): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   447k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   447k|    }
 7754|   447k|    return begin + 1;
 7755|   447k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   447k|{
 7194|   447k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   447k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 447k, False: 0]
  |  Branch (7195:26): [True: 0, False: 447k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   447k|    handler();
 7200|   447k|    return begin;
 7201|   447k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   447k|        {
 7696|   447k|            arg_id = handler.on_arg_id();
 7697|   447k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   447k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   447k|    {
 7874|   447k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   447k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   447k|{
 7609|   447k|    auto do_presentation = [&]() -> const CharT* {
 7610|   447k|        if (*begin == CharT{'['}) {
 7611|   447k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   447k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   447k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   447k|                return begin;
 7617|   447k|            }
 7618|   447k|            handler.on_character_set_string(set);
 7619|   447k|            return begin;
 7620|   447k|        }
 7621|   447k|        if (*begin == CharT{'/'}) {
 7622|   447k|            return parse_presentation_regex(begin, end, handler);
 7623|   447k|        }
 7624|   447k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   447k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   447k|            handler.on_error("Invalid type specifier in format string");
 7627|   447k|            return begin;
 7628|   447k|        }
 7629|   447k|        handler.on_type(type);
 7630|   447k|        return begin;
 7631|   447k|    };
 7632|       |
 7633|   447k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 447k, False: 0]
  |  Branch (7633:28): [True: 447k, False: 0]
  ------------------
 7634|   447k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 447k, False: 0]
  |  Branch (7634:36): [True: 337k, False: 110k]
  ------------------
 7635|   337k|        return do_presentation();
 7636|   337k|    }
 7637|       |
 7638|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   110k|    begin = parse_align(begin, end, handler);
 7644|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   110k|    begin = parse_width(begin, end, handler);
 7650|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 110k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 110k, False: 0]
  ------------------
 7669|   110k|        handler.on_localized();
 7670|   110k|        ++begin;
 7671|   110k|    }
 7672|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 110k, False: 0]
  |  Branch (7677:25): [True: 0, False: 110k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   110k|    return begin;
 7686|   110k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   337k|    auto do_presentation = [&]() -> const CharT* {
 7610|   337k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 337k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   337k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 337k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   337k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   337k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   337k|        handler.on_type(type);
 7630|   337k|        return begin;
 7631|   337k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|   110k|{
 7283|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   110k|    auto check_align = [](wchar_t ch) {
 7286|   110k|        switch (ch) {
 7287|   110k|            case L'<':
 7288|   110k|                return align_type::left;
 7289|   110k|            case L'>':
 7290|   110k|                return align_type::right;
 7291|   110k|            case L'^':
 7292|   110k|                return align_type::center;
 7293|   110k|            default:
 7294|   110k|                return align_type::none;
 7295|   110k|        }
 7296|   110k|    };
 7297|       |
 7298|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7300|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   110k|    const auto begin_before_fill = begin;
 7310|   110k|    begin += potential_fill_len;
 7311|       |
 7312|   110k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 110k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   110k|    const auto begin_after_fill = begin;
 7318|   110k|    ++begin;
 7319|       |
 7320|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 110k, False: 0]
  ------------------
 7321|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 110k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   110k|    }
 7329|       |
 7330|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 110k, False: 0]
  ------------------
 7331|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 110k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   110k|        return begin_before_fill;
 7336|   110k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   110k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   220k|    auto check_align = [](wchar_t ch) {
 7286|   220k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 220k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 220k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 220k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   220k|            default:
  ------------------
  |  Branch (7293:13): [True: 220k, False: 0]
  ------------------
 7294|   220k|                return align_type::none;
 7295|   220k|        }
 7296|   220k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|   110k|{
 7348|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 110k, False: 0]
  |  Branch (7350:33): [True: 0, False: 110k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   110k|    return begin;
 7361|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|   110k|    {
 7879|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 110k, False: 0]
  ------------------
 7881|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 110k, False: 0]
  ------------------
 7882|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 110k]
  ------------------
 7883|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   110k|        Handler::on_localized();
 7891|   110k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   447k|{
 9324|   447k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   447k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   447k|{
 9225|   447k|#define SCN_VISIT(Type)                                                \
 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   447k|    }                                                                  \
 9229|   447k|    else {                                                             \
 9230|   447k|        return vis(monostate_val);                                     \
 9231|   447k|    }
 9232|       |
 9233|   447k|    monostate monostate_val{};
 9234|       |
 9235|   447k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 447k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 447k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 447k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 447k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 447k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 447k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 447k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 447k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 447k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 447k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 447k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 447k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 447k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 447k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 447k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   139k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 139k, False: 308k]
  ------------------
 9267|   139k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   139k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   139k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   139k|    }                                                                  \
  |  | 9229|   139k|    else {                                                             \
  |  | 9230|   139k|        return vis(monostate_val);                                     \
  |  | 9231|   139k|    }
  ------------------
 9268|   292k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 153k, False: 294k]
  ------------------
 9269|   292k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   292k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   292k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   292k|    }                                                                  \
  |  | 9229|   292k|    else {                                                             \
  |  | 9230|   292k|        return vis(monostate_val);                                     \
  |  | 9231|   292k|    }
  ------------------
 9270|   447k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 155k, False: 292k]
  ------------------
 9271|   447k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9272|   447k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 447k]
  ------------------
 9273|   447k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9274|   447k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 447k]
  ------------------
 9275|   447k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9276|   447k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 447k]
  ------------------
 9277|   447k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9278|   447k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 447k]
  ------------------
 9279|   447k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9280|   447k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 447k]
  ------------------
 9281|   447k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9282|   447k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 447k]
  ------------------
 9283|   447k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   447k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   447k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   447k|    }                                                                  \
  |  | 9229|   447k|    else {                                                             \
  |  | 9230|   447k|        return vis(monostate_val);                                     \
  |  | 9231|   447k|    }
  ------------------
 9284|       |
 9285|   447k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 447k]
  ------------------
 9286|   447k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   447k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   447k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 447k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 447k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   447k|            SCN_CLANG_POP
 9303|   447k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   182k|    {
 4352|   182k|        return sync(0);
 4353|   182k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|   192k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   110k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  85.5k|{
   89|  85.5k|    auto result = make_scan_result<Source, Args...>();
   90|  85.5k|    fill_scan_result(result,
   91|  85.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.5k|    return result;
   94|  85.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   279k|{
   44|   279k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   279k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  85.5k|{
  131|  85.5k|    auto result = make_scan_result<Source, Args...>();
  132|  85.5k|    fill_scan_result(result,
  133|  85.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.5k|    return result;
  136|  85.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   279k|{
   60|   279k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   279k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  55.1k|{
   72|  55.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.1k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  95.9k|{
   89|  95.9k|    auto result = make_scan_result<Source, Args...>();
   90|  95.9k|    fill_scan_result(result,
   91|  95.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  95.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  95.9k|    return result;
   94|  95.9k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  95.9k|{
  131|  95.9k|    auto result = make_scan_result<Source, Args...>();
  132|  95.9k|    fill_scan_result(result,
  133|  95.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  95.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  95.9k|    return result;
  136|  95.9k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.3k|{
  171|  19.3k|    auto result = make_scan_result<Source, T>();
  172|  19.3k|    fill_scan_result(
  173|  19.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.3k|    return result;
  176|  19.3k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  97.7k|{
   89|  97.7k|    auto result = make_scan_result<Source, Args...>();
   90|  97.7k|    fill_scan_result(result,
   91|  97.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.7k|    return result;
   94|  97.7k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  97.7k|{
  131|  97.7k|    auto result = make_scan_result<Source, Args...>();
  132|  97.7k|    fill_scan_result(result,
  133|  97.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.7k|    return result;
  136|  97.7k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.9k|{
  171|  19.9k|    auto result = make_scan_result<Source, T>();
  172|  19.9k|    fill_scan_result(
  173|  19.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.9k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.9k|    return result;
  176|  19.9k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  85.4k|{
   89|  85.4k|    auto result = make_scan_result<Source, Args...>();
   90|  85.4k|    fill_scan_result(result,
   91|  85.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.4k|    return result;
   94|  85.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   279k|{
   44|   279k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   279k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  85.4k|{
  131|  85.4k|    auto result = make_scan_result<Source, Args...>();
  132|  85.4k|    fill_scan_result(result,
  133|  85.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.4k|    return result;
  136|  85.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   279k|{
   60|   279k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   279k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  55.0k|{
   72|  55.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.0k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  95.8k|{
   89|  95.8k|    auto result = make_scan_result<Source, Args...>();
   90|  95.8k|    fill_scan_result(result,
   91|  95.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  95.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  95.8k|    return result;
   94|  95.8k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  95.8k|{
  131|  95.8k|    auto result = make_scan_result<Source, Args...>();
  132|  95.8k|    fill_scan_result(result,
  133|  95.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  95.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  95.8k|    return result;
  136|  95.8k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.3k|{
  171|  19.3k|    auto result = make_scan_result<Source, T>();
  172|  19.3k|    fill_scan_result(
  173|  19.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.3k|    return result;
  176|  19.3k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  97.6k|{
   89|  97.6k|    auto result = make_scan_result<Source, Args...>();
   90|  97.6k|    fill_scan_result(result,
   91|  97.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.6k|    return result;
   94|  97.6k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  97.6k|{
  131|  97.6k|    auto result = make_scan_result<Source, Args...>();
  132|  97.6k|    fill_scan_result(result,
  133|  97.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.6k|    return result;
  136|  97.6k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.8k|{
  171|  19.8k|    auto result = make_scan_result<Source, T>();
  172|  19.8k|    fill_scan_result(
  173|  19.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.8k|    return result;
  176|  19.8k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.46M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.46M|{
  309|  1.46M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.46M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   617k|{
  315|   617k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   617k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 308k, False: 308k]
  ------------------
  317|   617k|                    : std::locale{};
  318|   617k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   604k|{
  895|   604k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   604k|                                  m_nan_payload_buffer, value);
  897|   604k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   604k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 588k, False: 16.4k]
  |  |  ------------------
  ------------------
  898|   588k|        value = this->setsign(value);
  899|   588k|        return n;
  900|   588k|    }
  901|       |
  902|  16.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 4.68k, False: 11.7k]
  ------------------
  903|  16.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 1.06k, False: 3.62k]
  ------------------
  904|  1.06k|        return detail::unexpected_scan_error(
  905|  1.06k|            scan_error::value_negative_overflow, n.error().msg());
  906|  1.06k|    }
  907|  15.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 959, False: 14.3k]
  ------------------
  908|  15.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 110, False: 849]
  ------------------
  909|    110|        return detail::unexpected_scan_error(
  910|    110|            scan_error::value_negative_underflow, n.error().msg());
  911|    110|    }
  912|  15.2k|    return n;
  913|  15.3k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   286k|{
  895|   286k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   286k|                                  m_nan_payload_buffer, value);
  897|   286k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   286k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 252k, False: 34.3k]
  |  |  ------------------
  ------------------
  898|   252k|        value = this->setsign(value);
  899|   252k|        return n;
  900|   252k|    }
  901|       |
  902|  34.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.99k, False: 31.3k]
  ------------------
  903|  34.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 104, False: 2.89k]
  ------------------
  904|    104|        return detail::unexpected_scan_error(
  905|    104|            scan_error::value_negative_overflow, n.error().msg());
  906|    104|    }
  907|  34.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 844, False: 33.3k]
  ------------------
  908|  34.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 46, False: 798]
  ------------------
  909|     46|        return detail::unexpected_scan_error(
  910|     46|            scan_error::value_negative_underflow, n.error().msg());
  911|     46|    }
  912|  34.1k|    return n;
  913|  34.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   632k|{
  895|   632k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   632k|                                  m_nan_payload_buffer, value);
  897|   632k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   632k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 618k, False: 14.0k]
  |  |  ------------------
  ------------------
  898|   618k|        value = this->setsign(value);
  899|   618k|        return n;
  900|   618k|    }
  901|       |
  902|  14.0k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.43k, False: 11.5k]
  ------------------
  903|  14.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 614, False: 1.81k]
  ------------------
  904|    614|        return detail::unexpected_scan_error(
  905|    614|            scan_error::value_negative_overflow, n.error().msg());
  906|    614|    }
  907|  13.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 331, False: 13.0k]
  ------------------
  908|  13.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 93, False: 238]
  ------------------
  909|     93|        return detail::unexpected_scan_error(
  910|     93|            scan_error::value_negative_underflow, n.error().msg());
  911|     93|    }
  912|  13.2k|    return n;
  913|  13.3k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   333k|{
  895|   333k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   333k|                                  m_nan_payload_buffer, value);
  897|   333k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   333k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 300k, False: 32.9k]
  |  |  ------------------
  ------------------
  898|   300k|        value = this->setsign(value);
  899|   300k|        return n;
  900|   300k|    }
  901|       |
  902|  32.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 1.70k, False: 31.2k]
  ------------------
  903|  32.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 104, False: 1.60k]
  ------------------
  904|    104|        return detail::unexpected_scan_error(
  905|    104|            scan_error::value_negative_overflow, n.error().msg());
  906|    104|    }
  907|  32.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 202, False: 32.6k]
  ------------------
  908|  32.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 188]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  32.8k|    return n;
  913|  32.8k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   638k|{
  895|   638k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   638k|                                  m_nan_payload_buffer, value);
  897|   638k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   638k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 626k, False: 12.2k]
  |  |  ------------------
  ------------------
  898|   626k|        value = this->setsign(value);
  899|   626k|        return n;
  900|   626k|    }
  901|       |
  902|  12.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 577, False: 11.6k]
  ------------------
  903|  12.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 252, False: 325]
  ------------------
  904|    252|        return detail::unexpected_scan_error(
  905|    252|            scan_error::value_negative_overflow, n.error().msg());
  906|    252|    }
  907|  12.0k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 100, False: 11.9k]
  ------------------
  908|  12.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 40, False: 60]
  ------------------
  909|     40|        return detail::unexpected_scan_error(
  910|     40|            scan_error::value_negative_underflow, n.error().msg());
  911|     40|    }
  912|  11.9k|    return n;
  913|  12.0k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   340k|{
  895|   340k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   340k|                                  m_nan_payload_buffer, value);
  897|   340k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   340k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 308k, False: 31.7k]
  |  |  ------------------
  ------------------
  898|   308k|        value = this->setsign(value);
  899|   308k|        return n;
  900|   308k|    }
  901|       |
  902|  31.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 146, False: 31.6k]
  ------------------
  903|  31.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 32, False: 114]
  ------------------
  904|     32|        return detail::unexpected_scan_error(
  905|     32|            scan_error::value_negative_overflow, n.error().msg());
  906|     32|    }
  907|  31.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 78, False: 31.6k]
  ------------------
  908|  31.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 64]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  31.7k|    return n;
  913|  31.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   422k|{
 1903|   422k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   422k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   489k|{
 1911|   489k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   489k|    return sync_after_vscan(source, n);
 1913|   489k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   279k|{
 1921|   279k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   279k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   279k|{
 1929|   279k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   279k|    return sync_after_vscan(source, n);
 1931|   279k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   836k|{
  207|   836k|    return find_classic_impl(
  208|   836k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   836k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   836k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.00M|{
  215|  2.00M|    return find_classic_impl(
  216|  2.00M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.00M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.00M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   422k|{
 1872|   422k|    return vscan_internal(source, format, args);
 1873|   422k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   489k|{
 1878|   489k|    auto n = vscan_internal(source, format, args);
 1879|   489k|    return sync_after_vscan(source, n);
 1880|   489k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   279k|{
 1886|   279k|    return vscan_internal(source, format, args);
 1887|   279k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   279k|{
 1892|   279k|    auto n = vscan_internal(source, format, args);
 1893|   279k|    return sync_after_vscan(source, n);
 1894|   279k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  92.1k|{
 1958|  92.1k|    return vscan_value_internal(source, arg);
 1959|  92.1k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|   100k|{
 1963|   100k|    auto n = vscan_value_internal(source, arg);
 1964|   100k|    return sync_after_vscan(source, n);
 1965|   100k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  55.1k|{
 1971|  55.1k|    return vscan_value_internal(source, arg);
 1972|  55.1k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  55.0k|{
 1977|  55.0k|    auto n = vscan_value_internal(source, arg);
 1978|  55.0k|    return sync_after_vscan(source, n);
 1979|  55.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   836k|{
  131|   836k|    auto it = source.begin();
  132|       |
  133|  2.76M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.22M, False: 542k]
  ------------------
  134|  2.22M|        auto sv =
  135|  2.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.22M|                .substr(0, 8);
  137|       |
  138|  2.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.16M, False: 59.9k]
  ------------------
  139|  2.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 269k, False: 1.89M]
  ------------------
  142|   269k|                break;
  143|   269k|            }
  144|  1.89M|            continue;
  145|  2.16M|        }
  146|       |
  147|   199k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 163k, False: 35.9k]
  ------------------
  148|   163k|            auto tmp =
  149|   163k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   163k|            auto res = get_next_code_point(tmp);
  151|   163k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 24.0k, False: 139k]
  ------------------
  152|  24.0k|                return it;
  153|  24.0k|            }
  154|   139k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   139k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   139k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   139k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   139k|        }
  158|  59.9k|    }
  159|       |
  160|   811k|    return detail::make_string_view_iterator(source, it);
  161|   836k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.45M|{
  118|  3.45M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.45M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.45M|    uint64_t word{};
  121|  3.45M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.45M|    return has_byte_greater(word, 127) != 0;
  124|  3.45M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   163k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.00M|{
  131|  2.00M|    auto it = source.begin();
  132|       |
  133|  2.18M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.22M, False: 956k]
  ------------------
  134|  1.22M|        auto sv =
  135|  1.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.22M|                .substr(0, 8);
  137|       |
  138|  1.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.15M, False: 79.0k]
  ------------------
  139|  1.15M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.15M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.15M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 978k, False: 172k]
  ------------------
  142|   978k|                break;
  143|   978k|            }
  144|   172k|            continue;
  145|  1.15M|        }
  146|       |
  147|   141k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 135k, False: 6.43k]
  ------------------
  148|   135k|            auto tmp =
  149|   135k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   135k|            auto res = get_next_code_point(tmp);
  151|   135k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 72.6k, False: 62.4k]
  ------------------
  152|  72.6k|                return it;
  153|  72.6k|            }
  154|  62.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  62.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  62.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  62.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  62.4k|        }
  158|  79.0k|    }
  159|       |
  160|  1.93M|    return detail::make_string_view_iterator(source, it);
  161|  2.00M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.73M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   135k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   604k|{
  804|   604k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.26k, False: 601k]
  ------------------
  805|  3.26k|        value = std::numeric_limits<T>::infinity();
  806|  3.26k|        return 3;
  807|  3.26k|    }
  808|   601k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 2.96k, False: 598k]
  ------------------
  809|  2.96k|        value = std::numeric_limits<T>::infinity();
  810|  2.96k|        return 8;
  811|  2.96k|    }
  812|   598k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 26.8k, False: 571k]
  ------------------
  813|  26.8k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  26.8k|        return 3;
  815|  26.8k|    }
  816|   571k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 2.20k, False: 569k]
  ------------------
  817|  2.20k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  2.20k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  2.20k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  2.20k|    }
  848|       |
  849|   569k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   569k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   569k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   569k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 122k, False: 446k]
  ------------------
  851|   122k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 119k]
  |  |  ------------------
  ------------------
  852|  2.95k|            return detail::unexpected_scan_error(
  853|  2.95k|                scan_error::invalid_scanned_value,
  854|  2.95k|                "Invalid floating-point digit");
  855|  2.95k|        }
  856|   122k|    }
  857|   566k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.79k, False: 558k]
  |  |  ------------------
  ------------------
  858|  7.79k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  7.79k|                                             "Invalid floating-point digit");
  860|  7.79k|    }
  861|       |
  862|   558k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   558k|    else {
  879|       |        // Default to fast_float
  880|   558k|        return fast_float_impl<CharT, T>{data}(value);
  881|   558k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   558k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  739|   558k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   558k|    {
  741|   558k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.03M|    {
  369|  2.03M|        return {kind, options};
  370|  2.03M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  744|   558k|    {
  745|   558k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 119k, False: 438k]
  ------------------
  746|   558k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 24.1k, False: 414k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   143k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   143k|                                              value);
  750|   143k|        }
  751|       |
  752|   414k|        const auto flags = get_flags();
  753|   414k|        const auto view = get_view();
  754|   414k|        const auto result = fast_float::from_chars(
  755|   414k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   414k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   414k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.85k, False: 409k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  4.85k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  4.85k|                                              value);
  766|  4.85k|        }
  767|       |
  768|   409k|        return result.ptr - view.data();
  769|   414k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   148k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   148k|    {
  709|   148k|#if !SCN_DISABLE_STRTOD
  710|   148k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   148k|    }
  717|   148k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   148k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   148k|    {
  553|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   215k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   148k|    {
  557|   148k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   148k|                           generic_strtod);
  559|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   148k|    {
  389|   148k|        CharT* end{};
  390|   148k|        errno = 0;
  391|   148k|        value = strtod_cb(src, &end);
  392|   148k|        const auto saved_errno = errno;
  393|   148k|        auto chars_read = end - src;
  394|       |
  395|   148k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   148k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.64k, False: 143k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.64k|    }
  ------------------
  396|       |
  397|   143k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 119k, False: 24.0k]
  ------------------
  398|   143k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 119k, False: 0]
  ------------------
  399|   119k|            chars_read -= 2;
  400|   119k|        }
  401|       |
  402|   143k|        return chars_read;
  403|   148k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   215k|    {
  432|   215k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 86.4k, False: 128k]
  |  Branch (432:37): [True: 0, False: 86.4k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   215k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 24.6k, False: 190k]
  ------------------
  440|   215k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 24.6k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   215k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.50k, False: 205k]
  |  Branch (447:34): [True: 1.80k, False: 7.69k]
  ------------------
  448|  1.80k|            SCN_UNLIKELY_ATTR
  449|  1.80k|            return detail::unexpected_scan_error(
  450|  1.80k|                scan_error::value_positive_underflow,
  451|  1.80k|                "strtod failed: underflow");
  452|  1.80k|        }
  453|       |
  454|   213k|        SCN_GCC_COMPAT_PUSH
  455|   213k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   213k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 213k, False: 0]
  ------------------
  458|   213k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 213k, False: 0]
  ------------------
  459|   213k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.68k, False: 205k]
  ------------------
  460|  7.68k|            SCN_UNLIKELY_ATTR
  461|  7.68k|            return detail::unexpected_scan_error(
  462|  7.68k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.68k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   205k|            return {};
  468|   213k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   224k|{
  344|   224k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 88.2k, False: 136k]
  |  Branch (344:25): [True: 0, False: 136k]
  ------------------
  345|   224k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   148k|    {
  409|   148k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 144k, False: 4.13k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   144k|            auto first_space = read_until_classic_space(input.view());
  412|   144k|            input.assign(
  413|   144k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   144k|        }
  415|       |
  416|   148k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 119k, False: 29.0k]
  ------------------
  417|   119k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   119k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   119k|        }
  424|       |
  425|   148k|        return input.get_allocated_string().c_str();
  426|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   148k|    {
  564|   148k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   148k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   148k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   148k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   148k|        if constexpr (std::is_same_v<T, float>) {
  497|   148k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   148k|#endif
  506|   148k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.28M|    {
  724|  1.28M|        unsigned format_flags{};
  725|  1.28M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.27M, False: 10.5k]
  ------------------
  726|  1.27M|            format_flags |= fast_float::fixed;
  727|  1.27M|        }
  728|  1.28M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (728:13): [True: 1.08M, False: 193k]
  ------------------
  729|  1.08M|            format_flags |= fast_float::scientific;
  730|  1.08M|        }
  731|       |
  732|  1.28M|        return static_cast<fast_float::chars_format>(format_flags);
  733|  1.28M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  773|   414k|    {
  774|   414k|        if constexpr (sizeof(CharT) == 1) {
  775|   414k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   414k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   286k|{
  804|   286k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 286k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   286k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 286k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   286k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 286k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   286k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 286k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   286k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   286k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.2k, False: 215k]
  ------------------
  851|  71.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.90k, False: 62.3k]
  |  |  ------------------
  ------------------
  852|  8.90k|            return detail::unexpected_scan_error(
  853|  8.90k|                scan_error::invalid_scanned_value,
  854|  8.90k|                "Invalid floating-point digit");
  855|  8.90k|        }
  856|  71.2k|    }
  857|   277k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.5k, False: 255k]
  |  |  ------------------
  ------------------
  858|  21.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.5k|                                             "Invalid floating-point digit");
  860|  21.5k|    }
  861|       |
  862|   255k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   255k|    else {
  879|       |        // Default to fast_float
  880|   255k|        return fast_float_impl<CharT, T>{data}(value);
  881|   255k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   255k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  739|   255k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   255k|    {
  741|   255k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|   998k|    {
  369|   998k|        return {kind, options};
  370|   998k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  744|   255k|    {
  745|   255k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 62.3k, False: 193k]
  ------------------
  746|   255k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 468, False: 193k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  62.7k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  62.7k|                                              value);
  750|  62.7k|        }
  751|       |
  752|   193k|        const auto flags = get_flags();
  753|   193k|        const auto view = get_view();
  754|   193k|        const auto result = fast_float::from_chars(
  755|   193k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   193k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   193k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.73k, False: 189k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  3.73k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  3.73k|                                              value);
  766|  3.73k|        }
  767|       |
  768|   189k|        return result.ptr - view.data();
  769|   193k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  66.5k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  66.5k|    {
  709|  66.5k|#if !SCN_DISABLE_STRTOD
  710|  66.5k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  66.5k|    }
  717|  66.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  66.5k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  66.5k|    {
  553|  66.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  66.5k|    {
  557|  66.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  66.5k|                           generic_strtod);
  559|  66.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  66.5k|    {
  389|  66.5k|        CharT* end{};
  390|  66.5k|        errno = 0;
  391|  66.5k|        value = strtod_cb(src, &end);
  392|  66.5k|        const auto saved_errno = errno;
  393|  66.5k|        auto chars_read = end - src;
  394|       |
  395|  66.5k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  66.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.83k, False: 62.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.83k|    }
  ------------------
  396|       |
  397|  62.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.1k, False: 468]
  ------------------
  398|  62.6k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.1k, False: 0]
  ------------------
  399|  62.1k|            chars_read -= 2;
  400|  62.1k|        }
  401|       |
  402|  62.6k|        return chars_read;
  403|  66.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  66.5k|    {
  409|  66.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 64.0k, False: 2.43k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  64.0k|            auto first_space = read_until_classic_space(input.view());
  412|  64.0k|            input.assign(
  413|  64.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  64.0k|        }
  415|       |
  416|  66.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.3k, False: 4.20k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.3k|            else {
  421|  62.3k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.3k|            }
  423|  62.3k|        }
  424|       |
  425|  66.5k|        return input.get_allocated_string().c_str();
  426|  66.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  66.5k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  66.5k|        else {
  568|  66.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  66.5k|        }
  570|  66.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  66.5k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  66.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  66.5k|        if constexpr (std::is_same_v<T, float>) {
  535|  66.5k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  66.5k|#endif
  544|  66.5k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  773|   193k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   193k|        else {
  783|   193k|            return std::u32string_view{
  784|   193k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   193k|                m_input.view().size()};
  786|   193k|        }
  787|   193k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   632k|{
  804|   632k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.69k, False: 628k]
  ------------------
  805|  3.69k|        value = std::numeric_limits<T>::infinity();
  806|  3.69k|        return 3;
  807|  3.69k|    }
  808|   628k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.13k, False: 625k]
  ------------------
  809|  3.13k|        value = std::numeric_limits<T>::infinity();
  810|  3.13k|        return 8;
  811|  3.13k|    }
  812|   625k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.3k, False: 598k]
  ------------------
  813|  27.3k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.3k|        return 3;
  815|  27.3k|    }
  816|   598k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 2.27k, False: 596k]
  ------------------
  817|  2.27k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  2.27k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  2.27k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  2.27k|    }
  848|       |
  849|   596k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   596k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   596k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   596k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 126k, False: 469k]
  ------------------
  851|   126k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.01k, False: 123k]
  |  |  ------------------
  ------------------
  852|  3.01k|            return detail::unexpected_scan_error(
  853|  3.01k|                scan_error::invalid_scanned_value,
  854|  3.01k|                "Invalid floating-point digit");
  855|  3.01k|        }
  856|   126k|    }
  857|   593k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.22k, False: 584k]
  |  |  ------------------
  ------------------
  858|  8.22k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.22k|                                             "Invalid floating-point digit");
  860|  8.22k|    }
  861|       |
  862|   584k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   584k|    else {
  879|       |        // Default to fast_float
  880|   584k|        return fast_float_impl<CharT, T>{data}(value);
  881|   584k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   584k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  739|   584k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   584k|    {
  741|   584k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  744|   584k|    {
  745|   584k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 123k, False: 461k]
  ------------------
  746|   584k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 25.8k, False: 435k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   149k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   149k|                                              value);
  750|   149k|        }
  751|       |
  752|   435k|        const auto flags = get_flags();
  753|   435k|        const auto view = get_view();
  754|   435k|        const auto result = fast_float::from_chars(
  755|   435k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   435k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   435k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.34k, False: 433k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  2.34k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  2.34k|                                              value);
  766|  2.34k|        }
  767|       |
  768|   433k|        return result.ptr - view.data();
  769|   435k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   151k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   151k|    {
  709|   151k|#if !SCN_DISABLE_STRTOD
  710|   151k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   151k|    }
  717|   151k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   151k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   151k|    {
  553|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   216k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   151k|    {
  557|   151k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   151k|                           generic_strtod);
  559|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   151k|    {
  389|   151k|        CharT* end{};
  390|   151k|        errno = 0;
  391|   151k|        value = strtod_cb(src, &end);
  392|   151k|        const auto saved_errno = errno;
  393|   151k|        auto chars_read = end - src;
  394|       |
  395|   151k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   151k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.76k, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.76k|    }
  ------------------
  396|       |
  397|   148k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 123k, False: 25.7k]
  ------------------
  398|   148k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 123k, False: 0]
  ------------------
  399|   123k|            chars_read -= 2;
  400|   123k|        }
  401|       |
  402|   148k|        return chars_read;
  403|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   216k|    {
  432|   216k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 85.7k, False: 130k]
  |  Branch (432:37): [True: 0, False: 85.7k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   216k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.3k, False: 189k]
  ------------------
  440|   216k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.3k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   216k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.66k, False: 211k]
  |  Branch (447:34): [True: 533, False: 4.13k]
  ------------------
  448|    533|            SCN_UNLIKELY_ATTR
  449|    533|            return detail::unexpected_scan_error(
  450|    533|                scan_error::value_positive_underflow,
  451|    533|                "strtod failed: underflow");
  452|    533|        }
  453|       |
  454|   215k|        SCN_GCC_COMPAT_PUSH
  455|   215k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   215k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 215k, False: 0]
  ------------------
  458|   215k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 215k, False: 0]
  ------------------
  459|   215k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 4.13k, False: 211k]
  ------------------
  460|  4.13k|            SCN_UNLIKELY_ATTR
  461|  4.13k|            return detail::unexpected_scan_error(
  462|  4.13k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  4.13k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   211k|            return {};
  468|   215k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   220k|{
  348|   220k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 86.3k, False: 134k]
  |  Branch (348:24): [True: 0, False: 134k]
  ------------------
  349|   220k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   151k|    {
  409|   151k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 148k, False: 3.03k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   148k|            auto first_space = read_until_classic_space(input.view());
  412|   148k|            input.assign(
  413|   148k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   148k|        }
  415|       |
  416|   151k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 123k, False: 28.1k]
  ------------------
  417|   123k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   123k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   123k|        }
  424|       |
  425|   151k|        return input.get_allocated_string().c_str();
  426|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   151k|    {
  564|   151k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   151k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   151k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   151k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   151k|        else if constexpr (std::is_same_v<T, double>) {
  500|   151k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   151k|#endif
  506|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  773|   435k|    {
  774|   435k|        if constexpr (sizeof(CharT) == 1) {
  775|   435k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   435k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   333k|{
  804|   333k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 333k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   333k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 333k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   333k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 333k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   333k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 333k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   333k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   333k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.2k, False: 262k]
  ------------------
  851|  71.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.91k, False: 62.3k]
  |  |  ------------------
  ------------------
  852|  8.91k|            return detail::unexpected_scan_error(
  853|  8.91k|                scan_error::invalid_scanned_value,
  854|  8.91k|                "Invalid floating-point digit");
  855|  8.91k|        }
  856|  71.2k|    }
  857|   324k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.1k, False: 302k]
  |  |  ------------------
  ------------------
  858|  22.1k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.1k|                                             "Invalid floating-point digit");
  860|  22.1k|    }
  861|       |
  862|   302k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   302k|    else {
  879|       |        // Default to fast_float
  880|   302k|        return fast_float_impl<CharT, T>{data}(value);
  881|   302k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   302k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  739|   302k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   302k|    {
  741|   302k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  744|   302k|    {
  745|   302k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 62.3k, False: 240k]
  ------------------
  746|   302k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 468, False: 239k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  62.7k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  62.7k|                                              value);
  750|  62.7k|        }
  751|       |
  752|   239k|        const auto flags = get_flags();
  753|   239k|        const auto view = get_view();
  754|   239k|        const auto result = fast_float::from_chars(
  755|   239k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   239k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 239k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   239k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 237k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  1.82k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  1.82k|                                              value);
  766|  1.82k|        }
  767|       |
  768|   237k|        return result.ptr - view.data();
  769|   239k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  64.5k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  64.5k|    {
  709|  64.5k|#if !SCN_DISABLE_STRTOD
  710|  64.5k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  64.5k|    }
  717|  64.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  64.5k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  64.5k|    {
  553|  64.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  64.5k|    {
  557|  64.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  64.5k|                           generic_strtod);
  559|  64.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  64.5k|    {
  389|  64.5k|        CharT* end{};
  390|  64.5k|        errno = 0;
  391|  64.5k|        value = strtod_cb(src, &end);
  392|  64.5k|        const auto saved_errno = errno;
  393|  64.5k|        auto chars_read = end - src;
  394|       |
  395|  64.5k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  64.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.90k, False: 62.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.90k|    }
  ------------------
  396|       |
  397|  62.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.2k, False: 468]
  ------------------
  398|  62.6k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.2k, False: 0]
  ------------------
  399|  62.2k|            chars_read -= 2;
  400|  62.2k|        }
  401|       |
  402|  62.6k|        return chars_read;
  403|  64.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  64.5k|    {
  409|  64.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 63.1k, False: 1.47k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  63.1k|            auto first_space = read_until_classic_space(input.view());
  412|  63.1k|            input.assign(
  413|  63.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  63.1k|        }
  415|       |
  416|  64.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.3k, False: 2.29k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.3k|            else {
  421|  62.3k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.3k|            }
  423|  62.3k|        }
  424|       |
  425|  64.5k|        return input.get_allocated_string().c_str();
  426|  64.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  64.5k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  64.5k|        else {
  568|  64.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  64.5k|        }
  570|  64.5k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  64.5k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  64.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  64.5k|        else if constexpr (std::is_same_v<T, double>) {
  538|  64.5k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  64.5k|#endif
  544|  64.5k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  773|   239k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   239k|        else {
  783|   239k|            return std::u32string_view{
  784|   239k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   239k|                m_input.view().size()};
  786|   239k|        }
  787|   239k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   638k|{
  804|   638k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.82k, False: 634k]
  ------------------
  805|  3.82k|        value = std::numeric_limits<T>::infinity();
  806|  3.82k|        return 3;
  807|  3.82k|    }
  808|   634k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.21k, False: 631k]
  ------------------
  809|  3.21k|        value = std::numeric_limits<T>::infinity();
  810|  3.21k|        return 8;
  811|  3.21k|    }
  812|   631k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.4k, False: 604k]
  ------------------
  813|  27.4k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.4k|        return 3;
  815|  27.4k|    }
  816|   604k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 2.31k, False: 601k]
  ------------------
  817|  2.31k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  2.31k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  2.31k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  2.31k|    }
  848|       |
  849|   601k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   601k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 127k, False: 474k]
  ------------------
  851|   127k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.08k, False: 123k]
  |  |  ------------------
  ------------------
  852|  3.08k|            return detail::unexpected_scan_error(
  853|  3.08k|                scan_error::invalid_scanned_value,
  854|  3.08k|                "Invalid floating-point digit");
  855|  3.08k|        }
  856|   127k|    }
  857|   598k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.50k, False: 590k]
  |  |  ------------------
  ------------------
  858|  8.50k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.50k|                                             "Invalid floating-point digit");
  860|  8.50k|    }
  861|       |
  862|   590k|#if !SCN_DISABLE_FAST_FLOAT
  863|   590k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   590k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   590k|            return fast_float_fallback(data, value);
  876|   590k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   590k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   590k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   590k|    {
  709|   590k|#if !SCN_DISABLE_STRTOD
  710|   590k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   590k|    }
  717|   590k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   590k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   590k|    {
  553|   590k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   899k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   590k|    {
  557|   590k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   590k|                           generic_strtod);
  559|   590k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   590k|    {
  389|   590k|        CharT* end{};
  390|   590k|        errno = 0;
  391|   590k|        value = strtod_cb(src, &end);
  392|   590k|        const auto saved_errno = errno;
  393|   590k|        auto chars_read = end - src;
  394|       |
  395|   590k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   590k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 677, False: 589k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    677|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    677|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    677|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    677|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    677|    }
  ------------------
  396|       |
  397|   589k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 123k, False: 465k]
  ------------------
  398|   589k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 123k, False: 0]
  ------------------
  399|   123k|            chars_read -= 2;
  400|   123k|        }
  401|       |
  402|   589k|        return chars_read;
  403|   590k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   899k|    {
  432|   899k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 404k, False: 494k]
  |  Branch (432:37): [True: 0, False: 404k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   899k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.3k, False: 873k]
  ------------------
  440|   899k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.3k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   899k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 901, False: 898k]
  |  Branch (447:34): [True: 178, False: 723]
  ------------------
  448|    178|            SCN_UNLIKELY_ATTR
  449|    178|            return detail::unexpected_scan_error(
  450|    178|                scan_error::value_positive_underflow,
  451|    178|                "strtod failed: underflow");
  452|    178|        }
  453|       |
  454|   899k|        SCN_GCC_COMPAT_PUSH
  455|   899k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   899k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 899k, False: 0]
  ------------------
  458|   899k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 899k, False: 0]
  ------------------
  459|   899k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 723, False: 898k]
  ------------------
  460|    723|            SCN_UNLIKELY_ATTR
  461|    723|            return detail::unexpected_scan_error(
  462|    723|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    723|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   898k|            return {};
  468|   899k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   900k|{
  352|   900k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 404k, False: 495k]
  |  Branch (352:26): [True: 0, False: 495k]
  ------------------
  353|   900k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   590k|    {
  409|   590k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 542k, False: 47.3k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   542k|            auto first_space = read_until_classic_space(input.view());
  412|   542k|            input.assign(
  413|   542k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   542k|        }
  415|       |
  416|   590k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 123k, False: 466k]
  ------------------
  417|   123k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   123k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   123k|        }
  424|       |
  425|   590k|        return input.get_allocated_string().c_str();
  426|   590k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   590k|    {
  564|   590k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   590k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   590k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   590k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   590k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   590k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   590k|            return std::strtold(str, str_end);
  504|   590k|        }
  505|   590k|#endif
  506|   590k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   340k|{
  804|   340k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 340k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   340k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 340k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   340k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 340k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   340k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 340k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   340k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   340k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.2k, False: 269k]
  ------------------
  851|  71.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.92k, False: 62.3k]
  |  |  ------------------
  ------------------
  852|  8.92k|            return detail::unexpected_scan_error(
  853|  8.92k|                scan_error::invalid_scanned_value,
  854|  8.92k|                "Invalid floating-point digit");
  855|  8.92k|        }
  856|  71.2k|    }
  857|   331k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 309k]
  |  |  ------------------
  ------------------
  858|  22.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.6k|                                             "Invalid floating-point digit");
  860|  22.6k|    }
  861|       |
  862|   309k|#if !SCN_DISABLE_FAST_FLOAT
  863|   309k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   309k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   309k|            return fast_float_fallback(data, value);
  876|   309k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   309k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   309k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   309k|    {
  709|   309k|#if !SCN_DISABLE_STRTOD
  710|   309k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   309k|    }
  717|   309k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   309k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   309k|    {
  553|   309k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   309k|    {
  557|   309k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   309k|                           generic_strtod);
  559|   309k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   309k|    {
  389|   309k|        CharT* end{};
  390|   309k|        errno = 0;
  391|   309k|        value = strtod_cb(src, &end);
  392|   309k|        const auto saved_errno = errno;
  393|   309k|        auto chars_read = end - src;
  394|       |
  395|   309k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   309k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 224, False: 308k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    224|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    224|    }
  ------------------
  396|       |
  397|   308k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.3k, False: 246k]
  ------------------
  398|   308k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.3k, False: 0]
  ------------------
  399|  62.3k|            chars_read -= 2;
  400|  62.3k|        }
  401|       |
  402|   308k|        return chars_read;
  403|   309k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   309k|    {
  409|   309k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 302k, False: 6.86k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   302k|            auto first_space = read_until_classic_space(input.view());
  412|   302k|            input.assign(
  413|   302k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   302k|        }
  415|       |
  416|   309k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.3k, False: 246k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.3k|            else {
  421|  62.3k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.3k|            }
  423|  62.3k|        }
  424|       |
  425|   309k|        return input.get_allocated_string().c_str();
  426|   309k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   309k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   309k|        else {
  568|   309k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   309k|        }
  570|   309k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   309k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   309k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   309k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   309k|            return std::wcstold(str, str_end);
  542|   309k|        }
  543|   309k|#endif
  544|   309k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   978k|{
 1769|   978k|    const auto argcount = args.size();
 1770|   978k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 201k, False: 776k]
  |  Branch (1770:60): [True: 201k, False: 0]
  ------------------
 1771|   201k|        auto arg = args.get(0);
 1772|   201k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   201k|    static_cast<    \
  |  |  935|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   201k|    }
 1774|       |
 1775|   776k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 776k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   776k|    SCN_UNLIKELY_ATTR
 1783|   776k|    {
 1784|   776k|        auto handler = format_handler<false, CharT>{
 1785|   776k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   776k|        return vscan_parse_format_string(format, handler);
 1787|   776k|    }
 1788|   776k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.82M|{
 1317|  1.82M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 1.43M, False: 385k]
  ------------------
 1318|  1.43M|        return false;
 1319|  1.43M|    }
 1320|   385k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 385k, False: 0]
  |  Branch (1320:39): [True: 385k, False: 0]
  ------------------
 1321|  1.82M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   302k|{
 1350|   302k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   302k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   302k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   302k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   302k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   302k|    static_cast<    \
  |  |  935|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   302k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.0k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.0k|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   281k|    return it.position();
 1367|   302k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   660k|        : format_handler_base{argcount},
 1593|   660k|          parse_ctx{source_tag<Source&&>, format},
 1594|   660k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   660k|    {
 1596|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  2.33M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  2.33M|    {
 1412|  2.33M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  2.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   660k|        : contiguous_ctx(source, args, loc)
 1544|   660k|    {
 1545|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   660k|{
 1734|   660k|    const auto beg = handler.get_ctx().begin();
 1735|   660k|    detail::parse_format_string<false>(format, handler);
 1736|   660k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.2k, False: 590k]
  |  |  ------------------
  ------------------
 1737|  70.2k|        return unexpected(err.error());
 1738|  70.2k|    }
 1739|   590k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   660k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  4.48M|    {
 1718|  4.48M|        return ctx.get();
 1719|  4.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  4.48M|    {
 1549|  4.48M|        return contiguous_ctx;
 1550|  4.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  1.25M|    {
 1600|  1.25M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.25M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.25M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   421k|    {
 1460|   421k|        error = unexpected(err);
 1461|   421k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   660k|{
 1372|   660k|    auto arg = ctx.arg(id);
 1373|   660k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   660k|    return arg;
 1377|   660k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  2.33M|    {
 1486|  2.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  2.33M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  2.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.33M, False: 0]
  |  |  ------------------
  ------------------
 1498|  2.33M|            visited_args_lower64 |= (1ull << id);
 1499|  2.33M|            return;
 1500|  2.33M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  2.33M|    {
 1470|  2.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  2.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.33M, False: 0]
  |  |  ------------------
  ------------------
 1477|  2.33M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  2.33M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  2.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   660k|    {
 1640|   660k|        return parse_ctx.next_arg_id();
 1641|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   660k|    {
 1680|   660k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   660k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   660k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 660k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   660k|        auto specs = detail::format_specs{};
 1693|   660k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   660k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   660k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   660k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   660k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 660k]
  |  Branch (1698:29): [True: 0, False: 660k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   660k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   660k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   660k|        on_visit_scan_arg(
 1710|   660k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   660k|                                           get_ctx().locale()},
 1712|   660k|            arg);
 1713|   660k|        return parse_ctx.begin();
 1714|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   660k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   660k|    {
 1391|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   660k|    {
 1651|   660k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 660k]
  |  Branch (1651:13): [True: 0, False: 660k]
  |  Branch (1651:29): [True: 0, False: 660k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   660k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   660k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.2k, False: 590k]
  |  |  ------------------
  ------------------
 1658|  70.2k|            on_error(r.error());
 1659|  70.2k|        }
 1660|   590k|        else {
 1661|   590k|            get_ctx().advance_to(*r);
 1662|   590k|        }
 1663|   660k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  2.33M|    {
 1419|  2.33M|        {
 1420|  2.33M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 2.33M]
  ------------------
 1421|  2.33M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 2.33M]
  ------------------
 1422|  2.33M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  2.33M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  2.33M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 2.33M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  2.33M|        }
 1430|       |
 1431|  2.33M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 2.33M, False: 0]
  ------------------
 1432|  2.33M|            return;
 1433|  2.33M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  9.33M|    {
 1465|  9.33M|        return error;
 1466|  9.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   776k|        : format_handler_base{argcount},
 1593|   776k|          parse_ctx{source_tag<Source&&>, format},
 1594|   776k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   776k|    {
 1596|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   776k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   776k|    {
 1521|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   776k|{
 1734|   776k|    const auto beg = handler.get_ctx().begin();
 1735|   776k|    detail::parse_format_string<false>(format, handler);
 1736|   776k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.2k, False: 706k]
  |  |  ------------------
  ------------------
 1737|  70.2k|        return unexpected(err.error());
 1738|  70.2k|    }
 1739|   706k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   776k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  5.29M|    {
 1718|  5.29M|        return ctx.get();
 1719|  5.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  5.29M|    {
 1525|  5.29M|        return ctx;
 1526|  5.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|  1.48M|    {
 1600|  1.48M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.48M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   776k|{
 1372|   776k|    auto arg = ctx.arg(id);
 1373|   776k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   776k|    return arg;
 1377|   776k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   776k|    {
 1640|   776k|        return parse_ctx.next_arg_id();
 1641|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   776k|    {
 1680|   776k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   776k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   776k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 776k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   776k|        auto specs = detail::format_specs{};
 1693|   776k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   776k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   776k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   776k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   776k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 776k]
  |  Branch (1698:29): [True: 0, False: 776k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   776k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   776k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   776k|        on_visit_scan_arg(
 1710|   776k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   776k|                                           get_ctx().locale()},
 1712|   776k|            arg);
 1713|   776k|        return parse_ctx.begin();
 1714|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   776k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   776k|    {
 1391|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   776k|    {
 1651|   776k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 776k]
  |  Branch (1651:13): [True: 0, False: 776k]
  |  Branch (1651:29): [True: 0, False: 776k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   776k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   776k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.2k, False: 706k]
  |  |  ------------------
  ------------------
 1658|  70.2k|            on_error(r.error());
 1659|  70.2k|        }
 1660|   706k|        else {
 1661|   706k|            get_ctx().advance_to(*r);
 1662|   706k|        }
 1663|   776k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   844k|{
 1749|   844k|    const auto argcount = args.size();
 1750|   844k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 184k, False: 660k]
  |  Branch (1750:60): [True: 184k, False: 0]
  ------------------
 1751|   184k|        auto arg = args.get(0);
 1752|   184k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   184k|    static_cast<    \
  |  |  935|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   184k|    }
 1754|       |
 1755|   660k|    auto handler = format_handler<true, CharT>{
 1756|   660k|        ranges::subrange<const CharT*>{source.data(),
 1757|   660k|                                       source.data() + source.size()},
 1758|   660k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   660k|    return vscan_parse_format_string(format, handler);
 1760|   844k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   276k|{
 1330|   276k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   276k|    auto reader =
 1336|   276k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   276k|            ranges::subrange<const CharT*>{source.data(),
 1338|   276k|                                           source.data() + source.size()},
 1339|   276k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   276k|    static_cast<    \
  |  |  935|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   276k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.0k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.0k|    }                                                  \
  |  |  |  | 3939|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   255k|    return ranges::distance(source.data(), it);
 1342|   276k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  1.07M|{
 1849|  1.07M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 987k, False: 91.2k]
  |  |  ------------------
  ------------------
 1850|   987k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   987k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 987k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   987k|    }
 1856|  91.2k|    else {
 1857|  91.2k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  91.2k|    }
 1863|  1.07M|    return result;
 1864|  1.07M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   558k|{
 1749|   558k|    const auto argcount = args.size();
 1750|   558k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 110k, False: 448k]
  |  Branch (1750:60): [True: 110k, False: 0]
  ------------------
 1751|   110k|        auto arg = args.get(0);
 1752|   110k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   110k|    static_cast<    \
  |  |  935|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   110k|    }
 1754|       |
 1755|   448k|    auto handler = format_handler<true, CharT>{
 1756|   448k|        ranges::subrange<const CharT*>{source.data(),
 1757|   448k|                                       source.data() + source.size()},
 1758|   448k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   448k|    static_cast<    \
  |  |  935|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   448k|    static_cast<    \
  |  |  935|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   448k|    return vscan_parse_format_string(format, handler);
 1760|   558k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.11M|{
 1317|  1.11M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 896k, False: 220k]
  ------------------
 1318|   896k|        return false;
 1319|   896k|    }
 1320|   220k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 220k, False: 0]
  |  Branch (1320:39): [True: 220k, False: 0]
  ------------------
 1321|  1.11M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   165k|{
 1330|   165k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   165k|    auto reader =
 1336|   165k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   165k|            ranges::subrange<const CharT*>{source.data(),
 1338|   165k|                                           source.data() + source.size()},
 1339|   165k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   165k|    static_cast<    \
  |  |  935|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   165k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42.1k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.1k|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   123k|    return ranges::distance(source.data(), it);
 1342|   165k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   448k|        : format_handler_base{argcount},
 1593|   448k|          parse_ctx{source_tag<Source&&>, format},
 1594|   448k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   448k|    static_cast<    \
  |  |  935|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   448k|    static_cast<    \
  |  |  935|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   448k|    {
 1596|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   448k|        : contiguous_ctx(source, args, loc)
 1544|   448k|    {
 1545|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   448k|{
 1734|   448k|    const auto beg = handler.get_ctx().begin();
 1735|   448k|    detail::parse_format_string<false>(format, handler);
 1736|   448k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140k, False: 307k]
  |  |  ------------------
  ------------------
 1737|   140k|        return unexpected(err.error());
 1738|   140k|    }
 1739|   307k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   448k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  2.85M|    {
 1718|  2.85M|        return ctx.get();
 1719|  2.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  2.85M|    {
 1549|  2.85M|        return contiguous_ctx;
 1550|  2.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   755k|    {
 1600|   755k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 755k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   755k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   448k|{
 1372|   448k|    auto arg = ctx.arg(id);
 1373|   448k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   448k|    return arg;
 1377|   448k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   448k|    {
 1640|   448k|        return parse_ctx.next_arg_id();
 1641|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   448k|    {
 1680|   448k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   448k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   448k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 448k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   448k|        auto specs = detail::format_specs{};
 1693|   448k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   448k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   448k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   448k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   448k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 448k]
  |  Branch (1698:29): [True: 0, False: 448k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   448k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   448k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   448k|        on_visit_scan_arg(
 1710|   448k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   448k|                                           get_ctx().locale()},
 1712|   448k|            arg);
 1713|   448k|        return parse_ctx.begin();
 1714|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   448k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   448k|    {
 1391|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   448k|    {
 1651|   448k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 448k]
  |  Branch (1651:13): [True: 0, False: 448k]
  |  Branch (1651:29): [True: 0, False: 448k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   448k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   448k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140k, False: 307k]
  |  |  ------------------
  ------------------
 1658|   140k|            on_error(r.error());
 1659|   140k|        }
 1660|   307k|        else {
 1661|   307k|            get_ctx().advance_to(*r);
 1662|   307k|        }
 1663|   448k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   558k|{
 1769|   558k|    const auto argcount = args.size();
 1770|   558k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 110k, False: 447k]
  |  Branch (1770:60): [True: 110k, False: 0]
  ------------------
 1771|   110k|        auto arg = args.get(0);
 1772|   110k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   110k|    static_cast<    \
  |  |  935|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   110k|    }
 1774|       |
 1775|   447k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 447k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   447k|    SCN_UNLIKELY_ATTR
 1783|   447k|    {
 1784|   447k|        auto handler = format_handler<false, CharT>{
 1785|   447k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   447k|        return vscan_parse_format_string(format, handler);
 1787|   447k|    }
 1788|   447k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   165k|{
 1350|   165k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   165k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   165k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   165k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   165k|    static_cast<    \
  |  |  935|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   165k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42.1k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.1k|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   123k|    return it.position();
 1367|   165k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   447k|        : format_handler_base{argcount},
 1593|   447k|          parse_ctx{source_tag<Source&&>, format},
 1594|   447k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   447k|    {
 1596|   447k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   447k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   447k|    static_cast<    \
  |  |  935|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   447k|    {
 1521|   447k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   447k|{
 1734|   447k|    const auto beg = handler.get_ctx().begin();
 1735|   447k|    detail::parse_format_string<false>(format, handler);
 1736|   447k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140k, False: 307k]
  |  |  ------------------
  ------------------
 1737|   140k|        return unexpected(err.error());
 1738|   140k|    }
 1739|   307k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   447k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.85M|    {
 1718|  2.85M|        return ctx.get();
 1719|  2.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.85M|    {
 1525|  2.85M|        return ctx;
 1526|  2.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   755k|    {
 1600|   755k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 755k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   755k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   447k|{
 1372|   447k|    auto arg = ctx.arg(id);
 1373|   447k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   447k|    return arg;
 1377|   447k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   447k|    {
 1640|   447k|        return parse_ctx.next_arg_id();
 1641|   447k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   447k|    {
 1680|   447k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   447k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   447k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 447k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   447k|        auto specs = detail::format_specs{};
 1693|   447k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   447k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   447k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   447k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   447k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 447k]
  |  Branch (1698:29): [True: 0, False: 447k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   447k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   447k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   447k|        on_visit_scan_arg(
 1710|   447k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   447k|                                           get_ctx().locale()},
 1712|   447k|            arg);
 1713|   447k|        return parse_ctx.begin();
 1714|   447k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   447k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   447k|    {
 1391|   447k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   447k|    {
 1651|   447k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 447k]
  |  Branch (1651:13): [True: 0, False: 447k]
  |  Branch (1651:29): [True: 0, False: 447k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   447k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   447k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140k, False: 307k]
  |  |  ------------------
  ------------------
 1658|   140k|            on_error(r.error());
 1659|   140k|        }
 1660|   307k|        else {
 1661|   307k|            get_ctx().advance_to(*r);
 1662|   307k|        }
 1663|   447k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   613k|{
 1849|   613k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   613k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 430k, False: 182k]
  |  |  ------------------
  ------------------
 1850|   430k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   430k|    }
 1856|   182k|    else {
 1857|   182k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   182k|    }
 1863|   613k|    return result;
 1864|   613k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  92.1k|{
 1795|  92.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  92.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   100k|{
 1795|   100k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  55.1k|{
 1795|  55.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  55.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  55.0k|{
 1795|  55.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  55.0k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.34k|{
 1462|  2.34k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.34k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.34k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.34k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.34k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.34k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.34k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.34k|{
 1355|  2.34k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.34k|    auto it = src.begin();
 1358|   665k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 662k, False: 2.34k]
  ------------------
 1359|   662k|        auto res = get_next_code_point(
 1360|   662k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   662k|                                                                 src.end()));
 1362|   662k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 661k]
  |  |  ------------------
  ------------------
 1363|  1.95k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.95k|        }
 1365|   661k|        else {
 1366|   661k|            dest.push_back(res.value);
 1367|   661k|        }
 1368|   662k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   662k|    }
 1370|  2.34k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   961k|{
 1279|   961k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   961k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   961k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   961k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   961k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.1k, False: 934k]
  |  |  ------------------
  ------------------
 1283|  27.1k|        return {get_start_for_next_code_point(input),
 1284|  27.1k|                detail::invalid_code_point};
 1285|  27.1k|    }
 1286|   934k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   934k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.63k, False: 930k]
  |  |  ------------------
  ------------------
 1287|  3.63k|        return {input.end(), detail::invalid_code_point};
 1288|  3.63k|    }
 1289|       |
 1290|   930k|    return {input.begin() + len,
 1291|   930k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   934k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  27.1k|{
 1265|  27.1k|    auto it = input.begin();
 1266|   168k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 161k, False: 7.41k]
  ------------------
 1267|   161k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 19.7k, False: 141k]
  ------------------
 1268|  19.7k|            break;
 1269|  19.7k|        }
 1270|   161k|    }
 1271|  27.1k|    return it;
 1272|  27.1k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.0M|    constexpr parse_error(code c) : m_code(c)
  808|  29.0M|    {
  809|  29.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  29.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.0M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.0M|    {
  823|  13.0M|        return a.m_code == b.m_code;
  824|  13.0M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.41M|    {
  827|  3.41M|        return !(a == b);
  828|  3.41M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.33M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.33M|    {
 1827|  1.33M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.33M|        std::strcpy(m_locbuf, loc);
 1829|  1.33M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.33M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.33M|        std::setlocale(m_category, m_locbuf);
 1834|  1.33M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.33M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.33M|    {
 1856|  1.33M|        std::setlocale(cat, "C");
 1857|  1.33M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  2.33M|    {
 3051|  2.33M|        return m_msg == nullptr;
 3052|  2.33M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  2.30M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  15.0M|{
  458|  15.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  15.0M|        static_cast<unsigned char>(ch))];
  460|  15.0M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   159k|{
  469|   159k|    return static_cast<unsigned char>(ch) <= 127;
  470|   159k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.45M|{
  539|  3.45M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.45M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  10.8M|{
  784|  10.8M|    return e != eof_error::good;
  785|  10.8M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  44.6k|{
  798|  44.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  44.6k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  44.6k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   217k|{
  845|   217k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   217k|    return parse_error::eof;
  847|   217k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.41M|{
  854|  3.41M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.41M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.41M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 80.1k, False: 3.33M]
  ------------------
  859|  80.1k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  80.1k|    }
  861|       |
  862|  3.33M|    return detail::unexpected_scan_error(code, msg);
  863|  3.41M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.41M|{
  868|  3.41M|    return [code, msg](parse_error err) {
  869|  3.41M|        assert(err != parse_error::good);
  870|  3.41M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.41M|    };
  872|  3.41M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.41M|{
 2320|  2.41M|    unsigned char running_diff{0};
 2321|  9.07M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 6.66M, False: 2.41M]
  ------------------
 2322|  6.66M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  6.66M|    }
 2324|  2.41M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 77.1k, False: 2.33M]
  |  Branch (2324:33): [True: 17.3k, False: 2.32M]
  ------------------
 2325|  2.41M|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  18.1M|{
 3240|  18.1M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  18.1M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  3.36M|{
 3244|  3.36M|#if WCHAR_MIN < 0
 3245|  3.36M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 3.34M, False: 15.0k]
  |  Branch (3245:20): [True: 2.13M, False: 1.21M]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  2.13M|        return char_to_int(static_cast<char>(ch));
 3250|  2.13M|    }
 3251|  1.22M|    return 255;
 3252|  3.36M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.91M|{
 6047|  1.91M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.91M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.91M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.91M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.91M|    return {};
 6061|  1.91M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.70M|    {
  304|  2.70M|        ranges::advance(x, n);
  305|  2.70M|        return x;
  306|  2.70M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.70M|    {
  268|  2.70M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.70M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.70M|    {
  151|  2.70M|        i += n;
  152|  2.70M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.21M|    {
  108|  3.21M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.21M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.21M|    {
   87|  3.21M|        return s - i;
   88|  3.21M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.98M|    {
  304|  1.98M|        ranges::advance(x, n);
  305|  1.98M|        return x;
  306|  1.98M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.98M|    {
  268|  1.98M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.98M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.98M|    {
  151|  1.98M|        i += n;
  152|  1.98M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   569k|    {
  108|   569k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   569k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   569k|    {
   87|   569k|        return s - i;
   88|   569k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|  1.91M|    {
 2993|  1.91M|        return m_current;
 2994|  1.91M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.20M|    {
 2993|  1.20M|        return m_current;
 2994|  1.20M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.07M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.07M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.07M|        auto beg = r.begin();
  991|  1.07M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.07M, False: 0]
  ------------------
  992|  1.07M|            return false;
  993|  1.07M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.07M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.82M|{
 1956|  2.82M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.82M|    else {
 1967|  2.82M|        auto it = range.begin();
 1968|  2.82M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.74M, False: 1.08M]
  ------------------
 1969|  1.74M|            return ranges::next(it, count);
 1970|  1.74M|        }
 1971|       |
 1972|  4.31M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.25M, False: 1.05M]
  ------------------
 1973|  3.25M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.1k, False: 3.22M]
  ------------------
 1974|  35.1k|                return unexpected(eof_error::eof);
 1975|  35.1k|            }
 1976|  3.25M|        }
 1977|       |
 1978|  1.05M|        return it;
 1979|  1.08M|    }
 1980|  2.82M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.82M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.82M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.82M|        else {
 1107|  2.82M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.82M, False: 0]
  ------------------
 1108|  2.82M|                return static_cast<size_t>(
 1109|  2.82M|                    r.begin().parent()->chars_available() -
 1110|  2.82M|                    r.begin().position());
 1111|  2.82M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.82M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.82M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  28.0M|    {
  763|  28.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  28.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.0M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.58M|        : m_fptr([](storage fn,
  743|  2.58M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.58M|              cvref<T> obj = *get<T>(fn);
  745|  2.58M|              if constexpr (std::is_void_v<R>) {
  746|  2.58M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.58M|              }
  748|  2.58M|              else {
  749|  2.58M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.58M|              }
  751|  2.58M|          }),
  752|  2.58M|          m_storage(std::addressof(f))
  753|  2.58M|    {
  754|  2.58M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.0M|              else {
  749|  14.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.0M|              }
  751|  14.0M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.0M|        else if constexpr (std::is_object_v<T>) {
  688|  14.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.0M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.58M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.58M|        {
  662|  2.58M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.48M|    {
  763|  8.48M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.48M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.17M|        : m_fptr([](storage fn,
  743|  2.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.17M|              cvref<T> obj = *get<T>(fn);
  745|  2.17M|              if constexpr (std::is_void_v<R>) {
  746|  2.17M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.17M|              }
  748|  2.17M|              else {
  749|  2.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.17M|              }
  751|  2.17M|          }),
  752|  2.17M|          m_storage(std::addressof(f))
  753|  2.17M|    {
  754|  2.17M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.82M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.82M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.82M|              else {
  749|  3.82M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.82M|              }
  751|  3.82M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.82M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.82M|        else if constexpr (std::is_object_v<T>) {
  688|  3.82M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.82M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.17M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.17M|        {
  662|  2.17M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   776k|    {
 6075|   776k|        const bool need_skipped_width =
 6076|   776k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 776k]
  |  Branch (6076:33): [True: 0, False: 776k]
  ------------------
 6077|   776k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   776k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 776k]
  ------------------
 6081|   776k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 776k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   776k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 776k, False: 0]
  |  Branch (6085:56): [True: 776k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   776k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 776k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.53M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   776k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   776k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   776k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.7k, False: 761k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.7k|    }                                                  \
  |  |  |  | 3939|   776k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.53M|                            make_eof_scan_error));
 6096|       |
 6097|  1.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 761k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   761k|            return result_type{it, 0};
 6105|  1.53M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   776k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.06M|{
 2075|  2.06M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.06M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.06M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.06M|    else {
 2060|  2.06M|        auto first = range.begin();
 2061|  11.3M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 11.3M, False: 27.0k]
  ------------------
 2062|  11.3M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.03M, False: 9.32M]
  ------------------
 2063|  2.03M|                return first;
 2064|  2.03M|            }
 2065|  11.3M|        }
 2066|  27.0k|        return first;
 2067|  2.06M|    }
 2068|  2.06M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.81M|    {
  108|  1.81M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.81M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.81M|    {
   94|  1.81M|        iter_difference_t<I> counter{0};
   95|  18.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.4M, False: 1.81M]
  ------------------
   96|  16.4M|            ++i;
   97|  16.4M|            ++counter;
   98|  16.4M|        }
   99|  1.81M|        return counter;
  100|  1.81M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.41M|    return [code, msg](parse_error err) {
  869|  3.41M|        assert(err != parse_error::good);
  870|  3.41M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.41M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   399k|    {
 1879|   399k|        auto stdloc = loc.get<std::locale>();
 1880|   399k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   399k|        grouping = numpunct.grouping();
 1882|   399k|        thousands_sep =
 1883|   399k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 399k]
  ------------------
 1884|   399k|        decimal_point = numpunct.decimal_point();
 1885|   399k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   399k|{
 1816|   399k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 399k, False: 0]
  ------------------
 1817|   399k|        return std::use_facet<Facet>(stdloc);
 1818|   399k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   399k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.02M|{
 1945|  3.02M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.7k, False: 3.00M]
  |  |  ------------------
  ------------------
 1946|  19.7k|        return unexpected(e);
 1947|  19.7k|    }
 1948|       |
 1949|  3.00M|    return ranges::next(range.begin());
 1950|  3.02M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.39M|{
  951|  4.39M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  4.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.3k, False: 4.36M]
  |  |  ------------------
  ------------------
  952|  39.3k|        return eof_error::eof;
  953|  39.3k|    }
  954|  4.36M|    return eof_error::good;
  955|  4.39M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.12M|{
  945|  6.12M|    return is_range_eof(r.begin(), r.end());
  946|  6.12M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.12M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.12M|    {
  938|  6.12M|        return begin == end;
  939|  6.12M|    }
  940|  6.12M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.00M|    {
  296|  3.00M|        ++x;
  297|  3.00M|        return x;
  298|  3.00M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|  1.16M|{
 3258|  1.16M|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.16M|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 881k, False: 284k]
  ------------------
 3260|   881k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 881k, False: 279]
  ------------------
 3261|   881k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   881k|        }
 3263|    279|        return unexpected(eof_error::eof);
 3264|   881k|    }
 3265|       |
 3266|   284k|    auto& it = *r;
 3267|   284k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 121k, False: 163k]
  ------------------
 3268|   121k|        return std::pair{it, sign_type::minus_sign};
 3269|   121k|    }
 3270|   163k|    return std::pair{it, sign_type::plus_sign};
 3271|   284k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.02M|{
 2372|  2.02M|    auto it = read_code_unit(range);
 2373|  2.02M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 2.01M]
  |  |  ------------------
  ------------------
 2374|  11.4k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.4k|    }
 2376|       |
 2377|  3.78M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.78M, False: 1.61M]
  ------------------
 2378|  3.78M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 391k, False: 3.39M]
  ------------------
 2379|   391k|            return *it;
 2380|   391k|        }
 2381|  3.78M|    }
 2382|       |
 2383|  1.61M|    return unexpected(parse_error::error);
 2384|  2.01M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  2.82M|{
 2331|  2.82M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  2.82M|    else {
 2344|  2.82M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  2.82M|            if (ch < 'A' || ch > 'Z') {
 2346|  2.82M|                return ch;
 2347|  2.82M|            }
 2348|  2.82M|            return static_cast<char_type>(ch +
 2349|  2.82M|                                          static_cast<char_type>('a' - 'A'));
 2350|  2.82M|        };
 2351|       |
 2352|  2.82M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.82M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.82M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.82M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 35.1k, False: 2.79M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  35.1k|    }                                                  \
  |  |  |  | 3939|  2.82M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  2.79M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  2.79M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  2.79M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  2.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.69M, False: 102k]
  |  |  ------------------
  ------------------
 2357|  2.79M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  2.79M|                    return ascii_tolower(a) ==
 2359|  2.79M|                           static_cast<detail::char_t<Range>>(b);
 2360|  2.79M|                }))) {
 2361|  2.69M|            return unexpected(parse_error::error);
 2362|  2.69M|        }
 2363|       |
 2364|   102k|        return it;
 2365|  2.79M|    }
 2366|  2.82M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.22M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.22M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 2.89M, False: 325k]
  |  Branch (2345:29): [True: 265k, False: 59.7k]
  ------------------
 2346|  3.16M|                return ch;
 2347|  3.16M|            }
 2348|  59.7k|            return static_cast<char_type>(ch +
 2349|  59.7k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.22M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  1.00M|{
 2246|  1.00M|    auto it = read_code_unit(range);
 2247|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.34k, False: 992k]
  |  |  ------------------
  ------------------
 2248|  8.34k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.34k|    }
 2250|       |
 2251|   992k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 807k, False: 184k]
  |  |  ------------------
  ------------------
 2252|   992k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   807k|        return unexpected(parse_error::error);
 2254|   807k|    }
 2255|       |
 2256|   184k|    return *it;
 2257|   992k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.05M|{
 2095|  2.05M|    auto it = read_while_code_unit(range, pred);
 2096|  2.05M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 842k, False: 1.21M]
  ------------------
 2097|   842k|        return unexpected(parse_error::error);
 2098|   842k|    }
 2099|  1.21M|    return it;
 2100|  2.05M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   942k|    {
 1720|   942k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   942k|                           ranges::common_range<Range>) {
 1737|   942k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   942k|            auto end_seg = range.end().contiguous_segment();
 1739|   942k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   942k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 141k, False: 801k]
  |  |  ------------------
  ------------------
 1740|   942k|                             detail::to_address(end_seg.end()))) {
 1741|   141k|                auto& str = m_storage.emplace();
 1742|   141k|                str.reserve(range.end().position() - range.begin().position());
 1743|   141k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   141k|                m_view = string_view_type{str};
 1745|   141k|                return;
 1746|   141k|            }
 1747|       |
 1748|   801k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   801k|                                                            end_seg.data());
 1750|   801k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   942k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  6.43M|    {
 1681|  6.43M|        return m_view;
 1682|  6.43M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  3.96M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   694k|    {
 6117|   694k|        const bool need_skipped_width =
 6118|   694k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 694k]
  |  Branch (6118:33): [True: 0, False: 694k]
  ------------------
 6119|   694k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   694k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 694k]
  ------------------
 6122|   694k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 694k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   694k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 694k, False: 0]
  ------------------
 6131|   694k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 694k]
  ------------------
 6132|   694k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   694k|        return result_type{rng.begin(), 0};
 6156|   694k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.37M|{
 1945|  1.37M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.84k, False: 1.37M]
  |  |  ------------------
  ------------------
 1946|  4.84k|        return unexpected(e);
 1947|  4.84k|    }
 1948|       |
 1949|  1.37M|    return ranges::next(range.begin());
 1950|  1.37M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.58M|{
  951|  2.58M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 2.56M]
  |  |  ------------------
  ------------------
  952|  20.7k|        return eof_error::eof;
  953|  20.7k|    }
  954|  2.56M|    return eof_error::good;
  955|  2.58M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.58M|{
  945|  2.58M|    return is_range_eof(r.begin(), r.end());
  946|  2.58M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.58M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.58M|    {
  938|  2.58M|        return begin == end;
  939|  2.58M|    }
  940|  2.58M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.37M|    {
  296|  1.37M|        ++x;
  297|  1.37M|        return x;
  298|  1.37M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   946k|{
 3258|   946k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   946k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 715k, False: 231k]
  ------------------
 3260|   715k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 715k, False: 90]
  ------------------
 3261|   715k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   715k|        }
 3263|     90|        return unexpected(eof_error::eof);
 3264|   715k|    }
 3265|       |
 3266|   231k|    auto& it = *r;
 3267|   231k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 109k, False: 122k]
  ------------------
 3268|   109k|        return std::pair{it, sign_type::minus_sign};
 3269|   109k|    }
 3270|   122k|    return std::pair{it, sign_type::plus_sign};
 3271|   231k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.09M|{
 2372|  1.09M|    auto it = read_code_unit(range);
 2373|  1.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.03k, False: 1.09M]
  |  |  ------------------
  ------------------
 2374|  2.03k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.03k|    }
 2376|       |
 2377|  2.04M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.04M, False: 837k]
  ------------------
 2378|  2.04M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 256k, False: 1.79M]
  ------------------
 2379|   256k|            return *it;
 2380|   256k|        }
 2381|  2.04M|    }
 2382|       |
 2383|   837k|    return unexpected(parse_error::error);
 2384|  1.09M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.45M|{
 2331|  2.45M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.45M|                  std::is_same_v<char_type, char>) {
 2335|  2.45M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.1k, False: 2.41M]
  ------------------
 2336|  35.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.1k|        }
 2338|  2.41M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.32M, False: 94.5k]
  ------------------
 2339|  2.32M|            return unexpected(parse_error::error);
 2340|  2.32M|        }
 2341|  94.5k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.45M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   283k|{
 2246|   283k|    auto it = read_code_unit(range);
 2247|   283k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.80k, False: 280k]
  |  |  ------------------
  ------------------
 2248|  2.80k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.80k|    }
 2250|       |
 2251|   280k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 229k, False: 50.6k]
  |  |  ------------------
  ------------------
 2252|   280k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   229k|        return unexpected(parse_error::error);
 2254|   229k|    }
 2255|       |
 2256|  50.6k|    return *it;
 2257|   280k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.53M|    {
 1602|  3.53M|        return sv;
 1603|  3.53M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   521k|{
 2075|   521k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   521k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   521k|{
 2056|   521k|    if constexpr (ranges::common_range<Range>) {
 2057|   521k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   521k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   932k|{
 3066|   932k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 932k, False: 0]
  ------------------
 3067|   932k|        auto it = read_while_classic_space(range);
 3068|   932k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   932k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   932k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.9k, False: 920k]
  |  |  ------------------
  ------------------
 3070|  11.9k|            return unexpected(e);
 3071|  11.9k|        }
 3072|       |
 3073|   920k|        return it;
 3074|   932k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   932k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   932k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   932k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   932k|        auto buf = make_contiguous_buffer(range);
 2220|   932k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   932k|        return ranges::next(range.begin(),
 2222|   932k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   932k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   932k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   932k|                  ranges::sized_range<Range>) {
 1785|   932k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   932k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   932k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   932k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   932k|    {
 1589|   932k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.85M|    {
  304|  2.85M|        ranges::advance(x, n);
  305|  2.85M|        return x;
  306|  2.85M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.80M|    {
  268|  3.80M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.80M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.80M|    {
  181|  18.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.3M, False: 3.80M]
  ------------------
  182|  14.3M|            ++i;
  183|  14.3M|        }
  184|  3.80M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   249k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   249k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   249k|            auto rd = make_reader<T, char_type>();
 6237|   249k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   249k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 249k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   249k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 249k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   249k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   249k|                return impl(rd, range, value);
 6242|   249k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   249k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.43M|    {
 3156|  1.43M|        reader_error_handler eh{};
 3157|  1.43M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.43M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|  1.43M|        return {};
 3163|  1.43M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  1.43M|    {
 3168|  1.43M|        return static_cast<Derived&>(*this);
 3169|  1.43M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.43M|    {
 4178|  1.43M|        detail::check_float_type_specs(specs, eh);
 4179|  1.43M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   249k|    {
 6162|   249k|        const bool need_skipped_width =
 6163|   249k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 249k]
  |  Branch (6163:33): [True: 0, False: 249k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   249k|        auto it = rng.begin();
 6167|   249k|        std::ptrdiff_t prefix_width = 0;
 6168|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 249k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   249k|        else {
 6176|   249k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.46k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.46k|    }                                                  \
  |  |  |  | 3939|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   244k|            std::tie(it, prefix_width) = prefix_result;
 6178|   244k|        }
 6179|   244k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   244k|        std::ptrdiff_t value_width = 0;
 6183|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 244k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   244k|        else {
 6199|   244k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.9k, False: 226k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.9k|    }                                                  \
  |  | 3939|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   226k|                                             specs, value, loc));
 6201|       |
 6202|   226k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 226k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   226k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   226k|        std::ptrdiff_t postfix_width = 0;
 6211|   226k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 222k, False: 3.58k]
  ------------------
 6212|   222k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   222k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   222k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   222k|                                 value_width));
 6216|   222k|            std::tie(it, postfix_width) = postfix_result;
 6217|   222k|        }
 6218|       |
 6219|   226k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   226k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 226k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   226k|            specs, prefix_width, value_width, postfix_width));
 6221|   226k|        return it;
 6222|   226k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  3.29M|    {
 3151|  3.29M|        return true;
 3152|  3.29M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|  1.41M|    {
 4250|  1.41M|        unsigned options{};
 4251|  1.41M|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 399k, False: 1.01M]
  ------------------
 4252|   399k|            options |= float_reader_base::allow_thsep;
 4253|   399k|        }
 4254|       |
 4255|  1.41M|        SCN_GCC_COMPAT_PUSH
 4256|  1.41M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|  1.41M|        switch (specs.type) {
 4259|   208k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 208k, False: 1.20M]
  ------------------
 4260|   208k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  40.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 40.9k, False: 1.36M]
  ------------------
 4263|  40.9k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   430k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 430k, False: 980k]
  ------------------
 4266|   430k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   331k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 331k, False: 1.07M]
  ------------------
 4269|   331k|                return options | float_reader_base::allow_scientific |
 4270|   331k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   399k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 399k, False: 1.01M]
  ------------------
 4273|   399k|                return options | float_reader_base::allow_scientific |
 4274|   399k|                       float_reader_base::allow_fixed |
 4275|   399k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.41M]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|  1.41M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|  1.41M|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|  1.41M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|  1.41M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.98M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  3.96M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   604k|    {
 3733|   604k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   604k|        const std::ptrdiff_t sign_len =
 3736|   604k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 151k, False: 452k]
  ------------------
 3737|       |
 3738|   604k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   604k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   604k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   604k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 588k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.4k|    }                                                  \
  |  |  |  | 3939|   604k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   588k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   604k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|  1.87M|    {
 4090|  1.87M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 1.87M, False: 0]
  ------------------
 4091|  1.87M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 1.87M, False: 0]
  ------------------
 4092|  1.87M|            return;
 4093|  1.87M|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.14M|    {
 1686|  2.14M|        return m_storage.has_value();
 1687|  2.14M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.25M|    {
 1691|  1.25M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.25M|        return *m_storage;
 1693|  1.25M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   244k|    {
 4203|   244k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   244k|#if !SCN_DISABLE_LOCALE
 4206|   244k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 68.7k, False: 176k]
  ------------------
 4207|  68.7k|            return read_impl<Range>(
 4208|  68.7k|                range, rd,
 4209|  68.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  68.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  68.7k|                },
 4212|  68.7k|                value, loc);
 4213|  68.7k|        }
 4214|   176k|#endif
 4215|       |
 4216|   176k|        return read_impl<Range>(
 4217|   176k|            range, rd,
 4218|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   176k|                return r.read_source(SCN_FWD(args)...);
 4220|   176k|            },
 4221|   176k|            value);
 4222|   244k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   340k|    {
 4239|   340k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   340k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 318k]
  |  |  ------------------
  ------------------
 4241|  21.4k|            return unexpected(r.error());
 4242|  21.4k|        }
 4243|       |
 4244|   318k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.08k, False: 315k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.08k|    }                                                  \
  |  |  |  | 3939|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   315k|        return ranges::next(range.begin(), n);
 4246|   318k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.05M|    {
  763|  1.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  68.7k|        : m_fptr([](storage fn,
  743|  68.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.7k|              cvref<T> obj = *get<T>(fn);
  745|  68.7k|              if constexpr (std::is_void_v<R>) {
  746|  68.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.7k|              }
  748|  68.7k|              else {
  749|  68.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.7k|              }
  751|  68.7k|          }),
  752|  68.7k|          m_storage(std::addressof(f))
  753|  68.7k|    {
  754|  68.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  68.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  68.7k|              else {
  749|  68.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.7k|              }
  751|  68.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  68.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  68.7k|        else if constexpr (std::is_object_v<T>) {
  688|  68.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  68.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  68.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  68.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  68.7k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   217k|    {
 3721|   217k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   217k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   217k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   217k|        return read_source_impl(range);
 3727|   217k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|  1.05M|    {
 3747|  1.05M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  1.05M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  1.05M|        auto it = sign_result.first;
 3750|  1.05M|        m_sign = sign_result.second;
 3751|       |
 3752|  1.05M|        auto digits_begin = it;
 3753|  1.05M|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|  1.05M|        else {
 3780|  1.05M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.7k, False: 992k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.7k|    }                                                  \
  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   992k|                it,
 3782|   992k|                do_read_source_impl(
 3783|   992k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   992k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   992k|        }
 3786|       |
 3787|  1.05M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   992k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 987k, False: 5.51k]
  |  Branch (3789:48): [True: 982k, False: 4.86k]
  ------------------
 3790|   992k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 941k, False: 41.3k]
  ------------------
 3791|   992k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 937k, False: 3.41k]
  ------------------
 3792|   937k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   937k|        }
 3794|       |
 3795|   992k|        handle_separators();
 3796|       |
 3797|   992k|        return it;
 3798|  1.05M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|  1.05M|    {
 4033|  1.05M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  1.05M|        const bool allowed_nonhex =
 4035|  1.05M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  1.05M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  1.05M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 1.04M, False: 10.3k]
  |  Branch (4038:45): [True: 0, False: 1.04M]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  1.05M|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 10.3k, False: 1.04M]
  ------------------
 4044|  10.3k|            return *r;
 4045|  10.3k|        }
 4046|       |
 4047|  1.04M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 1.00M, False: 44.7k]
  |  Branch (4047:45): [True: 1.38k, False: 1.00M]
  ------------------
 4048|  1.38k|            return unexpected(r.error());
 4049|  1.38k|        }
 4050|  1.04M|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 44.7k, False: 1.00M]
  ------------------
 4051|  44.7k|            return *r;
 4052|  44.7k|        }
 4053|       |
 4054|  1.00M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 710k, False: 292k]
  |  Branch (4054:28): [True: 223k, False: 487k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   223k|            auto it = range.begin();
 4058|       |
 4059|   223k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 12.3k, False: 210k]
  ------------------
 4060|  12.3k|                m_kind = float_kind::hex_with_prefix;
 4061|  12.3k|                it = *r;
 4062|  12.3k|            }
 4063|   210k|            else {
 4064|   210k|                m_kind = float_kind::hex_without_prefix;
 4065|   210k|            }
 4066|       |
 4067|   223k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   223k|        }
 4069|   779k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 292k, False: 487k]
  |  Branch (4069:29): [True: 292k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   292k|            m_kind = float_kind::generic;
 4073|   292k|            return read_regular_float(range);
 4074|   292k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   487k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 458k]
  |  |  ------------------
  ------------------
 4080|  28.9k|            m_kind = float_kind::hex_with_prefix;
 4081|  28.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  28.9k|        }
 4083|       |
 4084|   458k|        m_kind = float_kind::generic;
 4085|   458k|        return read_regular(range);
 4086|   487k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|  1.05M|    {
 3841|  1.05M|        auto it = range.begin();
 3842|  1.05M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 1.04M, False: 10.3k]
  ------------------
 3843|  1.04M|            return unexpected(r.error());
 3844|  1.04M|        }
 3845|  10.3k|        else {
 3846|  10.3k|            it = *r;
 3847|  10.3k|        }
 3848|       |
 3849|  10.3k|        if (auto r = read_matching_string_classic_nocase(
 3850|  10.3k|                ranges::subrange{it, range.end()}, "inity");
 3851|  10.3k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.51k, False: 4.86k]
  ------------------
 3852|  5.51k|            m_kind = float_kind::inf_short;
 3853|  5.51k|            return it;
 3854|  5.51k|        }
 3855|  4.86k|        else {
 3856|  4.86k|            m_kind = float_kind::inf_long;
 3857|  4.86k|            return *r;
 3858|  4.86k|        }
 3859|  10.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|  1.04M|    {
 3864|  1.04M|        auto it = range.begin();
 3865|  1.04M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 1.00M, False: 46.1k]
  ------------------
 3866|  1.00M|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  1.00M|                scan_error::invalid_scanned_value,
 3868|  1.00M|                "Invalid floating-point NaN value"));
 3869|  1.00M|        }
 3870|  46.1k|        else {
 3871|  46.1k|            it = *r;
 3872|  46.1k|        }
 3873|       |
 3874|  46.1k|        if (auto r =
 3875|  46.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  46.1k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 41.3k, False: 4.80k]
  ------------------
 3877|  41.3k|            m_kind = float_kind::nan_simple;
 3878|  41.3k|            return it;
 3879|  41.3k|        }
 3880|  4.80k|        else {
 3881|  4.80k|            it = *r;
 3882|  4.80k|        }
 3883|       |
 3884|  4.80k|        auto payload_beg_it = it;
 3885|  4.80k|        it = read_while_code_unit(
 3886|  4.80k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  4.80k|                return is_ascii_char(ch) &&
 3888|  4.80k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  4.80k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  4.80k|            });
 3891|  4.80k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  4.80k|        m_kind = float_kind::nan_with_payload;
 3894|  4.80k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 3.41k, False: 1.38k]
  ------------------
 3895|  4.80k|                                             ')')) {
 3896|  3.41k|            return *r;
 3897|  3.41k|        }
 3898|  1.38k|        return detail::unexpected_scan_error(
 3899|  1.38k|            scan_error::invalid_scanned_value,
 3900|  1.38k|            "Invalid floating-point NaN payload");
 3901|  4.80k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  4.80k|        : m_fptr([](storage fn,
  743|  4.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.80k|              cvref<T> obj = *get<T>(fn);
  745|  4.80k|              if constexpr (std::is_void_v<R>) {
  746|  4.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.80k|              }
  748|  4.80k|              else {
  749|  4.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.80k|              }
  751|  4.80k|          }),
  752|  4.80k|          m_storage(std::addressof(f))
  753|  4.80k|    {
  754|  4.80k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  80.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.3k|              else {
  749|  80.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.3k|              }
  751|  80.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  80.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.3k|        else if constexpr (std::is_object_v<T>) {
  688|  80.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.3k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3886|  80.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  80.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 80.2k, False: 83]
  ------------------
 3888|  80.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 76.5k, False: 3.70k]
  |  Branch (3888:39): [True: 68.7k, False: 7.84k]
  |  Branch (3888:54): [True: 2.59k, False: 8.95k]
  |  Branch (3888:67): [True: 2.51k, False: 83]
  ------------------
 3889|  80.2k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 3.70k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 3.79k]
  ------------------
 3890|  80.3k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  4.80k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.80k|        {
  662|  4.80k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   710k|    {
 3834|   710k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   710k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   252k|    {
 3935|   252k|        auto it = range.begin();
 3936|       |
 3937|   252k|        std::ptrdiff_t digits_count = 0;
 3938|   252k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   252k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.27k, False: 243k]
  |  |  ------------------
  ------------------
 3940|  8.27k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  8.27k|                scan_error::invalid_scanned_value,
 3942|  8.27k|                "Invalid hexadecimal floating-point value"));
 3943|  8.27k|        }
 3944|   243k|        else {
 3945|   243k|            digits_count += ranges::distance(it, *r);
 3946|   243k|            it = *r;
 3947|   243k|        }
 3948|       |
 3949|   243k|        m_integral_part_length = digits_count;
 3950|   243k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 37.4k, False: 206k]
  ------------------
 3951|   243k|                                             m_locale_options.decimal_point)) {
 3952|  37.4k|            it = *r;
 3953|  37.4k|        }
 3954|       |
 3955|   243k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 33.8k, False: 209k]
  ------------------
 3956|   243k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  33.8k|            digits_count += ranges::distance(it, *r);
 3958|  33.8k|            it = *r;
 3959|  33.8k|        }
 3960|       |
 3961|   243k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|   243k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|   243k|        return it;
 3970|   243k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   495k|    {
 3819|   495k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 495k]
  |  |  |  Branch (865:45): [True: 0, False: 495k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   495k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   495k|        return read_while1_code_unit(
 3828|   495k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   495k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   495k|        : m_fptr([](storage fn,
  743|   495k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   495k|              cvref<T> obj = *get<T>(fn);
  745|   495k|              if constexpr (std::is_void_v<R>) {
  746|   495k|                  obj(static_cast<decltype(args)>(args)...);
  747|   495k|              }
  748|   495k|              else {
  749|   495k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   495k|              }
  751|   495k|          }),
  752|   495k|          m_storage(std::addressof(f))
  753|   495k|    {
  754|   495k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.67M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.67M|        else if constexpr (std::is_object_v<T>) {
  688|  2.67M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.67M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3828|  2.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   495k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   495k|        {
  662|   495k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   855k|    {
 3907|   855k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 106k, False: 749k]
  ------------------
 3908|   106k|            auto beg_exp_it = range.begin();
 3909|   106k|            auto it = *r;
 3910|       |
 3911|   106k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 106k, False: 279]
  ------------------
 3912|   106k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|   106k|                it = r_sign->first;
 3914|   106k|            }
 3915|       |
 3916|   106k|            if (auto r_exp = read_while1_code_unit(
 3917|   106k|                    ranges::subrange{it, range.end()},
 3918|   106k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|   106k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.76k, False: 104k]
  |  |  ------------------
  ------------------
 3920|  1.76k|                it = beg_exp_it;
 3921|  1.76k|            }
 3922|   104k|            else {
 3923|   104k|                it = *r_exp;
 3924|   104k|            }
 3925|       |
 3926|   106k|            return it;
 3927|   106k|        }
 3928|   749k|        return range.begin();
 3929|   855k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   337k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   337k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   337k|              else {
  749|   337k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   337k|              }
  751|   337k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   337k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   337k|        else if constexpr (std::is_object_v<T>) {
  688|   337k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   337k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3918|   337k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   750k|    {
 3976|   750k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   750k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 645k, False: 105k]
  |  Branch (3977:50): [True: 20.0k, False: 625k]
  ------------------
 3978|       |
 3979|   750k|        auto it = ranges::begin(range);
 3980|   750k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   750k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   750k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 45.1k, False: 705k]
  |  |  ------------------
  ------------------
 3984|  45.1k|            return r.transform_error(
 3985|  45.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  45.1k|                                              "Invalid floating-point value"));
 3987|  45.1k|        }
 3988|   705k|        else {
 3989|   705k|            digits_count += ranges::distance(it, *r);
 3990|   705k|            it = *r;
 3991|   705k|        }
 3992|       |
 3993|   705k|        m_integral_part_length = digits_count;
 3994|   705k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 138k, False: 566k]
  ------------------
 3995|   705k|                                             m_locale_options.decimal_point)) {
 3996|   138k|            it = *r;
 3997|   138k|        }
 3998|       |
 3999|   705k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 128k, False: 577k]
  ------------------
 4000|   705k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|   128k|            digits_count += ranges::distance(it, *r);
 4002|   128k|            it = *r;
 4003|   128k|        }
 4004|       |
 4005|   705k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   705k|        auto beg_exp_it = it;
 4012|   705k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 612k, False: 93.6k]
  ------------------
 4013|   612k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   612k|        }
 4015|   705k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 19.2k, False: 686k]
  |  Branch (4015:29): [True: 11.8k, False: 7.36k]
  ------------------
 4016|  11.8k|            return detail::unexpected_scan_error(
 4017|  11.8k|                scan_error::invalid_scanned_value,
 4018|  11.8k|                "No exponent given to scientific float");
 4019|  11.8k|        }
 4020|       |
 4021|   693k|        m_kind =
 4022|   693k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 589k, False: 104k]
  ------------------
 4023|       |
 4024|   693k|        return it;
 4025|   705k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|  1.45M|    {
 3804|  1.45M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.45M]
  |  |  |  Branch (865:45): [True: 0, False: 1.45M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|  1.45M|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|  1.45M|        return read_while1_code_unit(
 3813|  1.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|  1.45M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.45M|        : m_fptr([](storage fn,
  743|  1.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.45M|              cvref<T> obj = *get<T>(fn);
  745|  1.45M|              if constexpr (std::is_void_v<R>) {
  746|  1.45M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.45M|              }
  748|  1.45M|              else {
  749|  1.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.45M|              }
  751|  1.45M|          }),
  752|  1.45M|          m_storage(std::addressof(f))
  753|  1.45M|    {
  754|  1.45M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.27M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.27M|              else {
  749|  8.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.27M|              }
  751|  8.27M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.27M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.27M|        else if constexpr (std::is_object_v<T>) {
  688|  8.27M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.27M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3813|  8.27M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.45M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.45M|        {
  662|  1.45M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   942k|    {
 1676|   942k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   942k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   942k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  68.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  68.7k|        {
  662|  68.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   176k|        : m_fptr([](storage fn,
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|   176k|              if constexpr (std::is_void_v<R>) {
  746|   176k|                  obj(static_cast<decltype(args)>(args)...);
  747|   176k|              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
  752|   176k|          m_storage(std::addressof(f))
  753|   176k|    {
  754|   176k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   176k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   176k|        else if constexpr (std::is_object_v<T>) {
  688|   176k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   176k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   176k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   176k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   841k|    {
 3707|   841k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   841k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 841k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   841k|        return read_source_impl(range);
 3713|   841k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   176k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   176k|        {
  662|   176k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   210k|    {
 4203|   210k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   210k|#if !SCN_DISABLE_LOCALE
 4206|   210k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 58.2k, False: 152k]
  ------------------
 4207|  58.2k|            return read_impl<Range>(
 4208|  58.2k|                range, rd,
 4209|  58.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  58.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  58.2k|                },
 4212|  58.2k|                value, loc);
 4213|  58.2k|        }
 4214|   152k|#endif
 4215|       |
 4216|   152k|        return read_impl<Range>(
 4217|   152k|            range, rd,
 4218|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   152k|                return r.read_source(SCN_FWD(args)...);
 4220|   152k|            },
 4221|   152k|            value);
 4222|   210k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   298k|    {
 4239|   298k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   298k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 286k]
  |  |  ------------------
  ------------------
 4241|  12.3k|            return unexpected(r.error());
 4242|  12.3k|        }
 4243|       |
 4244|   286k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   286k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   286k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   286k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.3k, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.3k|    }                                                  \
  |  |  |  | 3939|   286k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   272k|        return ranges::next(range.begin(), n);
 4246|   286k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   920k|    {
  763|   920k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   920k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  58.2k|        : m_fptr([](storage fn,
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|  58.2k|              if constexpr (std::is_void_v<R>) {
  746|  58.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.2k|              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
  752|  58.2k|          m_storage(std::addressof(f))
  753|  58.2k|    {
  754|  58.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  58.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.2k|        else if constexpr (std::is_object_v<T>) {
  688|  58.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  58.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  58.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  58.2k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   181k|    {
 3721|   181k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   181k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   181k|        return read_source_impl(range);
 3727|   181k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   920k|    {
 3747|   920k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   920k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   920k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   920k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 920k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   920k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   920k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   920k|        auto it = sign_result.first;
 3750|   920k|        m_sign = sign_result.second;
 3751|       |
 3752|   920k|        auto digits_begin = it;
 3753|   920k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   920k|                      ranges::sized_range<Range>) {
 3756|   920k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 920k]
  |  |  |  Branch (865:45): [True: 0, False: 920k]
  |  |  |  Branch (865:45): [True: 0, False: 920k]
  |  |  ------------------
  ------------------
 3757|   920k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   920k|            else {
 3766|   920k|                auto cb = [&](const auto& rr)
 3767|   920k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   920k|                    auto res = read_all(rr);
 3769|   920k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   920k|                        return detail::unexpected_scan_error(
 3771|   920k|                            scan_error::invalid_scanned_value,
 3772|   920k|                            "Invalid float value");
 3773|   920k|                    }
 3774|   920k|                    return res;
 3775|   920k|                };
 3776|   920k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   920k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   920k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 37.7k, False: 883k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  37.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  37.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  37.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  37.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  37.7k|    }                                                  \
  |  | 3939|   920k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   883k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   920k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   920k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   920k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   883k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 877k, False: 5.26k]
  |  Branch (3789:48): [True: 873k, False: 4.46k]
  ------------------
 3790|   883k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 833k, False: 40.3k]
  ------------------
 3791|   883k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 829k, False: 3.38k]
  ------------------
 3792|   829k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   829k|        }
 3794|       |
 3795|   883k|        handle_separators();
 3796|       |
 3797|   883k|        return it;
 3798|   920k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   920k|    {
 3841|   920k|        auto it = range.begin();
 3842|   920k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 911k, False: 9.72k]
  ------------------
 3843|   911k|            return unexpected(r.error());
 3844|   911k|        }
 3845|  9.72k|        else {
 3846|  9.72k|            it = *r;
 3847|  9.72k|        }
 3848|       |
 3849|  9.72k|        if (auto r = read_matching_string_classic_nocase(
 3850|  9.72k|                ranges::subrange{it, range.end()}, "inity");
 3851|  9.72k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.26k, False: 4.46k]
  ------------------
 3852|  5.26k|            m_kind = float_kind::inf_short;
 3853|  5.26k|            return it;
 3854|  5.26k|        }
 3855|  4.46k|        else {
 3856|  4.46k|            m_kind = float_kind::inf_long;
 3857|  4.46k|            return *r;
 3858|  4.46k|        }
 3859|  9.72k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   911k|    {
 3864|   911k|        auto it = range.begin();
 3865|   911k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 866k, False: 45.1k]
  ------------------
 3866|   866k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   866k|                scan_error::invalid_scanned_value,
 3868|   866k|                "Invalid floating-point NaN value"));
 3869|   866k|        }
 3870|  45.1k|        else {
 3871|  45.1k|            it = *r;
 3872|  45.1k|        }
 3873|       |
 3874|  45.1k|        if (auto r =
 3875|  45.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  45.1k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 40.3k, False: 4.73k]
  ------------------
 3877|  40.3k|            m_kind = float_kind::nan_simple;
 3878|  40.3k|            return it;
 3879|  40.3k|        }
 3880|  4.73k|        else {
 3881|  4.73k|            it = *r;
 3882|  4.73k|        }
 3883|       |
 3884|  4.73k|        auto payload_beg_it = it;
 3885|  4.73k|        it = read_while_code_unit(
 3886|  4.73k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  4.73k|                return is_ascii_char(ch) &&
 3888|  4.73k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  4.73k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  4.73k|            });
 3891|  4.73k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  4.73k|        m_kind = float_kind::nan_with_payload;
 3894|  4.73k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 3.38k, False: 1.35k]
  ------------------
 3895|  4.73k|                                             ')')) {
 3896|  3.38k|            return *r;
 3897|  3.38k|        }
 3898|  1.35k|        return detail::unexpected_scan_error(
 3899|  1.35k|            scan_error::invalid_scanned_value,
 3900|  1.35k|            "Invalid floating-point NaN payload");
 3901|  4.73k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  4.73k|        : m_fptr([](storage fn,
  743|  4.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.73k|              cvref<T> obj = *get<T>(fn);
  745|  4.73k|              if constexpr (std::is_void_v<R>) {
  746|  4.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.73k|              }
  748|  4.73k|              else {
  749|  4.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.73k|              }
  751|  4.73k|          }),
  752|  4.73k|          m_storage(std::addressof(f))
  753|  4.73k|    {
  754|  4.73k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  79.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  79.0k|              else {
  749|  79.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.0k|              }
  751|  79.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  79.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  79.0k|        else if constexpr (std::is_object_v<T>) {
  688|  79.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  79.0k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3886|  79.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  79.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 78.9k, False: 83]
  ------------------
 3888|  79.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 75.2k, False: 3.65k]
  |  Branch (3888:39): [True: 67.4k, False: 7.84k]
  |  Branch (3888:54): [True: 2.58k, False: 8.90k]
  |  Branch (3888:67): [True: 2.50k, False: 83]
  ------------------
 3889|  78.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 3.65k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 3.73k]
  ------------------
 3890|  79.0k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  4.73k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.73k|        {
  662|  4.73k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   608k|    {
 3834|   608k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   608k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   516k|{
 2095|   516k|    auto it = read_while_code_unit(range, pred);
 2096|   516k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 219k, False: 296k]
  ------------------
 2097|   219k|        return unexpected(parse_error::error);
 2098|   219k|    }
 2099|   296k|    return it;
 2100|   516k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|   149k|    {
 3907|   149k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 25.6k, False: 123k]
  ------------------
 3908|  25.6k|            auto beg_exp_it = range.begin();
 3909|  25.6k|            auto it = *r;
 3910|       |
 3911|  25.6k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 25.5k, False: 90]
  ------------------
 3912|  25.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  25.5k|                it = r_sign->first;
 3914|  25.5k|            }
 3915|       |
 3916|  25.6k|            if (auto r_exp = read_while1_code_unit(
 3917|  25.6k|                    ranges::subrange{it, range.end()},
 3918|  25.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  25.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 648, False: 24.9k]
  |  |  ------------------
  ------------------
 3920|    648|                it = beg_exp_it;
 3921|    648|            }
 3922|  24.9k|            else {
 3923|  24.9k|                it = *r_exp;
 3924|  24.9k|            }
 3925|       |
 3926|  25.6k|            return it;
 3927|  25.6k|        }
 3928|   123k|        return range.begin();
 3929|   149k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.6k|        : m_fptr([](storage fn,
  743|  25.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.6k|              cvref<T> obj = *get<T>(fn);
  745|  25.6k|              if constexpr (std::is_void_v<R>) {
  746|  25.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.6k|              }
  748|  25.6k|              else {
  749|  25.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.6k|              }
  751|  25.6k|          }),
  752|  25.6k|          m_storage(std::addressof(f))
  753|  25.6k|    {
  754|  25.6k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  73.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  73.7k|              else {
  749|  73.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.7k|              }
  751|  73.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  73.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  73.7k|        else if constexpr (std::is_object_v<T>) {
  688|  73.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  73.7k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3918|  73.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.6k|        {
  662|  25.6k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   257k|    {
 3976|   257k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   257k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 160k, False: 96.3k]
  |  Branch (3977:50): [True: 18.6k, False: 142k]
  ------------------
 3978|       |
 3979|   257k|        auto it = ranges::begin(range);
 3980|   257k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   257k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   257k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.0k, False: 233k]
  |  |  ------------------
  ------------------
 3984|  24.0k|            return r.transform_error(
 3985|  24.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  24.0k|                                              "Invalid floating-point value"));
 3987|  24.0k|        }
 3988|   233k|        else {
 3989|   233k|            digits_count += ranges::distance(it, *r);
 3990|   233k|            it = *r;
 3991|   233k|        }
 3992|       |
 3993|   233k|        m_integral_part_length = digits_count;
 3994|   233k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 42.5k, False: 190k]
  ------------------
 3995|   233k|                                             m_locale_options.decimal_point)) {
 3996|  42.5k|            it = *r;
 3997|  42.5k|        }
 3998|       |
 3999|   233k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 38.6k, False: 194k]
  ------------------
 4000|   233k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  38.6k|            digits_count += ranges::distance(it, *r);
 4002|  38.6k|            it = *r;
 4003|  38.6k|        }
 4004|       |
 4005|   233k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 233k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   233k|        auto beg_exp_it = it;
 4012|   233k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 149k, False: 83.9k]
  ------------------
 4013|   149k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   149k|        }
 4015|   233k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 17.4k, False: 215k]
  |  Branch (4015:29): [True: 11.5k, False: 5.82k]
  ------------------
 4016|  11.5k|            return detail::unexpected_scan_error(
 4017|  11.5k|                scan_error::invalid_scanned_value,
 4018|  11.5k|                "No exponent given to scientific float");
 4019|  11.5k|        }
 4020|       |
 4021|   221k|        m_kind =
 4022|   221k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 196k, False: 24.9k]
  ------------------
 4023|       |
 4024|   221k|        return it;
 4025|   233k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   490k|    {
 3804|   490k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 490k]
  |  |  |  Branch (865:45): [True: 0, False: 490k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   490k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   490k|        return read_while1_code_unit(
 3813|   490k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   490k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   490k|        : m_fptr([](storage fn,
  743|   490k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   490k|              cvref<T> obj = *get<T>(fn);
  745|   490k|              if constexpr (std::is_void_v<R>) {
  746|   490k|                  obj(static_cast<decltype(args)>(args)...);
  747|   490k|              }
  748|   490k|              else {
  749|   490k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   490k|              }
  751|   490k|          }),
  752|   490k|          m_storage(std::addressof(f))
  753|   490k|    {
  754|   490k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.52M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.52M|              else {
  749|  2.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.52M|              }
  751|  2.52M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.52M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.52M|        else if constexpr (std::is_object_v<T>) {
  688|  2.52M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.52M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|  2.52M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   490k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   490k|        {
  662|   490k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   920k|    {
 4033|   920k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   920k|        const bool allowed_nonhex =
 4035|   920k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   920k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   920k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 911k, False: 9.72k]
  |  Branch (4038:45): [True: 0, False: 911k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   920k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 9.72k, False: 911k]
  ------------------
 4044|  9.72k|            return *r;
 4045|  9.72k|        }
 4046|       |
 4047|   911k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 867k, False: 43.7k]
  |  Branch (4047:45): [True: 1.35k, False: 866k]
  ------------------
 4048|  1.35k|            return unexpected(r.error());
 4049|  1.35k|        }
 4050|   909k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 43.7k, False: 866k]
  ------------------
 4051|  43.7k|            return *r;
 4052|  43.7k|        }
 4053|       |
 4054|   866k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 608k, False: 257k]
  |  Branch (4054:28): [True: 183k, False: 425k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   183k|            auto it = range.begin();
 4058|       |
 4059|   183k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 10.0k, False: 173k]
  ------------------
 4060|  10.0k|                m_kind = float_kind::hex_with_prefix;
 4061|  10.0k|                it = *r;
 4062|  10.0k|            }
 4063|   173k|            else {
 4064|   173k|                m_kind = float_kind::hex_without_prefix;
 4065|   173k|            }
 4066|       |
 4067|   183k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   183k|        }
 4069|   682k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 257k, False: 425k]
  |  Branch (4069:29): [True: 257k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   257k|            m_kind = float_kind::generic;
 4073|   257k|            return read_regular_float(range);
 4074|   257k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   425k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 400k]
  |  |  ------------------
  ------------------
 4080|  25.1k|            m_kind = float_kind::hex_with_prefix;
 4081|  25.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  25.1k|        }
 4083|       |
 4084|   400k|        m_kind = float_kind::generic;
 4085|   400k|        return read_regular(range);
 4086|   425k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   608k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   608k|                    auto res = read_all(rr);
 3769|   608k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 794, False: 608k]
  |  |  ------------------
  ------------------
 3770|    794|                        return detail::unexpected_scan_error(
 3771|    794|                            scan_error::invalid_scanned_value,
 3772|    794|                            "Invalid float value");
 3773|    794|                    }
 3774|   608k|                    return res;
 3775|   608k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   608k|{
 1938|   608k|    return ranges::next(range.begin(), range.end());
 1939|   608k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   608k|    {
  313|   608k|        ranges::advance(x, bound);
  314|   608k|        return x;
  315|   608k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   608k|    {
  275|   608k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   608k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   608k|    {
  190|   608k|        i = std::move(bound);
  191|   608k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   834k|    {
 1676|   834k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   834k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   834k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   834k|    {
 1720|   834k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   834k|                      ranges::sized_range<Range>) {
 1725|   834k|            m_storage.reset();
 1726|   834k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   834k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.2k|        {
  662|  58.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   152k|        : m_fptr([](storage fn,
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|   152k|              if constexpr (std::is_void_v<R>) {
  746|   152k|                  obj(static_cast<decltype(args)>(args)...);
  747|   152k|              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
  752|   152k|          m_storage(std::addressof(f))
  753|   152k|    {
  754|   152k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   152k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   152k|        else if constexpr (std::is_object_v<T>) {
  688|   152k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   152k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   152k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   152k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   739k|    {
 3707|   739k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 739k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   739k|        return read_source_impl(range);
 3713|   739k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   152k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   152k|        {
  662|   152k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   262k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   262k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   262k|            auto rd = make_reader<T, char_type>();
 6237|   262k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   262k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   262k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 262k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   262k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   262k|                return impl(rd, range, value);
 6242|   262k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   262k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   262k|    {
 6162|   262k|        const bool need_skipped_width =
 6163|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 262k]
  |  Branch (6163:33): [True: 0, False: 262k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   262k|        auto it = rng.begin();
 6167|   262k|        std::ptrdiff_t prefix_width = 0;
 6168|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 262k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   262k|        else {
 6176|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.00k, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.00k|    }                                                  \
  |  |  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   257k|            std::tie(it, prefix_width) = prefix_result;
 6178|   257k|        }
 6179|   257k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   257k|        std::ptrdiff_t value_width = 0;
 6183|   257k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 257k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   257k|        else {
 6199|   257k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.4k, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.4k|    }                                                  \
  |  | 3939|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   238k|                                             specs, value, loc));
 6201|       |
 6202|   238k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 238k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   238k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   238k|        std::ptrdiff_t postfix_width = 0;
 6211|   238k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 234k, False: 3.99k]
  ------------------
 6212|   234k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   234k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   234k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   234k|                                 value_width));
 6216|   234k|            std::tie(it, postfix_width) = postfix_result;
 6217|   234k|        }
 6218|       |
 6219|   238k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   238k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   238k|            specs, prefix_width, value_width, postfix_width));
 6221|   238k|        return it;
 6222|   238k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   632k|    {
 3733|   632k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   632k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   632k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   632k|        const std::ptrdiff_t sign_len =
 3736|   632k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 159k, False: 473k]
  ------------------
 3737|       |
 3738|   632k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   632k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   632k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   632k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.0k, False: 618k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.0k|    }                                                  \
  |  |  |  | 3939|   632k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   618k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   632k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   257k|    {
 4203|   257k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   257k|#if !SCN_DISABLE_LOCALE
 4206|   257k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 74.0k, False: 183k]
  ------------------
 4207|  74.0k|            return read_impl<Range>(
 4208|  74.0k|                range, rd,
 4209|  74.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  74.0k|                },
 4212|  74.0k|                value, loc);
 4213|  74.0k|        }
 4214|   183k|#endif
 4215|       |
 4216|   183k|        return read_impl<Range>(
 4217|   183k|            range, rd,
 4218|   183k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   183k|                return r.read_source(SCN_FWD(args)...);
 4220|   183k|            },
 4221|   183k|            value);
 4222|   257k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   358k|    {
 4239|   358k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   358k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3k, False: 335k]
  |  |  ------------------
  ------------------
 4241|  22.3k|            return unexpected(r.error());
 4242|  22.3k|        }
 4243|       |
 4244|   335k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   334k|        return ranges::next(range.begin(), n);
 4246|   335k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  74.0k|        : m_fptr([](storage fn,
  743|  74.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.0k|              cvref<T> obj = *get<T>(fn);
  745|  74.0k|              if constexpr (std::is_void_v<R>) {
  746|  74.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.0k|              }
  748|  74.0k|              else {
  749|  74.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.0k|              }
  751|  74.0k|          }),
  752|  74.0k|          m_storage(std::addressof(f))
  753|  74.0k|    {
  754|  74.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  74.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.0k|              else {
  749|  74.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.0k|              }
  751|  74.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.0k|        else if constexpr (std::is_object_v<T>) {
  688|  74.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  74.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  74.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  74.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  74.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  74.0k|        {
  662|  74.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   183k|        : m_fptr([](storage fn,
  743|   183k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   183k|              cvref<T> obj = *get<T>(fn);
  745|   183k|              if constexpr (std::is_void_v<R>) {
  746|   183k|                  obj(static_cast<decltype(args)>(args)...);
  747|   183k|              }
  748|   183k|              else {
  749|   183k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   183k|              }
  751|   183k|          }),
  752|   183k|          m_storage(std::addressof(f))
  753|   183k|    {
  754|   183k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   183k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   183k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   183k|              else {
  749|   183k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   183k|              }
  751|   183k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   183k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   183k|        else if constexpr (std::is_object_v<T>) {
  688|   183k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   183k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   183k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   183k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   183k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   183k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   183k|        {
  662|   183k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   218k|    {
 4203|   218k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   218k|#if !SCN_DISABLE_LOCALE
 4206|   218k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 60.9k, False: 157k]
  ------------------
 4207|  60.9k|            return read_impl<Range>(
 4208|  60.9k|                range, rd,
 4209|  60.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  60.9k|                },
 4212|  60.9k|                value, loc);
 4213|  60.9k|        }
 4214|   157k|#endif
 4215|       |
 4216|   157k|        return read_impl<Range>(
 4217|   157k|            range, rd,
 4218|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   157k|                return r.read_source(SCN_FWD(args)...);
 4220|   157k|            },
 4221|   157k|            value);
 4222|   218k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   309k|    {
 4239|   309k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   309k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 296k]
  |  |  ------------------
  ------------------
 4241|  12.5k|            return unexpected(r.error());
 4242|  12.5k|        }
 4243|       |
 4244|   296k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   284k|        return ranges::next(range.begin(), n);
 4246|   296k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  60.9k|        : m_fptr([](storage fn,
  743|  60.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.9k|              cvref<T> obj = *get<T>(fn);
  745|  60.9k|              if constexpr (std::is_void_v<R>) {
  746|  60.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.9k|              }
  748|  60.9k|              else {
  749|  60.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.9k|              }
  751|  60.9k|          }),
  752|  60.9k|          m_storage(std::addressof(f))
  753|  60.9k|    {
  754|  60.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  60.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.9k|              else {
  749|  60.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.9k|              }
  751|  60.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  60.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.9k|        else if constexpr (std::is_object_v<T>) {
  688|  60.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  60.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  60.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  60.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.9k|        {
  662|  60.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   157k|        : m_fptr([](storage fn,
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|   157k|              if constexpr (std::is_void_v<R>) {
  746|   157k|                  obj(static_cast<decltype(args)>(args)...);
  747|   157k|              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
  752|   157k|          m_storage(std::addressof(f))
  753|   157k|    {
  754|   157k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   157k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   157k|        else if constexpr (std::is_object_v<T>) {
  688|   157k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   157k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   157k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   157k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   157k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   157k|        {
  662|   157k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   264k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   264k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   264k|            auto rd = make_reader<T, char_type>();
 6237|   264k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   264k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 264k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   264k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 264k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   264k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   264k|                return impl(rd, range, value);
 6242|   264k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   264k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   264k|    {
 6162|   264k|        const bool need_skipped_width =
 6163|   264k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 264k]
  |  Branch (6163:33): [True: 0, False: 264k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   264k|        auto it = rng.begin();
 6167|   264k|        std::ptrdiff_t prefix_width = 0;
 6168|   264k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 264k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   264k|        else {
 6176|   264k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   264k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.31k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.31k|    }                                                  \
  |  |  |  | 3939|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   259k|            std::tie(it, prefix_width) = prefix_result;
 6178|   259k|        }
 6179|   259k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   259k|        std::ptrdiff_t value_width = 0;
 6183|   259k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 259k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   259k|        else {
 6199|   259k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.0k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.0k|    }                                                  \
  |  | 3939|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   241k|                                             specs, value, loc));
 6201|       |
 6202|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 241k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   241k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   241k|        std::ptrdiff_t postfix_width = 0;
 6211|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 237k, False: 4.26k]
  ------------------
 6212|   237k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   237k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   237k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   237k|                                 value_width));
 6216|   237k|            std::tie(it, postfix_width) = postfix_result;
 6217|   237k|        }
 6218|       |
 6219|   241k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   241k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   241k|            specs, prefix_width, value_width, postfix_width));
 6221|   241k|        return it;
 6222|   241k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   638k|    {
 3733|   638k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   638k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   638k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   638k|        const std::ptrdiff_t sign_len =
 3736|   638k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 163k, False: 475k]
  ------------------
 3737|       |
 3738|   638k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   638k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   638k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   638k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.2k, False: 626k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.2k|    }                                                  \
  |  |  |  | 3939|   638k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   626k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   638k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   259k|    {
 4203|   259k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   259k|#if !SCN_DISABLE_LOCALE
 4206|   259k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 75.0k, False: 184k]
  ------------------
 4207|  75.0k|            return read_impl<Range>(
 4208|  75.0k|                range, rd,
 4209|  75.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  75.0k|                },
 4212|  75.0k|                value, loc);
 4213|  75.0k|        }
 4214|   184k|#endif
 4215|       |
 4216|   184k|        return read_impl<Range>(
 4217|   184k|            range, rd,
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
 4220|   184k|            },
 4221|   184k|            value);
 4222|   259k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   361k|    {
 4239|   361k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   361k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.9k, False: 338k]
  |  |  ------------------
  ------------------
 4241|  22.9k|            return unexpected(r.error());
 4242|  22.9k|        }
 4243|       |
 4244|   338k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 428, False: 338k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    428|    }                                                  \
  |  |  |  | 3939|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   338k|        return ranges::next(range.begin(), n);
 4246|   338k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  75.0k|        : m_fptr([](storage fn,
  743|  75.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.0k|              cvref<T> obj = *get<T>(fn);
  745|  75.0k|              if constexpr (std::is_void_v<R>) {
  746|  75.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.0k|              }
  748|  75.0k|              else {
  749|  75.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.0k|              }
  751|  75.0k|          }),
  752|  75.0k|          m_storage(std::addressof(f))
  753|  75.0k|    {
  754|  75.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  75.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  75.0k|              else {
  749|  75.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.0k|              }
  751|  75.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  75.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.0k|        else if constexpr (std::is_object_v<T>) {
  688|  75.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  75.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  75.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  75.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  75.0k|        {
  662|  75.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   184k|        : m_fptr([](storage fn,
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|   184k|              if constexpr (std::is_void_v<R>) {
  746|   184k|                  obj(static_cast<decltype(args)>(args)...);
  747|   184k|              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
  752|   184k|          m_storage(std::addressof(f))
  753|   184k|    {
  754|   184k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   184k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   184k|        else if constexpr (std::is_object_v<T>) {
  688|   184k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   184k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   184k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   184k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   184k|        {
  662|   184k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   220k|    {
 4203|   220k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   220k|#if !SCN_DISABLE_LOCALE
 4206|   220k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 61.9k, False: 158k]
  ------------------
 4207|  61.9k|            return read_impl<Range>(
 4208|  61.9k|                range, rd,
 4209|  61.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  61.9k|                },
 4212|  61.9k|                value, loc);
 4213|  61.9k|        }
 4214|   158k|#endif
 4215|       |
 4216|   158k|        return read_impl<Range>(
 4217|   158k|            range, rd,
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
 4220|   158k|            },
 4221|   158k|            value);
 4222|   220k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   313k|    {
 4239|   313k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   313k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.8k, False: 300k]
  |  |  ------------------
  ------------------
 4241|  12.8k|            return unexpected(r.error());
 4242|  12.8k|        }
 4243|       |
 4244|   300k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.8k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.8k|    }                                                  \
  |  |  |  | 3939|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   288k|        return ranges::next(range.begin(), n);
 4246|   300k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  61.9k|        : m_fptr([](storage fn,
  743|  61.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.9k|              cvref<T> obj = *get<T>(fn);
  745|  61.9k|              if constexpr (std::is_void_v<R>) {
  746|  61.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.9k|              }
  748|  61.9k|              else {
  749|  61.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.9k|              }
  751|  61.9k|          }),
  752|  61.9k|          m_storage(std::addressof(f))
  753|  61.9k|    {
  754|  61.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  61.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.9k|              else {
  749|  61.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.9k|              }
  751|  61.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  61.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.9k|        else if constexpr (std::is_object_v<T>) {
  688|  61.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  61.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  61.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  61.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  61.9k|        {
  662|  61.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   158k|        : m_fptr([](storage fn,
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|   158k|              if constexpr (std::is_void_v<R>) {
  746|   158k|                  obj(static_cast<decltype(args)>(args)...);
  747|   158k|              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
  752|   158k|          m_storage(std::addressof(f))
  753|   158k|    {
  754|   158k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   158k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   158k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   158k|        {
  662|   158k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.07M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.07M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.07M|        else {
 1055|  1.07M|            return r.begin().contiguous_segment();
 1056|  1.07M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.07M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   945k|{
 2160|   945k|    auto it = range.begin();
 2161|  1.74M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.73M, False: 15.3k]
  ------------------
 2162|  1.73M|        const auto val =
 2163|  1.73M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.73M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.71M, False: 12.3k]
  |  |  ------------------
  ------------------
 2165|  1.71M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.71M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.71M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 929k, False: 788k]
  ------------------
 2168|   929k|                return it;
 2169|   929k|            }
 2170|  1.71M|        }
 2171|   800k|        it = val.iterator;
 2172|   800k|    }
 2173|       |
 2174|  15.3k|    return it;
 2175|   945k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.73M|{
 1998|  1.73M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.73M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.73M|    auto it = range.begin();
 2002|  1.73M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.73M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 1.71M]
  |  |  ------------------
  ------------------
 2005|  12.3k|        ++it;
 2006|  12.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.3k|        return {it, {}};
 2008|  12.3k|    }
 2009|       |
 2010|  1.71M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.69M, False: 18.1k]
  ------------------
 2011|  1.69M|        ++it;
 2012|  1.69M|        return {it, string_type(1, *range.begin())};
 2013|  1.69M|    }
 2014|       |
 2015|  18.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.1k|    return {it, string_type{range.begin(), it}};
 2017|  1.71M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.3k|{
 1265|  12.3k|    auto it = input.begin();
 1266|  85.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 84.4k, False: 1.34k]
  ------------------
 1267|  84.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.0k, False: 73.4k]
  ------------------
 1268|  11.0k|            break;
 1269|  11.0k|        }
 1270|  84.4k|    }
 1271|  12.3k|    return it;
 1272|  12.3k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.1k|    {
  283|  18.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.1k|    {
  252|  18.1k|        constexpr iter_difference_t<I> zero{0};
  253|  18.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|  55.1k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.0k, False: 17.1k]
  |  Branch (255:30): [True: 36.9k, False: 1.01k]
  ------------------
  256|  36.9k|            ++i;
  257|  36.9k|            ++counter;
  258|  36.9k|        }
  259|       |
  260|  18.1k|        return counter;
  261|  18.1k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.73M|    {
 1989|  1.73M|        return !codepoint.empty();
 1990|  1.73M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   945k|{
 2181|   945k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   945k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.07M|{
 3066|  1.07M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.07M, False: 0]
  ------------------
 3067|  1.07M|        auto it = read_while_classic_space(range);
 3068|  1.07M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.07M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.3k, False: 1.05M]
  |  |  ------------------
  ------------------
 3070|  15.3k|            return unexpected(e);
 3071|  15.3k|        }
 3072|       |
 3073|  1.05M|        return it;
 3074|  1.07M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.07M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.07M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.07M|    else {
 2225|  1.07M|        auto it = range.begin();
 2226|       |
 2227|  1.07M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.07M|            auto seg = get_contiguous_beginning(range);
 2229|  1.07M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.07M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 129k, False: 945k]
  ------------------
 2231|   129k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   129k|            }
 2233|   945k|            ranges::advance(it, seg.size());
 2234|   945k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.07M|            return detail::is_cp_space(cp);
 2238|  1.07M|        });
 2239|  1.07M|    }
 2240|  1.07M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   945k|        : m_fptr([](storage fn,
  743|   945k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   945k|              cvref<T> obj = *get<T>(fn);
  745|   945k|              if constexpr (std::is_void_v<R>) {
  746|   945k|                  obj(static_cast<decltype(args)>(args)...);
  747|   945k|              }
  748|   945k|              else {
  749|   945k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   945k|              }
  751|   945k|          }),
  752|   945k|          m_storage(std::addressof(f))
  753|   945k|    {
  754|   945k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.71M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.71M|              else {
  749|  1.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.71M|              }
  751|  1.71M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.71M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.71M|        else if constexpr (std::is_object_v<T>) {
  688|  1.71M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.71M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.71M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.71M|            return detail::is_cp_space(cp);
 2238|  1.71M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   945k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   945k|        {
  662|   945k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   613k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   613k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   613k|        auto beg = r.begin();
  991|   613k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 613k, False: 0]
  ------------------
  992|   613k|            return false;
  993|   613k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   613k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.61M|{
 1956|  1.61M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.61M|    else {
 1967|  1.61M|        auto it = range.begin();
 1968|  1.61M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 968k, False: 642k]
  ------------------
 1969|   968k|            return ranges::next(it, count);
 1970|   968k|        }
 1971|       |
 1972|  2.47M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.88M, False: 583k]
  ------------------
 1973|  1.88M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 59.3k, False: 1.83M]
  ------------------
 1974|  59.3k|                return unexpected(eof_error::eof);
 1975|  59.3k|            }
 1976|  1.88M|        }
 1977|       |
 1978|   583k|        return it;
 1979|   642k|    }
 1980|  1.61M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.61M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.61M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.61M|        else {
 1107|  1.61M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.61M, False: 0]
  ------------------
 1108|  1.61M|                return static_cast<size_t>(
 1109|  1.61M|                    r.begin().parent()->chars_available() -
 1110|  1.61M|                    r.begin().position());
 1111|  1.61M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.61M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.61M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.42M|    {
  763|  4.42M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  4.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.42M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.41M|        : m_fptr([](storage fn,
  743|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41M|              cvref<T> obj = *get<T>(fn);
  745|  1.41M|              if constexpr (std::is_void_v<R>) {
  746|  1.41M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.41M|              }
  748|  1.41M|              else {
  749|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41M|              }
  751|  1.41M|          }),
  752|  1.41M|          m_storage(std::addressof(f))
  753|  1.41M|    {
  754|  1.41M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.21M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.21M|              else {
  749|  2.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.21M|              }
  751|  2.21M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.21M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.21M|        else if constexpr (std::is_object_v<T>) {
  688|  2.21M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.21M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.41M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.41M|        {
  662|  1.41M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   447k|    {
 6075|   447k|        const bool need_skipped_width =
 6076|   447k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 447k]
  |  Branch (6076:33): [True: 0, False: 447k]
  ------------------
 6077|   447k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   447k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 447k]
  ------------------
 6081|   447k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 447k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   447k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 447k, False: 0]
  |  Branch (6085:56): [True: 447k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   447k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 447k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   892k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   447k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   447k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   447k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.38k, False: 444k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.38k|    }                                                  \
  |  |  |  | 3939|   447k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   892k|                            make_eof_scan_error));
 6096|       |
 6097|   892k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 444k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   444k|            return result_type{it, 0};
 6105|   892k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   447k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.06M|{
 2075|  1.06M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.06M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.06M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.06M|    else {
 2060|  1.06M|        auto first = range.begin();
 2061|  1.66M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.66M, False: 4.28k]
  ------------------
 2062|  1.66M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.05M, False: 607k]
  ------------------
 2063|  1.05M|                return first;
 2064|  1.05M|            }
 2065|  1.66M|        }
 2066|  4.28k|        return first;
 2067|  1.06M|    }
 2068|  1.06M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   749k|    {
  108|   749k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   749k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   749k|    {
   94|   749k|        iter_difference_t<I> counter{0};
   95|  2.06M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.31M, False: 749k]
  ------------------
   96|  1.31M|            ++i;
   97|  1.31M|            ++counter;
   98|  1.31M|        }
   99|   749k|        return counter;
  100|   749k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   218k|    {
 1879|   218k|        auto stdloc = loc.get<std::locale>();
 1880|   218k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   218k|        grouping = numpunct.grouping();
 1882|   218k|        thousands_sep =
 1883|   218k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 218k]
  ------------------
 1884|   218k|        decimal_point = numpunct.decimal_point();
 1885|   218k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   218k|{
 1816|   218k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 218k, False: 0]
  ------------------
 1817|   218k|        return std::use_facet<Facet>(stdloc);
 1818|   218k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   218k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.44M|{
 1945|  1.44M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.80k, False: 1.43M]
  |  |  ------------------
  ------------------
 1946|  2.80k|        return unexpected(e);
 1947|  2.80k|    }
 1948|       |
 1949|  1.43M|    return ranges::next(range.begin());
 1950|  1.44M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.21M|{
  951|  2.21M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.37k, False: 2.21M]
  |  |  ------------------
  ------------------
  952|  7.37k|        return eof_error::eof;
  953|  7.37k|    }
  954|  2.21M|    return eof_error::good;
  955|  2.21M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.27M|{
  945|  3.27M|    return is_range_eof(r.begin(), r.end());
  946|  3.27M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.27M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.27M|    {
  938|  3.27M|        return begin == end;
  939|  3.27M|    }
  940|  3.27M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.43M|    {
  296|  1.43M|        ++x;
  297|  1.43M|        return x;
  298|  1.43M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   623k|{
 3258|   623k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   623k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 617k, False: 6.66k]
  ------------------
 3260|   617k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 617k, False: 72]
  ------------------
 3261|   617k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   617k|        }
 3263|     72|        return unexpected(eof_error::eof);
 3264|   617k|    }
 3265|       |
 3266|  6.66k|    auto& it = *r;
 3267|  6.66k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 4.84k, False: 1.81k]
  ------------------
 3268|  4.84k|        return std::pair{it, sign_type::minus_sign};
 3269|  4.84k|    }
 3270|  1.81k|    return std::pair{it, sign_type::plus_sign};
 3271|  6.66k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  1.00M|{
 2372|  1.00M|    auto it = read_code_unit(range);
 2373|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.00M]
  |  |  ------------------
  ------------------
 2374|  1.58k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.58k|    }
 2376|       |
 2377|  2.00M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.00M, False: 980k]
  ------------------
 2378|  2.00M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 21.9k, False: 1.98M]
  ------------------
 2379|  21.9k|            return *it;
 2380|  21.9k|        }
 2381|  2.00M|    }
 2382|       |
 2383|   980k|    return unexpected(parse_error::error);
 2384|  1.00M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.61M|{
 2331|  1.61M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.61M|    else {
 2344|  1.61M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.61M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.61M|                return ch;
 2347|  1.61M|            }
 2348|  1.61M|            return static_cast<char_type>(ch +
 2349|  1.61M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.61M|        };
 2351|       |
 2352|  1.61M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.61M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.61M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.61M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 59.3k, False: 1.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  59.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  59.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  59.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  59.3k|    }                                                  \
  |  |  |  | 3939|  1.61M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.55M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.55M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.55M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.55M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.55M|                    return ascii_tolower(a) ==
 2359|  1.55M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.55M|                }))) {
 2361|  1.55M|            return unexpected(parse_error::error);
 2362|  1.55M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.55M|    }
 2366|  1.61M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.81M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.81M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.43M, False: 381k]
  |  Branch (2345:29): [True: 367k, False: 14.1k]
  ------------------
 2346|  1.80M|                return ch;
 2347|  1.80M|            }
 2348|  14.1k|            return static_cast<char_type>(ch +
 2349|  14.1k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.81M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   437k|{
 2246|   437k|    auto it = read_code_unit(range);
 2247|   437k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.22k, False: 436k]
  |  |  ------------------
  ------------------
 2248|  1.22k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  1.22k|    }
 2250|       |
 2251|   436k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 431k, False: 4.93k]
  |  |  ------------------
  ------------------
 2252|   436k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   431k|        return unexpected(parse_error::error);
 2254|   431k|    }
 2255|       |
 2256|  4.93k|    return *it;
 2257|   436k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.06M|{
 2095|  1.06M|    auto it = read_while_code_unit(range, pred);
 2096|  1.06M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 605k, False: 455k]
  ------------------
 2097|   605k|        return unexpected(parse_error::error);
 2098|   605k|    }
 2099|   455k|    return it;
 2100|  1.06M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   433k|    {
 1720|   433k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   433k|                           ranges::common_range<Range>) {
 1737|   433k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   433k|            auto end_seg = range.end().contiguous_segment();
 1739|   433k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.1k, False: 414k]
  |  |  ------------------
  ------------------
 1740|   433k|                             detail::to_address(end_seg.end()))) {
 1741|  19.1k|                auto& str = m_storage.emplace();
 1742|  19.1k|                str.reserve(range.end().position() - range.begin().position());
 1743|  19.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  19.1k|                m_view = string_view_type{str};
 1745|  19.1k|                return;
 1746|  19.1k|            }
 1747|       |
 1748|   414k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   414k|                                                            end_seg.data());
 1750|   414k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   433k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.83M|    {
 1681|  3.83M|        return m_view;
 1682|  3.83M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.43M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   305k|    {
 6117|   305k|        const bool need_skipped_width =
 6118|   305k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 305k]
  |  Branch (6118:33): [True: 0, False: 305k]
  ------------------
 6119|   305k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   305k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 305k]
  ------------------
 6122|   305k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 305k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   305k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 305k, False: 0]
  ------------------
 6131|   305k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 305k]
  ------------------
 6132|   305k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   305k|        return result_type{rng.begin(), 0};
 6156|   305k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.61M|{
 1956|  1.61M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.61M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.61M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.61M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 59.4k, False: 1.55M]
  ------------------
 1961|  59.4k|            return unexpected(eof_error::eof);
 1962|  59.4k|        }
 1963|       |
 1964|  1.55M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.61M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.88M|{
 1998|  1.88M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.88M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.88M|    auto it = range.begin();
 2002|  1.88M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.88M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.88M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.88M, False: 0]
  ------------------
 2011|  1.88M|        ++it;
 2012|  1.88M|        return {it, string_type(1, *range.begin())};
 2013|  1.88M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.88M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.49M|{
  945|  3.49M|    return is_range_eof(r.begin(), r.end());
  946|  3.49M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.49M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.49M|    {
  938|  3.49M|        return begin == end;
  939|  3.49M|    }
  940|  3.49M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   394k|    {
  190|   394k|        i = std::move(bound);
  191|   394k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.88M|    {
 1989|  1.88M|        return !codepoint.empty();
 1990|  1.88M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.60M|{
  951|  1.60M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.27k, False: 1.60M]
  |  |  ------------------
  ------------------
  952|  5.27k|        return eof_error::eof;
  953|  5.27k|    }
  954|  1.60M|    return eof_error::good;
  955|  1.60M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   831k|{
 1945|   831k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 714, False: 830k]
  |  |  ------------------
  ------------------
 1946|    714|        return unexpected(e);
 1947|    714|    }
 1948|       |
 1949|   830k|    return ranges::next(range.begin());
 1950|   831k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   830k|    {
  296|   830k|        ++x;
  297|   830k|        return x;
  298|   830k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   614k|{
 3258|   614k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   614k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 609k, False: 4.43k]
  ------------------
 3260|   609k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 609k, False: 24]
  ------------------
 3261|   609k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   609k|        }
 3263|     24|        return unexpected(eof_error::eof);
 3264|   609k|    }
 3265|       |
 3266|  4.43k|    auto& it = *r;
 3267|  4.43k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 2.86k, False: 1.57k]
  ------------------
 3268|  2.86k|        return std::pair{it, sign_type::minus_sign};
 3269|  2.86k|    }
 3270|  1.57k|    return std::pair{it, sign_type::plus_sign};
 3271|  4.43k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   694k|{
 2372|   694k|    auto it = read_code_unit(range);
 2373|   694k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 370, False: 693k]
  |  |  ------------------
  ------------------
 2374|    370|        return unexpected(make_eof_parse_error(it.error()));
 2375|    370|    }
 2376|       |
 2377|  1.38M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.38M, False: 684k]
  ------------------
 2378|  1.38M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 9.84k, False: 1.37M]
  ------------------
 2379|  9.84k|            return *it;
 2380|  9.84k|        }
 2381|  1.38M|    }
 2382|       |
 2383|   684k|    return unexpected(parse_error::error);
 2384|   693k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.61M|{
 2331|  1.61M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.61M|    else {
 2344|  1.61M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.61M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.61M|                return ch;
 2347|  1.61M|            }
 2348|  1.61M|            return static_cast<char_type>(ch +
 2349|  1.61M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.61M|        };
 2351|       |
 2352|  1.61M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.61M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.61M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.61M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 59.4k, False: 1.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  59.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  59.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  59.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  59.4k|    }                                                  \
  |  |  |  | 3939|  1.61M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.55M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.55M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.55M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.55M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.55M|                    return ascii_tolower(a) ==
 2359|  1.55M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.55M|                }))) {
 2361|  1.55M|            return unexpected(parse_error::error);
 2362|  1.55M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.55M|    }
 2366|  1.61M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.81M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.81M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.43M, False: 382k]
  |  Branch (2345:29): [True: 368k, False: 14.2k]
  ------------------
 2346|  1.80M|                return ch;
 2347|  1.80M|            }
 2348|  14.2k|            return static_cast<char_type>(ch +
 2349|  14.2k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.81M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   136k|{
 2246|   136k|    auto it = read_code_unit(range);
 2247|   136k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 344, False: 136k]
  |  |  ------------------
  ------------------
 2248|    344|        return unexpected(make_eof_parse_error(it.error()));
 2249|    344|    }
 2250|       |
 2251|   136k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 134k, False: 1.91k]
  |  |  ------------------
  ------------------
 2252|   136k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   134k|        return unexpected(parse_error::error);
 2254|   134k|    }
 2255|       |
 2256|  1.91k|    return *it;
 2257|   136k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   356k|{
 2075|   356k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   356k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   356k|{
 2056|   356k|    if constexpr (ranges::common_range<Range>) {
 2057|   356k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   356k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   612k|{
 3066|   612k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 612k, False: 0]
  ------------------
 3067|   612k|        auto it = read_while_classic_space(range);
 3068|   612k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   612k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.93k, False: 608k]
  |  |  ------------------
  ------------------
 3070|  3.93k|            return unexpected(e);
 3071|  3.93k|        }
 3072|       |
 3073|   608k|        return it;
 3074|   612k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   612k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   612k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   612k|    else {
 2225|   612k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   612k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   612k|            return detail::is_cp_space(cp);
 2238|   612k|        });
 2239|   612k|    }
 2240|   612k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   612k|{
 2181|   612k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   612k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  1.04M|{
 2160|  1.04M|    auto it = range.begin();
 2161|  2.15M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.88M, False: 267k]
  ------------------
 2162|  1.88M|        const auto val =
 2163|  1.88M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.88M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.88M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.88M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.88M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.88M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 774k, False: 1.10M]
  ------------------
 2168|   774k|                return it;
 2169|   774k|            }
 2170|  1.88M|        }
 2171|  1.10M|        it = val.iterator;
 2172|  1.10M|    }
 2173|       |
 2174|   267k|    return it;
 2175|  1.04M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   612k|        : m_fptr([](storage fn,
  743|   612k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   612k|              cvref<T> obj = *get<T>(fn);
  745|   612k|              if constexpr (std::is_void_v<R>) {
  746|   612k|                  obj(static_cast<decltype(args)>(args)...);
  747|   612k|              }
  748|   612k|              else {
  749|   612k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   612k|              }
  751|   612k|          }),
  752|   612k|          m_storage(std::addressof(f))
  753|   612k|    {
  754|   612k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.05M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.05M|            return detail::is_cp_space(cp);
 2238|  1.05M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   612k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   612k|        {
  662|   612k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.39M|    {
  304|  1.39M|        ranges::advance(x, n);
  305|  1.39M|        return x;
  306|  1.39M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.39M|    {
  268|  1.39M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.39M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.39M|    {
  181|  4.52M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.12M, False: 1.39M]
  ------------------
  182|  3.12M|            ++i;
  183|  3.12M|        }
  184|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   139k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   139k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   139k|            auto rd = make_reader<T, char_type>();
 6237|   139k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   139k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 139k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   139k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 139k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   139k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   139k|                return impl(rd, range, value);
 6242|   139k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   139k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   896k|    {
 3156|   896k|        reader_error_handler eh{};
 3157|   896k|        get_derived().check_specs_impl(specs, eh);
 3158|   896k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 896k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   896k|        return {};
 3163|   896k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|   896k|    {
 3168|   896k|        return static_cast<Derived&>(*this);
 3169|   896k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|   896k|    {
 4178|   896k|        detail::check_float_type_specs(specs, eh);
 4179|   896k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   139k|    {
 6162|   139k|        const bool need_skipped_width =
 6163|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 139k]
  |  Branch (6163:33): [True: 0, False: 139k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   139k|        auto it = rng.begin();
 6167|   139k|        std::ptrdiff_t prefix_width = 0;
 6168|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 139k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   139k|        else {
 6176|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.04k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.04k|    }                                                  \
  |  |  |  | 3939|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   138k|            std::tie(it, prefix_width) = prefix_result;
 6178|   138k|        }
 6179|   138k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   138k|        std::ptrdiff_t value_width = 0;
 6183|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 138k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   138k|        else {
 6199|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.7k, False: 92.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.7k|    }                                                  \
  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  92.4k|                                             specs, value, loc));
 6201|       |
 6202|  92.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 92.4k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  92.4k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  92.4k|        std::ptrdiff_t postfix_width = 0;
 6211|  92.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 91.9k, False: 508]
  ------------------
 6212|  91.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 91.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  91.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  91.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  91.9k|                                 value_width));
 6216|  91.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  91.9k|        }
 6218|       |
 6219|  92.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  92.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  92.4k|            specs, prefix_width, value_width, postfix_width));
 6221|  92.4k|        return it;
 6222|  92.4k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.83M|    {
 3151|  1.83M|        return true;
 3152|  1.83M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|   889k|    {
 4250|   889k|        unsigned options{};
 4251|   889k|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 218k, False: 670k]
  ------------------
 4252|   218k|            options |= float_reader_base::allow_thsep;
 4253|   218k|        }
 4254|       |
 4255|   889k|        SCN_GCC_COMPAT_PUSH
 4256|   889k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|   889k|        switch (specs.type) {
 4259|   168k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 168k, False: 720k]
  ------------------
 4260|   168k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  58.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 58.1k, False: 831k]
  ------------------
 4263|  58.1k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   241k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 241k, False: 648k]
  ------------------
 4266|   241k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   202k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 202k, False: 686k]
  ------------------
 4269|   202k|                return options | float_reader_base::allow_scientific |
 4270|   202k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   218k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 218k, False: 670k]
  ------------------
 4273|   218k|                return options | float_reader_base::allow_scientific |
 4274|   218k|                       float_reader_base::allow_fixed |
 4275|   218k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 889k]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|   889k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|   889k|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|   889k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|   889k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.21M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.43M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   286k|    {
 3733|   286k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   286k|        const std::ptrdiff_t sign_len =
 3736|   286k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.00k, False: 284k]
  ------------------
 3737|       |
 3738|   286k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   286k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   286k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   286k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 34.3k, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  34.3k|    }                                                  \
  |  |  |  | 3939|   286k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   252k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   286k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|   960k|    {
 4090|   960k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 960k, False: 0]
  ------------------
 4091|   960k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 960k, False: 0]
  ------------------
 4092|   960k|            return;
 4093|   960k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.06M|    {
 1686|  1.06M|        return m_storage.has_value();
 1687|  1.06M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   627k|    {
 1691|   627k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|   627k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   627k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   627k|        return *m_storage;
 1693|   627k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   138k|    {
 4203|   138k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   138k|#if !SCN_DISABLE_LOCALE
 4206|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.4k, False: 106k]
  ------------------
 4207|  31.4k|            return read_impl<Range>(
 4208|  31.4k|                range, rd,
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.4k|                },
 4212|  31.4k|                value, loc);
 4213|  31.4k|        }
 4214|   106k|#endif
 4215|       |
 4216|   106k|        return read_impl<Range>(
 4217|   106k|            range, rd,
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
 4220|   106k|            },
 4221|   106k|            value);
 4222|   138k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   185k|    {
 4239|   185k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   185k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.5k, False: 127k]
  |  |  ------------------
  ------------------
 4241|  57.5k|            return unexpected(r.error());
 4242|  57.5k|        }
 4243|       |
 4244|   127k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.93k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.93k|    }                                                  \
  |  |  |  | 3939|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   125k|        return ranges::next(range.begin(), n);
 4246|   127k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   608k|    {
  763|   608k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   608k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.4k|        : m_fptr([](storage fn,
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
  752|  31.4k|          m_storage(std::addressof(f))
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   109k|    {
 3721|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   109k|        return read_source_impl(range);
 3727|   109k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|   608k|    {
 3747|   608k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   608k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 608k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   608k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   608k|        auto it = sign_result.first;
 3750|   608k|        m_sign = sign_result.second;
 3751|       |
 3752|   608k|        auto digits_begin = it;
 3753|   608k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|   608k|        else {
 3780|   608k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 174k, False: 433k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   174k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   174k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   174k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   174k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   174k|    }                                                  \
  |  | 3939|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   433k|                it,
 3782|   433k|                do_read_source_impl(
 3783|   433k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   433k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   433k|        }
 3786|       |
 3787|   608k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   433k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 433k, False: 0]
  |  Branch (3789:48): [True: 433k, False: 0]
  ------------------
 3790|   433k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 433k, False: 0]
  ------------------
 3791|   433k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 433k, False: 0]
  ------------------
 3792|   433k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   433k|        }
 3794|       |
 3795|   433k|        handle_separators();
 3796|       |
 3797|   433k|        return it;
 3798|   608k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|   608k|    {
 4033|   608k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   608k|        const bool allowed_nonhex =
 4035|   608k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   608k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   608k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 608k, False: 0]
  |  Branch (4038:45): [True: 0, False: 608k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   608k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 608k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   608k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 608k, False: 0]
  |  Branch (4047:45): [True: 0, False: 608k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   608k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 608k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   608k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 393k, False: 214k]
  |  Branch (4054:28): [True: 120k, False: 273k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   120k|            auto it = range.begin();
 4058|       |
 4059|   120k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 120k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   120k|            else {
 4064|   120k|                m_kind = float_kind::hex_without_prefix;
 4065|   120k|            }
 4066|       |
 4067|   120k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   120k|        }
 4069|   488k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 214k, False: 273k]
  |  Branch (4069:29): [True: 214k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   214k|            m_kind = float_kind::generic;
 4073|   214k|            return read_regular_float(range);
 4074|   214k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   273k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 272k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   272k|        m_kind = float_kind::generic;
 4085|   272k|        return read_regular(range);
 4086|   273k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|   608k|    {
 3841|   608k|        auto it = range.begin();
 3842|   608k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 608k, False: 0]
  ------------------
 3843|   608k|            return unexpected(r.error());
 3844|   608k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|   608k|    {
 3864|   608k|        auto it = range.begin();
 3865|   608k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 608k, False: 0]
  ------------------
 3866|   608k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   608k|                scan_error::invalid_scanned_value,
 3868|   608k|                "Invalid floating-point NaN value"));
 3869|   608k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   393k|    {
 3834|   393k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   393k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   121k|    {
 3935|   121k|        auto it = range.begin();
 3936|       |
 3937|   121k|        std::ptrdiff_t digits_count = 0;
 3938|   121k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.0k, False: 94.0k]
  |  |  ------------------
  ------------------
 3940|  27.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  27.0k|                scan_error::invalid_scanned_value,
 3942|  27.0k|                "Invalid hexadecimal floating-point value"));
 3943|  27.0k|        }
 3944|  94.0k|        else {
 3945|  94.0k|            digits_count += ranges::distance(it, *r);
 3946|  94.0k|            it = *r;
 3947|  94.0k|        }
 3948|       |
 3949|  94.0k|        m_integral_part_length = digits_count;
 3950|  94.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 886, False: 93.1k]
  ------------------
 3951|  94.0k|                                             m_locale_options.decimal_point)) {
 3952|    886|            it = *r;
 3953|    886|        }
 3954|       |
 3955|  94.0k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 764, False: 93.2k]
  ------------------
 3956|  94.0k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|    764|            digits_count += ranges::distance(it, *r);
 3958|    764|            it = *r;
 3959|    764|        }
 3960|       |
 3961|  94.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94.0k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|  94.0k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|  94.0k|        return it;
 3970|  94.0k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   215k|    {
 3819|   215k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 215k]
  |  |  |  Branch (865:45): [True: 0, False: 215k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   215k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   215k|        return read_while1_code_unit(
 3828|   215k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   215k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   215k|        : m_fptr([](storage fn,
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
  752|   215k|          m_storage(std::addressof(f))
  753|   215k|    {
  754|   215k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   344k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   344k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   344k|              else {
  749|   344k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   344k|              }
  751|   344k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   344k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   344k|        else if constexpr (std::is_object_v<T>) {
  688|   344k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   344k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3828|   344k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   215k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   215k|        {
  662|   215k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   380k|    {
 3907|   380k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 15.3k, False: 365k]
  ------------------
 3908|  15.3k|            auto beg_exp_it = range.begin();
 3909|  15.3k|            auto it = *r;
 3910|       |
 3911|  15.3k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 15.2k, False: 72]
  ------------------
 3912|  15.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  15.2k|                it = r_sign->first;
 3914|  15.2k|            }
 3915|       |
 3916|  15.3k|            if (auto r_exp = read_while1_code_unit(
 3917|  15.3k|                    ranges::subrange{it, range.end()},
 3918|  15.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  15.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.22k, False: 14.0k]
  |  |  ------------------
  ------------------
 3920|  1.22k|                it = beg_exp_it;
 3921|  1.22k|            }
 3922|  14.0k|            else {
 3923|  14.0k|                it = *r_exp;
 3924|  14.0k|            }
 3925|       |
 3926|  15.3k|            return it;
 3927|  15.3k|        }
 3928|   365k|        return range.begin();
 3929|   380k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  15.3k|        : m_fptr([](storage fn,
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
  752|  15.3k|          m_storage(std::addressof(f))
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  48.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.5k|        else if constexpr (std::is_object_v<T>) {
  688|  48.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.5k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  48.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  15.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   487k|    {
 3976|   487k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   487k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 403k, False: 84.4k]
  |  Branch (3977:50): [True: 29.0k, False: 373k]
  ------------------
 3978|       |
 3979|   487k|        auto it = ranges::begin(range);
 3980|   487k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   487k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   487k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144k, False: 343k]
  |  |  ------------------
  ------------------
 3984|   144k|            return r.transform_error(
 3985|   144k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|   144k|                                              "Invalid floating-point value"));
 3987|   144k|        }
 3988|   343k|        else {
 3989|   343k|            digits_count += ranges::distance(it, *r);
 3990|   343k|            it = *r;
 3991|   343k|        }
 3992|       |
 3993|   343k|        m_integral_part_length = digits_count;
 3994|   343k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 4.04k, False: 339k]
  ------------------
 3995|   343k|                                             m_locale_options.decimal_point)) {
 3996|  4.04k|            it = *r;
 3997|  4.04k|        }
 3998|       |
 3999|   343k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 3.47k, False: 339k]
  ------------------
 4000|   343k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  3.47k|            digits_count += ranges::distance(it, *r);
 4002|  3.47k|            it = *r;
 4003|  3.47k|        }
 4004|       |
 4005|   343k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 343k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   343k|        auto beg_exp_it = it;
 4012|   343k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 286k, False: 56.8k]
  ------------------
 4013|   286k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   286k|        }
 4015|   343k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.19k, False: 338k]
  |  Branch (4015:29): [True: 3.82k, False: 1.36k]
  ------------------
 4016|  3.82k|            return detail::unexpected_scan_error(
 4017|  3.82k|                scan_error::invalid_scanned_value,
 4018|  3.82k|                "No exponent given to scientific float");
 4019|  3.82k|        }
 4020|       |
 4021|   339k|        m_kind =
 4022|   339k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 325k, False: 13.9k]
  ------------------
 4023|       |
 4024|   339k|        return it;
 4025|   343k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|   830k|    {
 3804|   830k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 830k]
  |  |  |  Branch (865:45): [True: 0, False: 830k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   830k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   830k|        return read_while1_code_unit(
 3813|   830k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   830k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   830k|        : m_fptr([](storage fn,
  743|   830k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   830k|              cvref<T> obj = *get<T>(fn);
  745|   830k|              if constexpr (std::is_void_v<R>) {
  746|   830k|                  obj(static_cast<decltype(args)>(args)...);
  747|   830k|              }
  748|   830k|              else {
  749|   830k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   830k|              }
  751|   830k|          }),
  752|   830k|          m_storage(std::addressof(f))
  753|   830k|    {
  754|   830k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27M|              else {
  749|  1.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27M|              }
  751|  1.27M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.27M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.27M|        else if constexpr (std::is_object_v<T>) {
  688|  1.27M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3813|  1.27M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   830k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   830k|        {
  662|   830k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   433k|    {
 1676|   433k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   433k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   106k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   499k|    {
 3707|   499k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   499k|        return read_source_impl(range);
 3713|   499k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   138k|    {
 4203|   138k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   138k|#if !SCN_DISABLE_LOCALE
 4206|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.5k, False: 106k]
  ------------------
 4207|  31.5k|            return read_impl<Range>(
 4208|  31.5k|                range, rd,
 4209|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.5k|                },
 4212|  31.5k|                value, loc);
 4213|  31.5k|        }
 4214|   106k|#endif
 4215|       |
 4216|   106k|        return read_impl<Range>(
 4217|   106k|            range, rd,
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
 4220|   106k|            },
 4221|   106k|            value);
 4222|   138k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   185k|    {
 4239|   185k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   185k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.0k, False: 158k]
  |  |  ------------------
  ------------------
 4241|  27.0k|            return unexpected(r.error());
 4242|  27.0k|        }
 4243|       |
 4244|   158k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.3k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.3k|    }                                                  \
  |  |  |  | 3939|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   126k|        return ranges::next(range.begin(), n);
 4246|   158k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   608k|    {
  763|   608k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   608k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.5k|        : m_fptr([](storage fn,
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|  31.5k|              if constexpr (std::is_void_v<R>) {
  746|  31.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.5k|              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
  752|  31.5k|          m_storage(std::addressof(f))
  753|  31.5k|    {
  754|  31.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.5k|        else if constexpr (std::is_object_v<T>) {
  688|  31.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.5k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   109k|    {
 3721|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   109k|        return read_source_impl(range);
 3727|   109k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   608k|    {
 3747|   608k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   608k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 608k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   608k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   608k|        auto it = sign_result.first;
 3750|   608k|        m_sign = sign_result.second;
 3751|       |
 3752|   608k|        auto digits_begin = it;
 3753|   608k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   608k|                      ranges::sized_range<Range>) {
 3756|   608k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 608k]
  |  |  |  Branch (865:45): [True: 0, False: 608k]
  |  |  |  Branch (865:45): [True: 0, False: 608k]
  |  |  ------------------
  ------------------
 3757|   608k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   608k|            else {
 3766|   608k|                auto cb = [&](const auto& rr)
 3767|   608k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   608k|                    auto res = read_all(rr);
 3769|   608k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   608k|                        return detail::unexpected_scan_error(
 3771|   608k|                            scan_error::invalid_scanned_value,
 3772|   608k|                            "Invalid float value");
 3773|   608k|                    }
 3774|   608k|                    return res;
 3775|   608k|                };
 3776|   608k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 82.0k, False: 526k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  82.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  82.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  82.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  82.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  82.0k|    }                                                  \
  |  | 3939|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   526k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   608k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   526k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 526k, False: 0]
  |  Branch (3789:48): [True: 526k, False: 0]
  ------------------
 3790|   526k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 526k, False: 0]
  ------------------
 3791|   526k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 526k, False: 0]
  ------------------
 3792|   526k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   526k|        }
 3794|       |
 3795|   526k|        handle_separators();
 3796|       |
 3797|   526k|        return it;
 3798|   608k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   608k|    {
 3841|   608k|        auto it = range.begin();
 3842|   608k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 608k, False: 0]
  ------------------
 3843|   608k|            return unexpected(r.error());
 3844|   608k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   608k|    {
 3864|   608k|        auto it = range.begin();
 3865|   608k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 608k, False: 0]
  ------------------
 3866|   608k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   608k|                scan_error::invalid_scanned_value,
 3868|   608k|                "Invalid floating-point NaN value"));
 3869|   608k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   394k|    {
 3834|   394k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   394k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   356k|{
 2095|   356k|    auto it = read_while_code_unit(range, pred);
 2096|   356k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 213k, False: 143k]
  ------------------
 2097|   213k|        return unexpected(parse_error::error);
 2098|   213k|    }
 2099|   143k|    return it;
 2100|   356k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|  79.9k|    {
 3907|  79.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 5.41k, False: 74.5k]
  ------------------
 3908|  5.41k|            auto beg_exp_it = range.begin();
 3909|  5.41k|            auto it = *r;
 3910|       |
 3911|  5.41k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 5.38k, False: 24]
  ------------------
 3912|  5.41k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  5.38k|                it = r_sign->first;
 3914|  5.38k|            }
 3915|       |
 3916|  5.41k|            if (auto r_exp = read_while1_code_unit(
 3917|  5.41k|                    ranges::subrange{it, range.end()},
 3918|  5.41k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  5.41k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 464, False: 4.94k]
  |  |  ------------------
  ------------------
 3920|    464|                it = beg_exp_it;
 3921|    464|            }
 3922|  4.94k|            else {
 3923|  4.94k|                it = *r_exp;
 3924|  4.94k|            }
 3925|       |
 3926|  5.41k|            return it;
 3927|  5.41k|        }
 3928|  74.5k|        return range.begin();
 3929|  79.9k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.41k|        : m_fptr([](storage fn,
  743|  5.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.41k|              cvref<T> obj = *get<T>(fn);
  745|  5.41k|              if constexpr (std::is_void_v<R>) {
  746|  5.41k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.41k|              }
  748|  5.41k|              else {
  749|  5.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.41k|              }
  751|  5.41k|          }),
  752|  5.41k|          m_storage(std::addressof(f))
  753|  5.41k|    {
  754|  5.41k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  16.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.7k|              else {
  749|  16.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.7k|              }
  751|  16.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  16.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.7k|        else if constexpr (std::is_object_v<T>) {
  688|  16.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.7k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  16.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.41k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.41k|        {
  662|  5.41k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   214k|    {
 3976|   214k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   214k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 130k, False: 84.4k]
  |  Branch (3977:50): [True: 29.0k, False: 101k]
  ------------------
 3978|       |
 3979|   214k|        auto it = ranges::begin(range);
 3980|   214k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   214k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   214k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 78.0k, False: 136k]
  |  |  ------------------
  ------------------
 3984|  78.0k|            return r.transform_error(
 3985|  78.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  78.0k|                                              "Invalid floating-point value"));
 3987|  78.0k|        }
 3988|   136k|        else {
 3989|   136k|            digits_count += ranges::distance(it, *r);
 3990|   136k|            it = *r;
 3991|   136k|        }
 3992|       |
 3993|   136k|        m_integral_part_length = digits_count;
 3994|   136k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 1.91k, False: 134k]
  ------------------
 3995|   136k|                                             m_locale_options.decimal_point)) {
 3996|  1.91k|            it = *r;
 3997|  1.91k|        }
 3998|       |
 3999|   136k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 1.63k, False: 135k]
  ------------------
 4000|   136k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  1.63k|            digits_count += ranges::distance(it, *r);
 4002|  1.63k|            it = *r;
 4003|  1.63k|        }
 4004|       |
 4005|   136k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   136k|        auto beg_exp_it = it;
 4012|   136k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 79.9k, False: 56.8k]
  ------------------
 4013|  79.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|  79.9k|        }
 4015|   136k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.19k, False: 131k]
  |  Branch (4015:29): [True: 3.82k, False: 1.36k]
  ------------------
 4016|  3.82k|            return detail::unexpected_scan_error(
 4017|  3.82k|                scan_error::invalid_scanned_value,
 4018|  3.82k|                "No exponent given to scientific float");
 4019|  3.82k|        }
 4020|       |
 4021|   132k|        m_kind =
 4022|   132k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 127k, False: 4.94k]
  ------------------
 4023|       |
 4024|   132k|        return it;
 4025|   136k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   351k|    {
 3804|   351k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 351k]
  |  |  |  Branch (865:45): [True: 0, False: 351k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   351k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   351k|        return read_while1_code_unit(
 3813|   351k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   351k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   351k|        : m_fptr([](storage fn,
  743|   351k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   351k|              cvref<T> obj = *get<T>(fn);
  745|   351k|              if constexpr (std::is_void_v<R>) {
  746|   351k|                  obj(static_cast<decltype(args)>(args)...);
  747|   351k|              }
  748|   351k|              else {
  749|   351k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   351k|              }
  751|   351k|          }),
  752|   351k|          m_storage(std::addressof(f))
  753|   351k|    {
  754|   351k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   533k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   533k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   533k|              else {
  749|   533k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   533k|              }
  751|   533k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   533k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   533k|        else if constexpr (std::is_object_v<T>) {
  688|   533k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   533k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|   533k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   351k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   351k|        {
  662|   351k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   608k|    {
 4033|   608k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   608k|        const bool allowed_nonhex =
 4035|   608k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   608k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   608k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 608k, False: 0]
  |  Branch (4038:45): [True: 0, False: 608k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   608k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 608k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   608k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 608k, False: 0]
  |  Branch (4047:45): [True: 0, False: 608k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   608k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 608k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   608k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 394k, False: 214k]
  |  Branch (4054:28): [True: 120k, False: 273k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   120k|            auto it = range.begin();
 4058|       |
 4059|   120k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 120k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   120k|            else {
 4064|   120k|                m_kind = float_kind::hex_without_prefix;
 4065|   120k|            }
 4066|       |
 4067|   120k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   120k|        }
 4069|   488k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 214k, False: 273k]
  |  Branch (4069:29): [True: 214k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   214k|            m_kind = float_kind::generic;
 4073|   214k|            return read_regular_float(range);
 4074|   214k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   273k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 272k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   272k|        m_kind = float_kind::generic;
 4085|   272k|        return read_regular(range);
 4086|   273k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   394k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   394k|                    auto res = read_all(rr);
 3769|   394k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 171, False: 394k]
  |  |  ------------------
  ------------------
 3770|    171|                        return detail::unexpected_scan_error(
 3771|    171|                            scan_error::invalid_scanned_value,
 3772|    171|                            "Invalid float value");
 3773|    171|                    }
 3774|   394k|                    return res;
 3775|   394k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   394k|{
 1938|   394k|    return ranges::next(range.begin(), range.end());
 1939|   394k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   394k|    {
  313|   394k|        ranges::advance(x, bound);
  314|   394k|        return x;
  315|   394k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   394k|    {
  275|   394k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   394k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   526k|    {
 1676|   526k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   526k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   526k|    {
 1720|   526k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   526k|                      ranges::sized_range<Range>) {
 1725|   526k|            m_storage.reset();
 1726|   526k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   526k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.5k|        {
  662|  31.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   106k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   499k|    {
 3707|   499k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   499k|        return read_source_impl(range);
 3713|   499k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   153k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   153k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   153k|            auto rd = make_reader<T, char_type>();
 6237|   153k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   153k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   153k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 153k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   153k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   153k|                return impl(rd, range, value);
 6242|   153k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   153k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   153k|    {
 6162|   153k|        const bool need_skipped_width =
 6163|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 153k]
  |  Branch (6163:33): [True: 0, False: 153k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   153k|        auto it = rng.begin();
 6167|   153k|        std::ptrdiff_t prefix_width = 0;
 6168|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 153k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   153k|        else {
 6176|   153k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.13k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.13k|    }                                                  \
  |  |  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   151k|            std::tie(it, prefix_width) = prefix_result;
 6178|   151k|        }
 6179|   151k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   151k|        std::ptrdiff_t value_width = 0;
 6183|   151k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 151k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   151k|        else {
 6199|   151k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   106k|                                             specs, value, loc));
 6201|       |
 6202|   106k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 106k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   106k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   106k|        std::ptrdiff_t postfix_width = 0;
 6211|   106k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 105k, False: 564]
  ------------------
 6212|   105k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   105k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   105k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   105k|                                 value_width));
 6216|   105k|            std::tie(it, postfix_width) = postfix_result;
 6217|   105k|        }
 6218|       |
 6219|   106k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   106k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   106k|            specs, prefix_width, value_width, postfix_width));
 6221|   106k|        return it;
 6222|   106k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   333k|    {
 3733|   333k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   333k|        const std::ptrdiff_t sign_len =
 3736|   333k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.06k, False: 331k]
  ------------------
 3737|       |
 3738|   333k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.9k, False: 300k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.9k|    }                                                  \
  |  |  |  | 3939|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   300k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   333k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   151k|    {
 4203|   151k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   151k|#if !SCN_DISABLE_LOCALE
 4206|   151k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.3k, False: 113k]
  ------------------
 4207|  38.3k|            return read_impl<Range>(
 4208|  38.3k|                range, rd,
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.3k|                },
 4212|  38.3k|                value, loc);
 4213|  38.3k|        }
 4214|   113k|#endif
 4215|       |
 4216|   113k|        return read_impl<Range>(
 4217|   113k|            range, rd,
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
 4220|   113k|            },
 4221|   113k|            value);
 4222|   151k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   209k|    {
 4239|   209k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   209k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58.3k, False: 151k]
  |  |  ------------------
  ------------------
 4241|  58.3k|            return unexpected(r.error());
 4242|  58.3k|        }
 4243|       |
 4244|   151k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 971, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    971|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    971|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    971|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    971|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    971|    }                                                  \
  |  |  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   150k|        return ranges::next(range.begin(), n);
 4246|   151k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.3k|        : m_fptr([](storage fn,
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
  752|  38.3k|          m_storage(std::addressof(f))
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   113k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   113k|        else if constexpr (std::is_object_v<T>) {
  688|   113k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   113k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   113k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   152k|    {
 4203|   152k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   152k|#if !SCN_DISABLE_LOCALE
 4206|   152k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.3k, False: 113k]
  ------------------
 4207|  38.3k|            return read_impl<Range>(
 4208|  38.3k|                range, rd,
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.3k|                },
 4212|  38.3k|                value, loc);
 4213|  38.3k|        }
 4214|   113k|#endif
 4215|       |
 4216|   113k|        return read_impl<Range>(
 4217|   113k|            range, rd,
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
 4220|   113k|            },
 4221|   113k|            value);
 4222|   152k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   209k|    {
 4239|   209k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   209k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.3k, False: 182k]
  |  |  ------------------
  ------------------
 4241|  27.3k|            return unexpected(r.error());
 4242|  27.3k|        }
 4243|       |
 4244|   182k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.9k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.9k|    }                                                  \
  |  |  |  | 3939|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   150k|        return ranges::next(range.begin(), n);
 4246|   182k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.3k|        : m_fptr([](storage fn,
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
  752|  38.3k|          m_storage(std::addressof(f))
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   113k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   113k|        else if constexpr (std::is_object_v<T>) {
  688|   113k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   113k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   113k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   155k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   155k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   155k|            auto rd = make_reader<T, char_type>();
 6237|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   155k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 155k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   155k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   155k|                return impl(rd, range, value);
 6242|   155k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   155k|    {
 6162|   155k|        const bool need_skipped_width =
 6163|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 155k]
  |  Branch (6163:33): [True: 0, False: 155k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   155k|        auto it = rng.begin();
 6167|   155k|        std::ptrdiff_t prefix_width = 0;
 6168|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 155k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   155k|        else {
 6176|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.20k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.20k|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   154k|            std::tie(it, prefix_width) = prefix_result;
 6178|   154k|        }
 6179|   154k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   154k|        std::ptrdiff_t value_width = 0;
 6183|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 154k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   154k|        else {
 6199|   154k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   108k|                                             specs, value, loc));
 6201|       |
 6202|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 108k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   108k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   108k|        std::ptrdiff_t postfix_width = 0;
 6211|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 108k, False: 612]
  ------------------
 6212|   108k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   108k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   108k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   108k|                                 value_width));
 6216|   108k|            std::tie(it, postfix_width) = postfix_result;
 6217|   108k|        }
 6218|       |
 6219|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   108k|            specs, prefix_width, value_width, postfix_width));
 6221|   108k|        return it;
 6222|   108k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   340k|    {
 3733|   340k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   340k|        const std::ptrdiff_t sign_len =
 3736|   340k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.10k, False: 338k]
  ------------------
 3737|       |
 3738|   340k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.7k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.7k|    }                                                  \
  |  |  |  | 3939|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   308k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   340k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   154k|    {
 4203|   154k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   154k|#if !SCN_DISABLE_LOCALE
 4206|   154k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.5k, False: 114k]
  ------------------
 4207|  39.5k|            return read_impl<Range>(
 4208|  39.5k|                range, rd,
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.5k|                },
 4212|  39.5k|                value, loc);
 4213|  39.5k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   154k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   213k|    {
 4239|   213k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   213k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.0k, False: 154k]
  |  |  ------------------
  ------------------
 4241|  59.0k|            return unexpected(r.error());
 4242|  59.0k|        }
 4243|       |
 4244|   154k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 136, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    136|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   154k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  39.5k|        : m_fptr([](storage fn,
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|  39.5k|              if constexpr (std::is_void_v<R>) {
  746|  39.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.5k|              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
  752|  39.5k|          m_storage(std::addressof(f))
  753|  39.5k|    {
  754|  39.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.5k|        else if constexpr (std::is_object_v<T>) {
  688|  39.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  39.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.5k|        {
  662|  39.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   154k|    {
 4203|   154k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   154k|#if !SCN_DISABLE_LOCALE
 4206|   154k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.5k, False: 114k]
  ------------------
 4207|  39.5k|            return read_impl<Range>(
 4208|  39.5k|                range, rd,
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.5k|                },
 4212|  39.5k|                value, loc);
 4213|  39.5k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   154k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   213k|    {
 4239|   213k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   213k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.5k, False: 186k]
  |  |  ------------------
  ------------------
 4241|  27.5k|            return unexpected(r.error());
 4242|  27.5k|        }
 4243|       |
 4244|   186k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.6k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.6k|    }                                                  \
  |  |  |  | 3939|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   186k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  39.5k|        : m_fptr([](storage fn,
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|  39.5k|              if constexpr (std::is_void_v<R>) {
  746|  39.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.5k|              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
  752|  39.5k|          m_storage(std::addressof(f))
  753|  39.5k|    {
  754|  39.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.5k|        else if constexpr (std::is_object_v<T>) {
  688|  39.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  39.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.5k|        {
  662|  39.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   612k|{
 2160|   612k|    auto it = range.begin();
 2161|  1.05M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.05M, False: 3.93k]
  ------------------
 2162|  1.05M|        const auto val =
 2163|  1.05M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.05M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.05M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.05M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.05M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 608k, False: 446k]
  ------------------
 2168|   608k|                return it;
 2169|   608k|            }
 2170|  1.05M|        }
 2171|   446k|        it = val.iterator;
 2172|   446k|    }
 2173|       |
 2174|  3.93k|    return it;
 2175|   612k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.05M|{
 1998|  1.05M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.05M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.05M|    auto it = range.begin();
 2002|  1.05M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.05M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.05M, False: 0]
  ------------------
 2011|  1.05M|        ++it;
 2012|  1.05M|        return {it, string_type(1, *range.begin())};
 2013|  1.05M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.05M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.05M|    {
 1989|  1.05M|        return !codepoint.empty();
 1990|  1.05M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   612k|{
 2181|   612k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   612k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   612k|{
 3066|   612k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 612k, False: 0]
  ------------------
 3067|   612k|        auto it = read_while_classic_space(range);
 3068|   612k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   612k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.93k, False: 608k]
  |  |  ------------------
  ------------------
 3070|  3.93k|            return unexpected(e);
 3071|  3.93k|        }
 3072|       |
 3073|   608k|        return it;
 3074|   612k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   612k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   612k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   612k|    else {
 2225|   612k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   612k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   612k|            return detail::is_cp_space(cp);
 2238|   612k|        });
 2239|   612k|    }
 2240|   612k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   612k|        : m_fptr([](storage fn,
  743|   612k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   612k|              cvref<T> obj = *get<T>(fn);
  745|   612k|              if constexpr (std::is_void_v<R>) {
  746|   612k|                  obj(static_cast<decltype(args)>(args)...);
  747|   612k|              }
  748|   612k|              else {
  749|   612k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   612k|              }
  751|   612k|          }),
  752|   612k|          m_storage(std::addressof(f))
  753|   612k|    {
  754|   612k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.05M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.05M|            return detail::is_cp_space(cp);
 2238|  1.05M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   612k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   612k|        {
  662|   612k|        }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   836k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   836k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   836k|        auto buf = make_contiguous_buffer(range);
 2191|   836k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   836k|        return ranges::next(range.begin(),
 2193|   836k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   836k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   836k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   836k|                  ranges::sized_range<Range>) {
 1785|   836k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   836k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   836k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   836k|    {
 1589|   836k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   836k|    {
 1676|   836k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   836k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   836k|    {
 1720|   836k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   836k|                                          std::basic_string<CharT>>) {
 1730|   836k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   836k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   836k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4132|   588k|    {
 4133|   588k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 68.9k, False: 519k]
  ------------------
 4134|  68.9k|            return std::copysign(value, T{-1.0});
 4135|  68.9k|        }
 4136|   519k|        return std::copysign(value, T{1.0});
 4137|   588k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   429k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   429k|    else {
 2196|   429k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   429k|        return read_until_code_point(
 2208|   429k|            ranges::subrange{it, range.end()},
 2209|   429k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   429k|    }
 2211|   429k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   429k|        : m_fptr([](storage fn,
  743|   429k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   429k|              cvref<T> obj = *get<T>(fn);
  745|   429k|              if constexpr (std::is_void_v<R>) {
  746|   429k|                  obj(static_cast<decltype(args)>(args)...);
  747|   429k|              }
  748|   429k|              else {
  749|   429k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   429k|              }
  751|   429k|          }),
  752|   429k|          m_storage(std::addressof(f))
  753|   429k|    {
  754|   429k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   827k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   827k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   827k|              else {
  749|   827k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   827k|              }
  751|   827k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   827k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   827k|        else if constexpr (std::is_object_v<T>) {
  688|   827k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   827k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   827k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   429k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   429k|        {
  662|   429k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   429k|    {
 1676|   429k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   429k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   429k|    {
 1720|   429k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   429k|                                          std::basic_string<CharT>>) {
 1730|   429k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   429k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   429k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4132|   252k|    {
 4133|   252k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.02k, False: 251k]
  ------------------
 4134|  1.02k|            return std::copysign(value, T{-1.0});
 4135|  1.02k|        }
 4136|   251k|        return std::copysign(value, T{1.0});
 4137|   252k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4132|   618k|    {
 4133|   618k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 72.5k, False: 546k]
  ------------------
 4134|  72.5k|            return std::copysign(value, T{-1.0});
 4135|  72.5k|        }
 4136|   546k|        return std::copysign(value, T{1.0});
 4137|   618k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|   300k|    {
 4133|   300k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.07k, False: 299k]
  ------------------
 4134|  1.07k|            return std::copysign(value, T{-1.0});
 4135|  1.07k|        }
 4136|   299k|        return std::copysign(value, T{1.0});
 4137|   300k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4132|   626k|    {
 4133|   626k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 75.2k, False: 551k]
  ------------------
 4134|  75.2k|            return std::copysign(value, T{-1.0});
 4135|  75.2k|        }
 4136|   551k|        return std::copysign(value, T{1.0});
 4137|   626k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4132|   308k|    {
 4133|   308k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.17k, False: 307k]
  ------------------
 4134|  1.17k|            return std::copysign(value, T{-1.0});
 4135|  1.17k|        }
 4136|   307k|        return std::copysign(value, T{1.0});
 4137|   308k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   276k|{
 5835|   276k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.96k, False: 272k]
  |  |  ------------------
  ------------------
 5836|  3.96k|        return unexpected(e);
 5837|  3.96k|    }
 5838|       |
 5839|   272k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 272k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   272k|    return skip_classic_whitespace(range);
 5844|   272k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  88.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  88.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  88.7k|            auto rd = make_reader<T, char_type>();
 5916|  88.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  88.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  88.7k|    {
 5903|  88.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  88.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  88.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  88.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.32k, False: 87.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.32k|    }                                                  \
  |  |  |  | 3939|  88.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  87.4k|                        .transform_error(make_eof_scan_error));
 5905|  87.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  88.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  87.4k|    {
 4185|  87.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  87.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  87.4k|        float_reader<CharT> rd{};
 4188|  87.4k|        return read_impl<Range>(
 4189|  87.4k|            range, rd,
 4190|  87.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  87.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  87.4k|            },
 4193|  87.4k|            value);
 4194|  87.4k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|   569k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|   897k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  87.4k|        : m_fptr([](storage fn,
  743|  87.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.4k|              cvref<T> obj = *get<T>(fn);
  745|  87.4k|              if constexpr (std::is_void_v<R>) {
  746|  87.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.4k|              }
  748|  87.4k|              else {
  749|  87.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.4k|              }
  751|  87.4k|          }),
  752|  87.4k|          m_storage(std::addressof(f))
  753|  87.4k|    {
  754|  87.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  87.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  87.4k|              else {
  749|  87.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.4k|              }
  751|  87.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  87.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  87.4k|        else if constexpr (std::is_object_v<T>) {
  688|  87.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  87.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  87.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  87.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  87.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  87.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  87.4k|        {
  662|  87.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  92.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  92.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  92.9k|            auto rd = make_reader<T, char_type>();
 5916|  92.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  92.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  92.9k|    {
 5903|  92.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  92.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 91.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  92.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  91.4k|                        .transform_error(make_eof_scan_error));
 5905|  91.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  92.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  91.4k|    {
 4185|  91.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  91.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  91.4k|        float_reader<CharT> rd{};
 4188|  91.4k|        return read_impl<Range>(
 4189|  91.4k|            range, rd,
 4190|  91.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  91.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  91.4k|            },
 4193|  91.4k|            value);
 4194|  91.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  91.4k|        : m_fptr([](storage fn,
  743|  91.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  91.4k|              cvref<T> obj = *get<T>(fn);
  745|  91.4k|              if constexpr (std::is_void_v<R>) {
  746|  91.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  91.4k|              }
  748|  91.4k|              else {
  749|  91.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  91.4k|              }
  751|  91.4k|          }),
  752|  91.4k|          m_storage(std::addressof(f))
  753|  91.4k|    {
  754|  91.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  91.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  91.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  91.4k|              else {
  749|  91.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  91.4k|              }
  751|  91.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  91.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  91.4k|        else if constexpr (std::is_object_v<T>) {
  688|  91.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  91.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  91.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  91.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  91.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  91.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  91.4k|        {
  662|  91.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  94.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  94.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  94.6k|            auto rd = make_reader<T, char_type>();
 5916|  94.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  94.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  94.6k|    {
 5903|  94.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 92.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  92.9k|                        .transform_error(make_eof_scan_error));
 5905|  92.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  94.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  92.9k|    {
 4185|  92.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  92.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  92.9k|        float_reader<CharT> rd{};
 4188|  92.9k|        return read_impl<Range>(
 4189|  92.9k|            range, rd,
 4190|  92.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  92.9k|            },
 4193|  92.9k|            value);
 4194|  92.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  92.9k|        : m_fptr([](storage fn,
  743|  92.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.9k|              cvref<T> obj = *get<T>(fn);
  745|  92.9k|              if constexpr (std::is_void_v<R>) {
  746|  92.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.9k|              }
  748|  92.9k|              else {
  749|  92.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.9k|              }
  751|  92.9k|          }),
  752|  92.9k|          m_storage(std::addressof(f))
  753|  92.9k|    {
  754|  92.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  92.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.9k|              else {
  749|  92.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.9k|              }
  751|  92.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  92.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.9k|        else if constexpr (std::is_object_v<T>) {
  688|  92.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  92.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  92.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  92.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.9k|        {
  662|  92.9k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   302k|{
 5835|   302k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.21k, False: 298k]
  |  |  ------------------
  ------------------
 5836|  4.21k|        return unexpected(e);
 5837|  4.21k|    }
 5838|       |
 5839|   298k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 298k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   298k|    return skip_classic_whitespace(range);
 5844|   298k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  96.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  96.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  96.4k|            auto rd = make_reader<T, char_type>();
 5920|  96.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 96.4k, False: 0]
  ------------------
 5921|  96.4k|                return impl(rd, range, value);
 5922|  96.4k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  96.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  96.4k|    {
 5903|  96.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  96.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  96.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  96.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.42k, False: 95.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  96.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  95.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  95.0k|                        .transform_error(make_eof_scan_error));
 5905|  95.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  96.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  95.0k|    {
 4185|  95.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  95.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  95.0k|        float_reader<CharT> rd{};
 4188|  95.0k|        return read_impl<Range>(
 4189|  95.0k|            range, rd,
 4190|  95.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  95.0k|                return r.read_source(SCN_FWD(args)...);
 4192|  95.0k|            },
 4193|  95.0k|            value);
 4194|  95.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  95.0k|        : m_fptr([](storage fn,
  743|  95.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.0k|              cvref<T> obj = *get<T>(fn);
  745|  95.0k|              if constexpr (std::is_void_v<R>) {
  746|  95.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.0k|              }
  748|  95.0k|              else {
  749|  95.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.0k|              }
  751|  95.0k|          }),
  752|  95.0k|          m_storage(std::addressof(f))
  753|  95.0k|    {
  754|  95.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  95.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  95.0k|              else {
  749|  95.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.0k|              }
  751|  95.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  95.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  95.0k|        else if constexpr (std::is_object_v<T>) {
  688|  95.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  95.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  95.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  95.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  95.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  95.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  95.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.0k|        {
  662|  95.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   102k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   102k|            auto rd = make_reader<T, char_type>();
 5920|   102k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 102k, False: 0]
  ------------------
 5921|   102k|                return impl(rd, range, value);
 5922|   102k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   102k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   102k|    {
 5903|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   100k|                        .transform_error(make_eof_scan_error));
 5905|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   102k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   100k|    {
 4185|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   100k|        float_reader<CharT> rd{};
 4188|   100k|        return read_impl<Range>(
 4189|   100k|            range, rd,
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
 4192|   100k|            },
 4193|   100k|            value);
 4194|   100k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   100k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   103k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   103k|            auto rd = make_reader<T, char_type>();
 5920|   103k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 103k, False: 0]
  ------------------
 5921|   103k|                return impl(rd, range, value);
 5922|   103k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   103k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   103k|    {
 5903|   103k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.74k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.74k|    }                                                  \
  |  |  |  | 3939|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   101k|                        .transform_error(make_eof_scan_error));
 5905|   101k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   103k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   101k|    {
 4185|   101k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   101k|        float_reader<CharT> rd{};
 4188|   101k|        return read_impl<Range>(
 4189|   101k|            range, rd,
 4190|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   101k|                return r.read_source(SCN_FWD(args)...);
 4192|   101k|            },
 4193|   101k|            value);
 4194|   101k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   101k|        : m_fptr([](storage fn,
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|   101k|              if constexpr (std::is_void_v<R>) {
  746|   101k|                  obj(static_cast<decltype(args)>(args)...);
  747|   101k|              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
  752|   101k|          m_storage(std::addressof(f))
  753|   101k|    {
  754|   101k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   101k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   101k|        else if constexpr (std::is_object_v<T>) {
  688|   101k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   101k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   101k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   101k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   101k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   101k|        {
  662|   101k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   660k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   660k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   660k|          m_current(m_range.begin())
 2988|   660k|    {
 2989|   660k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|  1.25M|    {
 2998|  1.25M|        return m_range.end();
 2999|  1.25M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   590k|    {
 3013|   590k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   590k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   590k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 590k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   590k|        }
 3019|   590k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   590k|    static_cast<    \
  |  |  935|   590k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   590k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   660k|    {
 3003|   660k|        return ranges::subrange{begin(), end()};
 3004|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   660k|    {
 6075|   660k|        const bool need_skipped_width =
 6076|   660k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 660k]
  |  Branch (6076:33): [True: 0, False: 660k]
  ------------------
 6077|   660k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   660k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 660k]
  ------------------
 6081|   660k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 660k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   660k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 660k, False: 0]
  |  Branch (6085:56): [True: 660k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   660k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 660k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.30M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   660k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   660k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   660k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 649k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   660k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.30M|                            make_eof_scan_error));
 6096|       |
 6097|  1.30M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 649k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   649k|            return result_type{it, 0};
 6105|  1.30M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   580k|    {
 6117|   580k|        const bool need_skipped_width =
 6118|   580k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 580k]
  |  Branch (6118:33): [True: 0, False: 580k]
  ------------------
 6119|   580k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   580k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 580k]
  ------------------
 6122|   580k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 580k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   580k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 580k, False: 0]
  ------------------
 6131|   580k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 580k]
  ------------------
 6132|   580k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   580k|        return result_type{rng.begin(), 0};
 6156|   580k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   214k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   214k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   214k|            auto rd = make_reader<T, char_type>();
 6232|   214k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   214k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 214k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   214k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   214k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   214k|    {
 6162|   214k|        const bool need_skipped_width =
 6163|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 214k]
  |  Branch (6163:33): [True: 0, False: 214k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   214k|        auto it = rng.begin();
 6167|   214k|        std::ptrdiff_t prefix_width = 0;
 6168|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 214k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   214k|        else {
 6176|   214k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.50k, False: 210k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.50k|    }                                                  \
  |  |  |  | 3939|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   210k|            std::tie(it, prefix_width) = prefix_result;
 6178|   210k|        }
 6179|   210k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   210k|        std::ptrdiff_t value_width = 0;
 6183|   210k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 210k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   210k|        else {
 6199|   210k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.9k, False: 190k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.9k|    }                                                  \
  |  | 3939|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   190k|                                             specs, value, loc));
 6201|       |
 6202|   190k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 190k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   190k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   190k|        std::ptrdiff_t postfix_width = 0;
 6211|   190k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 187k, False: 3.08k]
  ------------------
 6212|   187k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   187k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   187k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   187k|                                 value_width));
 6216|   187k|            std::tie(it, postfix_width) = postfix_result;
 6217|   187k|        }
 6218|       |
 6219|   190k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   190k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 190k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   190k|            specs, prefix_width, value_width, postfix_width));
 6221|   190k|        return it;
 6222|   190k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   221k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   221k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   221k|            auto rd = make_reader<T, char_type>();
 6232|   221k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   221k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   221k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   221k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   221k|    {
 6162|   221k|        const bool need_skipped_width =
 6163|   221k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 221k]
  |  Branch (6163:33): [True: 0, False: 221k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   221k|        auto it = rng.begin();
 6167|   221k|        std::ptrdiff_t prefix_width = 0;
 6168|   221k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 221k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   221k|        else {
 6176|   221k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.85k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.85k|    }                                                  \
  |  |  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   218k|            std::tie(it, prefix_width) = prefix_result;
 6178|   218k|        }
 6179|   218k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   218k|        std::ptrdiff_t value_width = 0;
 6183|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 218k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   218k|        else {
 6199|   218k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.5k, False: 198k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.5k|    }                                                  \
  |  | 3939|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   198k|                                             specs, value, loc));
 6201|       |
 6202|   198k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 198k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   198k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   198k|        std::ptrdiff_t postfix_width = 0;
 6211|   198k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 195k, False: 3.39k]
  ------------------
 6212|   195k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   195k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   195k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   195k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   195k|                                 value_width));
 6216|   195k|            std::tie(it, postfix_width) = postfix_result;
 6217|   195k|        }
 6218|       |
 6219|   198k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   198k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 198k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   198k|            specs, prefix_width, value_width, postfix_width));
 6221|   198k|        return it;
 6222|   198k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   224k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   224k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   224k|            auto rd = make_reader<T, char_type>();
 6232|   224k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   224k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   224k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   224k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   224k|    {
 6162|   224k|        const bool need_skipped_width =
 6163|   224k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 224k]
  |  Branch (6163:33): [True: 0, False: 224k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   224k|        auto it = rng.begin();
 6167|   224k|        std::ptrdiff_t prefix_width = 0;
 6168|   224k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 224k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   224k|        else {
 6176|   224k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.10k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.10k|    }                                                  \
  |  |  |  | 3939|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   220k|            std::tie(it, prefix_width) = prefix_result;
 6178|   220k|        }
 6179|   220k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   220k|        std::ptrdiff_t value_width = 0;
 6183|   220k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 220k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   220k|        else {
 6199|   220k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.3k, False: 200k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.3k|    }                                                  \
  |  | 3939|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   200k|                                             specs, value, loc));
 6201|       |
 6202|   200k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 200k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   200k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   200k|        std::ptrdiff_t postfix_width = 0;
 6211|   200k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 197k, False: 3.61k]
  ------------------
 6212|   197k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   197k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   197k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   197k|                                 value_width));
 6216|   197k|            std::tie(it, postfix_width) = postfix_result;
 6217|   197k|        }
 6218|       |
 6219|   200k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   200k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   200k|            specs, prefix_width, value_width, postfix_width));
 6221|   200k|        return it;
 6222|   200k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   165k|{
 5835|   165k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 627, False: 164k]
  |  |  ------------------
  ------------------
 5836|    627|        return unexpected(e);
 5837|    627|    }
 5838|       |
 5839|   164k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 164k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   164k|    return skip_classic_whitespace(range);
 5844|   164k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  47.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  47.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  47.6k|            auto rd = make_reader<T, char_type>();
 5916|  47.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  47.6k|    {
 5903|  47.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.2k|                        .transform_error(make_eof_scan_error));
 5905|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  47.2k|    {
 4185|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.2k|        float_reader<CharT> rd{};
 4188|  47.2k|        return read_impl<Range>(
 4189|  47.2k|            range, rd,
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.2k|            },
 4193|  47.2k|            value);
 4194|  47.2k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|   328k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  57.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  57.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  57.9k|            auto rd = make_reader<T, char_type>();
 5916|  57.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  57.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  57.9k|    {
 5903|  57.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 396, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    396|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    396|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    396|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    396|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    396|    }                                                  \
  |  |  |  | 3939|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.5k|                        .transform_error(make_eof_scan_error));
 5905|  57.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  57.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  57.5k|    {
 4185|  57.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  57.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.5k|        float_reader<CharT> rd{};
 4188|  57.5k|        return read_impl<Range>(
 4189|  57.5k|            range, rd,
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.5k|            },
 4193|  57.5k|            value);
 4194|  57.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  57.5k|        : m_fptr([](storage fn,
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|  57.5k|              if constexpr (std::is_void_v<R>) {
  746|  57.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.5k|              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
  752|  57.5k|          m_storage(std::addressof(f))
  753|  57.5k|    {
  754|  57.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.5k|        else if constexpr (std::is_object_v<T>) {
  688|  57.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.5k|        {
  662|  57.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  59.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  59.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  59.7k|            auto rd = make_reader<T, char_type>();
 5916|  59.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  59.7k|    {
 5903|  59.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 441, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    441|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    441|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    441|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    441|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    441|    }                                                  \
  |  |  |  | 3939|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.3k|                        .transform_error(make_eof_scan_error));
 5905|  59.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  59.3k|    {
 4185|  59.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.3k|        float_reader<CharT> rd{};
 4188|  59.3k|        return read_impl<Range>(
 4189|  59.3k|            range, rd,
 4190|  59.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.3k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.3k|            },
 4193|  59.3k|            value);
 4194|  59.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  59.3k|        : m_fptr([](storage fn,
  743|  59.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.3k|              cvref<T> obj = *get<T>(fn);
  745|  59.3k|              if constexpr (std::is_void_v<R>) {
  746|  59.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.3k|              }
  748|  59.3k|              else {
  749|  59.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.3k|              }
  751|  59.3k|          }),
  752|  59.3k|          m_storage(std::addressof(f))
  753|  59.3k|    {
  754|  59.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  59.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.3k|              else {
  749|  59.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.3k|              }
  751|  59.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.3k|        else if constexpr (std::is_object_v<T>) {
  688|  59.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  59.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.3k|        {
  662|  59.3k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   448k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   448k|    static_cast<    \
  |  |  935|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   448k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   448k|          m_current(m_range.begin())
 2988|   448k|    {
 2989|   448k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   755k|    {
 2998|   755k|        return m_range.end();
 2999|   755k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   307k|    {
 3013|   307k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   307k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   307k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 307k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   307k|        }
 3019|   307k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   307k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   448k|    {
 3003|   448k|        return ranges::subrange{begin(), end()};
 3004|   448k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   448k|    {
 6075|   448k|        const bool need_skipped_width =
 6076|   448k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 448k]
  |  Branch (6076:33): [True: 0, False: 448k]
  ------------------
 6077|   448k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   448k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 448k]
  ------------------
 6081|   448k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 448k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   448k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 448k, False: 0]
  |  Branch (6085:56): [True: 448k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   448k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 448k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   892k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   448k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   448k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   448k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.38k, False: 444k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.38k|    }                                                  \
  |  |  |  | 3939|   448k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   892k|                            make_eof_scan_error));
 6096|       |
 6097|   892k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 444k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   444k|            return result_type{it, 0};
 6105|   892k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   448k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   306k|    {
 6117|   306k|        const bool need_skipped_width =
 6118|   306k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 306k]
  |  Branch (6118:33): [True: 0, False: 306k]
  ------------------
 6119|   306k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   306k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 306k]
  ------------------
 6122|   306k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 306k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   306k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 306k, False: 0]
  ------------------
 6131|   306k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 306k]
  ------------------
 6132|   306k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   306k|        return result_type{rng.begin(), 0};
 6156|   306k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   139k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   139k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   139k|            auto rd = make_reader<T, char_type>();
 6232|   139k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   139k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 139k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   139k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   139k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   139k|    {
 6162|   139k|        const bool need_skipped_width =
 6163|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 139k]
  |  Branch (6163:33): [True: 0, False: 139k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   139k|        auto it = rng.begin();
 6167|   139k|        std::ptrdiff_t prefix_width = 0;
 6168|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 139k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   139k|        else {
 6176|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.04k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.04k|    }                                                  \
  |  |  |  | 3939|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   138k|            std::tie(it, prefix_width) = prefix_result;
 6178|   138k|        }
 6179|   138k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   138k|        std::ptrdiff_t value_width = 0;
 6183|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 138k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   138k|        else {
 6199|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.7k, False: 92.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.7k|    }                                                  \
  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  92.5k|                                             specs, value, loc));
 6201|       |
 6202|  92.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 92.5k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  92.5k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  92.5k|        std::ptrdiff_t postfix_width = 0;
 6211|  92.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 92.0k, False: 508]
  ------------------
 6212|  92.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  92.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  92.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  92.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  92.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  92.0k|                                 value_width));
 6216|  92.0k|            std::tie(it, postfix_width) = postfix_result;
 6217|  92.0k|        }
 6218|       |
 6219|  92.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  92.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  92.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  92.5k|            specs, prefix_width, value_width, postfix_width));
 6221|  92.5k|        return it;
 6222|  92.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   153k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   153k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   153k|            auto rd = make_reader<T, char_type>();
 6232|   153k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   153k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   153k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   153k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   153k|    {
 6162|   153k|        const bool need_skipped_width =
 6163|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 153k]
  |  Branch (6163:33): [True: 0, False: 153k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   153k|        auto it = rng.begin();
 6167|   153k|        std::ptrdiff_t prefix_width = 0;
 6168|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 153k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   153k|        else {
 6176|   153k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.13k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.13k|    }                                                  \
  |  |  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   152k|            std::tie(it, prefix_width) = prefix_result;
 6178|   152k|        }
 6179|   152k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   152k|        std::ptrdiff_t value_width = 0;
 6183|   152k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 152k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   152k|        else {
 6199|   152k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   106k|                                             specs, value, loc));
 6201|       |
 6202|   106k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 106k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   106k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   106k|        std::ptrdiff_t postfix_width = 0;
 6211|   106k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 105k, False: 564]
  ------------------
 6212|   105k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   105k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   105k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   105k|                                 value_width));
 6216|   105k|            std::tie(it, postfix_width) = postfix_result;
 6217|   105k|        }
 6218|       |
 6219|   106k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   106k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   106k|            specs, prefix_width, value_width, postfix_width));
 6221|   106k|        return it;
 6222|   106k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   155k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   155k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   155k|            auto rd = make_reader<T, char_type>();
 6232|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   155k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   155k|    {
 6162|   155k|        const bool need_skipped_width =
 6163|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 155k]
  |  Branch (6163:33): [True: 0, False: 155k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   155k|        auto it = rng.begin();
 6167|   155k|        std::ptrdiff_t prefix_width = 0;
 6168|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 155k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   155k|        else {
 6176|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.20k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.20k|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   154k|            std::tie(it, prefix_width) = prefix_result;
 6178|   154k|        }
 6179|   154k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   154k|        std::ptrdiff_t value_width = 0;
 6183|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 154k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   154k|        else {
 6199|   154k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.6k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.6k|    }                                                  \
  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   108k|                                             specs, value, loc));
 6201|       |
 6202|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 108k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   108k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   108k|        std::ptrdiff_t postfix_width = 0;
 6211|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 108k, False: 612]
  ------------------
 6212|   108k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   108k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   108k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   108k|                                 value_width));
 6216|   108k|            std::tie(it, postfix_width) = postfix_result;
 6217|   108k|        }
 6218|       |
 6219|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   108k|            specs, prefix_width, value_width, postfix_width));
 6221|   108k|        return it;
 6222|   108k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   165k|{
 5835|   165k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 627, False: 164k]
  |  |  ------------------
  ------------------
 5836|    627|        return unexpected(e);
 5837|    627|    }
 5838|       |
 5839|   164k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 164k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   164k|    return skip_classic_whitespace(range);
 5844|   164k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  47.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  47.5k|            auto rd = make_reader<T, char_type>();
 5920|  47.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 47.5k, False: 0]
  ------------------
 5921|  47.5k|                return impl(rd, range, value);
 5922|  47.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  47.5k|    {
 5903|  47.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.2k|                        .transform_error(make_eof_scan_error));
 5905|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  47.2k|    {
 4185|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.2k|        float_reader<CharT> rd{};
 4188|  47.2k|        return read_impl<Range>(
 4189|  47.2k|            range, rd,
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.2k|            },
 4193|  47.2k|            value);
 4194|  47.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  57.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  57.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  57.9k|            auto rd = make_reader<T, char_type>();
 5920|  57.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 57.9k, False: 0]
  ------------------
 5921|  57.9k|                return impl(rd, range, value);
 5922|  57.9k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  57.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  57.9k|    {
 5903|  57.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 396, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    396|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    396|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    396|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    396|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    396|    }                                                  \
  |  |  |  | 3939|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.5k|                        .transform_error(make_eof_scan_error));
 5905|  57.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  57.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  57.5k|    {
 4185|  57.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  57.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.5k|        float_reader<CharT> rd{};
 4188|  57.5k|        return read_impl<Range>(
 4189|  57.5k|            range, rd,
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.5k|            },
 4193|  57.5k|            value);
 4194|  57.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  57.5k|        : m_fptr([](storage fn,
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|  57.5k|              if constexpr (std::is_void_v<R>) {
  746|  57.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.5k|              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
  752|  57.5k|          m_storage(std::addressof(f))
  753|  57.5k|    {
  754|  57.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.5k|        else if constexpr (std::is_object_v<T>) {
  688|  57.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.5k|        {
  662|  57.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  59.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  59.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  59.6k|            auto rd = make_reader<T, char_type>();
 5920|  59.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 59.6k, False: 0]
  ------------------
 5921|  59.6k|                return impl(rd, range, value);
 5922|  59.6k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  59.6k|    {
 5903|  59.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 441, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    441|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    441|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    441|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    441|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    441|    }                                                  \
  |  |  |  | 3939|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.2k|                        .transform_error(make_eof_scan_error));
 5905|  59.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  59.2k|    {
 4185|  59.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.2k|        float_reader<CharT> rd{};
 4188|  59.2k|        return read_impl<Range>(
 4189|  59.2k|            range, rd,
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.2k|            },
 4193|  59.2k|            value);
 4194|  59.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  59.2k|        : m_fptr([](storage fn,
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|  59.2k|              if constexpr (std::is_void_v<R>) {
  746|  59.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.2k|              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
  752|  59.2k|          m_storage(std::addressof(f))
  753|  59.2k|    {
  754|  59.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.2k|        else if constexpr (std::is_object_v<T>) {
  688|  59.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  59.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.2k|        {
  662|  59.2k|        }

LLVMFuzzerTestOneInput:
   54|  2.34k|{
   55|  2.34k|    scn::fuzz::run(data, size);
   56|  2.34k|    return 0;
   57|  2.34k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.34k|{
   33|  2.34k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.34k]
  |  Branch (33:35): [True: 0, False: 2.34k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.34k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.34k|    const auto& f =
   40|  2.34k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.34k|    do_basic_run(sv, f);
   42|       |
   43|  2.34k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.34k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.34k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.34k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.34k, False: 0]
  ------------------
   47|  2.34k|        do_basic_run(wsv_transcode, wf);
   48|  2.34k|    }
   49|  2.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.34k|{
   25|  2.34k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.34k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.34k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.34k|{
   25|  2.34k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.34k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.34k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.68k|{
   25|  4.68k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.68k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.68k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.68k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.68k|{
   25|  4.68k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.68k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.68k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.68k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.34k|{
   53|  2.34k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.34k|    string_buffer.resize(size);
   57|  2.34k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.34k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.34k|    const auto wsv_reinterpret_size =
   62|  2.34k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.27k]
  ------------------
   63|  2.34k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.34k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.34k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.34k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.34k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.34k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.34k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.34k|{
  123|  2.34k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.34k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.34k|    buf.resize(sizeof...(Args));
  126|  2.34k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.34k|    return buf;
  128|  2.34k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.34k|{
  109|  2.34k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.34k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.34k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.34k|{
  186|  2.34k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.34k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.34k|                                   format_strings);
  189|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   136k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   136k|            auto result = scn::scan<T>(
  140|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   136k|                scn::runtime_format(f));
  142|   136k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 122k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   122k|            it = result->begin();
  146|   122k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   136k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   136k|            auto result = scn::scan<T>(
  155|   136k|                global_locale,
  156|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   136k|                scn::runtime_format(f));
  158|   136k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 122k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   122k|            it = result->begin();
  162|   122k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  29.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  29.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  29.5k|            auto result = scn::scan_value<T>(
  171|  29.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  29.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 27.2k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  27.2k|            it = result->begin();
  176|  27.2k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   141k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   141k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   141k|            auto result = scn::scan<T>(
  140|   141k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   141k|                scn::runtime_format(f));
  142|   141k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 127k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   127k|            it = result->begin();
  146|   127k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   141k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   141k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   141k|            auto result = scn::scan<T>(
  155|   141k|                global_locale,
  156|   141k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   141k|                scn::runtime_format(f));
  158|   141k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 127k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   127k|            it = result->begin();
  162|   127k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  30.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  30.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  30.9k|            auto result = scn::scan_value<T>(
  171|  30.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  30.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 28.6k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  28.6k|            it = result->begin();
  176|  28.6k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   143k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   143k|            auto result = scn::scan<T>(
  140|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   143k|                scn::runtime_format(f));
  142|   143k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 129k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   129k|            it = result->begin();
  146|   129k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   143k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   143k|            auto result = scn::scan<T>(
  155|   143k|                global_locale,
  156|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   143k|                scn::runtime_format(f));
  158|   143k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 129k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   129k|            it = result->begin();
  162|   129k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.5k|            auto result = scn::scan_value<T>(
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 29.1k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  29.1k|            it = result->begin();
  176|  29.1k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   156k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   156k|            auto result = scn::scan<T>(
  140|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   156k|                scn::runtime_format(f));
  142|   156k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 142k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   142k|            it = result->begin();
  146|   142k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   156k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   156k|            auto result = scn::scan<T>(
  155|   156k|                global_locale,
  156|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   156k|                scn::runtime_format(f));
  158|   156k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 142k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   142k|            it = result->begin();
  162|   142k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  32.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.1k|            auto result = scn::scan_value<T>(
  171|  32.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 29.8k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  29.8k|            it = result->begin();
  176|  29.8k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   165k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   165k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   165k|            auto result = scn::scan<T>(
  140|   165k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   165k|                scn::runtime_format(f));
  142|   165k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 151k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   151k|            it = result->begin();
  146|   151k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   165k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   165k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   165k|            auto result = scn::scan<T>(
  155|   165k|                global_locale,
  156|   165k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   165k|                scn::runtime_format(f));
  158|   165k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 151k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   151k|            it = result->begin();
  162|   151k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  34.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.1k|            auto result = scn::scan_value<T>(
  171|  34.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 31.8k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  31.8k|            it = result->begin();
  176|  31.8k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.34k|{
  134|       |    // Regular scan
  135|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.0k, False: 2.34k]
  ------------------
  136|  14.0k|        auto it = scn::ranges::begin(source);
  137|   166k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   166k|            auto result = scn::scan<T>(
  140|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   166k|                scn::runtime_format(f));
  142|   166k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.0k, False: 152k]
  ------------------
  143|  14.0k|                break;
  144|  14.0k|            }
  145|   152k|            it = result->begin();
  146|   152k|        }
  147|  14.0k|    }
  148|       |
  149|       |    // scan localized
  150|  14.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.0k, False: 2.34k]
  ------------------
  151|  14.0k|        auto it = scn::ranges::begin(source);
  152|   166k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   166k|            auto result = scn::scan<T>(
  155|   166k|                global_locale,
  156|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   166k|                scn::runtime_format(f));
  158|   166k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.0k, False: 152k]
  ------------------
  159|  14.0k|                break;
  160|  14.0k|            }
  161|   152k|            it = result->begin();
  162|   152k|        }
  163|  14.0k|    }
  164|       |
  165|       |    // scan_value
  166|  2.34k|    {
  167|  2.34k|        auto it = scn::ranges::begin(source);
  168|  34.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.4k|            auto result = scn::scan_value<T>(
  171|  34.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.34k, False: 32.1k]
  ------------------
  173|  2.34k|                break;
  174|  2.34k|            }
  175|  32.1k|            it = result->begin();
  176|  32.1k|        }
  177|  2.34k|    }
  178|  2.34k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.34k|{
   91|  2.34k|    using char_type = ranges::range_value_t<Source>;
   92|  2.34k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.34k|    deque.clear();
   94|  2.34k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.34k|              std::back_inserter(deque));
   96|  2.34k|    return deque;
   97|  2.34k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.34k|{
   80|  2.34k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.34k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.34k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.34k|{
  123|  2.34k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.34k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.34k|    buf.resize(sizeof...(Args));
  126|  2.34k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.34k|    return buf;
  128|  2.34k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.34k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.34k|    else {
  113|  2.34k|        return wformat_string_view_buffer;
  114|  2.34k|    }
  115|  2.34k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.68k|{
  186|  4.68k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.68k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.68k|                                   format_strings);
  189|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  85.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.5k|            auto result = scn::scan<T>(
  140|  85.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.5k|                scn::runtime_format(f));
  142|  85.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 57.4k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  57.4k|            it = result->begin();
  146|  57.4k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  85.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.5k|            auto result = scn::scan<T>(
  155|  85.5k|                global_locale,
  156|  85.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.5k|                scn::runtime_format(f));
  158|  85.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 57.4k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  57.4k|            it = result->begin();
  162|  57.4k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 11.1k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  11.1k|            it = result->begin();
  176|  11.1k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  95.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  95.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  95.9k|            auto result = scn::scan<T>(
  140|  95.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  95.9k|                scn::runtime_format(f));
  142|  95.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 67.8k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  67.8k|            it = result->begin();
  146|  67.8k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  95.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  95.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  95.9k|            auto result = scn::scan<T>(
  155|  95.9k|                global_locale,
  156|  95.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.9k|                scn::runtime_format(f));
  158|  95.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 67.8k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  67.8k|            it = result->begin();
  162|  67.8k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.3k|            auto result = scn::scan_value<T>(
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 14.6k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  97.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.7k|            auto result = scn::scan<T>(
  140|  97.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.7k|                scn::runtime_format(f));
  142|  97.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 69.6k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  69.6k|            it = result->begin();
  146|  69.6k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  97.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.7k|            auto result = scn::scan<T>(
  155|  97.7k|                global_locale,
  156|  97.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.7k|                scn::runtime_format(f));
  158|  97.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 69.6k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  69.6k|            it = result->begin();
  162|  69.6k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  19.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.9k|            auto result = scn::scan_value<T>(
  171|  19.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 15.2k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  15.2k|            it = result->begin();
  176|  15.2k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  85.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.4k|            auto result = scn::scan<T>(
  140|  85.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.4k|                scn::runtime_format(f));
  142|  85.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 57.4k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  57.4k|            it = result->begin();
  146|  57.4k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  85.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.4k|            auto result = scn::scan<T>(
  155|  85.4k|                global_locale,
  156|  85.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.4k|                scn::runtime_format(f));
  158|  85.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 57.4k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  57.4k|            it = result->begin();
  162|  57.4k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 11.1k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  11.1k|            it = result->begin();
  176|  11.1k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  95.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  95.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  95.8k|            auto result = scn::scan<T>(
  140|  95.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  95.8k|                scn::runtime_format(f));
  142|  95.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 67.7k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  67.7k|            it = result->begin();
  146|  67.7k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  95.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  95.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  95.8k|            auto result = scn::scan<T>(
  155|  95.8k|                global_locale,
  156|  95.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.8k|                scn::runtime_format(f));
  158|  95.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 67.7k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  67.7k|            it = result->begin();
  162|  67.7k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.3k|            auto result = scn::scan_value<T>(
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 14.6k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.68k|{
  134|       |    // Regular scan
  135|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.0k, False: 4.68k]
  ------------------
  136|  28.0k|        auto it = scn::ranges::begin(source);
  137|  97.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.6k|            auto result = scn::scan<T>(
  140|  97.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.6k|                scn::runtime_format(f));
  142|  97.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.0k, False: 69.5k]
  ------------------
  143|  28.0k|                break;
  144|  28.0k|            }
  145|  69.5k|            it = result->begin();
  146|  69.5k|        }
  147|  28.0k|    }
  148|       |
  149|       |    // scan localized
  150|  28.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.0k, False: 4.68k]
  ------------------
  151|  28.0k|        auto it = scn::ranges::begin(source);
  152|  97.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.6k|            auto result = scn::scan<T>(
  155|  97.6k|                global_locale,
  156|  97.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.6k|                scn::runtime_format(f));
  158|  97.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.0k, False: 69.5k]
  ------------------
  159|  28.0k|                break;
  160|  28.0k|            }
  161|  69.5k|            it = result->begin();
  162|  69.5k|        }
  163|  28.0k|    }
  164|       |
  165|       |    // scan_value
  166|  4.68k|    {
  167|  4.68k|        auto it = scn::ranges::begin(source);
  168|  19.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.8k|            auto result = scn::scan_value<T>(
  171|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.68k, False: 15.2k]
  ------------------
  173|  4.68k|                break;
  174|  4.68k|            }
  175|  15.2k|            it = result->begin();
  176|  15.2k|        }
  177|  4.68k|    }
  178|  4.68k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.68k|{
   91|  4.68k|    using char_type = ranges::range_value_t<Source>;
   92|  4.68k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.68k|    deque.clear();
   94|  4.68k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.68k|              std::back_inserter(deque));
   96|  4.68k|    return deque;
   97|  4.68k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.68k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.68k|    else {
   84|  4.68k|        return wnoncontiguous_buffer;
   85|  4.68k|    }
   86|  4.68k|}

