_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   926k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   926k|  chars_format const fmt = options.format;
  277|   926k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   926k|  parsed_number_string_t<UC> answer;
  280|   926k|  answer.valid = false;
  281|   926k|  answer.too_many_digits = false;
  282|   926k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   926k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 926k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   926k|  UC const * const start_digits = p;
  303|       |
  304|   926k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  4.89M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.43M, False: 462k]
  |  Branch (306:25): [True: 3.96M, False: 464k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  3.96M|    i = 10 * i +
  310|  3.96M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  3.96M|    ++p;
  312|  3.96M|  }
  313|   926k|  UC const * const end_of_integer_part = p;
  314|   926k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   926k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   926k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   926k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 926k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   926k|  int64_t exponent = 0;
  324|   926k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 464k, False: 462k]
  |  Branch (324:49): [True: 170k, False: 293k]
  ------------------
  325|   926k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 170k, False: 755k]
  ------------------
  326|   170k|    ++p;
  327|   170k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   170k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   713k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 607k, False: 105k]
  |  Branch (332:27): [True: 542k, False: 65.1k]
  ------------------
  333|   542k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   542k|      ++p;
  335|   542k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   542k|    }
  337|   170k|    exponent = before - p;
  338|   170k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   170k|    digit_count -= exponent;
  340|   170k|  }
  341|   926k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   926k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 926k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   926k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 926k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   926k|  int64_t exp_number = 0;            // explicit exponential part
  351|   926k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 800k, False: 126k]
  ------------------
  352|   926k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 358k, False: 441k]
  ------------------
  353|   926k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 79.3k, False: 279k]
  |  Branch (353:29): [True: 47.8k, False: 231k]
  ------------------
  354|   926k|       ||
  355|   926k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   799k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 799k]
  ------------------
  356|   799k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   799k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   127k|    UC const * location_of_e = p;
  359|   127k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 79.3k, False: 47.8k]
  |  Branch (359:28): [True: 47.8k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   127k|      ++p;
  361|   127k|    }
  362|   127k|    bool neg_exp = false;
  363|   127k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 127k, False: 115]
  |  Branch (363:24): [True: 6.95k, False: 120k]
  ------------------
  364|  6.95k|      neg_exp = true;
  365|  6.95k|      ++p;
  366|   120k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 120k, False: 115]
  |  Branch (366:31): [True: 31.8k, False: 88.2k]
  ------------------
  367|  31.8k|      ++p;
  368|  31.8k|    }
  369|   127k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 165, False: 127k]
  |  Branch (369:24): [True: 495, False: 126k]
  ------------------
  370|    660|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 660]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    660|      p = location_of_e;
  376|   126k|    } else {
  377|   394k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 300k, False: 93.8k]
  |  Branch (377:29): [True: 267k, False: 32.7k]
  ------------------
  378|   267k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   267k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 247k, False: 20.9k]
  ------------------
  380|   247k|          exp_number = 10 * exp_number + digit;
  381|   247k|        }
  382|   267k|        ++p;
  383|   267k|      }
  384|   126k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.91k, False: 119k]
  ------------------
  385|   126k|      exponent += exp_number;
  386|   126k|    }
  387|   799k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   799k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 673k, False: 126k]
  |  Branch (389:44): [True: 0, False: 673k]
  ------------------
  390|   799k|  }
  391|   926k|  answer.lastmatch = p;
  392|   926k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   926k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 156k, False: 770k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   156k|    UC const * start = start_digits;
  405|   645k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 643k, False: 1.29k]
  |  Branch (405:32): [True: 481k, False: 162k]
  |  Branch (405:53): [True: 7.54k, False: 154k]
  ------------------
  406|   488k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 481k, False: 7.54k]
  ------------------
  407|   488k|      start++;
  408|   488k|    }
  409|       |
  410|   156k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 151k, False: 4.94k]
  ------------------
  411|   151k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   151k|      i = 0;
  416|   151k|      p = answer.integer.ptr;
  417|   151k|      UC const* int_end = p + answer.integer.len();
  418|   151k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.52M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.48M, False: 39.7k]
  |  Branch (419:54): [True: 1.37M, False: 111k]
  ------------------
  420|  1.37M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.37M|        ++p;
  422|  1.37M|      }
  423|   151k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 39.7k, False: 111k]
  ------------------
  424|  39.7k|        exponent = end_of_integer_part - p + exp_number;
  425|  39.7k|      }
  426|   111k|      else { // We have a value with a fractional component.
  427|   111k|        p = answer.fraction.ptr;
  428|   111k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.97M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.86M, False: 111k]
  |  Branch (429:56): [True: 1.86M, False: 0]
  ------------------
  430|  1.86M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.86M|          ++p;
  432|  1.86M|        }
  433|   111k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   111k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   151k|    }
  437|   156k|  }
  438|   926k|  answer.exponent = exponent;
  439|   926k|  answer.mantissa = i;
  440|   926k|  return answer;
  441|   926k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.46M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.46M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 145k, False: 5.32M]
  |  Branch (36:27): [True: 417k, False: 4.90M]
  ------------------
   37|  5.46M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   170k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   629k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 510k, False: 118k]
  |  Branch (249:43): [True: 458k, False: 52.1k]
  ------------------
  250|   458k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   458k|    p += 8;
  252|   458k|  }
  253|   170k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   510k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   510k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   510k|     0x8080808080808080));
  172|   510k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.16M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.16M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.16M|  uint64_t val;
   63|  1.16M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.16M|  return val;
   69|  1.16M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   654k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   654k|  const uint64_t mask = 0x000000FF000000FF;
  148|   654k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   654k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   654k|  val -= 0x3030303030303030;
  151|   654k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   654k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   654k|  return uint32_t(val);
  154|   654k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   196k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   196k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   196k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   196k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   196k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   398k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   398k|  chars_format const fmt = options.format;
  277|   398k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   398k|  parsed_number_string_t<UC> answer;
  280|   398k|  answer.valid = false;
  281|   398k|  answer.too_many_digits = false;
  282|   398k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   398k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 398k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   398k|  UC const * const start_digits = p;
  303|       |
  304|   398k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   858k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 587k, False: 271k]
  |  Branch (306:25): [True: 459k, False: 127k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   459k|    i = 10 * i +
  310|   459k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   459k|    ++p;
  312|   459k|  }
  313|   398k|  UC const * const end_of_integer_part = p;
  314|   398k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   398k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   398k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   398k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 398k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   398k|  int64_t exponent = 0;
  324|   398k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 127k, False: 271k]
  |  Branch (324:49): [True: 2.26k, False: 124k]
  ------------------
  325|   398k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.26k, False: 396k]
  ------------------
  326|  2.26k|    ++p;
  327|  2.26k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.26k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  14.0k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 12.5k, False: 1.43k]
  |  Branch (332:27): [True: 11.7k, False: 832]
  ------------------
  333|  11.7k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  11.7k|      ++p;
  335|  11.7k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  11.7k|    }
  337|  2.26k|    exponent = before - p;
  338|  2.26k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.26k|    digit_count -= exponent;
  340|  2.26k|  }
  341|   398k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   398k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 398k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   398k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 398k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   398k|  int64_t exp_number = 0;            // explicit exponential part
  351|   398k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 325k, False: 73.6k]
  ------------------
  352|   398k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 125k, False: 199k]
  ------------------
  353|   398k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 251, False: 125k]
  |  Branch (353:29): [True: 12.9k, False: 112k]
  ------------------
  354|   398k|       ||
  355|   398k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   385k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 385k]
  ------------------
  356|   385k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   385k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  13.1k|    UC const * location_of_e = p;
  359|  13.1k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 251, False: 12.9k]
  |  Branch (359:28): [True: 12.9k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  13.1k|      ++p;
  361|  13.1k|    }
  362|  13.1k|    bool neg_exp = false;
  363|  13.1k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 13.1k, False: 20]
  |  Branch (363:24): [True: 3.07k, False: 10.0k]
  ------------------
  364|  3.07k|      neg_exp = true;
  365|  3.07k|      ++p;
  366|  10.1k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 10.0k, False: 20]
  |  Branch (366:31): [True: 265, False: 9.81k]
  ------------------
  367|    265|      ++p;
  368|    265|    }
  369|  13.1k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 13.1k]
  |  Branch (369:24): [True: 370, False: 12.7k]
  ------------------
  370|    410|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 410]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    410|      p = location_of_e;
  376|  12.7k|    } else {
  377|  47.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 38.4k, False: 8.82k]
  |  Branch (377:29): [True: 34.5k, False: 3.94k]
  ------------------
  378|  34.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  34.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 32.5k, False: 1.93k]
  ------------------
  380|  32.5k|          exp_number = 10 * exp_number + digit;
  381|  32.5k|        }
  382|  34.5k|        ++p;
  383|  34.5k|      }
  384|  12.7k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 3.04k, False: 9.72k]
  ------------------
  385|  12.7k|      exponent += exp_number;
  386|  12.7k|    }
  387|   385k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   385k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 311k, False: 73.6k]
  |  Branch (389:44): [True: 0, False: 311k]
  ------------------
  390|   385k|  }
  391|   398k|  answer.lastmatch = p;
  392|   398k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   398k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 1.25k, False: 397k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  1.25k|    UC const * start = start_digits;
  405|  1.52k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.52k, False: 0]
  |  Branch (405:32): [True: 276, False: 1.25k]
  |  Branch (405:53): [True: 0, False: 1.25k]
  ------------------
  406|    276|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 276, False: 0]
  ------------------
  407|    276|      start++;
  408|    276|    }
  409|       |
  410|  1.25k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 1.11k, False: 136]
  ------------------
  411|  1.11k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  1.11k|      i = 0;
  416|  1.11k|      p = answer.integer.ptr;
  417|  1.11k|      UC const* int_end = p + answer.integer.len();
  418|  1.11k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  17.4k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 16.8k, False: 556]
  |  Branch (419:54): [True: 16.3k, False: 560]
  ------------------
  420|  16.3k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  16.3k|        ++p;
  422|  16.3k|      }
  423|  1.11k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 556, False: 560]
  ------------------
  424|    556|        exponent = end_of_integer_part - p + exp_number;
  425|    556|      }
  426|    560|      else { // We have a value with a fractional component.
  427|    560|        p = answer.fraction.ptr;
  428|    560|        UC const* frac_end = p + answer.fraction.len();
  429|  5.53k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 4.97k, False: 560]
  |  Branch (429:56): [True: 4.97k, False: 0]
  ------------------
  430|  4.97k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  4.97k|          ++p;
  432|  4.97k|        }
  433|    560|        exponent = answer.fraction.ptr - p + exp_number;
  434|    560|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  1.11k|    }
  437|  1.25k|  }
  438|   398k|  answer.exponent = exponent;
  439|   398k|  answer.mantissa = i;
  440|   398k|  return answer;
  441|   398k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   651k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   651k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 129k, False: 522k]
  |  Branch (36:27): [True: 3.18k, False: 518k]
  ------------------
   37|   651k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.26k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.26k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.26k|    return;
  240|  2.26k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  51.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   113k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   175k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   175k|    return small_mul(vec, y);
  565|   175k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   260k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   260k|  limb carry = 0;
  284|  1.04M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 784k, False: 260k]
  ------------------
  285|   784k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   784k|  }
  287|   260k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 150k, False: 109k]
  ------------------
  288|   150k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   150k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
  289|   150k|  }
  290|   260k|  return true;
  291|   260k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.00M|  constexpr size_t len() const noexcept {
   77|  2.00M|    return length;
   78|  2.00M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   784k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   784k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   784k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   784k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   784k|  carry = limb(z >> limb_bits);
  235|   784k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   784k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.16M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.16M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.16M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.16M|    return data[index];
   60|  2.16M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   212k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   212k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 212k, False: 0]
  ------------------
   93|   212k|      push_unchecked(value);
   94|   212k|      return true;
   95|   212k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   212k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   247k|  constexpr size_t capacity() const noexcept {
   83|   247k|    return size;
   84|   247k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   261k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   261k|    data[length] = value;
   88|   261k|    length++;
   89|   261k|  }
_ZN10fast_float6bigint3addEm:
  567|   175k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   175k|    return small_add(vec, y);
  569|   175k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   175k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   175k|  return small_add_from(vec, y, 0);
  277|   175k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   175k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   175k|  size_t index = start;
  259|   175k|  limb carry = y;
  260|   175k|  bool overflow;
  261|   267k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 143k, False: 124k]
  |  Branch (261:24): [True: 91.1k, False: 51.9k]
  ------------------
  262|  91.1k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  91.1k|    carry = limb(overflow);
  264|  91.1k|    index += 1;
  265|  91.1k|  }
  266|   175k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 51.9k, False: 124k]
  ------------------
  267|  51.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  51.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 51.9k]
  |  |  ------------------
  ------------------
  268|  51.9k|  }
  269|   175k|  return true;
  270|   175k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   221k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   221k|  limb z;
  211|       |// gcc and clang
  212|   221k|#if defined(__has_builtin)
  213|   221k|  #if __has_builtin(__builtin_add_overflow)
  214|   221k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   221k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   221k|      return z;
  217|   221k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   221k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  3.46k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  3.46k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.46k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
  611|  3.46k|    return pow2(exp);
  612|  3.46k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  51.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  51.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  51.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  55.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.14k, False: 51.9k]
  ------------------
  582|  3.14k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.14k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.14k]
  |  |  ------------------
  ------------------
  583|  3.14k|      exp -= large_step;
  584|  3.14k|    }
  585|  51.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  51.9k|    uint32_t small_step = 27;
  587|  51.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  74.7k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.7k, False: 51.9k]
  ------------------
  593|  22.7k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.7k]
  |  |  ------------------
  ------------------
  594|  22.7k|      exp -= small_step;
  595|  22.7k|    }
  596|  51.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 45.6k, False: 6.34k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  45.6k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  45.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 45.6k]
  |  |  ------------------
  ------------------
  601|  45.6k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  45.6k|      );
  603|  45.6k|    }
  604|       |
  605|  51.9k|    return true;
  606|  51.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.14k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.14k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.14k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.14k|  } else {
  368|  3.14k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.14k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.14k]
  |  |  ------------------
  ------------------
  369|  3.14k|  }
  370|  3.14k|  return true;
  371|  3.14k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.14k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.14k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.14k|  stackvec<size> z(xs);
  338|  3.14k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.14k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.14k, False: 0]
  ------------------
  341|  3.14k|    limb y0 = y[0];
  342|  3.14k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.14k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.14k]
  |  |  ------------------
  ------------------
  343|  15.7k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.5k, False: 3.14k]
  ------------------
  344|  12.5k|      limb yi = y[index];
  345|  12.5k|      stackvec<size> zi;
  346|  12.5k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.5k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.5k|        zi.set_len(0);
  349|  12.5k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
  350|  12.5k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
  351|  12.5k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.5k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
  353|  12.5k|      }
  354|  12.5k|    }
  355|  3.14k|  }
  356|       |
  357|  3.14k|  x.normalize();
  358|  3.14k|  return true;
  359|  3.14k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.14k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.14k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.14k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.14k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  46.8k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  46.8k|    length = uint16_t(len);
   75|  46.8k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.7k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.7k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.7k, False: 0]
  ------------------
  108|  15.7k|      extend_unchecked(s);
  109|  15.7k|      return true;
  110|  15.7k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.7k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.7k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.7k|    limb* ptr = data + length;
  102|  15.7k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.7k|    set_len(len() + s.len());
  104|  15.7k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.5k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.5k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.5k]
  |  Branch (300:26): [True: 12.3k, False: 220]
  ------------------
  301|  12.3k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
  302|  12.3k|  }
  303|       |
  304|  12.5k|  bool carry = false;
  305|   106k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 94.2k, False: 12.5k]
  ------------------
  306|  94.2k|    limb xi = x[index + start];
  307|  94.2k|    limb yi = y[index];
  308|  94.2k|    bool c1 = false;
  309|  94.2k|    bool c2 = false;
  310|  94.2k|    xi = scalar_add(xi, yi, c1);
  311|  94.2k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 35.8k, False: 58.3k]
  ------------------
  312|  35.8k|      xi = scalar_add(xi, 1, c2);
  313|  35.8k|    }
  314|  94.2k|    x[index + start] = xi;
  315|  94.2k|    carry = c1 | c2;
  316|  94.2k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.5k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.5k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.5k|  return true;
  323|  12.5k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.3k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.3k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.3k]
  ------------------
  132|      0|      return false;
  133|  12.3k|    } else {
  134|  12.3k|      resize_unchecked(new_len, value);
  135|  12.3k|      return true;
  136|  12.3k|    }
  137|  12.3k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.3k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.3k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.3k, False: 0]
  ------------------
  120|  12.3k|      size_t count = new_len - len();
  121|  12.3k|      limb* first = data + len();
  122|  12.3k|      limb* last = first + count;
  123|  12.3k|      ::std::fill(first, last, value);
  124|  12.3k|      set_len(new_len);
  125|  12.3k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.3k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  51.6k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  51.6k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 51.6k, False: 0]
  |  Branch (152:25): [True: 0, False: 51.6k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  51.6k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  61.5k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  61.5k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  61.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  61.5k|    size_t rindex = length - index - 1;
   69|  61.5k|    return data[rindex];
   70|  61.5k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  51.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  51.8k|    return shl(exp);
  574|  51.8k|  }
_ZN10fast_float6bigint3shlEm:
  530|  51.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  51.8k|    size_t rem = n % limb_bits;
  532|  51.8k|    size_t div = n / limb_bits;
  533|  51.8k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 48.5k, False: 3.33k]
  ------------------
  534|  48.5k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  48.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 48.5k]
  |  |  ------------------
  ------------------
  535|  48.5k|    }
  536|  51.8k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 6.19k, False: 45.6k]
  ------------------
  537|  6.19k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.19k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.19k]
  |  |  ------------------
  ------------------
  538|  6.19k|    }
  539|  51.8k|    return true;
  540|  51.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  48.5k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  48.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  48.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  48.5k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  48.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  48.5k|    size_t shl = n;
  493|  48.5k|    size_t shr = limb_bits - shl;
  494|  48.5k|    limb prev = 0;
  495|   159k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 111k, False: 48.5k]
  ------------------
  496|   111k|      limb xi = vec[index];
  497|   111k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   111k|      prev = xi;
  499|   111k|    }
  500|       |
  501|  48.5k|    limb carry = prev >> shr;
  502|  48.5k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 10.6k, False: 37.8k]
  ------------------
  503|  10.6k|      return vec.try_push(carry);
  504|  10.6k|    }
  505|  37.8k|    return true;
  506|  48.5k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  6.19k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  6.19k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  6.19k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  6.19k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 6.19k]
  ------------------
  512|      0|      return false;
  513|  6.19k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 6.19k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  6.19k|      limb* dst = vec.data + n;
  516|  6.19k|      const limb* src = vec.data;
  517|  6.19k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  6.19k|      limb* first = vec.data;
  520|  6.19k|      limb* last = first + n;
  521|  6.19k|      ::std::fill(first, last, 0);
  522|  6.19k|      vec.set_len(n + vec.len());
  523|  6.19k|      return true;
  524|  6.19k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  6.19k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  9.65k|  constexpr bool is_empty() const noexcept {
   80|  9.65k|    return length == 0;
   81|  9.65k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  3.46k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  3.46k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  3.46k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 3.46k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  3.46k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 952, False: 2.51k]
  ------------------
  435|    952|      return uint64_hi64(vec.rindex(0), truncated);
  436|  2.51k|    } else {
  437|  2.51k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  2.51k|      truncated |= vec.nonzero(2);
  439|  2.51k|      return result;
  440|  2.51k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  3.46k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    952|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    952|  truncated = false;
  167|    952|  int shl = leading_zeroes(r0);
  168|    952|  return r0 << shl;
  169|    952|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  2.51k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  2.51k|  int shl = leading_zeroes(r0);
  174|  2.51k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 2.47k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  2.47k|  } else {
  178|  2.47k|    int shr = 64 - shl;
  179|  2.47k|    truncated = (r1 << shl) != 0;
  180|  2.47k|    return (r0 << shl) | (r1 >> shr);
  181|  2.47k|  }
  182|  2.51k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  2.51k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  2.54k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 503, False: 2.04k]
  ------------------
  143|    503|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 465, False: 38]
  ------------------
  144|    465|        return true;
  145|    465|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.04k|    return false;
  149|  2.51k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  3.46k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  3.46k|    int lz = ctlz();
  560|  3.46k|    return int(limb_bits * vec.len()) - lz;
  561|  3.46k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  3.46k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  3.46k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 3.46k]
  ------------------
  545|      0|      return 0;
  546|  3.46k|    } else {
  547|  3.46k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  3.46k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  3.46k|    }
  555|  3.46k|  }
_ZN10fast_float6bigintC2Em:
  418|  48.5k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  48.5k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  48.5k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  48.5k|    vec.normalize();
  426|  48.5k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  48.5k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  48.5k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 48.5k]
  ------------------
  464|      0|      return 1;
  465|  48.5k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 48.5k]
  ------------------
  466|      0|      return -1;
  467|  48.5k|    } else {
  468|  95.1k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 91.1k, False: 4.06k]
  ------------------
  469|  91.1k|        limb xi = vec[index - 1];
  470|  91.1k|        limb yi = other.vec[index - 1];
  471|  91.1k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.3k, False: 79.7k]
  ------------------
  472|  11.3k|          return 1;
  473|  79.7k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 33.0k, False: 46.6k]
  ------------------
  474|  33.0k|          return -1;
  475|  33.0k|        }
  476|  91.1k|      }
  477|  4.06k|      return 0;
  478|  48.5k|    }
  479|  48.5k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   182k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   182k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   182k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   182k|    return data[index];
   64|   182k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   205k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   205k|  adjusted_mantissa answer;
   96|   205k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.39k, False: 202k]
  |  Branch (96:19): [True: 1.18k, False: 201k]
  ------------------
   97|  4.58k|    answer.power2 = 0;
   98|  4.58k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.58k|    return answer;
  101|  4.58k|  }
  102|   201k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 7.19k, False: 194k]
  ------------------
  103|       |    // we want to get infinity:
  104|  7.19k|    answer.power2 = binary::infinite_power();
  105|  7.19k|    answer.mantissa = 0;
  106|  7.19k|    return answer;
  107|  7.19k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   194k|  int lz = leading_zeroes(w);
  112|   194k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   194k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   194k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   194k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   194k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   194k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 968, False: 193k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    968|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 880]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    880|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    880|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    880|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    880|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 880, False: 0]
  ------------------
  156|    880|    return answer;
  157|    968|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   193k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 66.2k, False: 126k]
  |  Branch (162:30): [True: 64.3k, False: 1.87k]
  |  Branch (162:77): [True: 59.1k, False: 5.26k]
  ------------------
  163|   193k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.37k, False: 50.7k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.37k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.26k, False: 4.10k]
  ------------------
  168|  4.26k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.26k|    }
  170|  8.37k|  }
  171|       |
  172|   193k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   193k|  answer.mantissa >>= 1;
  174|   193k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.5k, False: 180k]
  ------------------
  175|  12.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.5k|    answer.power2++; // undo previous addition
  177|  12.5k|  }
  178|       |
  179|   193k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   193k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.10k, False: 192k]
  ------------------
  181|  1.10k|    answer.power2 = binary::infinite_power();
  182|  1.10k|    answer.mantissa = 0;
  183|  1.10k|  }
  184|   193k|  return answer;
  185|   194k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   216k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   216k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   216k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   216k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   216k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   216k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   216k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 42.5k, False: 173k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  42.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  42.5k|    firstproduct.low += secondproduct.high;
   35|  42.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 30.6k, False: 11.8k]
  ------------------
   36|  30.6k|      firstproduct.high++;
   37|  30.6k|    }
   38|  42.5k|  }
   39|   216k|  return firstproduct;
   40|   216k|}
_ZN10fast_float6detail5powerEi:
   58|   427k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   427k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   427k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  22.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  22.0k|  int lz = leading_zeroes(w);
   82|  22.0k|  w <<= lz;
   83|  22.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  22.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  22.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  22.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  22.0k|  int hilz = int(w >> 63) ^ 1;
   69|  22.0k|  adjusted_mantissa answer;
   70|  22.0k|  answer.mantissa = w << hilz;
   71|  22.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  22.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  22.0k|  return answer;
   74|  22.0k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   188k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   188k|  adjusted_mantissa answer;
   96|   188k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.15k, False: 185k]
  |  Branch (96:19): [True: 299, False: 184k]
  ------------------
   97|  3.45k|    answer.power2 = 0;
   98|  3.45k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.45k|    return answer;
  101|  3.45k|  }
  102|   184k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.66k, False: 181k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.66k|    answer.power2 = binary::infinite_power();
  105|  3.66k|    answer.mantissa = 0;
  106|  3.66k|    return answer;
  107|  3.66k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   181k|  int lz = leading_zeroes(w);
  112|   181k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   181k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   181k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   181k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   181k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   181k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 3.09k, False: 178k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  3.09k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 102, False: 2.99k]
  ------------------
  137|    102|      answer.power2 = 0;
  138|    102|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    102|      return answer;
  141|    102|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.99k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.99k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.99k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.99k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.99k, False: 0]
  ------------------
  156|  2.99k|    return answer;
  157|  3.09k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   178k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 53.8k, False: 124k]
  |  Branch (162:30): [True: 29.3k, False: 24.5k]
  |  Branch (162:77): [True: 24.9k, False: 4.42k]
  ------------------
  163|   178k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 4.95k, False: 20.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  4.95k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.83k, False: 1.11k]
  ------------------
  168|  3.83k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.83k|    }
  170|  4.95k|  }
  171|       |
  172|   178k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   178k|  answer.mantissa >>= 1;
  174|   178k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.9k, False: 166k]
  ------------------
  175|  11.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.9k|    answer.power2++; // undo previous addition
  177|  11.9k|  }
  178|       |
  179|   178k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   178k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 244, False: 177k]
  ------------------
  181|    244|    answer.power2 = binary::infinite_power();
  182|    244|    answer.mantissa = 0;
  183|    244|  }
  184|   178k|  return answer;
  185|   181k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   211k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   211k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   211k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   211k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   211k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   211k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   211k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 82.5k, False: 128k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  82.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  82.5k|    firstproduct.low += secondproduct.high;
   35|  82.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 27.3k, False: 55.2k]
  ------------------
   36|  27.3k|      firstproduct.high++;
   37|  27.3k|    }
   38|  82.5k|  }
   39|   211k|  return firstproduct;
   40|   211k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  29.9k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  29.9k|  int lz = leading_zeroes(w);
   82|  29.9k|  w <<= lz;
   83|  29.9k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  29.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  29.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  29.9k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  29.9k|  int hilz = int(w >> 63) ^ 1;
   69|  29.9k|  adjusted_mantissa answer;
   70|  29.9k|  answer.mantissa = w << hilz;
   71|  29.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  29.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  29.9k|  return answer;
   74|  29.9k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  22.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  22.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  22.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  22.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  22.0k|  size_t digits = 0;
  413|  22.0k|  bigint bigmant;
  414|  22.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  22.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  22.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 514, False: 21.5k]
  ------------------
  418|    514|    return positive_digit_comp<T>(bigmant, exponent);
  419|  21.5k|  } else {
  420|  21.5k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  21.5k|  }
  422|  22.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  51.8k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  51.8k|  uint64_t mantissa = num.mantissa;
   30|  51.8k|  int32_t exponent = int32_t(num.exponent);
   31|   259k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 207k, False: 51.8k]
  ------------------
   32|   207k|    mantissa /= 10000;
   33|   207k|    exponent += 4;
   34|   207k|  }
   35|   103k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 51.8k, False: 51.8k]
  ------------------
   36|  51.8k|    mantissa /= 100;
   37|  51.8k|    exponent += 2;
   38|  51.8k|  }
   39|  51.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 51.8k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  51.8k|  return exponent;
   44|  51.8k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  51.8k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  51.8k|  size_t counter = 0;
  245|  51.8k|  digits = 0;
  246|  51.8k|  limb value = 0;
  247|  51.8k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  51.8k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  51.8k|  UC const * p = num.integer.ptr;
  255|  51.8k|  UC const * pend = p + num.integer.len();
  256|  51.8k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   115k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 64.3k, False: 51.6k]
  ------------------
  259|   108k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 57.5k, False: 51.3k]
  |  Branch (259:45): [True: 44.8k, False: 12.6k]
  |  Branch (259:70): [True: 44.6k, False: 267]
  ------------------
  260|  44.6k|      parse_eight_digits(p, value, counter, digits);
  261|  44.6k|    }
  262|   203k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 188k, False: 14.9k]
  |  Branch (262:30): [True: 139k, False: 49.1k]
  |  Branch (262:43): [True: 138k, False: 267]
  ------------------
  263|   138k|      parse_one_digit(p, value, counter, digits);
  264|   138k|    }
  265|  64.3k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 267, False: 64.0k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    267|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    267|      bool truncated = is_truncated(p, pend);
  269|    267|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 231, False: 36]
  ------------------
  270|    231|        truncated |= is_truncated(num.fraction);
  271|    231|      }
  272|    267|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 161, False: 106]
  ------------------
  273|    161|        round_up_bigint(result, digits);
  274|    161|      }
  275|    267|      return;
  276|  64.0k|    } else {
  277|  64.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  64.0k|      counter = 0;
  279|  64.0k|      value = 0;
  280|  64.0k|    }
  281|  64.3k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  51.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 48.5k, False: 3.05k]
  ------------------
  285|  48.5k|    p = num.fraction.ptr;
  286|  48.5k|    pend = p + num.fraction.len();
  287|  48.5k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.47k, False: 46.0k]
  ------------------
  288|  2.47k|      skip_zeros(p, pend);
  289|  2.47k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   155k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 109k, False: 45.8k]
  ------------------
  292|   261k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 202k, False: 58.3k]
  |  Branch (292:47): [True: 153k, False: 49.8k]
  |  Branch (292:72): [True: 151k, False: 1.27k]
  ------------------
  293|   151k|        parse_eight_digits(p, value, counter, digits);
  294|   151k|      }
  295|   457k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 395k, False: 62.6k]
  |  Branch (295:32): [True: 350k, False: 44.6k]
  |  Branch (295:45): [True: 348k, False: 2.13k]
  ------------------
  296|   348k|        parse_one_digit(p, value, counter, digits);
  297|   348k|      }
  298|   109k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.74k, False: 106k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.74k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.74k|        bool truncated = is_truncated(p, pend);
  302|  2.74k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.89k, False: 845]
  ------------------
  303|  1.89k|          round_up_bigint(result, digits);
  304|  1.89k|        }
  305|  2.74k|        return;
  306|   106k|      } else {
  307|   106k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   106k|        counter = 0;
  309|   106k|        value = 0;
  310|   106k|      }
  311|   109k|    }
  312|  48.5k|  }
  313|       |
  314|  48.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 48.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  48.8k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  54.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  54.3k|  uint64_t val;
  161|  66.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 31.5k, False: 34.7k]
  ------------------
  162|  31.5k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  31.5k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 19.5k, False: 11.9k]
  ------------------
  164|  19.5k|      break;
  165|  19.5k|    }
  166|  11.9k|    first += int_cmp_len<UC>();
  167|  11.9k|  }
  168|   103k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 101k, False: 2.47k]
  ------------------
  169|   101k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 51.8k, False: 49.1k]
  ------------------
  170|  51.8k|      break;
  171|  51.8k|    }
  172|  49.1k|    first++;
  173|  49.1k|  }
  174|  54.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   196k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   196k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   196k|  p += 8;
  210|   196k|  counter += 8;
  211|   196k|  count += 8;
  212|   196k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   487k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   487k|  value = value * 10 + limb(*p - UC('0'));
  218|   487k|  p++;
  219|   487k|  counter++;
  220|   487k|  count++;
  221|   487k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   175k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   175k|  big.mul(power);
  226|   175k|  big.add(value);
  227|   175k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.24k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.24k|  uint64_t val;
  183|  6.38k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 4.16k, False: 2.21k]
  ------------------
  184|  4.16k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  4.16k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.02k, False: 3.13k]
  ------------------
  186|  1.02k|      return true;
  187|  1.02k|    }
  188|  3.13k|    first += int_cmp_len<UC>();
  189|  3.13k|  }
  190|  3.76k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.67k, False: 1.09k]
  ------------------
  191|  2.67k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.11k, False: 1.55k]
  ------------------
  192|  1.11k|      return true;
  193|  1.11k|    }
  194|  1.55k|    ++first;
  195|  1.55k|  }
  196|  1.09k|  return false;
  197|  2.21k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    231|bool is_truncated(span<const UC> s) noexcept {
  201|    231|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    231|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.05k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.05k|  add_native(big, 10, 1);
  234|  2.05k|  count++;
  235|  2.05k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    514|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    514|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    514|  adjusted_mantissa answer;
  324|    514|  bool truncated;
  325|    514|  answer.mantissa = bigmant.hi64(truncated);
  326|    514|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
  334|       |
  335|    514|  return answer;
  336|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    514|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 514]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    514|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    514|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 514]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 514]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    514|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    514|  const uint64_t mask
  125|    514|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 514]
  ------------------
  126|    514|    ? UINT64_MAX
  127|    514|    : (uint64_t(1) << shift) - 1;
  128|    514|  const uint64_t halfway
  129|    514|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 514]
  ------------------
  130|    514|    ? 0
  131|    514|    : uint64_t(1) << (shift - 1);
  132|    514|  uint64_t truncated_bits = am.mantissa & mask;
  133|    514|  bool is_above = truncated_bits > halfway;
  134|    514|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    514|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 514]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    514|  } else {
  140|    514|    am.mantissa >>= shift;
  141|    514|  }
  142|    514|  am.power2 += shift;
  143|       |
  144|    514|  bool is_odd = (am.mantissa & 1) == 1;
  145|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 440]
  |  Branch (331:27): [True: 348, False: 92]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 56, False: 326]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    514|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  21.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  21.5k|  bigint& real_digits = bigmant;
  347|  21.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  21.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  21.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  21.5k|  T b;
  354|  21.5k|  to_float(false, am_b, b);
  355|  21.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  21.5k|  bigint theor_digits(theor.mantissa);
  357|  21.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  21.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  21.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  21.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 21.5k, False: 0]
  ------------------
  363|  21.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  21.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  21.5k|  }
  365|  21.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 21.5k, False: 0]
  ------------------
  366|  21.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  21.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  21.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  21.5k|  int ord = real_digits.compare(theor_digits);
  373|  21.5k|  adjusted_mantissa answer = am;
  374|  21.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  379|  21.5k|        return true;
  380|  21.5k|      } else if (ord < 0) {
  381|  21.5k|        return false;
  382|  21.5k|      } else {
  383|  21.5k|        return is_odd;
  384|  21.5k|      }
  385|  21.5k|    });
  386|  21.5k|  });
  387|       |
  388|  21.5k|  return answer;
  389|  21.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  21.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  21.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  21.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 21.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  21.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  21.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 21.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  21.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  21.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 21.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  21.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  21.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  48.5k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  48.5k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 48.5k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  48.5k|  } else {
  153|  48.5k|    am.mantissa >>= shift;
  154|  48.5k|  }
  155|  48.5k|  am.power2 += shift;
  156|  48.5k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  21.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  21.5k|  adjusted_mantissa am = to_extended(value);
   84|  21.5k|  am.mantissa <<= 1;
   85|  21.5k|  am.mantissa += 1;
   86|  21.5k|  am.power2 -= 1;
   87|  21.5k|  return am;
   88|  21.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  21.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  21.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  21.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  21.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  21.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  21.5k|  adjusted_mantissa am;
   56|  21.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  21.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  21.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  21.5k|#endif
   63|  21.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 21.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  21.5k|  } else {
   68|       |    // normal
   69|  21.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  21.5k|    am.power2 -= bias;
   71|  21.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  21.5k|  }
   73|       |
   74|  21.5k|  return am;
   75|  21.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  21.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  21.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  21.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 21.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  21.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  21.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 21.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  21.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  21.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 21.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  21.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  21.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  379|  21.5k|        return true;
  380|  21.5k|      } else if (ord < 0) {
  381|  21.5k|        return false;
  382|  21.5k|      } else {
  383|  21.5k|        return is_odd;
  384|  21.5k|      }
  385|  21.5k|    });
  386|  21.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  21.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  21.5k|  const uint64_t mask
  125|  21.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 21.5k]
  ------------------
  126|  21.5k|    ? UINT64_MAX
  127|  21.5k|    : (uint64_t(1) << shift) - 1;
  128|  21.5k|  const uint64_t halfway
  129|  21.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 21.5k]
  ------------------
  130|  21.5k|    ? 0
  131|  21.5k|    : uint64_t(1) << (shift - 1);
  132|  21.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  21.5k|  bool is_above = truncated_bits > halfway;
  134|  21.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  21.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 21.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  21.5k|  } else {
  140|  21.5k|    am.mantissa >>= shift;
  141|  21.5k|  }
  142|  21.5k|  am.power2 += shift;
  143|       |
  144|  21.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  21.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  21.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  21.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  21.5k|      (void)_;  // not needed, since we've done our comparison
  377|  21.5k|      (void)__; // not needed, since we've done our comparison
  378|  21.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 21.3k]
  ------------------
  379|    210|        return true;
  380|  21.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 17.7k, False: 3.57k]
  ------------------
  381|  17.7k|        return false;
  382|  17.7k|      } else {
  383|  3.57k|        return is_odd;
  384|  3.57k|      }
  385|  21.5k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  29.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  29.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  29.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  29.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  29.8k|  size_t digits = 0;
  413|  29.8k|  bigint bigmant;
  414|  29.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  29.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  29.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 2.94k, False: 26.9k]
  ------------------
  418|  2.94k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  26.9k|  } else {
  420|  26.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  26.9k|  }
  422|  29.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  2.94k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  2.94k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  2.94k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  2.94k|  adjusted_mantissa answer;
  324|  2.94k|  bool truncated;
  325|  2.94k|  answer.mantissa = bigmant.hi64(truncated);
  326|  2.94k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  2.94k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  2.94k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  2.94k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  2.94k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  2.94k|    });
  333|  2.94k|  });
  334|       |
  335|  2.94k|  return answer;
  336|  2.94k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  2.94k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  2.94k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  2.94k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 2.94k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  2.94k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  2.94k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 432, False: 2.51k]
  ------------------
  109|    432|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    432|    am.power2++;
  111|    432|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  2.94k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  2.94k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 2.94k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  2.94k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  2.94k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  2.94k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  2.94k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  2.94k|    });
  333|  2.94k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  2.94k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  2.94k|  const uint64_t mask
  125|  2.94k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 2.94k]
  ------------------
  126|  2.94k|    ? UINT64_MAX
  127|  2.94k|    : (uint64_t(1) << shift) - 1;
  128|  2.94k|  const uint64_t halfway
  129|  2.94k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 2.94k]
  ------------------
  130|  2.94k|    ? 0
  131|  2.94k|    : uint64_t(1) << (shift - 1);
  132|  2.94k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  2.94k|  bool is_above = truncated_bits > halfway;
  134|  2.94k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  2.94k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 2.94k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  2.94k|  } else {
  140|  2.94k|    am.mantissa >>= shift;
  141|  2.94k|  }
  142|  2.94k|  am.power2 += shift;
  143|       |
  144|  2.94k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  2.94k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  2.94k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  2.94k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  2.94k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 478, False: 2.47k]
  |  Branch (331:27): [True: 1.88k, False: 586]
  |  Branch (331:41): [True: 641, False: 1.24k]
  |  Branch (331:56): [True: 258, False: 1.57k]
  |  Branch (331:66): [True: 60, False: 198]
  ------------------
  332|  2.94k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  26.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  26.9k|  bigint& real_digits = bigmant;
  347|  26.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  26.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  26.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  26.9k|  T b;
  354|  26.9k|  to_float(false, am_b, b);
  355|  26.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  26.9k|  bigint theor_digits(theor.mantissa);
  357|  26.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  26.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  26.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  26.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 26.9k, False: 0]
  ------------------
  363|  26.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  26.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  26.9k|  }
  365|  26.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.40k, False: 24.5k]
  ------------------
  366|  2.40k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.40k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  24.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 24.5k, False: 74]
  ------------------
  368|  24.5k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  24.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  24.5k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  26.9k|  int ord = real_digits.compare(theor_digits);
  373|  26.9k|  adjusted_mantissa answer = am;
  374|  26.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  379|  26.9k|        return true;
  380|  26.9k|      } else if (ord < 0) {
  381|  26.9k|        return false;
  382|  26.9k|      } else {
  383|  26.9k|        return is_odd;
  384|  26.9k|      }
  385|  26.9k|    });
  386|  26.9k|  });
  387|       |
  388|  26.9k|  return answer;
  389|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  26.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 26.8k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 26.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  26.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  26.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  26.9k|  adjusted_mantissa am = to_extended(value);
   84|  26.9k|  am.mantissa <<= 1;
   85|  26.9k|  am.mantissa += 1;
   86|  26.9k|  am.power2 -= 1;
   87|  26.9k|  return am;
   88|  26.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  26.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  26.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  26.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  26.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  26.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  26.9k|  adjusted_mantissa am;
   56|  26.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  26.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  26.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  26.9k|#endif
   63|  26.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 104, False: 26.8k]
  ------------------
   64|       |    // denormal
   65|    104|    am.power2 = 1 - bias;
   66|    104|    am.mantissa = bits & mantissa_mask;
   67|  26.8k|  } else {
   68|       |    // normal
   69|  26.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  26.8k|    am.power2 -= bias;
   71|  26.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  26.8k|  }
   73|       |
   74|  26.9k|  return am;
   75|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  26.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 26.8k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 74, False: 26.8k]
  ------------------
  109|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     74|    am.power2++;
  111|     74|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  26.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  379|  26.9k|        return true;
  380|  26.9k|      } else if (ord < 0) {
  381|  26.9k|        return false;
  382|  26.9k|      } else {
  383|  26.9k|        return is_odd;
  384|  26.9k|      }
  385|  26.9k|    });
  386|  26.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  26.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  26.9k|  const uint64_t mask
  125|  26.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 26.9k]
  ------------------
  126|  26.9k|    ? UINT64_MAX
  127|  26.9k|    : (uint64_t(1) << shift) - 1;
  128|  26.9k|  const uint64_t halfway
  129|  26.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 26.9k]
  ------------------
  130|  26.9k|    ? 0
  131|  26.9k|    : uint64_t(1) << (shift - 1);
  132|  26.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  26.9k|  bool is_above = truncated_bits > halfway;
  134|  26.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  26.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 26.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  26.9k|  } else {
  140|  26.9k|    am.mantissa >>= shift;
  141|  26.9k|  }
  142|  26.9k|  am.power2 += shift;
  143|       |
  144|  26.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  26.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  26.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.1k, False: 15.8k]
  ------------------
  379|  11.1k|        return true;
  380|  15.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 15.3k, False: 488]
  ------------------
  381|  15.3k|        return false;
  382|  15.3k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  26.9k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.85M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.09M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   363k|  constexpr size_t len() const noexcept {
  238|   363k|    return length;
  239|   363k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   633k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   633k|  return -10;
  469|   633k|#endif
  470|   633k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   595k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   595k|  return 10;
  517|   595k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   526k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   526k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   526k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.47M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.47M|  return 23;
  477|  1.47M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   503k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   503k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   503k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   498k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   202k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   202k|  return -65;
  568|   202k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   201k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   201k|  return 38;
  559|   201k|}
_ZN10fast_float14leading_zeroesEm:
  268|   434k|int leading_zeroes(uint64_t input_num) {
  269|   434k|  assert(input_num > 0);
  270|   434k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   434k|  return __builtin_clzll(input_num);
  285|   434k|#endif
  286|   434k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   552k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   552k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   552k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   552k|  answer.low = uint64_t(r);
  337|   552k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   552k|  return answer;
  342|   552k|}
_ZN10fast_float8value128C2Ev:
  251|   552k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   238k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   238k|  return -127;
  500|   238k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  66.2k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  66.2k|  return -17;
  493|  66.2k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  64.3k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  64.3k|  return 10;
  485|  64.3k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   152k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   152k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 51.9k, False: 100k]
  |  Branch (352:38): [True: 0, False: 100k]
  ------------------
  353|   152k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  22.0k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  22.0k|  return 114;
  575|  22.0k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  87.7k|{
  650|  87.7k|    return sizeof(uint64_t) / sizeof(UC);
  651|  87.7k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  35.6k|{
  644|  35.6k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  35.6k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  35.6k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  70.8k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   200k|  constexpr size_t len() const noexcept {
  238|   200k|    return length;
  239|   200k|  }
_ZNK10fast_float4spanImEixEm:
  241|   109k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   109k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   109k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   109k|    return ptr[index];
  244|   109k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   152k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   152k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   152k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   152k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   152k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   152k|  ::memcpy(&value, &word, sizeof(T));
  615|   152k|#endif
  616|   152k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   152k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   374k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   374k|  return 0xFF;
  507|   374k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   926k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   797k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   400k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.82k|  constexpr size_t len() const noexcept {
  238|  1.82k|    return length;
  239|  1.82k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   398k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   691k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   691k|  return -22;
  461|   691k|#endif
  462|   691k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   683k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   683k|  return 22;
  514|   683k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   584k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   584k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   584k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.53M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.53M|  return 52;
  474|  1.53M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   580k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   580k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   580k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   185k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   185k|  return -342;
  564|   185k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   184k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   184k|  return 308;
  555|   184k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   241k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   241k|  return -1023;
  497|   241k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  53.8k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  53.8k|  return -4;
  489|  53.8k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  29.3k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  29.3k|  return 23;
  481|  29.3k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  29.9k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  29.9k|  return 769;
  572|  29.9k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   138k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   138k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   138k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   138k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   138k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   138k|  ::memcpy(&value, &word, sizeof(T));
  615|   138k|#endif
  616|   138k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   138k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   349k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   349k|  return 0x7FF;
  504|   349k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   454k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   454k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   454k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   454k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   454k|    return from_chars_advanced(first, last, value, options);
  143|   454k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   454k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   454k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   454k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   454k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   454k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 454k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   454k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   454k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 454k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   454k|  answer.ec = std::errc(); // be optimistic
  221|   454k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   454k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 417k, False: 37.4k]
  |  Branch (227:69): [True: 393k, False: 23.9k]
  |  Branch (227:131): [True: 351k, False: 41.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   351k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 351k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   351k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 328k, False: 22.6k]
  ------------------
  239|   328k|        value = T(pns.mantissa);
  240|   328k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.28k, False: 321k]
  ------------------
  241|   321k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   328k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 328k]
  ------------------
  243|   328k|        return answer;
  244|   328k|      }
  245|   351k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   351k|  }
  262|   125k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   125k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 74.5k, False: 51.2k]
  |  Branch (263:29): [True: 74.5k, False: 0]
  ------------------
  264|  74.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 22.0k, False: 52.4k]
  ------------------
  265|  22.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  22.0k|    }
  267|  74.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   125k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 22.0k, False: 103k]
  ------------------
  271|   125k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   125k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 122k, False: 3.00k]
  |  Branch (273:29): [True: 13.5k, False: 109k]
  |  Branch (273:49): [True: 785, False: 12.7k]
  |  Branch (273:68): [True: 4.01k, False: 120k]
  ------------------
  274|  4.80k|    answer.ec = std::errc::result_out_of_range;
  275|  4.80k|  }
  276|   125k|  return answer;
  277|   454k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.11M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.11M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.11M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.11M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.11M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.11M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   179k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   179k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   179k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   179k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   179k|    return from_chars_advanced(first, last, value, options);
  143|   179k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   179k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   179k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   179k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   179k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   179k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 179k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   179k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   179k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 179k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   179k|  answer.ec = std::errc(); // be optimistic
  221|   179k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   179k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 178k, False: 1.31k]
  |  Branch (227:69): [True: 175k, False: 3.14k]
  |  Branch (227:131): [True: 174k, False: 186]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   174k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 174k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   174k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 174k, False: 480]
  ------------------
  239|   174k|        value = T(pns.mantissa);
  240|   174k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 448, False: 173k]
  ------------------
  241|   173k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   174k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 174k]
  ------------------
  243|   174k|        return answer;
  244|   174k|      }
  245|   174k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   174k|  }
  262|  5.12k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  5.12k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 558, False: 4.56k]
  |  Branch (263:29): [True: 558, False: 0]
  ------------------
  264|    558|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 558]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    558|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  5.12k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 5.12k]
  ------------------
  271|  5.12k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  5.12k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 4.73k, False: 394]
  |  Branch (273:29): [True: 3.38k, False: 1.35k]
  |  Branch (273:49): [True: 790, False: 2.59k]
  |  Branch (273:68): [True: 2.59k, False: 1.74k]
  ------------------
  274|  3.38k|    answer.ec = std::errc::result_out_of_range;
  275|  3.38k|  }
  276|  5.12k|  return answer;
  277|   179k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   472k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   472k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   472k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   472k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   472k|    return from_chars_advanced(first, last, value, options);
  143|   472k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   472k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   472k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   472k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   472k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   472k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 472k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   472k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   472k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 472k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   472k|  answer.ec = std::errc(); // be optimistic
  221|   472k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   472k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 466k, False: 6.09k]
  |  Branch (227:69): [True: 443k, False: 23.0k]
  |  Branch (227:131): [True: 371k, False: 71.5k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   371k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 371k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   371k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 367k, False: 4.35k]
  ------------------
  239|   367k|        value = T(pns.mantissa);
  240|   367k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 19.5k, False: 347k]
  ------------------
  241|   347k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   367k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 367k]
  ------------------
  243|   367k|        return answer;
  244|   367k|      }
  245|   371k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   371k|  }
  262|   105k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   105k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 76.8k, False: 28.1k]
  |  Branch (263:29): [True: 76.8k, False: 0]
  ------------------
  264|  76.8k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 29.8k, False: 46.9k]
  ------------------
  265|  29.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  29.8k|    }
  267|  76.8k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   105k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 29.8k, False: 75.1k]
  ------------------
  271|   105k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   105k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 102k, False: 2.73k]
  |  Branch (273:29): [True: 8.51k, False: 93.7k]
  |  Branch (273:49): [True: 193, False: 8.31k]
  |  Branch (273:68): [True: 2.03k, False: 102k]
  ------------------
  274|  2.22k|    answer.ec = std::errc::result_out_of_range;
  275|  2.22k|  }
  276|   105k|  return answer;
  277|   472k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   219k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   219k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   219k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   219k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   219k|    return from_chars_advanced(first, last, value, options);
  143|   219k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   219k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   219k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   219k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   219k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   219k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 219k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   219k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   219k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 219k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   219k|  answer.ec = std::errc(); // be optimistic
  221|   219k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   219k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 217k, False: 1.62k]
  |  Branch (227:69): [True: 213k, False: 3.89k]
  |  Branch (227:131): [True: 213k, False: 390]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   213k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 213k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   213k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 213k, False: 144]
  ------------------
  239|   213k|        value = T(pns.mantissa);
  240|   213k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 644, False: 212k]
  ------------------
  241|   212k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   213k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 213k]
  ------------------
  243|   213k|        return answer;
  244|   213k|      }
  245|   213k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   213k|  }
  262|  6.05k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  6.05k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 558, False: 5.49k]
  |  Branch (263:29): [True: 558, False: 0]
  ------------------
  264|    558|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 486]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    558|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  6.05k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 5.97k]
  ------------------
  271|  6.05k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  6.05k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.62k, False: 422]
  |  Branch (273:29): [True: 1.61k, False: 4.01k]
  |  Branch (273:49): [True: 170, False: 1.44k]
  |  Branch (273:68): [True: 1.44k, False: 4.44k]
  ------------------
  274|  1.61k|    answer.ec = std::errc::result_out_of_range;
  275|  1.61k|  }
  276|  6.05k|  return answer;
  277|   219k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  3.04M|{
 3803|  3.04M|    if constexpr (sizeof(U) == 1) {
 3804|  3.04M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  3.04M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  3.04M|{
 3767|  3.04M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  3.04M|    SCN_GCC_COMPAT_PUSH
 3770|  3.04M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  3.04M|    constexpr char lengths[] =
 3772|  3.04M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  3.04M|        "\1\1\1\1\1\1\1\1"
 3774|  3.04M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  3.04M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  3.04M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  3.04M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  3.04M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  3.04M|    SCN_GCC_COMPAT_POP
 3781|  3.04M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.77M|{
 4009|  2.77M|    if constexpr (sizeof(CharT) == 1) {
 4010|  2.77M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  2.77M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  2.77M|{
 3822|  2.77M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  2.77M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  2.77M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  2.77M|    };
 3827|       |
 3828|  2.77M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 2.71M, False: 59.9k]
  ------------------
 3829|  2.71M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 700, False: 2.71M]
  ------------------
 3830|    700|            SCN_UNLIKELY_ATTR
 3831|    700|            return invalid_code_point;
 3832|    700|        }
 3833|  2.71M|        return static_cast<char32_t>(input[0]);
 3834|  2.71M|    }
 3835|       |
 3836|  59.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 54.3k, False: 5.61k]
  ------------------
 3837|  54.3k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 152, False: 54.1k]
  ------------------
 3838|    152|            SCN_UNLIKELY_ATTR
 3839|    152|            return invalid_code_point;
 3840|    152|        }
 3841|  54.1k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 5.03k, False: 49.1k]
  ------------------
 3842|  5.03k|            SCN_UNLIKELY_ATTR
 3843|  5.03k|            return invalid_code_point;
 3844|  5.03k|        }
 3845|       |
 3846|  49.1k|        char32_t cp{};
 3847|  49.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  49.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  49.1k|        return cp;
 3850|  54.1k|    }
 3851|       |
 3852|  5.61k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 2.70k, False: 2.91k]
  ------------------
 3853|  2.70k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 113, False: 2.58k]
  ------------------
 3854|    113|            SCN_UNLIKELY_ATTR
 3855|    113|            return invalid_code_point;
 3856|    113|        }
 3857|  2.58k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 1.10k, False: 1.48k]
  ------------------
 3858|  2.58k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 596, False: 888]
  ------------------
 3859|  1.69k|            SCN_UNLIKELY_ATTR
 3860|  1.69k|            return invalid_code_point;
 3861|  1.69k|        }
 3862|       |
 3863|    888|        char32_t cp{};
 3864|    888|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|    888|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|    888|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|    888|        return cp;
 3868|  2.58k|    }
 3869|       |
 3870|  2.91k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.91k, False: 0]
  ------------------
 3871|  2.91k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.91k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.91k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 1.06k, False: 1.85k]
  ------------------
 3876|  1.06k|            SCN_UNLIKELY_ATTR
 3877|  1.06k|            return invalid_code_point;
 3878|  1.06k|        }
 3879|  1.85k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 466, False: 1.38k]
  ------------------
 3880|  1.85k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 554, False: 833]
  ------------------
 3881|  1.85k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 542, False: 291]
  ------------------
 3882|  1.56k|            SCN_UNLIKELY_ATTR
 3883|  1.56k|            return invalid_code_point;
 3884|  1.56k|        }
 3885|       |
 3886|    291|        char32_t cp{};
 3887|    291|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    291|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    291|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    291|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    291|        return cp;
 3892|  1.85k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  62.2k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  62.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  62.2k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.63M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.63M|    else {
 3701|  4.63M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.63M|                                       to_address(first), to_address(last)))};
 3703|  4.63M|    }
 3704|  4.63M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.0M|{
  326|  14.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.6M|{
  304|  21.6M|    return p;
  305|  21.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.37M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  7.37M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  7.37M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.37M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  7.37M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  89.2k|    {
 2724|  89.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  89.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  89.2k|    {
 2705|  89.2k|        return decay_copy(t.begin());
 2706|  89.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  10.6M|{
 1949|  10.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.00M|    {
 2781|  2.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.00M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.00M|    {
 2763|  2.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.00M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   146k|{
 8878|   146k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   146k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   146k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5405|   632k|{
 5406|   632k|    detail::check_scan_arg_types<Args...>();
 5407|   632k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   632k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5144|  1.04M|{
 5145|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.04M|                  "Scan argument types must be default constructible");
 5147|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.04M|                  "Scan argument types must be Destructible");
 5149|  1.04M|    static_assert(
 5150|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.04M|        "Scan argument types must not be references");
 5152|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5357|   632k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   632k|    {
 5359|   632k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   632k|    {
 5370|   632k|        return {detail::make_arg<
 5371|   632k|            kind, Context,
 5372|   632k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   632k|                                 typename Context::char_type>::value>(args)...};
 5374|   632k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   632k|{
 5180|   632k|    return make_value<Context>(value).ref_value;
 5181|   632k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5129|   698k|{
 5130|   698k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   698k|                                  needs_context_tag>) {
 5134|   698k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   698k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   698k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4968|   698k|    {                                                                        \
 4969|   698k|        return val;                                                          \
 4970|   698k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5098|  1.04M|{
 5099|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.04M|    constexpr bool scannable_char =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.04M|    static_assert(scannable_char,
 5105|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable_const =
 5109|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.04M|    constexpr bool scannable_disabled =
 5113|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.04M|    static_assert(scannable_disabled,
 5115|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.04M|    static_assert(
 5120|  1.04M|        scannable,
 5121|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.04M|    return arg_value{arg};
 5125|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4909|  1.04M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.04M|    {
 4911|  1.04M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   451k|{
 8665|   451k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   451k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   451k|{
 8602|   451k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   451k|    auto result = vscan_impl(buffer, format, args);
 8605|   451k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 411k]
  |  |  ------------------
  ------------------
 8606|  40.1k|        return unexpected(result.error());
 8607|  40.1k|    }
 8608|   411k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   451k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|  1.00M|{
 4729|  1.00M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.00M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.00M|                  "\n"
 4733|  1.00M|                  "Unsupported range type given as input to a scanning "
 4734|  1.00M|                  "function.\n"
 4735|  1.00M|                  "A range needs to have a character type (value type) "
 4736|  1.00M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.00M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.00M|                  "to be included.\n"
 4739|  1.00M|                  "See the scnlib documentation for more details.");
 4740|  1.00M|    static_assert(
 4741|  1.00M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.00M|        "\n"
 4743|  1.00M|        "Unsupported range type given as input to a scanning "
 4744|  1.00M|        "function.\n"
 4745|  1.00M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.00M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.00M|        "not supported.");
 4748|  1.00M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.00M|                  "\n"
 4750|  1.00M|                  "Unsupported range type given as input to a scanning "
 4751|  1.00M|                  "function.\n"
 4752|  1.00M|                  "file_marker_found cannot be used as an "
 4753|  1.00M|                  "source range type to scn::scan.\n"
 4754|  1.00M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.00M|                  "and do not provide an explicit source range, "
 4756|  1.00M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.00M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.00M|                  "\n"
 4759|  1.00M|                  "Unsupported range type given as input to a scanning "
 4760|  1.00M|                  "function.\n"
 4761|  1.00M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.00M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.00M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.00M|                  "\n"
 4765|  1.00M|                  "Unsupported range type given as input to a scanning "
 4766|  1.00M|                  "function.\n"
 4767|  1.00M|                  "A range needs to model forward_range and have a valid "
 4768|  1.00M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.00M|                  "Examples of scannable ranges are std::string, "
 4770|  1.00M|                  "std::string_view, "
 4771|  1.00M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.00M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.00M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.00M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.00M|{
 4668|  1.00M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.00M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.00M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.00M|    {
 2855|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.00M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.00M|    {
 2836|  1.00M|        return t.data();
 2837|  1.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|  1.00M|    {
 3229|  1.00M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.00M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.53M|{
  326|  7.53M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.53M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.91M|    {
 2724|  1.91M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.91M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.91M|    {
 2705|  1.91M|        return decay_copy(t.begin());
 2706|  1.91M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  24.1M|    {
 3326|  24.1M|        return m_iterator;
 3327|  24.1M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.00M|    {
 3185|  1.00M|        return static_cast<const D&>(*this);
 3186|  1.00M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.00M|    {
 2930|  1.00M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.00M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.00M|    {
 2896|  1.00M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.00M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.34M|{
 1949|  4.34M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.34M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  5.52M|    {
 3342|  5.52M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  5.52M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.8M|    {
 1598|  10.8M|        return has_value();
 1599|  10.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  21.3M|    {
  485|  21.3M|        return m_has_value;
  486|  21.3M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   792k|    {
 1604|   792k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   792k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   792k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   792k|        return this->get_unexpected().error();
 1606|   792k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   792k|    {
  468|   792k|        return m_unexpected;
  469|   792k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  6.11M|    {
  361|  6.11M|        return m_unexpected;
  362|  6.11M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.98M|        : m_unexpected(std::forward<Err>(e))
  346|  2.98M|    {
  347|  2.98M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.98M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.98M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  6.63M|        : m_unexpected(std::forward<Args>(args)...)
  355|  6.63M|    {
  356|  6.63M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.63M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00M|    {
 1177|  1.00M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   915k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   915k|                      ranges::iterator_t<SourceRange>>) {
 5935|   915k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   915k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.68M|    {
 2724|  5.68M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.68M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.68M|    {
 2705|  5.68M|        return decay_copy(t.begin());
 2706|  5.68M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   915k|{
 5920|   915k|    return ranges::end(source);
 5921|   915k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   915k|    {
 2781|   915k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   915k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   915k|    {
 2763|   915k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   915k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  11.7M|    {
 3330|  11.7M|        return m_sentinel;
 3331|  11.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.23M|    {
 1653|  4.23M|        return value();
 1654|  4.23M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  9.77M|    {
 1627|  9.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.77M|        return this->get_value();
 1629|  9.77M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.77M|    {
  451|  9.77M|        return m_value;
  452|  9.77M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   915k|        : base(std::in_place, std::forward<U>(val)),
 1428|   915k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   915k|    {
 1430|   915k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   915k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   915k|    {
  437|   915k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   293k|    {
 7986|   293k|        return m_str;
 7987|   293k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   632k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   632k|    {
 5436|   632k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5388|   632k|    {
 5389|   632k|        return m_argptrs;
 5390|   632k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  1.95M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.95M|    {
 5488|  1.95M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   293k|{
 8831|   293k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 266k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   266k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   266k|    static_cast<    \
  |  |  929|   266k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   266k|    static_cast<    \
  |  |  929|   266k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   293k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.00M|    {
 1598|  1.00M|        return has_value();
 1599|  1.00M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.00M|    {
  485|  2.00M|        return m_has_value;
  486|  2.00M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  87.0k|    {
 1604|  87.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  87.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  87.0k|        return this->get_unexpected().error();
 1606|  87.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  87.0k|    {
  468|  87.0k|        return m_unexpected;
  469|  87.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   325k|    {
 1177|   325k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   823k|    {
 1653|   823k|        return value();
 1654|   823k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   915k|    {
 1627|   915k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   915k|        return this->get_value();
 1629|   915k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   915k|    {
  451|   915k|        return m_value;
  452|   915k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   296k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   296k|    {
 5840|   296k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   915k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   915k|    static_cast<    \
  |  |  929|   915k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   915k|    {
 5691|   915k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5624|   872k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   872k|    {
 5626|   872k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   296k|        : base(std::in_place, std::forward<U>(val)),
 1428|   296k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   296k|    {
 1430|   296k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   296k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   296k|    {
  437|   296k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5383|   632k|    {
 5384|   632k|        return m_args;
 5385|   632k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  9.40M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.40M|    static_cast<    \
  |  |  929|  9.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.40M|    static_cast<    \
  |  |  929|  9.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  9.40M|    {
 3312|  9.40M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|  1.95M|{
 7702|  1.95M|    return s;
 7703|  1.95M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|  1.95M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   293k|        : m_str(r.str)
 7981|   293k|    {
 7982|   293k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   325k|    {
 1598|   325k|        return has_value();
 1599|   325k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   622k|    {
  485|   622k|        return m_has_value;
  486|   622k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   296k|    {
 1673|   296k|        return &value();
 1674|   296k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   296k|    {
 1627|   296k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   296k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   296k|        return this->get_value();
 1629|   296k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   296k|    {
  451|   296k|        return m_value;
  452|   296k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   915k|    {
 5708|   915k|        return ranges::begin(m_range);
 5709|   915k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   146k|{
 8945|   146k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   146k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   146k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   451k|{
 8683|   451k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   451k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   451k|{
 8618|   451k|#if !SCN_DISABLE_LOCALE
 8619|   451k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   451k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   451k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   451k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   451k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 411k]
  |  |  ------------------
  ------------------
 8626|  40.1k|        return unexpected(result.error());
 8627|  40.1k|    }
 8628|   411k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   451k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  31.9k|{
 8984|  31.9k|    T value;
 8985|  31.9k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  31.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  31.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  31.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  29.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  31.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  66.7k|{
 5165|  66.7k|    check_scan_arg_types<T>();
 5166|       |
 5167|  66.7k|    basic_scan_arg<Context> arg;
 5168|  66.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  66.7k|    arg.m_value = make_value<Context>(value);
 5170|  66.7k|    return arg;
 5171|  66.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  2.15M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.29M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  99.0k|{
 8696|  99.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  99.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  99.0k|{
 8642|  99.0k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  99.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  99.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  99.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 92.3k]
  |  |  ------------------
  ------------------
 8646|  6.69k|        return unexpected(result.error());
 8647|  6.69k|    }
 8648|  92.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  99.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  92.3k|    {
 1663|  92.3k|        return std::move(value());
 1664|  92.3k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   151k|{
 8878|   151k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   151k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   151k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   151k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|   656k|{
 5406|   656k|    detail::check_scan_arg_types<Args...>();
 5407|   656k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   656k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  1.11M|{
 5145|  1.11M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.11M|                  "Scan argument types must be default constructible");
 5147|  1.11M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.11M|                  "Scan argument types must be Destructible");
 5149|  1.11M|    static_assert(
 5150|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.11M|        "Scan argument types must not be references");
 5152|  1.11M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|   656k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   656k|    {
 5359|   656k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   656k|    {
 5370|   656k|        return {detail::make_arg<
 5371|   656k|            kind, Context,
 5372|   656k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   656k|                                 typename Context::char_type>::value>(args)...};
 5374|   656k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   656k|{
 5180|   656k|    return make_value<Context>(value).ref_value;
 5181|   656k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|   726k|{
 5130|   726k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   726k|                                  needs_context_tag>) {
 5134|   726k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   726k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|   726k|    {                                                                        \
 4969|   726k|        return val;                                                          \
 4970|   726k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  1.11M|{
 5099|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.11M|    constexpr bool scannable_char =
 5103|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.11M|    static_assert(scannable_char,
 5105|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.11M|    constexpr bool scannable_const =
 5109|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.11M|    constexpr bool scannable_disabled =
 5113|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.11M|    static_assert(scannable_disabled,
 5115|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.11M|    static_assert(
 5120|  1.11M|        scannable,
 5121|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.11M|    return arg_value{arg};
 5125|  1.11M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  1.11M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.11M|    {
 4911|  1.11M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   303k|    {
 7986|   303k|        return m_str;
 7987|   303k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   656k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   656k|    {
 5436|   656k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|   656k|    {
 5389|   656k|        return m_argptrs;
 5390|   656k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   303k|{
 8831|   303k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 276k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   276k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   276k|    static_cast<    \
  |  |  929|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   276k|    static_cast<    \
  |  |  929|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   303k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   336k|    {
 1177|   336k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   307k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   307k|    {
 5840|   307k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5624|   941k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   941k|    static_cast<    \
  |  |  929|   941k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   941k|    {
 5626|   941k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   307k|        : base(std::in_place, std::forward<U>(val)),
 1428|   307k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   307k|    {
 1430|   307k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   307k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   307k|    {
  437|   307k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|   656k|    {
 5384|   656k|        return m_args;
 5385|   656k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   303k|        : m_str(r.str)
 7981|   303k|    {
 7982|   303k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   336k|    {
 1598|   336k|        return has_value();
 1599|   336k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   643k|    {
  485|   643k|        return m_has_value;
  486|   643k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   307k|    {
 1673|   307k|        return &value();
 1674|   307k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   307k|    {
 1627|   307k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   307k|        return this->get_value();
 1629|   307k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   307k|    {
  451|   307k|        return m_value;
  452|   307k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   151k|{
 8945|   151k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   151k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   151k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   151k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  33.2k|{
 8984|  33.2k|    T value;
 8985|  33.2k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  33.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  33.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  33.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.0k|    static_cast<    \
  |  |  929|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.0k|    static_cast<    \
  |  |  929|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  33.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  69.9k|{
 5165|  69.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  69.9k|    basic_scan_arg<Context> arg;
 5168|  69.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  69.9k|    arg.m_value = make_value<Context>(value);
 5170|  69.9k|    return arg;
 5171|  69.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   153k|{
 8878|   153k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   153k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   153k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   153k|    static_cast<    \
  |  |  929|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   153k|    static_cast<    \
  |  |  929|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   153k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5405|   663k|{
 5406|   663k|    detail::check_scan_arg_types<Args...>();
 5407|   663k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   663k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5144|  1.13M|{
 5145|  1.13M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.13M|                  "Scan argument types must be default constructible");
 5147|  1.13M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.13M|                  "Scan argument types must be Destructible");
 5149|  1.13M|    static_assert(
 5150|  1.13M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.13M|        "Scan argument types must not be references");
 5152|  1.13M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5357|   663k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   663k|    {
 5359|   663k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   663k|    {
 5370|   663k|        return {detail::make_arg<
 5371|   663k|            kind, Context,
 5372|   663k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   663k|                                 typename Context::char_type>::value>(args)...};
 5374|   663k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   663k|{
 5180|   663k|    return make_value<Context>(value).ref_value;
 5181|   663k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5129|   734k|{
 5130|   734k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   734k|                                  needs_context_tag>) {
 5134|   734k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   734k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   734k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4968|   734k|    {                                                                        \
 4969|   734k|        return val;                                                          \
 4970|   734k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5098|  1.13M|{
 5099|  1.13M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.13M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.13M|    constexpr bool scannable_char =
 5103|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.13M|    static_assert(scannable_char,
 5105|  1.13M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.13M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.13M|    constexpr bool scannable_const =
 5109|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.13M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.13M|    constexpr bool scannable_disabled =
 5113|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.13M|    static_assert(scannable_disabled,
 5115|  1.13M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.13M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.13M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.13M|    static_assert(
 5120|  1.13M|        scannable,
 5121|  1.13M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.13M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.13M|    return arg_value{arg};
 5125|  1.13M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4909|  1.13M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.13M|    {
 4911|  1.13M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   306k|    {
 7986|   306k|        return m_str;
 7987|   306k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   663k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   663k|    {
 5436|   663k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5388|   663k|    {
 5389|   663k|        return m_argptrs;
 5390|   663k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   306k|{
 8831|   306k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 279k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   279k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   306k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   340k|    {
 1177|   340k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   311k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   311k|    {
 5840|   311k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5624|   956k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   956k|    static_cast<    \
  |  |  929|   956k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   956k|    {
 5626|   956k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   311k|        : base(std::in_place, std::forward<U>(val)),
 1428|   311k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   311k|    {
 1430|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   311k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   311k|    {
  437|   311k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5383|   663k|    {
 5384|   663k|        return m_args;
 5385|   663k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   306k|        : m_str(r.str)
 7981|   306k|    {
 7982|   306k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   340k|    {
 1598|   340k|        return has_value();
 1599|   340k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   652k|    {
  485|   652k|        return m_has_value;
  486|   652k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   311k|    {
 1673|   311k|        return &value();
 1674|   311k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   311k|    {
 1627|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   311k|        return this->get_value();
 1629|   311k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   311k|    {
  451|   311k|        return m_value;
  452|   311k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   153k|{
 8945|   153k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   153k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   153k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   153k|    static_cast<    \
  |  |  929|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   153k|    static_cast<    \
  |  |  929|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   153k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  33.8k|{
 8984|  33.8k|    T value;
 8985|  33.8k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  33.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.5k|    static_cast<    \
  |  |  929|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.5k|    static_cast<    \
  |  |  929|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  33.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  70.8k|{
 5165|  70.8k|    check_scan_arg_types<T>();
 5166|       |
 5167|  70.8k|    basic_scan_arg<Context> arg;
 5168|  70.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  70.8k|    arg.m_value = make_value<Context>(value);
 5170|  70.8k|    return arg;
 5171|  70.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  87.0k|    {
 2724|  87.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  87.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  87.0k|    {
 2705|  87.0k|        return decay_copy(t.begin());
 2706|  87.0k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  49.4M|{
 1949|  49.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  49.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  49.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.31M|    {
 2781|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.31M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.31M|    {
 2763|  2.31M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.31M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   169k|{
 8878|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   169k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   169k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   524k|{
 8665|   524k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   524k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   524k|{
 8602|   524k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   524k|    auto result = vscan_impl(buffer, format, args);
 8605|   524k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 483k]
  |  |  ------------------
  ------------------
 8606|  40.1k|        return unexpected(result.error());
 8607|  40.1k|    }
 8608|   483k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   524k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  1.15M|{
 4729|  1.15M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.15M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.15M|                  "\n"
 4733|  1.15M|                  "Unsupported range type given as input to a scanning "
 4734|  1.15M|                  "function.\n"
 4735|  1.15M|                  "A range needs to have a character type (value type) "
 4736|  1.15M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.15M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.15M|                  "to be included.\n"
 4739|  1.15M|                  "See the scnlib documentation for more details.");
 4740|  1.15M|    static_assert(
 4741|  1.15M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.15M|        "\n"
 4743|  1.15M|        "Unsupported range type given as input to a scanning "
 4744|  1.15M|        "function.\n"
 4745|  1.15M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.15M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.15M|        "not supported.");
 4748|  1.15M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.15M|                  "\n"
 4750|  1.15M|                  "Unsupported range type given as input to a scanning "
 4751|  1.15M|                  "function.\n"
 4752|  1.15M|                  "file_marker_found cannot be used as an "
 4753|  1.15M|                  "source range type to scn::scan.\n"
 4754|  1.15M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.15M|                  "and do not provide an explicit source range, "
 4756|  1.15M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.15M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.15M|                  "\n"
 4759|  1.15M|                  "Unsupported range type given as input to a scanning "
 4760|  1.15M|                  "function.\n"
 4761|  1.15M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.15M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.15M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.15M|                  "\n"
 4765|  1.15M|                  "Unsupported range type given as input to a scanning "
 4766|  1.15M|                  "function.\n"
 4767|  1.15M|                  "A range needs to model forward_range and have a valid "
 4768|  1.15M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.15M|                  "Examples of scannable ranges are std::string, "
 4770|  1.15M|                  "std::string_view, "
 4771|  1.15M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.15M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.15M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.15M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  1.15M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  1.15M|    else {
 4714|  1.15M|        return make_forward_scan_buffer(r);
 4715|  1.15M|    }
 4716|  1.15M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  1.15M|{
 4533|  1.15M|    return basic_scan_forward_buffer_impl(range);
 4534|  1.15M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  1.15M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  1.15M|          m_cursor(ranges::begin(*m_range))
 4419|  1.15M|    {
 4420|  1.15M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  1.15M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  1.15M|    {
 4391|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  1.15M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  1.15M|    {
 4159|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  1.15M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.22M|    {
 2724|  2.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.22M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.22M|    {
 2705|  2.22M|        return decay_copy(t.begin());
 2706|  2.22M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  3.29M|    {
 3326|  3.29M|        return m_iterator;
 3327|  3.29M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  14.4M|    {
 4424|  14.4M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 283k, False: 14.1M]
  ------------------
 4425|   283k|            return false;
 4426|   283k|        }
 4427|  14.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  14.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  14.1M|        }
 4430|  14.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 12.9M, False: 1.14M]
  ------------------
 4431|  12.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  12.9M|                                          this->m_current_view.begin(),
 4433|  12.9M|                                          this->m_current_view.end());
 4434|  12.9M|        }
 4435|  14.1M|        m_latest = *m_cursor;
 4436|  14.1M|        ++m_cursor;
 4437|  14.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  14.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  14.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  14.1M|        }
 4441|  14.1M|        return true;
 4442|  14.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  42.6M|    {
 2781|  42.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  42.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  42.6M|    {
 2763|  42.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  42.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  43.7M|    {
 3330|  43.7M|        return m_sentinel;
 3331|  43.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  1.15M|    {
 4079|  1.15M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  1.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  87.0k|        : base(unexpect, std::move(e.error())),
 1474|  87.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.0k|    {
 1476|  87.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  87.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.0k|          m_has_value(false)
  446|  87.0k|    {
  447|  87.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  1.06M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.06M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.06M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.06M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.06M|    {
 2724|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.06M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.06M|    {
 2705|  1.06M|        return decay_copy(t.begin());
 2706|  1.06M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  1.06M|{
 5920|  1.06M|    return ranges::end(source);
 5921|  1.06M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.06M|    {
 2781|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.06M|    {
 2763|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.06M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.06M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.06M|    {
  437|  1.06M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   338k|    {
 7986|   338k|        return m_str;
 7987|   338k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   338k|{
 8831|   338k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 311k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   311k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   338k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.15M|    {
 1598|  1.15M|        return has_value();
 1599|  1.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.31M|    {
  485|  2.31M|        return m_has_value;
  486|  2.31M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  87.0k|    {
 1604|  87.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  87.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  87.0k|        return this->get_unexpected().error();
 1606|  87.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  87.0k|    {
  468|  87.0k|        return m_unexpected;
  469|  87.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   373k|    {
 1177|   373k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   967k|    {
 1653|   967k|        return value();
 1654|   967k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.06M|    {
 1627|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06M|        return this->get_value();
 1629|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.06M|    {
  451|  1.06M|        return m_value;
  452|  1.06M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   344k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   344k|    static_cast<    \
  |  |  929|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   344k|    static_cast<    \
  |  |  929|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   344k|    {
 5840|   344k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  1.06M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.06M|    {
 5691|  1.06M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   344k|        : base(std::in_place, std::forward<U>(val)),
 1428|   344k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   344k|    {
 1430|   344k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   344k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   344k|    {
  437|   344k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  2.22M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.22M|    static_cast<    \
  |  |  929|  2.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.22M|    static_cast<    \
  |  |  929|  2.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.22M|    {
 3312|  2.22M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   338k|        : m_str(r.str)
 7981|   338k|    {
 7982|   338k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   373k|    {
 1598|   373k|        return has_value();
 1599|   373k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   717k|    {
  485|   717k|        return m_has_value;
  486|   717k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   344k|    {
 1673|   344k|        return &value();
 1674|   344k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   344k|    {
 1627|   344k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   344k|        return this->get_value();
 1629|   344k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   344k|    {
  451|   344k|        return m_value;
  452|   344k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  1.06M|    {
 5708|  1.06M|        return ranges::begin(m_range);
 5709|  1.06M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   169k|{
 8945|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   169k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   169k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   524k|{
 8683|   524k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   524k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   524k|{
 8618|   524k|#if !SCN_DISABLE_LOCALE
 8619|   524k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   524k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   524k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   524k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   524k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.1k, False: 483k]
  |  |  ------------------
  ------------------
 8626|  40.1k|        return unexpected(result.error());
 8627|  40.1k|    }
 8628|   483k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   524k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  34.8k|{
 8984|  34.8k|    T value;
 8985|  34.8k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  34.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  32.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.6k|    static_cast<    \
  |  |  929|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.6k|    static_cast<    \
  |  |  929|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  34.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|   108k|{
 8696|   108k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|   108k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   108k|{
 8642|   108k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   108k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   108k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.69k, False: 101k]
  |  |  ------------------
  ------------------
 8646|  6.69k|        return unexpected(result.error());
 8647|  6.69k|    }
 8648|   101k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   108k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   101k|    {
 1663|   101k|        return std::move(value());
 1664|   101k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   176k|{
 8878|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   176k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   176k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   353k|    {
 7986|   353k|        return m_str;
 7987|   353k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   353k|{
 8831|   353k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 326k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   326k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   353k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   389k|    {
 1177|   389k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   360k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   360k|    {
 5840|   360k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   360k|        : base(std::in_place, std::forward<U>(val)),
 1428|   360k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   360k|    {
 1430|   360k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   360k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   360k|    {
  437|   360k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   353k|        : m_str(r.str)
 7981|   353k|    {
 7982|   353k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   389k|    {
 1598|   389k|        return has_value();
 1599|   389k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   750k|    {
  485|   750k|        return m_has_value;
  486|   750k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   360k|    {
 1673|   360k|        return &value();
 1674|   360k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   360k|    {
 1627|   360k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   360k|        return this->get_value();
 1629|   360k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   360k|    {
  451|   360k|        return m_value;
  452|   360k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   176k|{
 8945|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   176k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   176k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  36.7k|{
 8984|  36.7k|    T value;
 8985|  36.7k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  36.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  36.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 34.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  36.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  34.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.4k|    static_cast<    \
  |  |  929|  34.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.4k|    static_cast<    \
  |  |  929|  34.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  36.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   178k|{
 8878|   178k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   178k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   178k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   356k|    {
 7986|   356k|        return m_str;
 7987|   356k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   356k|{
 8831|   356k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 329k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   329k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   356k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.0k|        : base(unexpect, std::move(e.error())),
 1474|  29.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.0k|    {
 1476|  29.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   393k|    {
 1177|   393k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   364k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   364k|    {
 5840|   364k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   364k|        : base(std::in_place, std::forward<U>(val)),
 1428|   364k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   364k|    {
 1430|   364k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   364k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   364k|    {
  437|   364k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   356k|        : m_str(r.str)
 7981|   356k|    {
 7982|   356k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   393k|    {
 1598|   393k|        return has_value();
 1599|   393k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   758k|    {
  485|   758k|        return m_has_value;
  486|   758k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   364k|    {
 1673|   364k|        return &value();
 1674|   364k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   364k|    {
 1627|   364k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   364k|        return this->get_value();
 1629|   364k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   364k|    {
  451|   364k|        return m_value;
  452|   364k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   178k|{
 8945|   178k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   178k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   178k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  37.0k|{
 8984|  37.0k|    T value;
 8985|  37.0k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  37.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  37.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 34.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.23k|    }                                                  \
  |  |  |  | 3667|  37.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  34.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.8k|    static_cast<    \
  |  |  929|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.8k|    static_cast<    \
  |  |  929|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  37.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   178k|    {
 2724|   178k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   178k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   178k|    {
 2705|   178k|        return decay_copy(t.begin());
 2706|   178k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.75M|{
 1949|  3.75M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.75M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.13M|    {
 2781|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.13M|    {
 2763|  1.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.13M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5405|   318k|{
 5406|   318k|    detail::check_scan_arg_types<Args...>();
 5407|   318k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   318k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5357|   318k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   318k|    {
 5359|   318k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   318k|    {
 5370|   318k|        return {detail::make_arg<
 5371|   318k|            kind, Context,
 5372|   318k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   318k|                                 typename Context::char_type>::value>(args)...};
 5374|   318k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   318k|{
 5180|   318k|    return make_value<Context>(value).ref_value;
 5181|   318k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5129|   347k|{
 5130|   347k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   347k|                                  needs_context_tag>) {
 5134|   347k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   347k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4968|   347k|    {                                                                        \
 4969|   347k|        return val;                                                          \
 4970|   347k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   258k|{
 8602|   258k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   258k|    auto result = vscan_impl(buffer, format, args);
 8605|   258k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 177k]
  |  |  ------------------
  ------------------
 8606|  80.3k|        return unexpected(result.error());
 8607|  80.3k|    }
 8608|   177k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   258k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   566k|{
 4729|   566k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   566k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   566k|                  "\n"
 4733|   566k|                  "Unsupported range type given as input to a scanning "
 4734|   566k|                  "function.\n"
 4735|   566k|                  "A range needs to have a character type (value type) "
 4736|   566k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   566k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   566k|                  "to be included.\n"
 4739|   566k|                  "See the scnlib documentation for more details.");
 4740|   566k|    static_assert(
 4741|   566k|        !std::is_same_v<T, custom_char_traits>,
 4742|   566k|        "\n"
 4743|   566k|        "Unsupported range type given as input to a scanning "
 4744|   566k|        "function.\n"
 4745|   566k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   566k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   566k|        "not supported.");
 4748|   566k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   566k|                  "\n"
 4750|   566k|                  "Unsupported range type given as input to a scanning "
 4751|   566k|                  "function.\n"
 4752|   566k|                  "file_marker_found cannot be used as an "
 4753|   566k|                  "source range type to scn::scan.\n"
 4754|   566k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   566k|                  "and do not provide an explicit source range, "
 4756|   566k|                  "or use scn::scan with a FILE* directly.");
 4757|   566k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   566k|                  "\n"
 4759|   566k|                  "Unsupported range type given as input to a scanning "
 4760|   566k|                  "function.\n"
 4761|   566k|                  "In order to be scannable, a range needs to satisfy "
 4762|   566k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   566k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   566k|                  "\n"
 4765|   566k|                  "Unsupported range type given as input to a scanning "
 4766|   566k|                  "function.\n"
 4767|   566k|                  "A range needs to model forward_range and have a valid "
 4768|   566k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   566k|                  "Examples of scannable ranges are std::string, "
 4770|   566k|                  "std::string_view, "
 4771|   566k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   566k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   566k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   566k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   566k|{
 4668|   566k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   566k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   566k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   566k|    {
 2855|   566k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   566k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   566k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   566k|    {
 2836|   566k|        return t.data();
 2837|   566k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   566k|    {
 3229|   566k|        return detail::to_address(ranges::begin(derived()));
 3230|   566k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.84M|{
  326|  1.84M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.84M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.84M|{
  304|  1.84M|    return p;
  305|  1.84M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   959k|    {
 2724|   959k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   959k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   959k|    {
 2705|   959k|        return decay_copy(t.begin());
 2706|   959k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  19.9M|    {
 3326|  19.9M|        return m_iterator;
 3327|  19.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   566k|    {
 3185|   566k|        return static_cast<const D&>(*this);
 3186|   566k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   566k|    {
 2930|   566k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   566k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   566k|    {
 2896|   566k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   566k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   566k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.53M|    {
 3342|  2.53M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.53M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   174k|        : base(unexpect, std::move(e.error())),
 1474|   174k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   174k|    {
 1476|   174k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   174k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   174k|          m_has_value(false)
  446|   174k|    {
  447|   174k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   566k|    {
 1177|   566k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   392k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   392k|                      ranges::iterator_t<SourceRange>>) {
 5935|   392k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   392k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.08M|    {
 2724|  1.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.08M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.08M|    {
 2705|  1.08M|        return decay_copy(t.begin());
 2706|  1.08M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|   392k|{
 5920|   392k|    return ranges::end(source);
 5921|   392k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   392k|    {
 2781|   392k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   392k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   392k|    {
 2763|   392k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   392k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  11.4M|    {
 3330|  11.4M|        return m_sentinel;
 3331|  11.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   392k|        : base(std::in_place, std::forward<U>(val)),
 1428|   392k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   392k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   392k|    {
  437|   392k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   159k|    {
 7986|   159k|        return m_str;
 7987|   159k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   318k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   318k|    {
 5436|   318k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5388|   318k|    {
 5389|   318k|        return m_argptrs;
 5390|   318k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.03M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.03M|    {
 5488|  1.03M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   159k|{
 8831|   159k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 105k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   105k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   159k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   566k|    {
 1598|   566k|        return has_value();
 1599|   566k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   174k|    {
 1604|   174k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   174k|        return this->get_unexpected().error();
 1606|   174k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   174k|    {
  468|   174k|        return m_unexpected;
  469|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   173k|    {
 1177|   173k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   355k|    {
 1653|   355k|        return value();
 1654|   355k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   115k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   115k|    {
 5840|   115k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|   392k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   392k|    {
 5691|   392k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   115k|        : base(std::in_place, std::forward<U>(val)),
 1428|   115k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   115k|    {
 1430|   115k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   115k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   115k|    {
  437|   115k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5383|   318k|    {
 5384|   318k|        return m_args;
 5385|   318k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  7.13M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  7.13M|    static_cast<    \
  |  |  929|  7.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  7.13M|    static_cast<    \
  |  |  929|  7.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  7.13M|    {
 3312|  7.13M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  1.03M|{
 7707|  1.03M|    return s;
 7708|  1.03M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  1.03M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   159k|        : m_str(r.str)
 7981|   159k|    {
 7982|   159k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   173k|    {
 1598|   173k|        return has_value();
 1599|   173k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   289k|    {
  485|   289k|        return m_has_value;
  486|   289k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   115k|    {
 1673|   115k|        return &value();
 1674|   115k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   115k|    {
 1627|   115k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   115k|        return this->get_value();
 1629|   115k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   115k|    {
  451|   115k|        return m_value;
  452|   115k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|   392k|    {
 5708|   392k|        return ranges::begin(m_range);
 5709|   392k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   258k|{
 8618|   258k|#if !SCN_DISABLE_LOCALE
 8619|   258k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   258k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   258k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   258k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   258k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 177k]
  |  |  ------------------
  ------------------
 8626|  80.3k|        return unexpected(result.error());
 8627|  80.3k|    }
 8628|   177k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   258k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  29.1k|{
 5165|  29.1k|    check_scan_arg_types<T>();
 5166|       |
 5167|  29.1k|    basic_scan_arg<Context> arg;
 5168|  29.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  29.1k|    arg.m_value = make_value<Context>(value);
 5170|  29.1k|    return arg;
 5171|  29.1k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  1.13M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  50.2k|{
 8642|  50.2k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  50.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  50.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 36.8k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  36.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  50.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  36.8k|    {
 1663|  36.8k|        return std::move(value());
 1664|  36.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|   354k|{
 5406|   354k|    detail::check_scan_arg_types<Args...>();
 5407|   354k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   354k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|   354k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   354k|    {
 5359|   354k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   354k|    {
 5370|   354k|        return {detail::make_arg<
 5371|   354k|            kind, Context,
 5372|   354k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   354k|                                 typename Context::char_type>::value>(args)...};
 5374|   354k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   354k|{
 5180|   354k|    return make_value<Context>(value).ref_value;
 5181|   354k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|   389k|{
 5130|   389k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   389k|                                  needs_context_tag>) {
 5134|   389k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   389k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   389k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|   389k|    {                                                                        \
 4969|   389k|        return val;                                                          \
 4970|   389k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   177k|    {
 7986|   177k|        return m_str;
 7987|   177k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   354k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   354k|    {
 5436|   354k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|   354k|    {
 5389|   354k|        return m_argptrs;
 5390|   354k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   177k|{
 8831|   177k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 123k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   123k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   177k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   136k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   136k|    {
 5840|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   136k|        : base(std::in_place, std::forward<U>(val)),
 1428|   136k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   136k|    {
 1430|   136k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   136k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   136k|    {
  437|   136k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|   354k|    {
 5384|   354k|        return m_args;
 5385|   354k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   177k|        : m_str(r.str)
 7981|   177k|    {
 7982|   177k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   194k|    {
 1598|   194k|        return has_value();
 1599|   194k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   331k|    {
  485|   331k|        return m_has_value;
  486|   331k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   136k|    {
 1673|   136k|        return &value();
 1674|   136k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   136k|    {
 1627|   136k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   136k|        return this->get_value();
 1629|   136k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   136k|    {
  451|   136k|        return m_value;
  452|   136k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  35.0k|{
 5165|  35.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  35.0k|    basic_scan_arg<Context> arg;
 5168|  35.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  35.0k|    arg.m_value = make_value<Context>(value);
 5170|  35.0k|    return arg;
 5171|  35.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5405|   360k|{
 5406|   360k|    detail::check_scan_arg_types<Args...>();
 5407|   360k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   360k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5357|   360k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   360k|    {
 5359|   360k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   360k|    {
 5370|   360k|        return {detail::make_arg<
 5371|   360k|            kind, Context,
 5372|   360k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   360k|                                 typename Context::char_type>::value>(args)...};
 5374|   360k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   360k|{
 5180|   360k|    return make_value<Context>(value).ref_value;
 5181|   360k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5129|   396k|{
 5130|   396k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   396k|                                  needs_context_tag>) {
 5134|   396k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   396k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4968|   396k|    {                                                                        \
 4969|   396k|        return val;                                                          \
 4970|   396k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   180k|    {
 7986|   180k|        return m_str;
 7987|   180k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   360k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   360k|    {
 5436|   360k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5388|   360k|    {
 5389|   360k|        return m_argptrs;
 5390|   360k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   180k|{
 8831|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 126k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   126k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   126k|    static_cast<    \
  |  |  929|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   126k|    static_cast<    \
  |  |  929|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   180k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   198k|    {
 1177|   198k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   140k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   140k|    {
 5840|   140k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5383|   360k|    {
 5384|   360k|        return m_args;
 5385|   360k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   180k|        : m_str(r.str)
 7981|   180k|    {
 7982|   180k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   198k|    {
 1598|   198k|        return has_value();
 1599|   198k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   338k|    {
  485|   338k|        return m_has_value;
  486|   338k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   140k|    {
 1673|   140k|        return &value();
 1674|   140k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   140k|    {
 1627|   140k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   140k|        return this->get_value();
 1629|   140k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   140k|    {
  451|   140k|        return m_value;
  452|   140k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  36.0k|{
 5165|  36.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  36.0k|    basic_scan_arg<Context> arg;
 5168|  36.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  36.0k|    arg.m_value = make_value<Context>(value);
 5170|  36.0k|    return arg;
 5171|  36.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   174k|    {
 2724|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   174k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   174k|    {
 2705|   174k|        return decay_copy(t.begin());
 2706|   174k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  11.2M|{
 1949|  11.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.13M|    {
 2781|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.13M|    {
 2763|  1.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.13M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   258k|{
 8602|   258k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   258k|    auto result = vscan_impl(buffer, format, args);
 8605|   258k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 177k]
  |  |  ------------------
  ------------------
 8606|  80.3k|        return unexpected(result.error());
 8607|  80.3k|    }
 8608|   177k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   258k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   566k|{
 4729|   566k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   566k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   566k|                  "\n"
 4733|   566k|                  "Unsupported range type given as input to a scanning "
 4734|   566k|                  "function.\n"
 4735|   566k|                  "A range needs to have a character type (value type) "
 4736|   566k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   566k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   566k|                  "to be included.\n"
 4739|   566k|                  "See the scnlib documentation for more details.");
 4740|   566k|    static_assert(
 4741|   566k|        !std::is_same_v<T, custom_char_traits>,
 4742|   566k|        "\n"
 4743|   566k|        "Unsupported range type given as input to a scanning "
 4744|   566k|        "function.\n"
 4745|   566k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   566k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   566k|        "not supported.");
 4748|   566k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   566k|                  "\n"
 4750|   566k|                  "Unsupported range type given as input to a scanning "
 4751|   566k|                  "function.\n"
 4752|   566k|                  "file_marker_found cannot be used as an "
 4753|   566k|                  "source range type to scn::scan.\n"
 4754|   566k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   566k|                  "and do not provide an explicit source range, "
 4756|   566k|                  "or use scn::scan with a FILE* directly.");
 4757|   566k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   566k|                  "\n"
 4759|   566k|                  "Unsupported range type given as input to a scanning "
 4760|   566k|                  "function.\n"
 4761|   566k|                  "In order to be scannable, a range needs to satisfy "
 4762|   566k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   566k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   566k|                  "\n"
 4765|   566k|                  "Unsupported range type given as input to a scanning "
 4766|   566k|                  "function.\n"
 4767|   566k|                  "A range needs to model forward_range and have a valid "
 4768|   566k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   566k|                  "Examples of scannable ranges are std::string, "
 4770|   566k|                  "std::string_view, "
 4771|   566k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   566k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   566k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   566k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   566k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   566k|    else {
 4714|   566k|        return make_forward_scan_buffer(r);
 4715|   566k|    }
 4716|   566k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   566k|{
 4533|   566k|    return basic_scan_forward_buffer_impl(range);
 4534|   566k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   566k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   566k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   566k|          m_cursor(ranges::begin(*m_range))
 4419|   566k|    {
 4420|   566k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   566k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   566k|    {
 4391|   566k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   566k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   566k|    {
 4159|   566k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   566k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   958k|    {
 2724|   958k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   958k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   958k|    {
 2705|   958k|        return decay_copy(t.begin());
 2706|   958k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  1.35M|    {
 3326|  1.35M|        return m_iterator;
 3327|  1.35M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  2.84M|    {
 4424|  2.84M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 179k, False: 2.66M]
  ------------------
 4425|   179k|            return false;
 4426|   179k|        }
 4427|  2.66M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.66M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.66M|        }
 4430|  2.66M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 2.10M, False: 564k]
  ------------------
 4431|  2.10M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  2.10M|                                          this->m_current_view.begin(),
 4433|  2.10M|                                          this->m_current_view.end());
 4434|  2.10M|        }
 4435|  2.66M|        m_latest = *m_cursor;
 4436|  2.66M|        ++m_cursor;
 4437|  2.66M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.66M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.66M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.66M|        }
 4441|  2.66M|        return true;
 4442|  2.84M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  8.17M|    {
 2781|  8.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  8.17M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  8.17M|    {
 2763|  8.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  8.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  8.17M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  8.56M|    {
 3330|  8.56M|        return m_sentinel;
 3331|  8.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   566k|    {
 4079|   566k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   566k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   566k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   174k|        : base(unexpect, std::move(e.error())),
 1474|   174k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   174k|    {
 1476|   174k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   174k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   174k|          m_has_value(false)
  446|   174k|    {
  447|   174k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   566k|    {
 1177|   566k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   392k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   392k|                      ranges::iterator_t<SourceRange>>) {
 5935|   392k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   392k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   392k|    {
 2724|   392k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   392k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   392k|    {
 2705|   392k|        return decay_copy(t.begin());
 2706|   392k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   392k|{
 5920|   392k|    return ranges::end(source);
 5921|   392k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   392k|    {
 2781|   392k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   392k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   392k|    {
 2763|   392k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   392k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   392k|        : base(std::in_place, std::forward<U>(val)),
 1428|   392k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   392k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   392k|    {
  437|   392k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   159k|    {
 7986|   159k|        return m_str;
 7987|   159k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   159k|{
 8831|   159k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 105k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   105k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   159k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   566k|    {
 1598|   566k|        return has_value();
 1599|   566k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   174k|    {
 1604|   174k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   174k|        return this->get_unexpected().error();
 1606|   174k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   174k|    {
  468|   174k|        return m_unexpected;
  469|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   173k|    {
 1177|   173k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   355k|    {
 1653|   355k|        return value();
 1654|   355k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   115k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   115k|    {
 5840|   115k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   392k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   392k|    {
 5691|   392k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   115k|        : base(std::in_place, std::forward<U>(val)),
 1428|   115k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   115k|    {
 1430|   115k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   115k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   115k|    {
  437|   115k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   958k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   958k|    static_cast<    \
  |  |  929|   958k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   958k|    static_cast<    \
  |  |  929|   958k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   958k|    {
 3312|   958k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   159k|        : m_str(r.str)
 7981|   159k|    {
 7982|   159k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   173k|    {
 1598|   173k|        return has_value();
 1599|   173k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   289k|    {
  485|   289k|        return m_has_value;
  486|   289k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   115k|    {
 1673|   115k|        return &value();
 1674|   115k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   115k|    {
 1627|   115k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   115k|        return this->get_value();
 1629|   115k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   115k|    {
  451|   115k|        return m_value;
  452|   115k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   392k|    {
 5708|   392k|        return ranges::begin(m_range);
 5709|   392k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   258k|{
 8618|   258k|#if !SCN_DISABLE_LOCALE
 8619|   258k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   258k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   258k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   258k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   258k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.3k, False: 177k]
  |  |  ------------------
  ------------------
 8626|  80.3k|        return unexpected(result.error());
 8627|  80.3k|    }
 8628|   177k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   258k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  50.1k|{
 8642|  50.1k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  50.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  50.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 36.7k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  36.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  36.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  50.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  36.7k|    {
 1663|  36.7k|        return std::move(value());
 1664|  36.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   177k|    {
 7986|   177k|        return m_str;
 7987|   177k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   177k|{
 8831|   177k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 123k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   123k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   177k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   136k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   136k|    {
 5840|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   136k|        : base(std::in_place, std::forward<U>(val)),
 1428|   136k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   136k|    {
 1430|   136k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   136k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   136k|    {
  437|   136k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   177k|        : m_str(r.str)
 7981|   177k|    {
 7982|   177k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   194k|    {
 1598|   194k|        return has_value();
 1599|   194k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   331k|    {
  485|   331k|        return m_has_value;
  486|   331k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   136k|    {
 1673|   136k|        return &value();
 1674|   136k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   136k|    {
 1627|   136k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   136k|        return this->get_value();
 1629|   136k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   136k|    {
  451|   136k|        return m_value;
  452|   136k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   180k|    {
 7986|   180k|        return m_str;
 7987|   180k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   180k|{
 8831|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.5k, False: 126k]
  |  |  ------------------
  ------------------
 8832|  53.5k|        return unexpected(result.error());
 8833|  53.5k|    }
 8834|   126k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   126k|    static_cast<    \
  |  |  929|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   126k|    static_cast<    \
  |  |  929|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   180k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   198k|    {
 1177|   198k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   140k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   140k|    {
 5840|   140k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   180k|        : m_str(r.str)
 7981|   180k|    {
 7982|   180k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   198k|    {
 1598|   198k|        return has_value();
 1599|   198k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   338k|    {
  485|   338k|        return m_has_value;
  486|   338k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   140k|    {
 1673|   140k|        return &value();
 1674|   140k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   140k|    {
 1627|   140k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   140k|        return this->get_value();
 1629|   140k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   140k|    {
  451|   140k|        return m_value;
  452|   140k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  3.65M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  3.65M|    {
 3564|  3.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  3.65M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  15.1M|    {
 3570|  15.1M|        return m_code == good;
 3571|  15.1M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   401k|    {
 3581|   401k|        return m_code;
 3582|   401k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  52.1M|    {
 3326|  52.1M|        return m_iterator;
 3327|  52.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  23.7M|    {
 3326|  23.7M|        return m_iterator;
 3327|  23.7M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  2.36M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.73M|    {
 6314|  1.73M|        m_specs.type = type;
 6315|  1.73M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  2.36M|    {
 6387|  2.36M|        return static_cast<bool>(m_error);
 6388|  2.36M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   401k|{
 3605|   401k|    return a.code() == b;
 3606|   401k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   401k|{
 3609|   401k|    return !(a == b);
 3610|   401k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  4.82M|{
 4043|       |    // Pattern_White_Space property
 4044|  4.82M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 4.62M, False: 204k]
  |  Branch (4044:27): [True: 877k, False: 3.74M]
  ------------------
 4045|  4.82M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 52.9k, False: 3.89M]
  ------------------
 4046|  4.82M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 47.4k, False: 3.84M]
  ------------------
 4047|  4.82M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 3.93k, False: 3.84M]
  ------------------
 4048|  4.82M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 19.7k, False: 3.82M]
  ------------------
 4049|  4.82M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 934k, False: 2.88M]
  ------------------
 4050|  4.82M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 154, False: 2.88M]
  ------------------
 4051|  4.82M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   636k|{
 7074|   636k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 636k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 636k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 636k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 636k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 636k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 636k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 636k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 636k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 636k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 636k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 636k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 636k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 636k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 636k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 636k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 636k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|   198k|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 198k, False: 438k]
  ------------------
 7102|   415k|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 217k, False: 419k]
  ------------------
 7103|   636k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 221k, False: 415k]
  ------------------
 7104|   636k|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 636k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 636k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 636k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 636k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 636k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 636k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   636k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   636k|            SCN_CLANG_POP
 7121|   636k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   636k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.77M|    {
 2896|  2.77M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.77M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.77M|    {
 2930|  2.77M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.77M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.77M|    {
 2953|  2.77M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.77M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.77M|    {
 2962|  2.77M|        return fn::impl(std::forward<T>(t));
 2963|  2.77M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|    994|{
 3650|    994|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    994|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.40k|{
 3650|  2.40k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.40k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  28.9k|{
 3650|  28.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  28.9k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7203|  2.36M|{
 7204|  2.36M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7204:9): [True: 1.73M, False: 636k]
  ------------------
 7205|  2.36M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7205:10): [True: 0, False: 1.73M]
  ------------------
 7206|  1.73M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7206:10): [True: 0, False: 1.73M]
  ------------------
 7207|      0|        SCN_UNLIKELY_ATTR
 7208|      0|        return handler.on_error("Invalid type specifier for float type");
 7209|      0|    }
 7210|  2.36M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|   327M|    {
 4203|   327M|        assert(m_begin);
 4204|   327M|        return m_end == nullptr;
 4205|   327M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   871k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   871k|    else {
 3716|   871k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   871k|    }
 3718|   871k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  4.35M|    {
 4220|  4.35M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 4.35M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  4.35M|        return parent()->get_segment_starting_at(position());
 4226|  4.35M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|   182M|    {
 4214|   182M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   182M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   182M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   182M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  4.35M|    {
 4109|  4.35M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.88M, False: 2.46M]
  |  |  ------------------
  ------------------
 4110|  4.35M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.88M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.88M|        }
 4113|  2.46M|        const auto start = pos - m_putback_buffer.size();
 4114|  2.46M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  2.46M|        return m_current_view.substr(start);
 4116|  2.46M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|  3.04M|    {
 4209|  3.04M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  3.04M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  3.04M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  7.99M|    {
 4198|  7.99M|        return m_position;
 4199|  7.99M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  3.47M|    {
 4131|  3.47M|        return m_is_contiguous;
 4132|  3.47M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|  76.1M|    {
 4203|  76.1M|        assert(m_begin);
 4204|  76.1M|        return m_end == nullptr;
 4205|  76.1M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   381k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   381k|    else {
 3716|   381k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   381k|    }
 3718|   381k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  1.35M|    {
 4220|  1.35M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.35M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.35M|        return parent()->get_segment_starting_at(position());
 4226|  1.35M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  40.7M|    {
 4214|  40.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  40.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  40.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  40.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  1.35M|    {
 4109|  1.35M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 775k, False: 581k]
  |  |  ------------------
  ------------------
 4110|  1.35M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   775k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   775k|        }
 4113|   581k|        const auto start = pos - m_putback_buffer.size();
 4114|   581k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   581k|        return m_current_view.substr(start);
 4116|   581k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|  1.48M|    {
 4209|  1.48M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  1.48M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  1.48M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  2.97M|    {
 4198|  2.97M|        return m_position;
 4199|  2.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  1.69M|    {
 4131|  1.69M|        return m_is_contiguous;
 4132|  1.69M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  4.49M|    {
 3180|  4.49M|        return static_cast<D&>(*this);
 3181|  4.49M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.49M|    {
 3221|  4.49M|        return detail::to_address(ranges::begin(derived()));
 3222|  4.49M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   484k|    {
 3180|   484k|        return static_cast<D&>(*this);
 3181|   484k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   484k|    {
 3221|   484k|        return detail::to_address(ranges::begin(derived()));
 3222|   484k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   831k|    {
 8180|   831k|        return ranges::subrange{begin(), end()};
 8181|   831k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|  2.42M|    {
 8164|  2.42M|        return m_current;
 8165|  2.42M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   831k|    {
 8172|   831k|        return ranges::default_sentinel;
 8173|   831k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  12.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.7M|    static_cast<    \
  |  |  929|  12.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.7M|    static_cast<    \
  |  |  929|  12.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  12.7M|    {
 3312|  12.7M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  5.03M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.15M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 18.9k]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  18.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.2M|    {
  485|  12.2M|        return m_has_value;
  486|  12.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.14M|    {
 1663|  4.14M|        return std::move(value());
 1664|  4.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  4.75M|    {
 1627|  4.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.75M|        return this->get_value();
 1629|  4.75M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.75M|    {
  451|  4.75M|        return m_value;
  452|  4.75M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  5.10M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.10M|    {
 1430|  5.10M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.10M|    {
  437|  5.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.53M|    {
 1177|  6.53M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  41.9k|{
 1211|  41.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  41.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  54.2k|    {
 1614|  54.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.2k|        return std::move(this->get_unexpected().error());
 1616|  54.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  73.3k|    {
  468|  73.3k|        return m_unexpected;
  469|  73.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   424k|    {
  361|   424k|        return m_unexpected;
  362|   424k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.14M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.14M|    {
 1486|  1.14M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.36M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.36M|          m_has_value(false)
  446|  1.36M|    {
  447|  1.36M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   416k|    {
 8180|   416k|        return ranges::subrange{begin(), end()};
 8181|   416k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.11M|    {
 8164|  1.11M|        return m_current;
 8165|  1.11M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   416k|    {
 8172|   416k|        return ranges::default_sentinel;
 8173|   416k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  5.76M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.76M|    static_cast<    \
  |  |  929|  5.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.76M|    static_cast<    \
  |  |  929|  5.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.76M|    {
 3312|  5.76M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   566k|    {
 1837|   566k|        return detail::transform_error_impl(std::move(*this),
 1838|   566k|                                            std::forward<F>(f));
 1839|   566k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   566k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   566k|    else {
 1333|   566k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   566k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   566k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 562k, False: 3.60k]
  |  |  ------------------
  ------------------
 1335|   566k|                   ? result(*std::forward<Exp>(exp))
 1336|   566k|                   : result(unexpect,
 1337|  3.60k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.60k|                                           std::forward<Exp>(exp).error()));
 1339|   566k|    }
 1340|   566k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.43M|    {
  485|  5.43M|        return m_has_value;
  486|  5.43M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.99M|    {
 1663|  1.99M|        return std::move(value());
 1664|  1.99M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.01M|    {
 1627|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01M|        return this->get_value();
 1629|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.01M|    {
  451|  2.01M|        return m_value;
  452|  2.01M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.02M|    {
 1430|  2.02M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.02M|    {
  437|  2.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.23M|    {
 1177|  3.23M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  57.6k|    {
 1614|  57.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.6k|        return std::move(this->get_unexpected().error());
 1616|  57.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  59.6k|    {
  468|  59.6k|        return m_unexpected;
  469|  59.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   730k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   730k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   730k|    {
 1486|   730k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.20M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.20M|          m_has_value(false)
  446|  1.20M|    {
  447|  1.20M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   153k|        : m_unexpected(std::forward<Err>(e))
  346|   153k|    {
  347|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   153k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   192k|        : base(unexpect, std::move(e.error())),
 1474|   192k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   192k|    {
 1476|   192k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.16M|          m_has_value(false)
  446|  1.16M|    {
  447|  1.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.64M|    {
 1177|  5.64M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.43M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.43M|    {
 1430|  4.43M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.43M|    {
  437|  4.43M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  6.62M|    {
 1598|  6.62M|        return has_value();
 1599|  6.62M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.3M|    {
  485|  10.3M|        return m_has_value;
  486|  10.3M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   231k|    {
 1604|   231k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   231k|        return this->get_unexpected().error();
 1606|   231k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   231k|    {
  468|   231k|        return m_unexpected;
  469|   231k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.85M|    {
 1663|  2.85M|        return std::move(value());
 1664|  2.85M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  3.53M|    {
 1627|  3.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.53M|        return this->get_value();
 1629|  3.53M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.53M|    {
  451|  3.53M|        return m_value;
  452|  3.53M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   387k|        : base(unexpect, std::move(e.error())),
 1474|   387k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   387k|    {
 1476|   387k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.02M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.02M|          m_has_value(false)
  446|  1.02M|    {
  447|  1.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.23M|    {
 1177|  3.23M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.20M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.20M|    {
 1430|  2.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.20M|    {
  437|  2.20M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.80M|    {
 1598|  3.80M|        return has_value();
 1599|  3.80M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.98M|    {
  485|  5.98M|        return m_has_value;
  486|  5.98M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   465k|    {
 1604|   465k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   465k|        return this->get_unexpected().error();
 1606|   465k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   465k|    {
  468|   465k|        return m_unexpected;
  469|   465k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.44M|    {
 1663|  1.44M|        return std::move(value());
 1664|  1.44M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.72M|    {
 1627|  1.72M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.72M|        return this->get_value();
 1629|  1.72M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.72M|    {
  451|  1.72M|        return m_value;
  452|  1.72M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.00M|    {
 1837|  1.00M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.00M|                                            std::forward<F>(f));
 1839|  1.00M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.00M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.00M|    else {
 1333|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 986k, False: 15.7k]
  |  |  ------------------
  ------------------
 1335|  1.00M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00M|                   : result(unexpect,
 1337|  15.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.7k|                                           std::forward<Exp>(exp).error()));
 1339|  1.00M|    }
 1340|  1.00M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.80M|    {
  485|  3.80M|        return m_has_value;
  486|  3.80M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   986k|    {
 1663|   986k|        return std::move(value());
 1664|   986k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.30M|    {
 1627|  1.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30M|        return this->get_value();
 1629|  1.30M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.30M|    {
  451|  1.30M|        return m_value;
  452|  1.30M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.7k|    {
 1614|  15.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.7k|        return std::move(this->get_unexpected().error());
 1616|  15.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.4k|    {
  468|  20.4k|        return m_unexpected;
  469|  20.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   968k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   968k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   968k|    {
 1486|   968k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  10.4M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   216k|        : base(unexpect, std::move(e.error())),
 1474|   216k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   216k|    {
 1476|   216k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  10.1M|    {
 4289|  10.1M|        return x.is_at_end();
 4290|  10.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  24.7M|    {
 4333|  24.7M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 24.7M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  24.7M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 24.7M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  24.7M|        return !read_at_position();
 4340|  24.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|   106M|    {
 4313|   106M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   106M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   106M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 106M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   106M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   106M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 92.5M, False: 14.4M]
  |  |  ------------------
  ------------------
 4320|  92.5M|            return true;
 4321|  92.5M|        }
 4322|       |
 4323|  28.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 14.4M, False: 14.1M]
  ------------------
 4324|  14.4M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 283k, False: 14.1M]
  ------------------
 4325|   283k|                return false;
 4326|   283k|            }
 4327|  14.4M|        }
 4328|  14.1M|        return true;
 4329|  14.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|   138M|    {
 4089|   138M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   138M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  27.8M|    {
 4248|  27.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  27.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 27.8M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  27.8M|        auto res = read_at_position();
 4257|  27.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  27.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  27.8M|        return parent()->get_character_at(m_position);
 4259|  27.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  27.8M|    {
 4120|  27.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  27.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.6M, False: 10.1M]
  |  |  ------------------
  ------------------
 4121|  27.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  17.6M|            return m_putback_buffer[pos];
 4123|  17.6M|        }
 4124|  10.1M|        const auto start = pos - m_putback_buffer.size();
 4125|  10.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  10.1M|        return m_current_view[start];
 4127|  10.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  7.38M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.38M|    {
 1430|  7.38M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.38M|    {
  437|  7.38M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.46M|    {
 1177|  7.46M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   144k|        : m_unexpected(std::forward<Err>(e))
  346|   144k|    {
  347|   144k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   144k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  73.3k|        : base(unexpect, std::move(e.error())),
 1474|  73.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  73.3k|    {
 1476|  73.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  73.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  73.3k|          m_has_value(false)
  446|  73.3k|    {
  447|  73.3k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   212k|        : m_unexpected(std::forward<Args>(args)...)
  355|   212k|    {
  356|   212k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   212k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   212k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.26M|    {
 1598|  3.26M|        return has_value();
 1599|  3.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   614k|    {
 1653|   614k|        return value();
 1654|   614k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  26.1M|    {
 4283|  26.1M|        return !(lhs == rhs);
 4284|  26.1M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  29.1M|    {
 4278|  29.1M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 29.1M, False: 0]
  |  Branch (4278:46): [True: 3.81M, False: 25.3M]
  ------------------
 4279|  29.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  54.3M|    {
 4234|  54.3M|        ++m_position;
 4235|  54.3M|        (void)read_at_position();
 4236|  54.3M|        return *this;
 4237|  54.3M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  68.2k|        : m_unexpected(std::forward<Err>(e))
  346|  68.2k|    {
  347|  68.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  68.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  68.2k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  14.3k|        : base(unexpect, std::move(e.error())),
 1474|  14.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.3k|    {
 1476|  14.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  14.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.3k|          m_has_value(false)
  446|  14.3k|    {
  447|  14.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.58M|    {
 1177|  1.58M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.56M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.56M|    {
 1430|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.56M|    {
  437|  1.56M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.58M|    {
 1598|  1.58M|        return has_value();
 1599|  1.58M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.16M|    {
  485|  3.16M|        return m_has_value;
  486|  3.16M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  14.3k|    {
 1604|  14.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.3k|        return this->get_unexpected().error();
 1606|  14.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.3k|    {
  468|  14.3k|        return m_unexpected;
  469|  14.3k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.56M|    {
 1663|  1.56M|        return std::move(value());
 1664|  1.56M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.56M|    {
 1627|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56M|        return this->get_value();
 1629|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.56M|    {
  451|  1.56M|        return m_value;
  452|  1.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  35.4M|    {
 3330|  35.4M|        return m_sentinel;
 3331|  35.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  61.7k|        : m_unexpected(std::forward<Err>(e))
  346|  61.7k|    {
  347|  61.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  61.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  61.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  13.1M|    {
  361|  13.1M|        return m_unexpected;
  362|  13.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.57M|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.57M|    {
  356|  3.57M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.57M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.57M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  15.9M|        : m_unexpected(std::forward<Err>(e))
  346|  15.9M|    {
  347|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  15.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  15.9M|    {
  361|  15.9M|        return m_unexpected;
  362|  15.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  15.9M|        : m_unexpected(std::forward<Args>(args)...)
  355|  15.9M|    {
  356|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   143k|{
 1211|   143k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   143k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.37M|        : m_unexpected(std::forward<Err>(e))
  346|  3.37M|    {
  347|  3.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.37M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  19.0k|    {
 1604|  19.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.0k|        return this->get_unexpected().error();
 1606|  19.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.18M|        : base(unexpect, std::move(e.error())),
 1474|  1.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.18M|    {
 1476|  1.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.21M|          m_has_value(false)
  446|  1.21M|    {
  447|  1.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.7M|    {
 1177|  12.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   620k|        : base(std::in_place, std::forward<U>(val)),
 1428|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   620k|    {
 1430|   620k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   620k|    {
  437|   620k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  6.43M|        : base(unexpect, std::move(e.error())),
 1474|  6.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.43M|    {
 1476|  6.43M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.43M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.43M|          m_has_value(false)
  446|  6.43M|    {
  447|  6.43M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  13.8M|    {
 1598|  13.8M|        return has_value();
 1599|  13.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.4M|    {
  485|  24.4M|        return m_has_value;
  486|  24.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.24M|    {
 1604|  3.24M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.24M|        return this->get_unexpected().error();
 1606|  3.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.24M|    {
  468|  3.24M|        return m_unexpected;
  469|  3.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.25M|    {
 1430|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.25M|    {
  437|  1.25M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    288|        : base(unexpect, std::move(e.error())),
 1474|    288|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    288|    {
 1476|    288|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    288|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    288|          m_has_value(false)
  446|    288|    {
  447|    288|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  3.25M|    {
 1653|  3.25M|        return value();
 1654|  3.25M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  6.26M|    {
 1627|  6.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.26M|        return this->get_value();
 1629|  6.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.26M|    {
  451|  6.26M|        return m_value;
  452|  6.26M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   116k|    {
 1598|   116k|        return has_value();
 1599|   116k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.50M|    {
  485|  2.50M|        return m_has_value;
  486|  2.50M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.25M|    {
 1627|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.25M|        return this->get_value();
 1629|  1.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.25M|    {
  451|  1.25M|        return m_value;
  452|  1.25M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.04M|    {
 1837|  3.04M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.04M|                                            std::forward<F>(f));
 1839|  3.04M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  3.04M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  3.04M|    else {
 1333|  3.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.00M, False: 35.2k]
  |  |  ------------------
  ------------------
 1335|  3.04M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.04M|                   : result(unexpect,
 1337|  35.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.2k|                                           std::forward<Exp>(exp).error()));
 1339|  3.04M|    }
 1340|  3.04M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  4.43M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.43M|    {
 1430|  4.43M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  4.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.43M|    {
  437|  4.43M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  35.2k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  35.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  35.2k|    {
 1486|  35.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.00M|    {
 1663|  3.00M|        return std::move(value());
 1664|  3.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  1.31M|    {
 3326|  1.31M|        return m_iterator;
 3327|  1.31M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  1.31M|    {
 3330|  1.31M|        return m_sentinel;
 3331|  1.31M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.65M|    {
 1598|  7.65M|        return has_value();
 1599|  7.65M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.0M|    {
  485|  12.0M|        return m_has_value;
  486|  12.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   286k|    {
 1604|   286k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   286k|        return this->get_unexpected().error();
 1606|   286k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   286k|    {
  468|   286k|        return m_unexpected;
  469|   286k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  3.28M|    {
 1663|  3.28M|        return std::move(value());
 1664|  3.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  4.09M|    {
 1627|  4.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.09M|        return this->get_value();
 1629|  4.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.09M|    {
  451|  4.09M|        return m_value;
  452|  4.09M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  1.02M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.02M|    {
 3312|  1.02M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  14.6M|    {
 4300|  14.6M|        return !x.is_at_end();
 4301|  14.6M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  20.4k|        : base(unexpect, std::move(e.error())),
 1474|  20.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  20.4k|    {
 1476|  20.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  20.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  20.4k|          m_has_value(false)
  446|  20.4k|    {
  447|  20.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.47M|    {
 1177|  2.47M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.45M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.45M|    {
 1430|  2.45M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.45M|    {
  437|  2.45M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.47M|    {
 1598|  1.47M|        return has_value();
 1599|  1.47M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   321k|    {
 1653|   321k|        return value();
 1654|   321k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.3k|        : base(unexpect, std::move(e.error())),
 1474|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  11.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.3k|          m_has_value(false)
  446|  11.3k|    {
  447|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.33M|    {
 1177|  1.33M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.32M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.32M|    {
 1430|  1.32M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.32M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.32M|    {
  437|  1.32M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.33M|    {
 1598|  1.33M|        return has_value();
 1599|  1.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.66M|    {
  485|  2.66M|        return m_has_value;
  486|  2.66M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.3k|    {
 1604|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.3k|        return this->get_unexpected().error();
 1606|  11.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.3k|    {
  468|  11.3k|        return m_unexpected;
  469|  11.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.32M|    {
 1627|  1.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.32M|        return this->get_value();
 1629|  1.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.32M|    {
  451|  1.32M|        return m_value;
  452|  1.32M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.74k|    {
 1604|  4.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.74k|        return this->get_unexpected().error();
 1606|  4.74k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.01M|        : base(unexpect, std::move(e.error())),
 1474|  1.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.01M|    {
 1476|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.01M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.01M|          m_has_value(false)
  446|  1.01M|    {
  447|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.64M|    {
 1177|  5.64M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   326k|        : base(std::in_place, std::forward<U>(val)),
 1428|   326k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   326k|    {
 1430|   326k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   326k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   326k|    {
  437|   326k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.87M|        : base(unexpect, std::move(e.error())),
 1474|  3.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.87M|    {
 1476|  3.87M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.87M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.87M|          m_has_value(false)
  446|  3.87M|    {
  447|  3.87M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  6.62M|    {
 1598|  6.62M|        return has_value();
 1599|  6.62M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.3M|    {
  485|  11.3M|        return m_has_value;
  486|  11.3M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.69M|    {
 1604|  2.69M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.69M|        return this->get_unexpected().error();
 1606|  2.69M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.69M|    {
  468|  2.69M|        return m_unexpected;
  469|  2.69M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.01M|    {
  437|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     96|        : base(unexpect, std::move(e.error())),
 1474|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     96|    {
 1476|     96|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     96|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     96|          m_has_value(false)
  446|     96|    {
  447|     96|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.04M|    {
 1653|  1.04M|        return value();
 1654|  1.04M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.04M|    {
 1627|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04M|        return this->get_value();
 1629|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.04M|    {
  451|  1.04M|        return m_value;
  452|  1.04M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  26.9k|    {
 1598|  26.9k|        return has_value();
 1599|  26.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.02M|    {
  485|  2.02M|        return m_has_value;
  486|  2.02M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   986k|    {
 1663|   986k|        return std::move(value());
 1664|   986k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   424k|        : base(std::in_place, std::forward<U>(val)),
 1428|   424k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   424k|    {
 1430|   424k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   424k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   424k|    {
  437|   424k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.89M|    {
 2855|  1.89M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.89M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.89M|    {
 2836|  1.89M|        return t.data();
 2837|  1.89M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   792k|        : base(unexpect, std::move(e.error())),
 1474|   792k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   792k|    {
 1476|   792k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   792k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   792k|          m_has_value(false)
  446|   792k|    {
  447|   792k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.10M|    {
 1177|  9.10M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  8.20M|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.20M|    {
 1430|  8.20M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  8.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.20M|    {
  437|  8.20M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  5.54M|    {
 1663|  5.54M|        return std::move(value());
 1664|  5.54M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.44M|{
 1211|  3.44M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.44M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.13M|    {
 1837|  1.13M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.13M|                                            std::forward<F>(f));
 1839|  1.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.13M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.13M|    else {
 1333|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.13M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.13M|    }
 1340|  1.13M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13M|    {
  437|  1.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.27M|    {
  485|  2.27M|        return m_has_value;
  486|  2.27M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.13M|    {
 1823|  1.13M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.13M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.13M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.13M|    else {
 1333|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 1335|  1.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.13M|                   : result(unexpect,
 1337|  1.13M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.13M|                                           std::forward<Exp>(exp).error()));
 1339|  1.13M|    }
 1340|  1.13M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  58.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.8k|    {
 1430|  58.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  58.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  58.8k|    {
  437|  58.8k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   810k|    {
 1653|   810k|        return value();
 1654|   810k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   269k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   116k|    {
 1673|   116k|        return &value();
 1674|   116k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   810k|    {
 2724|   810k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   810k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   810k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   810k|    {
 2705|   810k|        return decay_copy(t.begin());
 2706|   810k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   810k|{
 1949|   810k|    return SCN_FWD(t);
  ------------------
  |  |  930|   810k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   810k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   496k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   986k|    {
 1837|   986k|        return detail::transform_error_impl(std::move(*this),
 1838|   986k|                                            std::forward<F>(f));
 1839|   986k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   986k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   986k|    else {
 1333|   986k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   986k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   986k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 986k, False: 0]
  |  |  ------------------
  ------------------
 1335|   986k|                   ? result(*std::forward<Exp>(exp))
 1336|   986k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   986k|    }
 1340|   986k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   986k|        : base(std::in_place, std::forward<U>(val)),
 1428|   986k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   986k|    {
 1430|   986k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   986k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   986k|    {
  437|   986k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   986k|    {
 1177|   986k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   986k|    {
 1598|   986k|        return has_value();
 1599|   986k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.97M|    {
  485|  1.97M|        return m_has_value;
  486|  1.97M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   986k|    {
 1663|   986k|        return std::move(value());
 1664|   986k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   986k|    {
 1627|   986k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   986k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   986k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   986k|        return this->get_value();
 1629|   986k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   986k|    {
  451|   986k|        return m_value;
  452|   986k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|   952k|    {
 1823|   952k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   952k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   952k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   952k|    else {
 1333|   952k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   952k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   952k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 952k]
  |  |  ------------------
  ------------------
 1335|   952k|                   ? result(*std::forward<Exp>(exp))
 1336|   952k|                   : result(unexpect,
 1337|   952k|                            trivial_invoke(std::forward<F>(f),
 1338|   952k|                                           std::forward<Exp>(exp).error()));
 1339|   952k|    }
 1340|   952k|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  57.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  57.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  57.4k|    {
 1430|  57.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  57.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  57.4k|    {
  437|  57.4k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   952k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   952k|    static_cast<    \
  |  |  929|   952k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   952k|    {
 3644|   952k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   683k|    {
 1653|   683k|        return value();
 1654|   683k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  26.9k|    {
 1673|  26.9k|        return &value();
 1674|  26.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.13M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.13M|    static_cast<    \
  |  |  929|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.13M|    {
 3644|  1.13M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   476k|        : base(unexpect, std::move(e.error())),
 1474|   476k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   476k|    {
 1476|   476k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  4.75M|    {
 4289|  4.75M|        return x.is_at_end();
 4290|  4.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  7.48M|    {
 4333|  7.48M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 7.48M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  7.48M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 7.48M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  7.48M|        return !read_at_position();
 4340|  7.48M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  23.6M|    {
 4313|  23.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  23.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  23.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 23.6M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  23.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  23.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.8M, False: 2.84M]
  |  |  ------------------
  ------------------
 4320|  20.8M|            return true;
 4321|  20.8M|        }
 4322|       |
 4323|  5.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.84M, False: 2.66M]
  ------------------
 4324|  2.84M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 179k, False: 2.66M]
  ------------------
 4325|   179k|                return false;
 4326|   179k|            }
 4327|  2.84M|        }
 4328|  2.66M|        return true;
 4329|  2.84M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  30.6M|    {
 4089|  30.6M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  30.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  7.40M|    {
 4248|  7.40M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  7.40M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 7.40M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  7.40M|        auto res = read_at_position();
 4257|  7.40M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  7.40M|        return parent()->get_character_at(m_position);
 4259|  7.40M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  7.40M|    {
 4120|  7.40M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.28M, False: 1.12M]
  |  |  ------------------
  ------------------
 4121|  7.40M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  6.28M|            return m_putback_buffer[pos];
 4123|  6.28M|        }
 4124|  1.12M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.12M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.12M|        return m_current_view[start];
 4127|  1.12M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  2.65M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|  2.65M|    else {
 3810|       |        // utf-32
 3811|  2.65M|        static_assert(sizeof(U) == 4);
 3812|  2.65M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  2.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  2.65M|        return 1;
 3814|  2.65M|    }
 3815|  2.65M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  3.30M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.30M|    {
 1430|  3.30M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.30M|    {
  437|  3.30M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.36M|    {
 1177|  3.36M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  59.6k|        : base(unexpect, std::move(e.error())),
 1474|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  59.6k|    {
 1476|  59.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  59.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  59.6k|          m_has_value(false)
  446|  59.6k|    {
  447|  59.6k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.31M|    {
 1598|  1.31M|        return has_value();
 1599|  1.31M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  18.7k|    {
 1653|  18.7k|        return value();
 1654|  18.7k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  3.57M|    {
 4283|  3.57M|        return !(lhs == rhs);
 4284|  3.57M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  4.86M|    {
 4278|  4.86M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 4.86M, False: 0]
  |  Branch (4278:46): [True: 1.56M, False: 3.29M]
  ------------------
 4279|  4.86M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  8.75M|    {
 4234|  8.75M|        ++m_position;
 4235|  8.75M|        (void)read_at_position();
 4236|  8.75M|        return *this;
 4237|  8.75M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.65M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|  2.65M|    else {
 4016|  2.65M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  2.65M|        auto cp = static_cast<char32_t>(input.front());
 4018|  2.65M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177k, False: 2.47M]
  |  |  ------------------
  ------------------
 4019|   177k|            return invalid_code_point;
 4020|   177k|        }
 4021|  2.47M|        return cp;
 4022|  2.65M|    }
 4023|  2.65M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.68k|        : base(unexpect, std::move(e.error())),
 1474|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.68k|    {
 1476|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.68k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.68k|          m_has_value(false)
  446|  2.68k|    {
  447|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   697k|    {
 1177|   697k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   694k|        : base(std::in_place, std::forward<U>(val)),
 1428|   694k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   694k|    {
 1430|   694k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   694k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   694k|    {
  437|   694k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   697k|    {
 1598|   697k|        return has_value();
 1599|   697k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.39M|    {
  485|  1.39M|        return m_has_value;
  486|  1.39M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.68k|    {
 1604|  2.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.68k|        return this->get_unexpected().error();
 1606|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.68k|    {
  468|  2.68k|        return m_unexpected;
  469|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   694k|    {
 1663|   694k|        return std::move(value());
 1664|   694k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   694k|    {
 1627|   694k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   694k|        return this->get_value();
 1629|   694k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   694k|    {
  451|   694k|        return m_value;
  452|   694k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  12.2M|    {
 3330|  12.2M|        return m_sentinel;
 3331|  12.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.00k|    {
 1604|  2.00k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.00k|        return this->get_unexpected().error();
 1606|  2.00k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   618k|        : base(unexpect, std::move(e.error())),
 1474|   618k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   618k|    {
 1476|   618k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   673k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   673k|          m_has_value(false)
  446|   673k|    {
  447|   673k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.81M|    {
 1177|  5.81M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  18.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.7k|    {
 1430|  18.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  18.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.7k|    {
  437|  18.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  3.28M|        : base(unexpect, std::move(e.error())),
 1474|  3.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.28M|    {
 1476|  3.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.28M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.28M|          m_has_value(false)
  446|  3.28M|    {
  447|  3.28M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  6.38M|    {
 1598|  6.38M|        return has_value();
 1599|  6.38M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.2M|    {
  485|  11.2M|        return m_has_value;
  486|  11.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.91M|    {
 1604|  1.91M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.91M|        return this->get_unexpected().error();
 1606|  1.91M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.91M|    {
  468|  1.91M|        return m_unexpected;
  469|  1.91M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   574k|        : base(std::in_place, std::forward<U>(val)),
 1428|   574k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   574k|    {
 1430|   574k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   574k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   574k|    {
  437|   574k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   574k|    {
 1177|   574k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     70|        : base(unexpect, std::move(e.error())),
 1474|     70|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     70|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     70|          m_has_value(false)
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   830k|    {
 1653|   830k|        return value();
 1654|   830k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.25M|    {
 1627|  2.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.25M|        return this->get_value();
 1629|  2.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.25M|    {
  451|  2.25M|        return m_value;
  452|  2.25M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  11.2k|    {
 1598|  11.2k|        return has_value();
 1599|  11.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.14M|    {
  485|  1.14M|        return m_has_value;
  486|  1.14M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   562k|    {
 1663|   562k|        return std::move(value());
 1664|   562k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   574k|    {
 1627|   574k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   574k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   574k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   574k|        return this->get_value();
 1629|   574k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   574k|    {
  451|   574k|        return m_value;
  452|   574k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.48M|    {
 1837|  1.48M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.48M|                                            std::forward<F>(f));
 1839|  1.48M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.48M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.48M|    else {
 1333|  1.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.42M, False: 54.0k]
  |  |  ------------------
  ------------------
 1335|  1.48M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48M|                   : result(unexpect,
 1337|  54.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.48M|    }
 1340|  1.48M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  1.84M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.84M|    {
 1430|  1.84M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.84M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.84M|    {
  437|  1.84M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  54.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  54.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  54.0k|    {
 1486|  54.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.42M|    {
 1663|  1.42M|        return std::move(value());
 1664|  1.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   422k|    {
 3326|   422k|        return m_iterator;
 3327|   422k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   422k|    {
 3330|   422k|        return m_sentinel;
 3331|   422k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.79M|    {
 1598|  3.79M|        return has_value();
 1599|  3.79M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.07M|    {
  485|  6.07M|        return m_has_value;
  486|  6.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   644k|    {
 1604|   644k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   644k|        return this->get_unexpected().error();
 1606|   644k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   644k|    {
  468|   644k|        return m_unexpected;
  469|   644k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.35M|    {
 1663|  1.35M|        return std::move(value());
 1664|  1.35M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.63M|    {
 1627|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.63M|        return this->get_value();
 1629|  1.63M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.63M|    {
  451|  1.63M|        return m_value;
  452|  1.63M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   395k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   395k|    {
 3312|   395k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.73M|    {
 4300|  2.73M|        return !x.is_at_end();
 4301|  2.73M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  58.3k|        : base(unexpect, std::move(e.error())),
 1474|  58.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.3k|    {
 1476|  58.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  58.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.3k|          m_has_value(false)
  446|  58.3k|    {
  447|  58.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.82M|    {
 1177|  2.82M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.76M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.76M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.76M|    {
 1430|  2.76M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.76M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.76M|    {
  437|  2.76M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   771k|    {
 1598|   771k|        return has_value();
 1599|   771k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.88M|    {
  485|  4.88M|        return m_has_value;
  486|  4.88M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  8.05k|    {
 1653|  8.05k|        return value();
 1654|  8.05k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.00M|    {
 1627|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.00M|        return this->get_value();
 1629|  2.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.00M|    {
  451|  2.00M|        return m_value;
  452|  2.00M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.68k|        : base(unexpect, std::move(e.error())),
 1474|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.68k|    {
 1476|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.68k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.68k|          m_has_value(false)
  446|  2.68k|    {
  447|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   697k|    {
 1177|   697k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   694k|        : base(std::in_place, std::forward<U>(val)),
 1428|   694k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   694k|    {
 1430|   694k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   694k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   694k|    {
  437|   694k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   566k|    {
 1837|   566k|        return detail::transform_error_impl(std::move(*this),
 1838|   566k|                                            std::forward<F>(f));
 1839|   566k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   566k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   566k|    else {
 1333|   566k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   566k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   566k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 563k, False: 3.60k]
  |  |  ------------------
  ------------------
 1335|   566k|                   ? result(*std::forward<Exp>(exp))
 1336|   566k|                   : result(unexpect,
 1337|  3.60k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.60k|                                           std::forward<Exp>(exp).error()));
 1339|   566k|    }
 1340|   566k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.99M|    {
 1663|  1.99M|        return std::move(value());
 1664|  1.99M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  57.8k|    {
 1614|  57.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.8k|        return std::move(this->get_unexpected().error());
 1616|  57.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  58.3k|    {
  468|  58.3k|        return m_unexpected;
  469|  58.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   641k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   641k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   641k|    {
 1486|   641k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   697k|    {
 1598|   697k|        return has_value();
 1599|   697k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.39M|    {
  485|  1.39M|        return m_has_value;
  486|  1.39M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.68k|    {
 1604|  2.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.68k|        return this->get_unexpected().error();
 1606|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.68k|    {
  468|  2.68k|        return m_unexpected;
  469|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   694k|    {
 1663|   694k|        return std::move(value());
 1664|   694k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   694k|    {
 1627|   694k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   694k|        return this->get_value();
 1629|   694k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   694k|    {
  451|   694k|        return m_value;
  452|   694k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    516|    {
 1604|    516|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    516|        return this->get_unexpected().error();
 1606|    516|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   618k|        : base(unexpect, std::move(e.error())),
 1474|   618k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   618k|    {
 1476|   618k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   672k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   672k|          m_has_value(false)
  446|   672k|    {
  447|   672k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.64M|    {
 1177|  4.64M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  8.05k|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.05k|    {
 1430|  8.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  8.05k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.05k|    {
  437|  8.05k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.39M|        : base(unexpect, std::move(e.error())),
 1474|  2.39M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.39M|    {
 1476|  2.39M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.39M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.39M|          m_has_value(false)
  446|  2.39M|    {
  447|  2.39M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  5.20M|    {
 1598|  5.20M|        return has_value();
 1599|  5.20M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.36M|    {
  485|  9.36M|        return m_has_value;
  486|  9.36M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.81M|    {
 1604|  1.81M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.81M|        return this->get_unexpected().error();
 1606|  1.81M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.81M|    {
  468|  1.81M|        return m_unexpected;
  469|  1.81M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   567k|        : base(std::in_place, std::forward<U>(val)),
 1428|   567k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   567k|    {
 1430|   567k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   567k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   567k|    {
  437|   567k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   567k|    {
 1177|   567k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     24|        : base(unexpect, std::move(e.error())),
 1474|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     24|          m_has_value(false)
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   273k|    {
 1653|   273k|        return value();
 1654|   273k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.70M|    {
 1627|  1.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.70M|        return this->get_value();
 1629|  1.70M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.70M|    {
  451|  1.70M|        return m_value;
  452|  1.70M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.87k|    {
 1598|  3.87k|        return has_value();
 1599|  3.87k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   563k|    {
 1663|   563k|        return std::move(value());
 1664|   563k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   567k|    {
 1627|   567k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   567k|        return this->get_value();
 1629|   567k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   567k|    {
  451|   567k|        return m_value;
  452|   567k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.48M|    {
 1837|  1.48M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.48M|                                            std::forward<F>(f));
 1839|  1.48M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.48M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.48M|    else {
 1333|  1.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.43M, False: 54.1k]
  |  |  ------------------
  ------------------
 1335|  1.48M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48M|                   : result(unexpect,
 1337|  54.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.48M|    }
 1340|  1.48M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.56M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.56M|    {
 1430|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.56M|    {
  437|  1.56M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  54.1k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  54.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  54.1k|    {
 1486|  54.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.43M|    {
 1663|  1.43M|        return std::move(value());
 1664|  1.43M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   484k|    {
 2855|   484k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   484k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   484k|    {
 2836|   484k|        return t.data();
 2837|   484k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   562k|    {
 1837|   562k|        return detail::transform_error_impl(std::move(*this),
 1838|   562k|                                            std::forward<F>(f));
 1839|   562k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   562k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   562k|    else {
 1333|   562k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   562k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   562k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 562k, False: 0]
  |  |  ------------------
  ------------------
 1335|   562k|                   ? result(*std::forward<Exp>(exp))
 1336|   562k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   562k|    }
 1340|   562k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   562k|        : base(std::in_place, std::forward<U>(val)),
 1428|   562k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   562k|    {
 1430|   562k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   562k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   562k|    {
  437|   562k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   562k|    {
 1177|   562k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   562k|    {
 1598|   562k|        return has_value();
 1599|   562k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.12M|    {
  485|  1.12M|        return m_has_value;
  486|  1.12M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   562k|    {
 1663|   562k|        return std::move(value());
 1664|   562k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   562k|    {
 1627|   562k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   562k|        return this->get_value();
 1629|   562k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   562k|    {
  451|   562k|        return m_value;
  452|   562k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   727k|    {
 1823|   727k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   727k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|   727k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   727k|    else {
 1333|   727k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   727k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   727k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 1335|   727k|                   ? result(*std::forward<Exp>(exp))
 1336|   727k|                   : result(unexpect,
 1337|   727k|                            trivial_invoke(std::forward<F>(f),
 1338|   727k|                                           std::forward<Exp>(exp).error()));
 1339|   727k|    }
 1340|   727k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   282k|    {
 1653|   282k|        return value();
 1654|   282k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   109k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  11.2k|    {
 1673|  11.2k|        return &value();
 1674|  11.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   453k|    {
 2724|   453k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   453k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   453k|    {
 2705|   453k|        return decay_copy(t.begin());
 2706|   453k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   453k|{
 1949|   453k|    return SCN_FWD(t);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   453k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   248k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   563k|    {
 1837|   563k|        return detail::transform_error_impl(std::move(*this),
 1838|   563k|                                            std::forward<F>(f));
 1839|   563k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   563k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   563k|    else {
 1333|   563k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   563k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   563k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 563k, False: 0]
  |  |  ------------------
  ------------------
 1335|   563k|                   ? result(*std::forward<Exp>(exp))
 1336|   563k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   563k|    }
 1340|   563k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   563k|        : base(std::in_place, std::forward<U>(val)),
 1428|   563k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   563k|    {
 1430|   563k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   563k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   563k|    {
  437|   563k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   563k|    {
 1177|   563k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   563k|    {
 1598|   563k|        return has_value();
 1599|   563k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.12M|    {
  485|  1.12M|        return m_has_value;
  486|  1.12M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   563k|    {
 1663|   563k|        return std::move(value());
 1664|   563k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   563k|    {
 1627|   563k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   563k|        return this->get_value();
 1629|   563k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   563k|    {
  451|   563k|        return m_value;
  452|   563k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   638k|    {
 1823|   638k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   638k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   638k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   638k|    else {
 1333|   638k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   638k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   638k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 638k]
  |  |  ------------------
  ------------------
 1335|   638k|                   ? result(*std::forward<Exp>(exp))
 1336|   638k|                   : result(unexpect,
 1337|   638k|                            trivial_invoke(std::forward<F>(f),
 1338|   638k|                                           std::forward<Exp>(exp).error()));
 1339|   638k|    }
 1340|   638k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   638k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   638k|    static_cast<    \
  |  |  929|   638k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   638k|    {
 3644|   638k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   282k|    {
 1653|   282k|        return value();
 1654|   282k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  3.85k|    {
 1673|  3.85k|        return &value();
 1674|  3.85k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   727k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   727k|    static_cast<    \
  |  |  929|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   727k|    {
 3644|   727k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   110k|        : base(std::in_place, std::forward<U>(val)),
 1428|   110k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   110k|    {
 1430|   110k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   110k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   110k|    {
  437|   110k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   120k|{
 3650|   120k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   120k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   903k|    {
 2855|   903k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   903k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   903k|    {
 2836|   903k|        return t.data();
 2837|   903k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  1.95M|    {
 5476|  1.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.95M|        return static_cast<std::size_t>(m_desc &
 5481|  1.95M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  3.90M|    {
 5501|  3.90M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.90M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  1.95M|    {
 5444|  1.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.95M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.95M|        const auto t = type(id);
 5456|  1.95M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.95M|        basic_scan_arg<Context> arg;
 5461|  1.95M|        arg.m_type = t;
 5462|  1.95M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.95M, False: 0]
  ------------------
 5463|  1.95M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.95M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.95M|        return arg;
 5469|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  1.95M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.95M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.95M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.95M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  1.95M|    {
 5505|  1.95M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.95M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  3.69M|    {
 5257|  3.69M|        return m_type != detail::arg_type::none_type;
 5258|  3.69M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   297k|{
 8428|   297k|#define SCN_VISIT(Type)                                         \
 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   297k|    }                                                           \
 8432|   297k|    else {                                                      \
 8433|   297k|        return vis(monostate_val);                              \
 8434|   297k|    }
 8435|       |
 8436|   297k|    monostate monostate_val{};
 8437|       |
 8438|   297k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 297k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 297k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 297k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 297k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 297k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 297k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 297k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 297k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 297k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 297k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 297k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 297k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 297k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 297k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 297k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  95.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 95.8k, False: 201k]
  ------------------
 8470|  95.8k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  95.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.8k|    }                                                           \
  |  | 8432|  95.8k|    else {                                                      \
  |  | 8433|  95.8k|        return vis(monostate_val);                              \
  |  | 8434|  95.8k|    }
  ------------------
 8471|   195k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 99.8k, False: 197k]
  ------------------
 8472|   195k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   195k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   195k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   195k|    }                                                           \
  |  | 8432|   195k|    else {                                                      \
  |  | 8433|   195k|        return vis(monostate_val);                              \
  |  | 8434|   195k|    }
  ------------------
 8473|   297k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 101k, False: 195k]
  ------------------
 8474|   297k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8475|   297k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 297k]
  ------------------
 8476|   297k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8477|   297k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 297k]
  ------------------
 8478|   297k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8479|   297k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 297k]
  ------------------
 8480|   297k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8481|   297k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 297k]
  ------------------
 8482|   297k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8483|   297k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 297k]
  ------------------
 8484|   297k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8485|   297k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 297k]
  ------------------
 8486|   297k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   297k|    }                                                           \
  |  | 8432|   297k|    else {                                                      \
  |  | 8433|   297k|        return vis(monostate_val);                              \
  |  | 8434|   297k|    }
  ------------------
 8487|       |
 8488|   297k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 297k]
  ------------------
 8489|   297k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   297k|            return vis(
 8491|   297k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 297k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 297k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   297k|            SCN_CLANG_POP
 8506|   297k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  1.53M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.53M|    {
 5555|  1.53M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   831k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   831k|    {
 8149|   831k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.53M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.53M|    {
 8067|  1.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  1.15M|{
 4353|  1.15M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 1.15M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  1.15M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  1.15M|                            ranges::default_sentinel};
 4359|  1.15M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  1.15M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  1.15M|    {
 4185|  1.15M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  1.15M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  1.15M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   325k|{
 8428|   325k|#define SCN_VISIT(Type)                                         \
 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   325k|    }                                                           \
 8432|   325k|    else {                                                      \
 8433|   325k|        return vis(monostate_val);                              \
 8434|   325k|    }
 8435|       |
 8436|   325k|    monostate monostate_val{};
 8437|       |
 8438|   325k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 325k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 325k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 325k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 325k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 325k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 325k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 325k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 325k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 325k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 325k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 325k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 325k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 325k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 325k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 325k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 104k, False: 221k]
  ------------------
 8470|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8471|   214k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 110k, False: 215k]
  ------------------
 8472|   214k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   214k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   214k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   214k|    }                                                           \
  |  | 8432|   214k|    else {                                                      \
  |  | 8433|   214k|        return vis(monostate_val);                              \
  |  | 8434|   214k|    }
  ------------------
 8473|   325k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 111k, False: 214k]
  ------------------
 8474|   325k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8475|   325k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 325k]
  ------------------
 8476|   325k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8477|   325k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 325k]
  ------------------
 8478|   325k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8479|   325k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 325k]
  ------------------
 8480|   325k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8481|   325k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 325k]
  ------------------
 8482|   325k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8483|   325k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 325k]
  ------------------
 8484|   325k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8485|   325k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 325k]
  ------------------
 8486|   325k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8487|       |
 8488|   325k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 325k]
  ------------------
 8489|   325k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   325k|            return vis(
 8491|   325k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 325k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 325k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   325k|            SCN_CLANG_POP
 8506|   325k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   705k|{
 7055|   705k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   705k|    handler.check_args_exhausted();
 7057|   705k|    return handler.get_error();
 7058|   705k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   705k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   705k|    auto begin = format.data();
 7024|   705k|    auto it = begin;
 7025|   705k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.34M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 705k, False: 638k]
  ------------------
 7028|   705k|        const auto ch = *it++;
 7029|   705k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 705k, False: 0]
  ------------------
 7030|   705k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   705k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   705k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.9k, False: 638k]
  ------------------
 7034|  66.9k|                return;
 7035|  66.9k|            }
 7036|   705k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   705k|    }
 7047|       |
 7048|   638k|    handler.on_literal_text(begin, end);
 7049|   638k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   705k|{
 6953|   705k|    struct id_adapter {
 6954|   705k|        constexpr void operator()()
 6955|   705k|        {
 6956|   705k|            arg_id = handler.on_arg_id();
 6957|   705k|        }
 6958|   705k|        constexpr void operator()(std::size_t id)
 6959|   705k|        {
 6960|   705k|            arg_id = handler.on_arg_id(id);
 6961|   705k|        }
 6962|       |
 6963|   705k|        constexpr void on_error(const char* msg)
 6964|   705k|        {
 6965|   705k|            SCN_UNLIKELY_ATTR
 6966|   705k|            handler.on_error(msg);
 6967|   705k|        }
 6968|       |
 6969|   705k|        Handler& handler;
 6970|   705k|        std::size_t arg_id;
 6971|   705k|    };
 6972|       |
 6973|   705k|    ++begin;
 6974|   705k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   705k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 705k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   705k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 705k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   705k|    else {
 6986|   705k|        auto adapter = id_adapter{handler, 0};
 6987|   705k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   705k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   705k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 705k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   705k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 705k, False: 0]
  ------------------
 6998|   705k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   705k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   705k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  |  Branch (859:45): [True: 0, False: 705k]
  |  |  |  Branch (859:45): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   705k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   705k|    }
 7014|   705k|    return begin + 1;
 7015|   705k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|  1.53M|    {
 8050|  1.53M|        return m_args.get(id);
 8051|  1.53M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|  1.53M|    {
 8060|  1.53M|        return m_locale;
 8061|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  1.53M|    {
 5576|  1.53M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.53M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.53M|        do_check_arg_id(id);
 5584|  1.53M|        return id;
 5585|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  1.53M|{
 6064|  1.53M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.53M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.53M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   705k|{
 6454|   705k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   705k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 705k, False: 0]
  |  Branch (6455:26): [True: 0, False: 705k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   705k|    handler();
 6460|   705k|    return begin;
 6461|   705k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   705k|        {
 6956|   705k|            arg_id = handler.on_arg_id();
 6957|   705k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  3.07M|    {
 5262|  3.07M|        return m_type;
 5263|  3.07M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  1.53M|    {
 5571|  1.53M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.53M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  3.07M|    {
 5560|  3.07M|        return m_format.data();
 5561|  3.07M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   705k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   705k|    {
 7133|   705k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   705k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   705k|{
 6869|   705k|    auto do_presentation = [&]() -> const CharT* {
 6870|   705k|        if (*begin == CharT{'['}) {
 6871|   705k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   705k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   705k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   705k|                return begin;
 6877|   705k|            }
 6878|   705k|            handler.on_character_set_string(set);
 6879|   705k|            return begin;
 6880|   705k|        }
 6881|   705k|        if (*begin == CharT{'/'}) {
 6882|   705k|            return parse_presentation_regex(begin, end, handler);
 6883|   705k|        }
 6884|   705k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   705k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   705k|            handler.on_error("Invalid type specifier in format string");
 6887|   705k|            return begin;
 6888|   705k|        }
 6889|   705k|        handler.on_type(type);
 6890|   705k|        return begin;
 6891|   705k|    };
 6892|       |
 6893|   705k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 705k, False: 0]
  |  Branch (6893:28): [True: 705k, False: 0]
  ------------------
 6894|   705k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 705k, False: 0]
  |  Branch (6894:36): [True: 507k, False: 198k]
  ------------------
 6895|   507k|        return do_presentation();
 6896|   507k|    }
 6897|       |
 6898|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   198k|    begin = parse_align(begin, end, handler);
 6904|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   198k|    begin = parse_width(begin, end, handler);
 6910|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   198k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 198k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   198k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 198k, False: 0]
  ------------------
 6929|   198k|        handler.on_localized();
 6930|   198k|        ++begin;
 6931|   198k|    }
 6932|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   198k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 198k, False: 0]
  |  Branch (6937:25): [True: 0, False: 198k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   198k|    return begin;
 6946|   198k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|  1.53M|{
 6518|  1.53M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.10M, False: 436k]
  |  Branch (6518:33): [True: 1.10M, False: 0]
  ------------------
 6519|  1.53M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 436k, False: 0]
  |  Branch (6519:33): [True: 436k, False: 0]
  ------------------
 6520|  1.53M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   507k|    auto do_presentation = [&]() -> const CharT* {
 6870|   507k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 507k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   507k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 507k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   507k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   507k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   507k|        handler.on_type(type);
 6890|   507k|        return begin;
 6891|   507k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|  1.10M|{
 6466|  1.10M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.10M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.10M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.10M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.10M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.10M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.10M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.10M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.10M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.10M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.10M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   472k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 472k, False: 628k]
  ------------------
 6485|   472k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.10M]
  ------------------
 6486|   472k|            return presentation_type::float_hex;
 6487|  41.7k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 41.7k, False: 1.05M]
  ------------------
 6488|  41.7k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.10M]
  ------------------
 6489|  41.7k|            return presentation_type::float_scientific;
 6490|   221k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 221k, False: 878k]
  ------------------
 6491|   221k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.10M]
  ------------------
 6492|   221k|            return presentation_type::float_fixed;
 6493|   364k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 364k, False: 735k]
  ------------------
 6494|   364k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.10M]
  ------------------
 6495|   364k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 1.10M]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 1.10M]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.10M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.10M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.10M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.10M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 1.10M]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|  1.10M|    }
 6513|  1.10M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|   198k|{
 6543|   198k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   198k|    auto check_align = [](wchar_t ch) {
 6546|   198k|        switch (ch) {
 6547|   198k|            case L'<':
 6548|   198k|                return align_type::left;
 6549|   198k|            case L'>':
 6550|   198k|                return align_type::right;
 6551|   198k|            case L'^':
 6552|   198k|                return align_type::center;
 6553|   198k|            default:
 6554|   198k|                return align_type::none;
 6555|   198k|        }
 6556|   198k|    };
 6557|       |
 6558|   198k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   198k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  |  Branch (859:45): [True: 0, False: 198k]
  |  |  |  Branch (859:45): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6560|   198k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   198k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   198k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   198k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   198k|    const auto begin_before_fill = begin;
 6570|   198k|    begin += potential_fill_len;
 6571|       |
 6572|   198k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 198k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   198k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   198k|    const auto begin_after_fill = begin;
 6578|   198k|    ++begin;
 6579|       |
 6580|   198k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 198k, False: 0]
  ------------------
 6581|   198k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   198k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 198k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   198k|    }
 6589|       |
 6590|   198k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 198k, False: 0]
  ------------------
 6591|   198k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 198k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   198k|        return begin_before_fill;
 6596|   198k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   198k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   436k|{
 6525|   436k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   436k|    else {
 6530|   436k|        const auto lengths =
 6531|   436k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   436k|            "\3\4";
 6533|   436k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   436k|        return len;
 6535|   436k|    }
 6536|   436k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   396k|    auto check_align = [](wchar_t ch) {
 6546|   396k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 396k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 396k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 396k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   396k|            default:
  ------------------
  |  Branch (6553:13): [True: 396k, False: 0]
  ------------------
 6554|   396k|                return align_type::none;
 6555|   396k|        }
 6556|   396k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|   198k|{
 6608|   198k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   198k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 198k, False: 0]
  |  Branch (6610:33): [True: 0, False: 198k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   198k|    return begin;
 6621|   198k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|   198k|    {
 7138|   198k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   198k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 198k, False: 0]
  ------------------
 7140|   198k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 198k, False: 0]
  ------------------
 7141|   198k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 198k]
  ------------------
 7142|   198k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   198k|        Handler::on_localized();
 7150|   198k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   636k|    {
 6283|   636k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   636k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   636k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   705k|{
 8428|   705k|#define SCN_VISIT(Type)                                         \
 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   705k|    }                                                           \
 8432|   705k|    else {                                                      \
 8433|   705k|        return vis(monostate_val);                              \
 8434|   705k|    }
 8435|       |
 8436|   705k|    monostate monostate_val{};
 8437|       |
 8438|   705k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 705k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 705k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 705k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 705k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 705k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 705k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 705k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 705k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 705k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 705k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 705k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 705k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 705k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 705k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 705k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   229k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 229k, False: 475k]
  ------------------
 8470|   229k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   229k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   229k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   229k|    }                                                           \
  |  | 8432|   229k|    else {                                                      \
  |  | 8433|   229k|        return vis(monostate_val);                              \
  |  | 8434|   229k|    }
  ------------------
 8471|   466k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 236k, False: 468k]
  ------------------
 8472|   466k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   466k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   466k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   466k|    }                                                           \
  |  | 8432|   466k|    else {                                                      \
  |  | 8433|   466k|        return vis(monostate_val);                              \
  |  | 8434|   466k|    }
  ------------------
 8473|   705k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 239k, False: 466k]
  ------------------
 8474|   705k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8475|   705k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 705k]
  ------------------
 8476|   705k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8477|   705k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 705k]
  ------------------
 8478|   705k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8479|   705k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 705k]
  ------------------
 8480|   705k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8481|   705k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 705k]
  ------------------
 8482|   705k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8483|   705k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 705k]
  ------------------
 8484|   705k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8485|   705k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 705k]
  ------------------
 8486|   705k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   705k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   705k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   705k|    }                                                           \
  |  | 8432|   705k|    else {                                                      \
  |  | 8433|   705k|        return vis(monostate_val);                              \
  |  | 8434|   705k|    }
  ------------------
 8487|       |
 8488|   705k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 705k]
  ------------------
 8489|   705k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   705k|            return vis(
 8491|   705k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 705k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 705k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   705k|            SCN_CLANG_POP
 8506|   705k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   831k|{
 7055|   831k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   831k|    handler.check_args_exhausted();
 7057|   831k|    return handler.get_error();
 7058|   831k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   831k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   831k|    auto begin = format.data();
 7024|   831k|    auto it = begin;
 7025|   831k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.59M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 831k, False: 764k]
  ------------------
 7028|   831k|        const auto ch = *it++;
 7029|   831k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 831k, False: 0]
  ------------------
 7030|   831k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   831k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   831k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.9k, False: 764k]
  ------------------
 7034|  66.9k|                return;
 7035|  66.9k|            }
 7036|   831k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   831k|    }
 7047|       |
 7048|   764k|    handler.on_literal_text(begin, end);
 7049|   764k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   764k|    {
 8186|   764k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   764k|    static_cast<    \
  |  |  929|   764k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   764k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   831k|{
 6953|   831k|    struct id_adapter {
 6954|   831k|        constexpr void operator()()
 6955|   831k|        {
 6956|   831k|            arg_id = handler.on_arg_id();
 6957|   831k|        }
 6958|   831k|        constexpr void operator()(std::size_t id)
 6959|   831k|        {
 6960|   831k|            arg_id = handler.on_arg_id(id);
 6961|   831k|        }
 6962|       |
 6963|   831k|        constexpr void on_error(const char* msg)
 6964|   831k|        {
 6965|   831k|            SCN_UNLIKELY_ATTR
 6966|   831k|            handler.on_error(msg);
 6967|   831k|        }
 6968|       |
 6969|   831k|        Handler& handler;
 6970|   831k|        std::size_t arg_id;
 6971|   831k|    };
 6972|       |
 6973|   831k|    ++begin;
 6974|   831k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   831k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 831k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   831k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 831k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   831k|    else {
 6986|   831k|        auto adapter = id_adapter{handler, 0};
 6987|   831k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   831k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   831k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 831k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   831k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 831k, False: 0]
  ------------------
 6998|   831k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   831k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   831k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  |  Branch (859:45): [True: 0, False: 831k]
  |  |  |  Branch (859:45): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   831k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   831k|    }
 7014|   831k|    return begin + 1;
 7015|   831k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   831k|{
 6454|   831k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   831k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 831k, False: 0]
  |  Branch (6455:26): [True: 0, False: 831k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   831k|    handler();
 6460|   831k|    return begin;
 6461|   831k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   831k|        {
 6956|   831k|            arg_id = handler.on_arg_id();
 6957|   831k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   831k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   831k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   831k|    {
 7133|   831k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   831k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   831k|{
 6869|   831k|    auto do_presentation = [&]() -> const CharT* {
 6870|   831k|        if (*begin == CharT{'['}) {
 6871|   831k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   831k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   831k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   831k|                return begin;
 6877|   831k|            }
 6878|   831k|            handler.on_character_set_string(set);
 6879|   831k|            return begin;
 6880|   831k|        }
 6881|   831k|        if (*begin == CharT{'/'}) {
 6882|   831k|            return parse_presentation_regex(begin, end, handler);
 6883|   831k|        }
 6884|   831k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   831k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   831k|            handler.on_error("Invalid type specifier in format string");
 6887|   831k|            return begin;
 6888|   831k|        }
 6889|   831k|        handler.on_type(type);
 6890|   831k|        return begin;
 6891|   831k|    };
 6892|       |
 6893|   831k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 831k, False: 0]
  |  Branch (6893:28): [True: 831k, False: 0]
  ------------------
 6894|   831k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 831k, False: 0]
  |  Branch (6894:36): [True: 592k, False: 238k]
  ------------------
 6895|   592k|        return do_presentation();
 6896|   592k|    }
 6897|       |
 6898|   238k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   238k|    begin = parse_align(begin, end, handler);
 6904|   238k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   238k|    begin = parse_width(begin, end, handler);
 6910|   238k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   238k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 238k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   238k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 238k, False: 0]
  ------------------
 6929|   238k|        handler.on_localized();
 6930|   238k|        ++begin;
 6931|   238k|    }
 6932|   238k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   238k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 238k, False: 0]
  |  Branch (6937:25): [True: 0, False: 238k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   238k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   238k|    return begin;
 6946|   238k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   592k|    auto do_presentation = [&]() -> const CharT* {
 6870|   592k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 592k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   592k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 592k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   592k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   592k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 592k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   592k|        handler.on_type(type);
 6890|   592k|        return begin;
 6891|   592k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|   238k|{
 6543|   238k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   238k|    auto check_align = [](wchar_t ch) {
 6546|   238k|        switch (ch) {
 6547|   238k|            case L'<':
 6548|   238k|                return align_type::left;
 6549|   238k|            case L'>':
 6550|   238k|                return align_type::right;
 6551|   238k|            case L'^':
 6552|   238k|                return align_type::center;
 6553|   238k|            default:
 6554|   238k|                return align_type::none;
 6555|   238k|        }
 6556|   238k|    };
 6557|       |
 6558|   238k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   238k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  |  Branch (859:45): [True: 0, False: 238k]
  |  |  |  Branch (859:45): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6560|   238k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   238k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   238k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   238k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   238k|    const auto begin_before_fill = begin;
 6570|   238k|    begin += potential_fill_len;
 6571|       |
 6572|   238k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 238k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   238k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   238k|    const auto begin_after_fill = begin;
 6578|   238k|    ++begin;
 6579|       |
 6580|   238k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 238k, False: 0]
  ------------------
 6581|   238k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   238k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 238k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   238k|    }
 6589|       |
 6590|   238k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 238k, False: 0]
  ------------------
 6591|   238k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 238k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   238k|        return begin_before_fill;
 6596|   238k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   238k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   476k|    auto check_align = [](wchar_t ch) {
 6546|   476k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 476k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 476k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 476k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   476k|            default:
  ------------------
  |  Branch (6553:13): [True: 476k, False: 0]
  ------------------
 6554|   476k|                return align_type::none;
 6555|   476k|        }
 6556|   476k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|   238k|{
 6608|   238k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   238k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 238k, False: 0]
  |  Branch (6610:33): [True: 0, False: 238k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   238k|    return begin;
 6621|   238k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|   238k|    {
 7138|   238k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   238k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 238k, False: 0]
  ------------------
 7140|   238k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 238k, False: 0]
  ------------------
 7141|   238k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 238k]
  ------------------
 7142|   238k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   238k|        Handler::on_localized();
 7150|   238k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   831k|{
 8428|   831k|#define SCN_VISIT(Type)                                         \
 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   831k|    }                                                           \
 8432|   831k|    else {                                                      \
 8433|   831k|        return vis(monostate_val);                              \
 8434|   831k|    }
 8435|       |
 8436|   831k|    monostate monostate_val{};
 8437|       |
 8438|   831k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 831k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 831k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 831k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 831k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 831k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 831k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 831k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 831k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 831k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 831k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 831k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 831k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 831k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 831k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 831k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   268k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 268k, False: 562k]
  ------------------
 8470|   268k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   268k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   268k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   268k|    }                                                           \
  |  | 8432|   268k|    else {                                                      \
  |  | 8433|   268k|        return vis(monostate_val);                              \
  |  | 8434|   268k|    }
  ------------------
 8471|   548k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 279k, False: 551k]
  ------------------
 8472|   548k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   548k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   548k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   548k|    }                                                           \
  |  | 8432|   548k|    else {                                                      \
  |  | 8433|   548k|        return vis(monostate_val);                              \
  |  | 8434|   548k|    }
  ------------------
 8473|   831k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 282k, False: 548k]
  ------------------
 8474|   831k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8475|   831k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 831k]
  ------------------
 8476|   831k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8477|   831k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 831k]
  ------------------
 8478|   831k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8479|   831k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 831k]
  ------------------
 8480|   831k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8481|   831k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 831k]
  ------------------
 8482|   831k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8483|   831k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 831k]
  ------------------
 8484|   831k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8485|   831k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 831k]
  ------------------
 8486|   831k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   831k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   831k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   831k|    }                                                           \
  |  | 8432|   831k|    else {                                                      \
  |  | 8433|   831k|        return vis(monostate_val);                              \
  |  | 8434|   831k|    }
  ------------------
 8487|       |
 8488|   831k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 831k]
  ------------------
 8489|   831k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   831k|            return vis(
 8491|   831k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 831k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 831k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   831k|            SCN_CLANG_POP
 8506|   831k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  87.0k|    {
 4084|  87.0k|        sync(0);
 4085|  87.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.03M|    {
 5476|  1.03M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.03M|        return static_cast<std::size_t>(m_desc &
 5481|  1.03M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  2.06M|    {
 5501|  2.06M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  2.06M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.03M|    {
 5444|  1.03M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.03M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.03M|        const auto t = type(id);
 5456|  1.03M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.03M|        basic_scan_arg<Context> arg;
 5461|  1.03M|        arg.m_type = t;
 5462|  1.03M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.03M, False: 0]
  ------------------
 5463|  1.03M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.03M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.03M|        return arg;
 5469|  1.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.03M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.03M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.03M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.03M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.03M|    {
 5505|  1.03M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.03M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  1.96M|    {
 5257|  1.96M|        return m_type != detail::arg_type::none_type;
 5258|  1.96M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   150k|{
 8428|   150k|#define SCN_VISIT(Type)                                         \
 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   150k|    }                                                           \
 8432|   150k|    else {                                                      \
 8433|   150k|        return vis(monostate_val);                              \
 8434|   150k|    }
 8435|       |
 8436|   150k|    monostate monostate_val{};
 8437|       |
 8438|   150k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 150k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 150k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 150k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 150k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 150k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 150k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 150k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 150k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 150k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 150k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 150k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 150k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 150k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 150k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 150k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  43.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 43.7k, False: 106k]
  ------------------
 8470|  43.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  43.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  43.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  43.7k|    }                                                           \
  |  | 8432|  43.7k|    else {                                                      \
  |  | 8433|  43.7k|        return vis(monostate_val);                              \
  |  | 8434|  43.7k|    }
  ------------------
 8471|  96.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 52.6k, False: 97.9k]
  ------------------
 8472|  96.4k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  96.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.4k|    }                                                           \
  |  | 8432|  96.4k|    else {                                                      \
  |  | 8433|  96.4k|        return vis(monostate_val);                              \
  |  | 8434|  96.4k|    }
  ------------------
 8473|   150k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 54.1k, False: 96.4k]
  ------------------
 8474|   150k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8475|   150k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 150k]
  ------------------
 8476|   150k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8477|   150k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 150k]
  ------------------
 8478|   150k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8479|   150k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 150k]
  ------------------
 8480|   150k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8481|   150k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 150k]
  ------------------
 8482|   150k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8483|   150k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 150k]
  ------------------
 8484|   150k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8485|   150k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 150k]
  ------------------
 8486|   150k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8487|       |
 8488|   150k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 150k]
  ------------------
 8489|   150k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   150k|            return vis(
 8491|   150k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 150k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 150k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   150k|            SCN_CLANG_POP
 8506|   150k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   832k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   832k|    {
 5555|   832k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   416k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   416k|    {
 8149|   416k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   832k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   832k|    static_cast<    \
  |  |  929|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   832k|    static_cast<    \
  |  |  929|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   832k|    {
 8067|   832k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   416k|{
 7055|   416k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   416k|    handler.check_args_exhausted();
 7057|   416k|    return handler.get_error();
 7058|   416k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   416k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   416k|    auto begin = format.data();
 7024|   416k|    auto it = begin;
 7025|   416k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   698k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 416k, False: 282k]
  ------------------
 7028|   416k|        const auto ch = *it++;
 7029|   416k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 416k, False: 0]
  ------------------
 7030|   416k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   416k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   416k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 282k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   416k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   416k|    }
 7047|       |
 7048|   282k|    handler.on_literal_text(begin, end);
 7049|   282k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   416k|{
 6953|   416k|    struct id_adapter {
 6954|   416k|        constexpr void operator()()
 6955|   416k|        {
 6956|   416k|            arg_id = handler.on_arg_id();
 6957|   416k|        }
 6958|   416k|        constexpr void operator()(std::size_t id)
 6959|   416k|        {
 6960|   416k|            arg_id = handler.on_arg_id(id);
 6961|   416k|        }
 6962|       |
 6963|   416k|        constexpr void on_error(const char* msg)
 6964|   416k|        {
 6965|   416k|            SCN_UNLIKELY_ATTR
 6966|   416k|            handler.on_error(msg);
 6967|   416k|        }
 6968|       |
 6969|   416k|        Handler& handler;
 6970|   416k|        std::size_t arg_id;
 6971|   416k|    };
 6972|       |
 6973|   416k|    ++begin;
 6974|   416k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   416k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 416k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   416k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 416k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   416k|    else {
 6986|   416k|        auto adapter = id_adapter{handler, 0};
 6987|   416k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   416k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   416k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 416k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   416k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 416k, False: 0]
  ------------------
 6998|   416k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   416k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   416k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  |  Branch (859:45): [True: 0, False: 416k]
  |  |  |  Branch (859:45): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   416k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   416k|    }
 7014|   416k|    return begin + 1;
 7015|   416k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   832k|    {
 8050|   832k|        return m_args.get(id);
 8051|   832k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   832k|    {
 8060|   832k|        return m_locale;
 8061|   832k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   832k|    {
 5576|   832k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 832k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   832k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   832k|        do_check_arg_id(id);
 5584|   832k|        return id;
 5585|   832k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   832k|{
 6064|   832k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   832k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   832k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   416k|{
 6454|   416k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   416k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 416k, False: 0]
  |  Branch (6455:26): [True: 0, False: 416k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   416k|    handler();
 6460|   416k|    return begin;
 6461|   416k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   416k|        {
 6956|   416k|            arg_id = handler.on_arg_id();
 6957|   416k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  1.66M|    {
 5262|  1.66M|        return m_type;
 5263|  1.66M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   832k|    {
 5571|   832k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   832k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   566k|{
 4353|   566k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 566k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   566k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   566k|                            ranges::default_sentinel};
 4359|   566k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   566k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   566k|    {
 4185|   566k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   566k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   566k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   566k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   566k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   566k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   566k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  1.66M|    {
 5560|  1.66M|        return m_format.data();
 5561|  1.66M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   416k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   416k|    {
 7133|   416k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   416k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   416k|{
 6869|   416k|    auto do_presentation = [&]() -> const CharT* {
 6870|   416k|        if (*begin == CharT{'['}) {
 6871|   416k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   416k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   416k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   416k|                return begin;
 6877|   416k|            }
 6878|   416k|            handler.on_character_set_string(set);
 6879|   416k|            return begin;
 6880|   416k|        }
 6881|   416k|        if (*begin == CharT{'/'}) {
 6882|   416k|            return parse_presentation_regex(begin, end, handler);
 6883|   416k|        }
 6884|   416k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   416k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   416k|            handler.on_error("Invalid type specifier in format string");
 6887|   416k|            return begin;
 6888|   416k|        }
 6889|   416k|        handler.on_type(type);
 6890|   416k|        return begin;
 6891|   416k|    };
 6892|       |
 6893|   416k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 416k, False: 0]
  |  Branch (6893:28): [True: 416k, False: 0]
  ------------------
 6894|   416k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 416k, False: 0]
  |  Branch (6894:36): [True: 315k, False: 100k]
  ------------------
 6895|   315k|        return do_presentation();
 6896|   315k|    }
 6897|       |
 6898|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   100k|    begin = parse_align(begin, end, handler);
 6904|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   100k|    begin = parse_width(begin, end, handler);
 6910|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   100k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 100k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   100k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 100k, False: 0]
  ------------------
 6929|   100k|        handler.on_localized();
 6930|   100k|        ++begin;
 6931|   100k|    }
 6932|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   100k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 100k, False: 0]
  |  Branch (6937:25): [True: 0, False: 100k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   100k|    return begin;
 6946|   100k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   832k|{
 6518|   832k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 631k, False: 200k]
  |  Branch (6518:33): [True: 631k, False: 0]
  ------------------
 6519|   832k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 200k, False: 0]
  |  Branch (6519:33): [True: 200k, False: 0]
  ------------------
 6520|   832k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   315k|    auto do_presentation = [&]() -> const CharT* {
 6870|   315k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 315k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   315k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 315k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   315k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   315k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 315k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   315k|        handler.on_type(type);
 6890|   315k|        return begin;
 6891|   315k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   631k|{
 6466|   631k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 631k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 631k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 631k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 631k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 631k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 631k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 631k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 631k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 631k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 631k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   219k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 219k, False: 411k]
  ------------------
 6485|   219k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 631k]
  ------------------
 6486|   219k|            return presentation_type::float_hex;
 6487|  54.8k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 54.8k, False: 576k]
  ------------------
 6488|  54.8k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 631k]
  ------------------
 6489|  54.8k|            return presentation_type::float_scientific;
 6490|   164k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 164k, False: 467k]
  ------------------
 6491|   164k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 631k]
  ------------------
 6492|   164k|            return presentation_type::float_fixed;
 6493|   193k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 193k, False: 438k]
  ------------------
 6494|   193k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 631k]
  ------------------
 6495|   193k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 631k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 631k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 631k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 631k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 631k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 631k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 631k]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|   631k|    }
 6513|   631k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|   100k|{
 6543|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   100k|    auto check_align = [](wchar_t ch) {
 6546|   100k|        switch (ch) {
 6547|   100k|            case L'<':
 6548|   100k|                return align_type::left;
 6549|   100k|            case L'>':
 6550|   100k|                return align_type::right;
 6551|   100k|            case L'^':
 6552|   100k|                return align_type::center;
 6553|   100k|            default:
 6554|   100k|                return align_type::none;
 6555|   100k|        }
 6556|   100k|    };
 6557|       |
 6558|   100k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   100k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  |  Branch (859:45): [True: 0, False: 100k]
  |  |  |  Branch (859:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6560|   100k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   100k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   100k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   100k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   100k|    const auto begin_before_fill = begin;
 6570|   100k|    begin += potential_fill_len;
 6571|       |
 6572|   100k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 100k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   100k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   100k|    const auto begin_after_fill = begin;
 6578|   100k|    ++begin;
 6579|       |
 6580|   100k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 100k, False: 0]
  ------------------
 6581|   100k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   100k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 100k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   100k|    }
 6589|       |
 6590|   100k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 100k, False: 0]
  ------------------
 6591|   100k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 100k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   100k|        return begin_before_fill;
 6596|   100k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   100k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   200k|{
 6525|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   200k|    if constexpr (sizeof(CharT) != 1) {
 6527|   200k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   200k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   200k|    auto check_align = [](wchar_t ch) {
 6546|   200k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 200k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 200k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 200k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   200k|            default:
  ------------------
  |  Branch (6553:13): [True: 200k, False: 0]
  ------------------
 6554|   200k|                return align_type::none;
 6555|   200k|        }
 6556|   200k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|   100k|{
 6608|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   100k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 100k, False: 0]
  |  Branch (6610:33): [True: 0, False: 100k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   100k|    return begin;
 6621|   100k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|   100k|    {
 7138|   100k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   100k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 100k, False: 0]
  ------------------
 7140|   100k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 100k, False: 0]
  ------------------
 7141|   100k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 100k]
  ------------------
 7142|   100k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   100k|        Handler::on_localized();
 7150|   100k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   416k|{
 8428|   416k|#define SCN_VISIT(Type)                                         \
 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   416k|    }                                                           \
 8432|   416k|    else {                                                      \
 8433|   416k|        return vis(monostate_val);                              \
 8434|   416k|    }
 8435|       |
 8436|   416k|    monostate monostate_val{};
 8437|       |
 8438|   416k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 416k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 416k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 416k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 416k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 416k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 416k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 416k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 416k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 416k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 416k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 416k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 416k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 416k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 416k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 416k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   130k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 130k, False: 286k]
  ------------------
 8470|   130k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   130k|    }                                                           \
  |  | 8432|   130k|    else {                                                      \
  |  | 8433|   130k|        return vis(monostate_val);                              \
  |  | 8434|   130k|    }
  ------------------
 8471|   272k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 142k, False: 274k]
  ------------------
 8472|   272k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   272k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   272k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   272k|    }                                                           \
  |  | 8432|   272k|    else {                                                      \
  |  | 8433|   272k|        return vis(monostate_val);                              \
  |  | 8434|   272k|    }
  ------------------
 8473|   416k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 144k, False: 272k]
  ------------------
 8474|   416k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8475|   416k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 416k]
  ------------------
 8476|   416k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8477|   416k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 416k]
  ------------------
 8478|   416k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8479|   416k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 416k]
  ------------------
 8480|   416k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8481|   416k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 416k]
  ------------------
 8482|   416k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8483|   416k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 416k]
  ------------------
 8484|   416k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8485|   416k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 416k]
  ------------------
 8486|   416k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8487|       |
 8488|   416k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 416k]
  ------------------
 8489|   416k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   416k|            return vis(
 8491|   416k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 416k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 416k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   416k|            SCN_CLANG_POP
 8506|   416k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   150k|{
 8428|   150k|#define SCN_VISIT(Type)                                         \
 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   150k|    }                                                           \
 8432|   150k|    else {                                                      \
 8433|   150k|        return vis(monostate_val);                              \
 8434|   150k|    }
 8435|       |
 8436|   150k|    monostate monostate_val{};
 8437|       |
 8438|   150k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 150k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 150k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 150k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 150k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 150k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 150k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 150k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 150k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 150k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 150k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 150k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 150k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 150k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 150k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 150k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  43.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 43.7k, False: 106k]
  ------------------
 8470|  43.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  43.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  43.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  43.7k|    }                                                           \
  |  | 8432|  43.7k|    else {                                                      \
  |  | 8433|  43.7k|        return vis(monostate_val);                              \
  |  | 8434|  43.7k|    }
  ------------------
 8471|  96.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 52.6k, False: 97.8k]
  ------------------
 8472|  96.3k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  96.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.3k|    }                                                           \
  |  | 8432|  96.3k|    else {                                                      \
  |  | 8433|  96.3k|        return vis(monostate_val);                              \
  |  | 8434|  96.3k|    }
  ------------------
 8473|   150k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 54.0k, False: 96.3k]
  ------------------
 8474|   150k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8475|   150k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 150k]
  ------------------
 8476|   150k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8477|   150k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 150k]
  ------------------
 8478|   150k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8479|   150k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 150k]
  ------------------
 8480|   150k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8481|   150k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 150k]
  ------------------
 8482|   150k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8483|   150k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 150k]
  ------------------
 8484|   150k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8485|   150k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 150k]
  ------------------
 8486|   150k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   150k|    }                                                           \
  |  | 8432|   150k|    else {                                                      \
  |  | 8433|   150k|        return vis(monostate_val);                              \
  |  | 8434|   150k|    }
  ------------------
 8487|       |
 8488|   150k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 150k]
  ------------------
 8489|   150k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   150k|            return vis(
 8491|   150k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 150k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 150k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   150k|            SCN_CLANG_POP
 8506|   150k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   416k|{
 7055|   416k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   416k|    handler.check_args_exhausted();
 7057|   416k|    return handler.get_error();
 7058|   416k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   416k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   416k|    auto begin = format.data();
 7024|   416k|    auto it = begin;
 7025|   416k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   698k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 416k, False: 282k]
  ------------------
 7028|   416k|        const auto ch = *it++;
 7029|   416k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 416k, False: 0]
  ------------------
 7030|   416k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   416k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   416k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 282k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   416k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   416k|    }
 7047|       |
 7048|   282k|    handler.on_literal_text(begin, end);
 7049|   282k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   282k|    {
 8186|   282k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   282k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   416k|{
 6953|   416k|    struct id_adapter {
 6954|   416k|        constexpr void operator()()
 6955|   416k|        {
 6956|   416k|            arg_id = handler.on_arg_id();
 6957|   416k|        }
 6958|   416k|        constexpr void operator()(std::size_t id)
 6959|   416k|        {
 6960|   416k|            arg_id = handler.on_arg_id(id);
 6961|   416k|        }
 6962|       |
 6963|   416k|        constexpr void on_error(const char* msg)
 6964|   416k|        {
 6965|   416k|            SCN_UNLIKELY_ATTR
 6966|   416k|            handler.on_error(msg);
 6967|   416k|        }
 6968|       |
 6969|   416k|        Handler& handler;
 6970|   416k|        std::size_t arg_id;
 6971|   416k|    };
 6972|       |
 6973|   416k|    ++begin;
 6974|   416k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   416k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 416k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   416k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 416k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   416k|    else {
 6986|   416k|        auto adapter = id_adapter{handler, 0};
 6987|   416k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   416k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   416k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 416k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   416k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 416k, False: 0]
  ------------------
 6998|   416k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   416k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   416k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  |  Branch (859:45): [True: 0, False: 416k]
  |  |  |  Branch (859:45): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   416k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   416k|    }
 7014|   416k|    return begin + 1;
 7015|   416k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   416k|{
 6454|   416k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   416k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 416k, False: 0]
  |  Branch (6455:26): [True: 0, False: 416k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   416k|    handler();
 6460|   416k|    return begin;
 6461|   416k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   416k|        {
 6956|   416k|            arg_id = handler.on_arg_id();
 6957|   416k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   416k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   416k|    {
 7133|   416k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   416k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   416k|{
 6869|   416k|    auto do_presentation = [&]() -> const CharT* {
 6870|   416k|        if (*begin == CharT{'['}) {
 6871|   416k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   416k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   416k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   416k|                return begin;
 6877|   416k|            }
 6878|   416k|            handler.on_character_set_string(set);
 6879|   416k|            return begin;
 6880|   416k|        }
 6881|   416k|        if (*begin == CharT{'/'}) {
 6882|   416k|            return parse_presentation_regex(begin, end, handler);
 6883|   416k|        }
 6884|   416k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   416k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   416k|            handler.on_error("Invalid type specifier in format string");
 6887|   416k|            return begin;
 6888|   416k|        }
 6889|   416k|        handler.on_type(type);
 6890|   416k|        return begin;
 6891|   416k|    };
 6892|       |
 6893|   416k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 416k, False: 0]
  |  Branch (6893:28): [True: 416k, False: 0]
  ------------------
 6894|   416k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 416k, False: 0]
  |  Branch (6894:36): [True: 315k, False: 100k]
  ------------------
 6895|   315k|        return do_presentation();
 6896|   315k|    }
 6897|       |
 6898|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   100k|    begin = parse_align(begin, end, handler);
 6904|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   100k|    begin = parse_width(begin, end, handler);
 6910|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   100k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 100k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   100k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 100k, False: 0]
  ------------------
 6929|   100k|        handler.on_localized();
 6930|   100k|        ++begin;
 6931|   100k|    }
 6932|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   100k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 100k, False: 0]
  |  Branch (6937:25): [True: 0, False: 100k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   100k|    return begin;
 6946|   100k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   315k|    auto do_presentation = [&]() -> const CharT* {
 6870|   315k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 315k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   315k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 315k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   315k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   315k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 315k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   315k|        handler.on_type(type);
 6890|   315k|        return begin;
 6891|   315k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|   100k|{
 6543|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   100k|    auto check_align = [](wchar_t ch) {
 6546|   100k|        switch (ch) {
 6547|   100k|            case L'<':
 6548|   100k|                return align_type::left;
 6549|   100k|            case L'>':
 6550|   100k|                return align_type::right;
 6551|   100k|            case L'^':
 6552|   100k|                return align_type::center;
 6553|   100k|            default:
 6554|   100k|                return align_type::none;
 6555|   100k|        }
 6556|   100k|    };
 6557|       |
 6558|   100k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   100k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  |  Branch (859:45): [True: 0, False: 100k]
  |  |  |  Branch (859:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6560|   100k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   100k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   100k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   100k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   100k|    const auto begin_before_fill = begin;
 6570|   100k|    begin += potential_fill_len;
 6571|       |
 6572|   100k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 100k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   100k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   100k|    const auto begin_after_fill = begin;
 6578|   100k|    ++begin;
 6579|       |
 6580|   100k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 100k, False: 0]
  ------------------
 6581|   100k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   100k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 100k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   100k|    }
 6589|       |
 6590|   100k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 100k, False: 0]
  ------------------
 6591|   100k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 100k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   100k|        return begin_before_fill;
 6596|   100k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   100k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   200k|    auto check_align = [](wchar_t ch) {
 6546|   200k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 200k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 200k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 200k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   200k|            default:
  ------------------
  |  Branch (6553:13): [True: 200k, False: 0]
  ------------------
 6554|   200k|                return align_type::none;
 6555|   200k|        }
 6556|   200k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|   100k|{
 6608|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   100k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 100k, False: 0]
  |  Branch (6610:33): [True: 0, False: 100k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   100k|    return begin;
 6621|   100k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|   100k|    {
 7138|   100k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   100k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 100k, False: 0]
  ------------------
 7140|   100k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 100k, False: 0]
  ------------------
 7141|   100k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 100k]
  ------------------
 7142|   100k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   100k|        Handler::on_localized();
 7150|   100k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   416k|{
 8428|   416k|#define SCN_VISIT(Type)                                         \
 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   416k|    }                                                           \
 8432|   416k|    else {                                                      \
 8433|   416k|        return vis(monostate_val);                              \
 8434|   416k|    }
 8435|       |
 8436|   416k|    monostate monostate_val{};
 8437|       |
 8438|   416k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 416k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 416k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 416k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 416k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 416k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 416k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 416k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 416k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 416k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 416k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 416k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 416k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 416k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 416k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 416k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   130k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 130k, False: 285k]
  ------------------
 8470|   130k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   130k|    }                                                           \
  |  | 8432|   130k|    else {                                                      \
  |  | 8433|   130k|        return vis(monostate_val);                              \
  |  | 8434|   130k|    }
  ------------------
 8471|   272k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 141k, False: 274k]
  ------------------
 8472|   272k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   272k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   272k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   272k|    }                                                           \
  |  | 8432|   272k|    else {                                                      \
  |  | 8433|   272k|        return vis(monostate_val);                              \
  |  | 8434|   272k|    }
  ------------------
 8473|   416k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 143k, False: 272k]
  ------------------
 8474|   416k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8475|   416k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 416k]
  ------------------
 8476|   416k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8477|   416k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 416k]
  ------------------
 8478|   416k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8479|   416k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 416k]
  ------------------
 8480|   416k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8481|   416k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 416k]
  ------------------
 8482|   416k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8483|   416k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 416k]
  ------------------
 8484|   416k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8485|   416k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 416k]
  ------------------
 8486|   416k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   416k|    }                                                           \
  |  | 8432|   416k|    else {                                                      \
  |  | 8433|   416k|        return vis(monostate_val);                              \
  |  | 8434|   416k|    }
  ------------------
 8487|       |
 8488|   416k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 416k]
  ------------------
 8489|   416k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   416k|            return vis(
 8491|   416k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 416k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 416k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   416k|            SCN_CLANG_POP
 8506|   416k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   174k|    {
 4084|   174k|        sync(0);
 4085|   174k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   207k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   100k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  79.6k|{
   89|  79.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  79.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  79.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  79.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   258k|{
   44|   258k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   258k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  79.6k|{
  127|  79.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  79.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  79.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  79.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   258k|{
   60|   258k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   258k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  14.5k|{
  163|  14.5k|    T value;
  164|  14.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  50.2k|{
   72|  50.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  50.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  88.5k|{
   89|  88.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  88.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  88.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  88.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  88.5k|{
  127|  88.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  88.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  88.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  88.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  17.5k|{
  163|  17.5k|    T value;
  164|  17.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  90.0k|{
   89|  90.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  90.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  90.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  90.0k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  90.0k|{
  127|  90.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  90.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  90.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  90.0k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  18.0k|{
  163|  18.0k|    T value;
  164|  18.0k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  18.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.5k|    static_cast<    \
  |  |  929|  13.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.5k|    static_cast<    \
  |  |  929|  13.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.0k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  79.6k|{
   89|  79.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  79.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  79.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  79.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   258k|{
   44|   258k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   258k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  79.6k|{
  127|  79.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  79.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  79.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.6k|    static_cast<    \
  |  |  929|  79.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  79.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   258k|{
   60|   258k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   258k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  14.5k|{
  163|  14.5k|    T value;
  164|  14.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  50.1k|{
   72|  50.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  50.1k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  88.5k|{
   89|  88.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  88.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  88.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  88.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  88.5k|{
  127|  88.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  88.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  88.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  88.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  17.5k|{
  163|  17.5k|    T value;
  164|  17.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  90.0k|{
   89|  90.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  90.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  90.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  90.0k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  90.0k|{
  127|  90.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  90.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  90.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  90.0k|    static_cast<    \
  |  |  929|  90.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  90.0k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  18.0k|{
  163|  18.0k|    T value;
  164|  18.0k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  18.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.46k|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.5k|    static_cast<    \
  |  |  929|  13.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.5k|    static_cast<    \
  |  |  929|  13.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.0k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.49M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.49M|{
  653|  1.49M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.49M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   628k|{
  659|   628k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   628k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 314k, False: 314k]
  ------------------
  661|   628k|                    : std::locale{};
  662|   628k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   656k|{
 1221|   656k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   656k|                                  m_nan_payload_buffer, value);
 1223|   656k|    value = this->setsign(value);
 1224|   656k|    return n;
 1225|   656k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   264k|{
 1221|   264k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   264k|                                  m_nan_payload_buffer, value);
 1223|   264k|    value = this->setsign(value);
 1224|   264k|    return n;
 1225|   264k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   681k|{
 1221|   681k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   681k|                                  m_nan_payload_buffer, value);
 1223|   681k|    value = this->setsign(value);
 1224|   681k|    return n;
 1225|   681k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   304k|{
 1221|   304k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   304k|                                  m_nan_payload_buffer, value);
 1223|   304k|    value = this->setsign(value);
 1224|   304k|    return n;
 1225|   304k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   687k|{
 1221|   687k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   687k|                                  m_nan_payload_buffer, value);
 1223|   687k|    value = this->setsign(value);
 1224|   687k|    return n;
 1225|   687k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   310k|{
 1221|   310k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   310k|                                  m_nan_payload_buffer, value);
 1223|   310k|    value = this->setsign(value);
 1224|   310k|    return n;
 1225|   310k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   451k|{
 2184|   451k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   451k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   524k|{
 2192|   524k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   524k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 483k, False: 40.1k]
  |  |  ------------------
  ------------------
 2194|   483k|        source.sync(*n);
 2195|   483k|    }
 2196|  40.1k|    else {
 2197|  40.1k|        source.sync_all();
 2198|  40.1k|    }
 2199|   524k|    return n;
 2200|   524k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   258k|{
 2208|   258k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   258k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   258k|{
 2216|   258k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   258k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   258k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 177k, False: 80.3k]
  |  |  ------------------
  ------------------
 2218|   177k|        source.sync(*n);
 2219|   177k|    }
 2220|  80.3k|    else {
 2221|  80.3k|        source.sync_all();
 2222|  80.3k|    }
 2223|   258k|    return n;
 2224|   258k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   903k|{
  194|   903k|    return find_classic_impl(
  195|   903k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   903k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   903k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.15M|{
  202|  2.15M|    return find_classic_impl(
  203|  2.15M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.15M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  2.15M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   451k|{
 2141|   451k|    return vscan_internal(source, format, args);
 2142|   451k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   524k|{
 2147|   524k|    auto n = vscan_internal(source, format, args);
 2148|   524k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 483k, False: 40.1k]
  |  |  ------------------
  ------------------
 2149|   483k|        source.sync(*n);
 2150|   483k|    }
 2151|  40.1k|    else {
 2152|  40.1k|        source.sync_all();
 2153|  40.1k|    }
 2154|   524k|    return n;
 2155|   524k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   258k|{
 2161|   258k|    return vscan_internal(source, format, args);
 2162|   258k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   258k|{
 2167|   258k|    auto n = vscan_internal(source, format, args);
 2168|   258k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   258k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 177k, False: 80.3k]
  |  |  ------------------
  ------------------
 2169|   177k|        source.sync(*n);
 2170|   177k|    }
 2171|  80.3k|    else {
 2172|  80.3k|        source.sync_all();
 2173|  80.3k|    }
 2174|   258k|    return n;
 2175|   258k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  99.0k|{
 2251|  99.0k|    return vscan_value_internal(source, arg);
 2252|  99.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   108k|{
 2256|   108k|    auto n = vscan_value_internal(source, arg);
 2257|   108k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 101k, False: 6.69k]
  |  |  ------------------
  ------------------
 2258|   101k|        source.sync(*n);
 2259|   101k|    }
 2260|  6.69k|    else {
 2261|  6.69k|        source.sync_all();
 2262|  6.69k|    }
 2263|   108k|    return n;
 2264|   108k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  50.2k|{
 2270|  50.2k|    return vscan_value_internal(source, arg);
 2271|  50.2k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  50.1k|{
 2276|  50.1k|    auto n = vscan_value_internal(source, arg);
 2277|  50.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.7k, False: 13.3k]
  |  |  ------------------
  ------------------
 2278|  36.7k|        source.sync(*n);
 2279|  36.7k|    }
 2280|  13.3k|    else {
 2281|  13.3k|        source.sync_all();
 2282|  13.3k|    }
 2283|  50.1k|    return n;
 2284|  50.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   903k|{
  118|   903k|    auto it = source.begin();
  119|       |
  120|  2.97M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.39M, False: 581k]
  ------------------
  121|  2.39M|        auto sv =
  122|  2.39M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.39M|                .substr(0, 8);
  124|       |
  125|  2.39M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.33M, False: 55.5k]
  ------------------
  126|  2.33M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.33M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.33M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 299k, False: 2.03M]
  ------------------
  129|   299k|                break;
  130|   299k|            }
  131|  2.03M|            continue;
  132|  2.33M|        }
  133|       |
  134|   182k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 149k, False: 32.8k]
  ------------------
  135|   149k|            auto tmp =
  136|   149k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   149k|            auto res = get_next_code_point(tmp);
  138|   149k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 22.7k, False: 126k]
  ------------------
  139|  22.7k|                return it;
  140|  22.7k|            }
  141|   126k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   126k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   126k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   126k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   126k|        }
  145|  55.5k|    }
  146|       |
  147|   881k|    return detail::make_string_view_iterator(source, it);
  148|   903k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.71M|{
  105|  3.71M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.71M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.71M|    uint64_t word{};
  108|  3.71M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.71M|    return has_byte_greater(word, 127) != 0;
  111|  3.71M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   149k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.15M|{
  118|  2.15M|    auto it = source.begin();
  119|       |
  120|  2.34M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.32M, False: 1.02M]
  ------------------
  121|  1.32M|        auto sv =
  122|  1.32M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.32M|                .substr(0, 8);
  124|       |
  125|  1.32M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.24M, False: 77.3k]
  ------------------
  126|  1.24M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.24M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.24M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.05M, False: 190k]
  ------------------
  129|  1.05M|                break;
  130|  1.05M|            }
  131|   190k|            continue;
  132|  1.24M|        }
  133|       |
  134|   146k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 139k, False: 7.57k]
  ------------------
  135|   139k|            auto tmp =
  136|   139k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   139k|            auto res = get_next_code_point(tmp);
  138|   139k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 69.7k, False: 69.4k]
  ------------------
  139|  69.7k|                return it;
  140|  69.7k|            }
  141|  69.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  69.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  69.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  69.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  69.4k|        }
  145|  77.3k|    }
  146|       |
  147|  2.08M|    return detail::make_string_view_iterator(source, it);
  148|  2.15M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.90M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   139k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   656k|{
 1138|   656k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 3.64k, False: 652k]
  ------------------
 1139|  3.64k|        value = std::numeric_limits<T>::infinity();
 1140|  3.64k|        return 3;
 1141|  3.64k|    }
 1142|   652k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.24k, False: 649k]
  ------------------
 1143|  3.24k|        value = std::numeric_limits<T>::infinity();
 1144|  3.24k|        return 8;
 1145|  3.24k|    }
 1146|   649k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 28.8k, False: 620k]
  ------------------
 1147|  28.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  28.8k|        return 3;
 1149|  28.8k|    }
 1150|   620k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 962, False: 619k]
  ------------------
 1151|    962|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    962|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    962|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    962|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    962|    }
 1182|       |
 1183|   619k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   619k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   619k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   619k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 133k, False: 486k]
  ------------------
 1185|   133k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 130k]
  |  |  ------------------
  ------------------
 1186|  2.72k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.72k|                                         "Invalid floating-point digit");
 1188|  2.72k|        }
 1189|   133k|    }
 1190|   617k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.30k, False: 609k]
  |  |  ------------------
  ------------------
 1191|  7.30k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.30k|                                     "Invalid floating-point digit");
 1193|  7.30k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   609k|    else {
 1211|       |        // Default to fast_float
 1212|   609k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   609k|    }
 1214|   609k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   609k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   609k|    {
 1078|   609k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.20M|    {
  712|  2.20M|        return {kind, options};
  713|  2.20M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   609k|    {
 1082|   609k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 130k, False: 479k]
  ------------------
 1083|   609k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 24.6k, False: 454k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   155k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   155k|                                              value);
 1087|   155k|        }
 1088|       |
 1089|   454k|        const auto flags = get_flags();
 1090|   454k|        const auto view = get_view();
 1091|   454k|        const auto result = fast_float::from_chars(
 1092|   454k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   454k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   454k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.80k, False: 449k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.80k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.80k|                                              value);
 1102|  4.80k|        }
 1103|       |
 1104|   449k|        return result.ptr - view.data();
 1105|   454k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   160k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   160k|    {
 1048|   160k|#if !SCN_DISABLE_STRTOD
 1049|   160k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   160k|    }
 1056|   160k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   160k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   160k|    {
  894|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   219k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   160k|    {
  898|   160k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   160k|                           generic_strtod);
  900|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   160k|    {
  732|   160k|        CharT* end{};
  733|   160k|        errno = 0;
  734|   160k|        value = strtod_cb(src, &end);
  735|   160k|        const auto saved_errno = errno;
  736|   160k|        auto chars_read = end - src;
  737|       |
  738|   160k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   160k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.64k, False: 154k]
  |  |  ------------------
  ------------------
  740|  5.64k|            return unexpected(e);
  741|  5.64k|        }
  742|       |
  743|   154k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 129k, False: 24.4k]
  ------------------
  744|   154k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 129k, False: 0]
  ------------------
  745|   129k|            chars_read -= 2;
  746|   129k|        }
  747|       |
  748|   154k|        return chars_read;
  749|   160k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   219k|    {
  778|   219k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 85.5k, False: 133k]
  |  Branch (778:37): [True: 0, False: 85.5k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   219k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 25.0k, False: 194k]
  ------------------
  785|   219k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 25.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   219k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 9.11k, False: 210k]
  |  Branch (791:34): [True: 1.71k, False: 7.40k]
  ------------------
  792|  1.71k|            SCN_UNLIKELY_ATTR
  793|  1.71k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.71k|        }
  795|       |
  796|   217k|        SCN_GCC_COMPAT_PUSH
  797|   217k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   217k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 217k, False: 0]
  ------------------
  800|   217k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 217k, False: 0]
  ------------------
  801|   217k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 7.38k, False: 210k]
  ------------------
  802|  7.38k|            SCN_UNLIKELY_ATTR
  803|  7.38k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  7.38k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   210k|            return {};
  809|   217k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   228k|{
  687|   228k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 87.2k, False: 141k]
  |  Branch (687:25): [True: 0, False: 141k]
  ------------------
  688|   228k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   160k|    {
  755|   160k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 156k, False: 4.01k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   156k|            auto first_space = read_until_classic_space(input.view());
  758|   156k|            input.assign(
  759|   156k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   156k|        }
  761|       |
  762|   160k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 130k, False: 29.4k]
  ------------------
  763|   130k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   130k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   130k|        }
  770|       |
  771|   160k|        return input.get_allocated_string().c_str();
  772|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   160k|    {
  905|   160k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   160k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   160k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   160k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   160k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   160k|        if constexpr (std::is_same_v<T, float>) {
  838|   160k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   160k|#endif
  847|   160k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.32M|    {
 1061|  1.32M|        unsigned format_flags{};
 1062|  1.32M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.31M, False: 10.3k]
  ------------------
 1063|  1.31M|            format_flags |= fast_float::fixed;
 1064|  1.31M|        }
 1065|  1.32M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.12M, False: 199k]
  ------------------
 1066|  1.12M|            format_flags |= fast_float::scientific;
 1067|  1.12M|        }
 1068|       |
 1069|  1.32M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.32M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   454k|    {
 1110|   454k|        if constexpr (sizeof(CharT) == 1) {
 1111|   454k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   454k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   264k|{
 1138|   264k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 264k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   264k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 264k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   264k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 264k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   264k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 264k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   264k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   264k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 63.9k, False: 200k]
  ------------------
 1185|  63.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.56k, False: 55.3k]
  |  |  ------------------
  ------------------
 1186|  8.56k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.56k|                                         "Invalid floating-point digit");
 1188|  8.56k|        }
 1189|  63.9k|    }
 1190|   255k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 235k]
  |  |  ------------------
  ------------------
 1191|  20.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.7k|                                     "Invalid floating-point digit");
 1193|  20.7k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   235k|    else {
 1211|       |        // Default to fast_float
 1212|   235k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   235k|    }
 1214|   235k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   235k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   235k|    {
 1078|   235k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   906k|    {
  712|   906k|        return {kind, options};
  713|   906k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   235k|    {
 1082|   235k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 55.3k, False: 179k]
  ------------------
 1083|   235k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 370, False: 179k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  55.6k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  55.6k|                                              value);
 1087|  55.6k|        }
 1088|       |
 1089|   179k|        const auto flags = get_flags();
 1090|   179k|        const auto view = get_view();
 1091|   179k|        const auto result = fast_float::from_chars(
 1092|   179k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   179k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   179k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 176k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.38k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.38k|                                              value);
 1102|  3.38k|        }
 1103|       |
 1104|   176k|        return result.ptr - view.data();
 1105|   179k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  59.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  59.0k|    {
 1048|  59.0k|#if !SCN_DISABLE_STRTOD
 1049|  59.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  59.0k|    }
 1056|  59.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  59.0k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  59.0k|    {
  894|  59.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  59.0k|    {
  898|  59.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  59.0k|                           generic_strtod);
  900|  59.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  59.0k|    {
  732|  59.0k|        CharT* end{};
  733|  59.0k|        errno = 0;
  734|  59.0k|        value = strtod_cb(src, &end);
  735|  59.0k|        const auto saved_errno = errno;
  736|  59.0k|        auto chars_read = end - src;
  737|       |
  738|  59.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  59.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  59.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 55.6k]
  |  |  ------------------
  ------------------
  740|  3.44k|            return unexpected(e);
  741|  3.44k|        }
  742|       |
  743|  55.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 55.2k, False: 370]
  ------------------
  744|  55.6k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 55.2k, False: 0]
  ------------------
  745|  55.2k|            chars_read -= 2;
  746|  55.2k|        }
  747|       |
  748|  55.6k|        return chars_read;
  749|  59.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  59.0k|    {
  755|  59.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 56.9k, False: 2.09k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  56.9k|            auto first_space = read_until_classic_space(input.view());
  758|  56.9k|            input.assign(
  759|  56.9k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  56.9k|        }
  761|       |
  762|  59.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 55.3k, False: 3.75k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  55.3k|            else {
  767|  55.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  55.3k|            }
  769|  55.3k|        }
  770|       |
  771|  59.0k|        return input.get_allocated_string().c_str();
  772|  59.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  59.0k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  59.0k|        else {
  909|  59.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  59.0k|        }
  911|  59.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  59.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  59.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  59.0k|        if constexpr (std::is_same_v<T, float>) {
  876|  59.0k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  59.0k|#endif
  885|  59.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   179k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   179k|        else {
 1119|   179k|            return std::u32string_view{
 1120|   179k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   179k|                m_input.view().size()};
 1122|   179k|        }
 1123|   179k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   681k|{
 1138|   681k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.00k, False: 677k]
  ------------------
 1139|  4.00k|        value = std::numeric_limits<T>::infinity();
 1140|  4.00k|        return 3;
 1141|  4.00k|    }
 1142|   677k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.46k, False: 674k]
  ------------------
 1143|  3.46k|        value = std::numeric_limits<T>::infinity();
 1144|  3.46k|        return 8;
 1145|  3.46k|    }
 1146|   674k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.4k, False: 644k]
  ------------------
 1147|  29.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.4k|        return 3;
 1149|  29.4k|    }
 1150|   644k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.06k, False: 643k]
  ------------------
 1151|  1.06k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.06k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.06k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.06k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.06k|    }
 1182|       |
 1183|   643k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   643k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 136k, False: 506k]
  ------------------
 1185|   136k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.80k, False: 133k]
  |  |  ------------------
  ------------------
 1186|  2.80k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.80k|                                         "Invalid floating-point digit");
 1188|  2.80k|        }
 1189|   136k|    }
 1190|   640k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.77k, False: 632k]
  |  |  ------------------
  ------------------
 1191|  7.77k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.77k|                                     "Invalid floating-point digit");
 1193|  7.77k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   632k|    else {
 1211|       |        // Default to fast_float
 1212|   632k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   632k|    }
 1214|   632k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   632k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   632k|    {
 1078|   632k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   632k|    {
 1082|   632k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 133k, False: 499k]
  ------------------
 1083|   632k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 27.1k, False: 472k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   160k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   160k|                                              value);
 1087|   160k|        }
 1088|       |
 1089|   472k|        const auto flags = get_flags();
 1090|   472k|        const auto view = get_view();
 1091|   472k|        const auto result = fast_float::from_chars(
 1092|   472k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   472k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 472k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   472k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 469k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.22k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.22k|                                              value);
 1102|  2.22k|        }
 1103|       |
 1104|   469k|        return result.ptr - view.data();
 1105|   472k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   163k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   163k|    {
 1048|   163k|#if !SCN_DISABLE_STRTOD
 1049|   163k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   163k|    }
 1056|   163k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   163k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   163k|    {
  894|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   220k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   163k|    {
  898|   163k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   163k|                           generic_strtod);
  900|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   163k|    {
  732|   163k|        CharT* end{};
  733|   163k|        errno = 0;
  734|   163k|        value = strtod_cb(src, &end);
  735|   163k|        const auto saved_errno = errno;
  736|   163k|        auto chars_read = end - src;
  737|       |
  738|   163k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   163k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.65k, False: 160k]
  |  |  ------------------
  ------------------
  740|  2.65k|            return unexpected(e);
  741|  2.65k|        }
  742|       |
  743|   160k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 133k, False: 27.0k]
  ------------------
  744|   160k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 133k, False: 0]
  ------------------
  745|   133k|            chars_read -= 2;
  746|   133k|        }
  747|       |
  748|   160k|        return chars_read;
  749|   163k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   220k|    {
  778|   220k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 84.8k, False: 135k]
  |  Branch (778:37): [True: 0, False: 84.8k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   220k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.4k, False: 192k]
  ------------------
  785|   220k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   220k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.31k, False: 215k]
  |  Branch (791:34): [True: 443, False: 3.87k]
  ------------------
  792|    443|            SCN_UNLIKELY_ATTR
  793|    443|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    443|        }
  795|       |
  796|   219k|        SCN_GCC_COMPAT_PUSH
  797|   219k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   219k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 219k, False: 0]
  ------------------
  800|   219k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 219k, False: 0]
  ------------------
  801|   219k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.87k, False: 215k]
  ------------------
  802|  3.87k|            SCN_UNLIKELY_ATTR
  803|  3.87k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.87k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   215k|            return {};
  809|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   224k|{
  691|   224k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 85.2k, False: 139k]
  |  Branch (691:24): [True: 0, False: 139k]
  ------------------
  692|   224k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   163k|    {
  755|   163k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 160k, False: 2.90k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   160k|            auto first_space = read_until_classic_space(input.view());
  758|   160k|            input.assign(
  759|   160k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   160k|        }
  761|       |
  762|   163k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 133k, False: 29.3k]
  ------------------
  763|   133k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   133k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   133k|        }
  770|       |
  771|   163k|        return input.get_allocated_string().c_str();
  772|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   163k|    {
  905|   163k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   163k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   163k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   163k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   163k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   163k|        else if constexpr (std::is_same_v<T, double>) {
  841|   163k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   163k|#endif
  847|   163k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   472k|    {
 1110|   472k|        if constexpr (sizeof(CharT) == 1) {
 1111|   472k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   472k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   304k|{
 1138|   304k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 304k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   304k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 304k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   304k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 304k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   304k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 304k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   304k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   304k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 63.9k, False: 240k]
  ------------------
 1185|  63.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.56k, False: 55.3k]
  |  |  ------------------
  ------------------
 1186|  8.56k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.56k|                                         "Invalid floating-point digit");
 1188|  8.56k|        }
 1189|  63.9k|    }
 1190|   296k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.2k, False: 274k]
  |  |  ------------------
  ------------------
 1191|  21.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  21.2k|                                     "Invalid floating-point digit");
 1193|  21.2k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   274k|    else {
 1211|       |        // Default to fast_float
 1212|   274k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   274k|    }
 1214|   274k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   274k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   274k|    {
 1078|   274k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   274k|    {
 1082|   274k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 55.3k, False: 219k]
  ------------------
 1083|   274k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 370, False: 219k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  55.6k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  55.6k|                                              value);
 1087|  55.6k|        }
 1088|       |
 1089|   219k|        const auto flags = get_flags();
 1090|   219k|        const auto view = get_view();
 1091|   219k|        const auto result = fast_float::from_chars(
 1092|   219k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   219k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   219k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 217k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.61k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.61k|                                              value);
 1102|  1.61k|        }
 1103|       |
 1104|   217k|        return result.ptr - view.data();
 1105|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  57.3k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  57.3k|    {
 1048|  57.3k|#if !SCN_DISABLE_STRTOD
 1049|  57.3k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  57.3k|    }
 1056|  57.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  57.3k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  57.3k|    {
  894|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  57.3k|    {
  898|  57.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  57.3k|                           generic_strtod);
  900|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  57.3k|    {
  732|  57.3k|        CharT* end{};
  733|  57.3k|        errno = 0;
  734|  57.3k|        value = strtod_cb(src, &end);
  735|  57.3k|        const auto saved_errno = errno;
  736|  57.3k|        auto chars_read = end - src;
  737|       |
  738|  57.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  57.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.66k, False: 55.6k]
  |  |  ------------------
  ------------------
  740|  1.66k|            return unexpected(e);
  741|  1.66k|        }
  742|       |
  743|  55.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 55.2k, False: 370]
  ------------------
  744|  55.6k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 55.2k, False: 0]
  ------------------
  745|  55.2k|            chars_read -= 2;
  746|  55.2k|        }
  747|       |
  748|  55.6k|        return chars_read;
  749|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  57.3k|    {
  755|  57.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 56.0k, False: 1.22k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  56.0k|            auto first_space = read_until_classic_space(input.view());
  758|  56.0k|            input.assign(
  759|  56.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  56.0k|        }
  761|       |
  762|  57.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 55.3k, False: 1.98k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  55.3k|            else {
  767|  55.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  55.3k|            }
  769|  55.3k|        }
  770|       |
  771|  57.3k|        return input.get_allocated_string().c_str();
  772|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  57.3k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  57.3k|        else {
  909|  57.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  57.3k|        }
  911|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  57.3k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  57.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  57.3k|        else if constexpr (std::is_same_v<T, double>) {
  879|  57.3k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  57.3k|#endif
  885|  57.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   219k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   219k|        else {
 1119|   219k|            return std::u32string_view{
 1120|   219k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   219k|                m_input.view().size()};
 1122|   219k|        }
 1123|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   687k|{
 1138|   687k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.13k, False: 683k]
  ------------------
 1139|  4.13k|        value = std::numeric_limits<T>::infinity();
 1140|  4.13k|        return 3;
 1141|  4.13k|    }
 1142|   683k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.56k, False: 680k]
  ------------------
 1143|  3.56k|        value = std::numeric_limits<T>::infinity();
 1144|  3.56k|        return 8;
 1145|  3.56k|    }
 1146|   680k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.7k, False: 650k]
  ------------------
 1147|  29.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.7k|        return 3;
 1149|  29.7k|    }
 1150|   650k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.09k, False: 649k]
  ------------------
 1151|  1.09k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.09k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.09k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.09k|    }
 1182|       |
 1183|   649k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   649k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 137k, False: 512k]
  ------------------
 1185|   137k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 134k]
  |  |  ------------------
  ------------------
 1186|  2.88k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.88k|                                         "Invalid floating-point digit");
 1188|  2.88k|        }
 1189|   137k|    }
 1190|   646k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.04k, False: 638k]
  |  |  ------------------
  ------------------
 1191|  8.04k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.04k|                                     "Invalid floating-point digit");
 1193|  8.04k|    }
 1194|       |
 1195|   638k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   638k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   638k|            return fast_float_fallback(data, value);
 1208|   638k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   638k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   638k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   638k|    {
 1048|   638k|#if !SCN_DISABLE_STRTOD
 1049|   638k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   638k|    }
 1056|   638k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|   638k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   638k|    {
  894|   638k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   918k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   638k|    {
  898|   638k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   638k|                           generic_strtod);
  900|   638k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   638k|    {
  732|   638k|        CharT* end{};
  733|   638k|        errno = 0;
  734|   638k|        value = strtod_cb(src, &end);
  735|   638k|        const auto saved_errno = errno;
  736|   638k|        auto chars_read = end - src;
  737|       |
  738|   638k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   638k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 579, False: 637k]
  |  |  ------------------
  ------------------
  740|    579|            return unexpected(e);
  741|    579|        }
  742|       |
  743|   637k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 134k, False: 503k]
  ------------------
  744|   637k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 134k, False: 0]
  ------------------
  745|   134k|            chars_read -= 2;
  746|   134k|        }
  747|       |
  748|   637k|        return chars_read;
  749|   638k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   918k|    {
  778|   918k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 399k, False: 518k]
  |  Branch (778:37): [True: 0, False: 399k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   918k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.5k, False: 891k]
  ------------------
  785|   918k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   918k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 847, False: 918k]
  |  Branch (791:34): [True: 121, False: 726]
  ------------------
  792|    121|            SCN_UNLIKELY_ATTR
  793|    121|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    121|        }
  795|       |
  796|   918k|        SCN_GCC_COMPAT_PUSH
  797|   918k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   918k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 918k, False: 0]
  ------------------
  800|   918k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 918k, False: 0]
  ------------------
  801|   918k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 726, False: 918k]
  ------------------
  802|    726|            SCN_UNLIKELY_ATTR
  803|    726|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    726|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   918k|            return {};
  809|   918k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   919k|{
  695|   919k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 400k, False: 519k]
  |  Branch (695:26): [True: 0, False: 519k]
  ------------------
  696|   919k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   638k|    {
  755|   638k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 587k, False: 50.6k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   587k|            auto first_space = read_until_classic_space(input.view());
  758|   587k|            input.assign(
  759|   587k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   587k|        }
  761|       |
  762|   638k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 134k, False: 504k]
  ------------------
  763|   134k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   134k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   134k|        }
  770|       |
  771|   638k|        return input.get_allocated_string().c_str();
  772|   638k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   638k|    {
  905|   638k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   638k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   638k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   638k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   638k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|   638k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   638k|            return std::strtold(str, str_end);
  845|   638k|        }
  846|   638k|#endif
  847|   638k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   310k|{
 1138|   310k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 310k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   310k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 310k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   310k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 310k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   310k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 310k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   310k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   310k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 63.9k, False: 246k]
  ------------------
 1185|  63.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.58k, False: 55.3k]
  |  |  ------------------
  ------------------
 1186|  8.58k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.58k|                                         "Invalid floating-point digit");
 1188|  8.58k|        }
 1189|  63.9k|    }
 1190|   302k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 280k]
  |  |  ------------------
  ------------------
 1191|  21.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  21.6k|                                     "Invalid floating-point digit");
 1193|  21.6k|    }
 1194|       |
 1195|   280k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   280k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   280k|            return fast_float_fallback(data, value);
 1208|   280k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   280k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   280k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   280k|    {
 1048|   280k|#if !SCN_DISABLE_STRTOD
 1049|   280k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   280k|    }
 1056|   280k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   280k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   280k|    {
  894|   280k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   280k|    {
  898|   280k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   280k|                           generic_strtod);
  900|   280k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   280k|    {
  732|   280k|        CharT* end{};
  733|   280k|        errno = 0;
  734|   280k|        value = strtod_cb(src, &end);
  735|   280k|        const auto saved_errno = errno;
  736|   280k|        auto chars_read = end - src;
  737|       |
  738|   280k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   280k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 280k]
  |  |  ------------------
  ------------------
  740|    268|            return unexpected(e);
  741|    268|        }
  742|       |
  743|   280k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 55.3k, False: 224k]
  ------------------
  744|   280k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 55.3k, False: 0]
  ------------------
  745|  55.3k|            chars_read -= 2;
  746|  55.3k|        }
  747|       |
  748|   280k|        return chars_read;
  749|   280k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   280k|    {
  755|   280k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 275k, False: 4.92k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   275k|            auto first_space = read_until_classic_space(input.view());
  758|   275k|            input.assign(
  759|   275k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   275k|        }
  761|       |
  762|   280k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 55.3k, False: 225k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  55.3k|            else {
  767|  55.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  55.3k|            }
  769|  55.3k|        }
  770|       |
  771|   280k|        return input.get_allocated_string().c_str();
  772|   280k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   280k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   280k|        else {
  909|   280k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   280k|        }
  911|   280k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   280k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   280k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   280k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   280k|            return std::wcstold(str, str_end);
  883|   280k|        }
  884|   280k|#endif
  885|   280k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.04M|{
 2073|  1.04M|    const auto argcount = args.size();
 2074|  1.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 217k, False: 831k]
  |  Branch (2074:60): [True: 217k, False: 0]
  ------------------
 2075|   217k|        auto arg = args.get(0);
 2076|   217k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   217k|    }
 2078|       |
 2079|   831k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 831k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   831k|    SCN_UNLIKELY_ATTR
 2087|   831k|    {
 2088|   831k|        auto handler = format_handler<false, CharT>{
 2089|   831k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   831k|        return vscan_parse_format_string(format, handler);
 2091|   831k|    }
 2092|   831k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.95M|{
 1625|  1.95M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.53M, False: 415k]
  ------------------
 1626|  1.53M|        return false;
 1627|  1.53M|    }
 1628|   415k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 415k, False: 0]
  |  Branch (1628:39): [True: 415k, False: 0]
  ------------------
 1629|  1.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   325k|{
 1658|   325k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   325k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   325k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   325k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   325k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   325k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.0k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.0k|    }                                                  \
  |  |  |  | 3667|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   305k|    return it.position();
 1675|   325k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   705k|        : format_handler_base{argcount},
 1900|   705k|          parse_ctx{format},
 1901|   705k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   705k|    {
 1903|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  2.36M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  2.36M|    {
 1722|  2.36M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   705k|        : contiguous_ctx(source, args, loc)
 1852|   705k|    {
 1853|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   705k|{
 2038|   705k|    const auto beg = handler.get_ctx().begin();
 2039|   705k|    detail::parse_format_string<false>(format, handler);
 2040|   705k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.9k, False: 638k]
  |  |  ------------------
  ------------------
 2041|  66.9k|        return unexpected(handler.error);
 2042|  66.9k|    }
 2043|   638k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   705k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  4.80M|    {
 2022|  4.80M|        return ctx.get();
 2023|  4.80M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  4.80M|    {
 1857|  4.80M|        return contiguous_ctx;
 1858|  4.80M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.34M|    {
 1907|  1.34M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.34M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.34M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   705k|{
 1681|   705k|    auto arg = ctx.arg(id);
 1682|   705k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   705k|    return arg;
 1686|   705k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.36M|    {
 1797|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.36M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.36M|            visited_args_lower64 |= (1ull << id);
 1808|  2.36M|            return;
 1809|  2.36M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.36M|    {
 1782|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.36M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.36M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   401k|    {
 1766|   401k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 401k, False: 0]
  |  |  ------------------
  ------------------
 1767|   401k|            error = err;
 1768|   401k|        }
 1769|   401k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   705k|    {
 1944|   705k|        return parse_ctx.next_arg_id();
 1945|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   705k|    {
 1985|   705k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   705k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   705k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 705k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   705k|        auto specs = detail::format_specs{};
 1998|   705k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   705k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   705k|            arg.type()};
 2001|       |
 2002|   705k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   705k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 705k]
  |  Branch (2003:29): [True: 0, False: 705k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   705k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 705k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   705k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   705k|        on_visit_scan_arg(
 2014|   705k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   705k|                                           get_ctx().locale()},
 2016|   705k|            arg);
 2017|   705k|        return parse_ctx.begin();
 2018|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   705k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   705k|    {
 1701|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   705k|    {
 1956|   705k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 705k]
  |  Branch (1956:23): [True: 0, False: 705k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   705k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   705k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.9k, False: 638k]
  |  |  ------------------
  ------------------
 1963|  66.9k|            on_error(r.error());
 1964|  66.9k|        }
 1965|   638k|        else {
 1966|   638k|            get_ctx().advance_to(*r);
 1967|   638k|        }
 1968|   705k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.36M|    {
 1729|  2.36M|        {
 1730|  2.36M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.36M]
  ------------------
 1731|  2.36M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.36M]
  ------------------
 1732|  2.36M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.36M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.36M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.36M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.36M|        }
 1739|       |
 1740|  2.36M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.36M, False: 0]
  ------------------
 1741|  2.36M|            return;
 1742|  2.36M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.36M|    {
 1777|  2.36M|        return error;
 1778|  2.36M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  7.10M|    {
 1773|  7.10M|        return static_cast<bool>(error);
 1774|  7.10M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   831k|        : format_handler_base{argcount},
 1900|   831k|          parse_ctx{format},
 1901|   831k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   831k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   831k|    {
 1903|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   831k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   831k|    static_cast<    \
  |  |  929|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   831k|    {
 1830|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   831k|{
 2038|   831k|    const auto beg = handler.get_ctx().begin();
 2039|   831k|    detail::parse_format_string<false>(format, handler);
 2040|   831k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.9k, False: 764k]
  |  |  ------------------
  ------------------
 2041|  66.9k|        return unexpected(handler.error);
 2042|  66.9k|    }
 2043|   764k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   831k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.68M|    {
 2022|  5.68M|        return ctx.get();
 2023|  5.68M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.68M|    {
 1834|  5.68M|        return ctx;
 1835|  5.68M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.59M|    {
 1907|  1.59M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.59M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   831k|{
 1681|   831k|    auto arg = ctx.arg(id);
 1682|   831k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   831k|    return arg;
 1686|   831k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   831k|    {
 1944|   831k|        return parse_ctx.next_arg_id();
 1945|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   831k|    {
 1985|   831k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   831k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   831k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 831k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   831k|        auto specs = detail::format_specs{};
 1998|   831k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   831k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   831k|            arg.type()};
 2001|       |
 2002|   831k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   831k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 831k]
  |  Branch (2003:29): [True: 0, False: 831k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   831k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   831k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   831k|        on_visit_scan_arg(
 2014|   831k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   831k|                                           get_ctx().locale()},
 2016|   831k|            arg);
 2017|   831k|        return parse_ctx.begin();
 2018|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   831k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   831k|    {
 1701|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   831k|    {
 1956|   831k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 831k]
  |  Branch (1956:23): [True: 0, False: 831k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   831k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   831k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   831k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.9k, False: 764k]
  |  |  ------------------
  ------------------
 1963|  66.9k|            on_error(r.error());
 1964|  66.9k|        }
 1965|   764k|        else {
 1966|   764k|            get_ctx().advance_to(*r);
 1967|   764k|        }
 1968|   831k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   903k|{
 2053|   903k|    const auto argcount = args.size();
 2054|   903k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 198k, False: 705k]
  |  Branch (2054:60): [True: 198k, False: 0]
  ------------------
 2055|   198k|        auto arg = args.get(0);
 2056|   198k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   198k|    }
 2058|       |
 2059|   705k|    auto handler = format_handler<true, CharT>{
 2060|   705k|        ranges::subrange<const CharT*>{source.data(),
 2061|   705k|                                       source.data() + source.size()},
 2062|   705k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   705k|    return vscan_parse_format_string(format, handler);
 2064|   903k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   297k|{
 1638|   297k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   297k|    auto reader =
 1644|   297k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   297k|            ranges::subrange<const CharT*>{source.data(),
 1646|   297k|                                           source.data() + source.size()},
 1647|   297k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   297k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.0k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.0k|    }                                                  \
  |  |  |  | 3667|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   277k|    return ranges::distance(source.data(), it);
 1650|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   516k|{
 2053|   516k|    const auto argcount = args.size();
 2054|   516k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 100k, False: 416k]
  |  Branch (2054:60): [True: 100k, False: 0]
  ------------------
 2055|   100k|        auto arg = args.get(0);
 2056|   100k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   100k|    }
 2058|       |
 2059|   416k|    auto handler = format_handler<true, CharT>{
 2060|   416k|        ranges::subrange<const CharT*>{source.data(),
 2061|   416k|                                       source.data() + source.size()},
 2062|   416k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   416k|    return vscan_parse_format_string(format, handler);
 2064|   516k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.03M|{
 1625|  1.03M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 832k, False: 200k]
  ------------------
 1626|   832k|        return false;
 1627|   832k|    }
 1628|   200k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 200k, False: 0]
  |  Branch (1628:39): [True: 200k, False: 0]
  ------------------
 1629|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   150k|{
 1638|   150k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   150k|    auto reader =
 1644|   150k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   150k|            ranges::subrange<const CharT*>{source.data(),
 1646|   150k|                                           source.data() + source.size()},
 1647|   150k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   150k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.1k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  40.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  40.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  40.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  40.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  40.1k|    }                                                  \
  |  |  |  | 3667|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   110k|    return ranges::distance(source.data(), it);
 1650|   150k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   416k|        : format_handler_base{argcount},
 1900|   416k|          parse_ctx{format},
 1901|   416k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   416k|    {
 1903|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   416k|        : contiguous_ctx(source, args, loc)
 1852|   416k|    {
 1853|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   416k|{
 2038|   416k|    const auto beg = handler.get_ctx().begin();
 2039|   416k|    detail::parse_format_string<false>(format, handler);
 2040|   416k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 282k]
  |  |  ------------------
  ------------------
 2041|   133k|        return unexpected(handler.error);
 2042|   133k|    }
 2043|   282k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   416k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.64M|    {
 2022|  2.64M|        return ctx.get();
 2023|  2.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.64M|    {
 1857|  2.64M|        return contiguous_ctx;
 1858|  2.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   698k|    {
 1907|   698k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 698k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   698k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   416k|{
 1681|   416k|    auto arg = ctx.arg(id);
 1682|   416k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   416k|    return arg;
 1686|   416k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   416k|    {
 1944|   416k|        return parse_ctx.next_arg_id();
 1945|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   416k|    {
 1985|   416k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   416k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   416k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 416k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   416k|        auto specs = detail::format_specs{};
 1998|   416k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   416k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   416k|            arg.type()};
 2001|       |
 2002|   416k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   416k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 416k]
  |  Branch (2003:29): [True: 0, False: 416k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   416k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   416k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   416k|        on_visit_scan_arg(
 2014|   416k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   416k|                                           get_ctx().locale()},
 2016|   416k|            arg);
 2017|   416k|        return parse_ctx.begin();
 2018|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   416k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   416k|    {
 1701|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   416k|    {
 1956|   416k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 416k]
  |  Branch (1956:23): [True: 0, False: 416k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   416k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   416k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 282k]
  |  |  ------------------
  ------------------
 1963|   133k|            on_error(r.error());
 1964|   133k|        }
 1965|   282k|        else {
 1966|   282k|            get_ctx().advance_to(*r);
 1967|   282k|        }
 1968|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   516k|{
 2073|   516k|    const auto argcount = args.size();
 2074|   516k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 100k, False: 416k]
  |  Branch (2074:60): [True: 100k, False: 0]
  ------------------
 2075|   100k|        auto arg = args.get(0);
 2076|   100k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   100k|    }
 2078|       |
 2079|   416k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 416k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   416k|    SCN_UNLIKELY_ATTR
 2087|   416k|    {
 2088|   416k|        auto handler = format_handler<false, CharT>{
 2089|   416k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   416k|        return vscan_parse_format_string(format, handler);
 2091|   416k|    }
 2092|   416k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   150k|{
 1658|   150k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   150k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   150k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   150k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   150k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   150k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.1k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  40.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  40.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  40.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  40.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  40.1k|    }                                                  \
  |  |  |  | 3667|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   110k|    return it.position();
 1675|   150k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   416k|        : format_handler_base{argcount},
 1900|   416k|          parse_ctx{format},
 1901|   416k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   416k|    {
 1903|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   416k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   416k|    {
 1830|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   416k|{
 2038|   416k|    const auto beg = handler.get_ctx().begin();
 2039|   416k|    detail::parse_format_string<false>(format, handler);
 2040|   416k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 282k]
  |  |  ------------------
  ------------------
 2041|   133k|        return unexpected(handler.error);
 2042|   133k|    }
 2043|   282k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   416k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.64M|    {
 2022|  2.64M|        return ctx.get();
 2023|  2.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.64M|    {
 1834|  2.64M|        return ctx;
 1835|  2.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   698k|    {
 1907|   698k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 698k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   698k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   416k|{
 1681|   416k|    auto arg = ctx.arg(id);
 1682|   416k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   416k|    return arg;
 1686|   416k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   416k|    {
 1944|   416k|        return parse_ctx.next_arg_id();
 1945|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   416k|    {
 1985|   416k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   416k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   416k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 416k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   416k|        auto specs = detail::format_specs{};
 1998|   416k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   416k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   416k|            arg.type()};
 2001|       |
 2002|   416k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   416k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 416k]
  |  Branch (2003:29): [True: 0, False: 416k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   416k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   416k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   416k|        on_visit_scan_arg(
 2014|   416k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   416k|                                           get_ctx().locale()},
 2016|   416k|            arg);
 2017|   416k|        return parse_ctx.begin();
 2018|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   416k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   416k|    {
 1701|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   416k|    {
 1956|   416k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 416k]
  |  Branch (1956:23): [True: 0, False: 416k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   416k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   416k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 282k]
  |  |  ------------------
  ------------------
 1963|   133k|            on_error(r.error());
 1964|   133k|        }
 1965|   282k|        else {
 1966|   282k|            get_ctx().advance_to(*r);
 1967|   282k|        }
 1968|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  99.0k|{
 2099|  99.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  99.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   108k|{
 2099|   108k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   108k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  50.2k|{
 2099|  50.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  50.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  50.1k|{
 2099|  50.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  50.1k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  2.23k|{
 1351|  2.23k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  2.23k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  2.23k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  2.23k|            return transcode_to_string_impl_to32(src, dest);
 1362|  2.23k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  2.23k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  2.23k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  2.23k|{
 1244|  2.23k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  2.23k|    auto it = src.begin();
 1247|   634k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 632k, False: 2.23k]
  ------------------
 1248|   632k|        auto res = get_next_code_point(
 1249|   632k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   632k|                                                                 src.end()));
 1251|   632k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 630k]
  |  |  ------------------
  ------------------
 1252|  1.98k|            dest.push_back(DestCharT{0xfffd});
 1253|  1.98k|        }
 1254|   630k|        else {
 1255|   630k|            dest.push_back(res.value);
 1256|   630k|        }
 1257|   632k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   632k|    }
 1259|  2.23k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   920k|{
 1169|   920k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   920k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   920k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   920k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   920k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 896k]
  |  |  ------------------
  ------------------
 1173|  24.3k|        return {get_start_for_next_code_point(input),
 1174|  24.3k|                detail::invalid_code_point};
 1175|  24.3k|    }
 1176|   896k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.67k, False: 892k]
  |  |  ------------------
  ------------------
 1177|  3.67k|        return {input.end(), detail::invalid_code_point};
 1178|  3.67k|    }
 1179|       |
 1180|   892k|    return {input.begin() + len,
 1181|   892k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   896k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  24.3k|{
 1155|  24.3k|    auto it = input.begin();
 1156|   145k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 138k, False: 6.85k]
  ------------------
 1157|   138k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.4k, False: 121k]
  ------------------
 1158|  17.4k|            break;
 1159|  17.4k|        }
 1160|   138k|    }
 1161|  24.3k|    return it;
 1162|  24.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  25.9M|    constexpr parse_error(code c) : m_code(c)
  808|  25.9M|    {
  809|  25.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  25.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  25.9M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.74M|    {
  823|  9.74M|        return a.m_code == b.m_code;
  824|  9.74M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1714|  1.35M|    clocale_restorer(int cat) : m_category(cat)
 1715|  1.35M|    {
 1716|  1.35M|        const auto loc = std::setlocale(cat, nullptr);
 1717|  1.35M|        std::strcpy(m_locbuf, loc);
 1718|  1.35M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1720|  1.35M|    {
 1721|       |        // Restore locale to what it was before
 1722|  1.35M|        std::setlocale(m_category, m_locbuf);
 1723|  1.35M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1743|  1.35M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1744|  1.35M|    {
 1745|  1.35M|        std::setlocale(cat, "C");
 1746|  1.35M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  2.36M|    {
 2925|  2.36M|        return m_msg == nullptr;
 2926|  2.36M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  2.33M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  16.2M|{
  458|  16.2M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.2M|        static_cast<unsigned char>(ch))];
  460|  16.2M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  71.5k|{
  469|  71.5k|    return static_cast<unsigned char>(ch) <= 127;
  470|  71.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.71M|{
  539|  3.71M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.71M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  11.0M|{
  784|  11.0M|    return e != eof_error::good;
  785|  11.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  41.9k|{
  798|  41.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  41.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  41.9k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   205k|{
  845|   205k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   205k|    return parse_error::eof;
  847|   205k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.44M|{
  854|  3.44M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.44M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.44M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 75.8k, False: 3.37M]
  ------------------
  859|  75.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  75.8k|    }
  861|       |
  862|  3.37M|    return scan_error{code, msg};
  863|  3.44M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.44M|{
  868|  3.44M|    return [code, msg](parse_error err) {
  869|  3.44M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.44M|    };
  871|  3.44M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  2.59M|{
 2209|  2.59M|    unsigned char running_diff{0};
 2210|  9.74M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 7.15M, False: 2.59M]
  ------------------
 2211|  7.15M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  7.15M|    }
 2213|  2.59M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 84.3k, False: 2.51M]
  |  Branch (2213:33): [True: 15.8k, False: 2.49M]
  ------------------
 2214|  2.59M|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  18.7M|{
 3112|  18.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  18.7M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  3.03M|{
 3116|  3.03M|#if WCHAR_MIN < 0
 3117|  3.03M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 3.01M, False: 13.1k]
  |  Branch (3117:20): [True: 1.87M, False: 1.13M]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  1.87M|        return char_to_int(static_cast<char>(ch));
 3122|  1.87M|    }
 3123|  1.15M|    return 255;
 3124|  3.03M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.96M|{
 5997|  1.96M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.96M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.96M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.96M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.96M|    return {};
 6012|  1.96M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.91M|    {
  304|  2.91M|        ranges::advance(x, n);
  305|  2.91M|        return x;
  306|  2.91M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.91M|    {
  268|  2.91M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.91M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.91M|    {
  151|  2.91M|        i += n;
  152|  2.91M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.44M|    {
  108|  3.44M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.44M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.44M|    {
   87|  3.44M|        return s - i;
   88|  3.44M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.82M|    {
  304|  1.82M|        ranges::advance(x, n);
  305|  1.82M|        return x;
  306|  1.82M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.82M|    {
  268|  1.82M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.82M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.82M|    {
  151|  1.82M|        i += n;
  152|  1.82M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   523k|    {
  108|   523k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   523k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   523k|    {
   87|   523k|        return s - i;
   88|   523k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.15M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.15M|        auto beg = r.begin();
  990|  1.15M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.15M, False: 0]
  ------------------
  991|  1.15M|            return false;
  992|  1.15M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.15M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  29.3M|    {
  763|  29.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.3M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  3.04M|{
 1845|  3.04M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.04M|    else {
 1856|  3.04M|        auto it = range.begin();
 1857|  3.04M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 1.87M, False: 1.16M]
  ------------------
 1858|  1.87M|            return ranges::next(it, count);
 1859|  1.87M|        }
 1860|       |
 1861|  4.63M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 3.49M, False: 1.13M]
  ------------------
 1862|  3.49M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 35.2k, False: 3.46M]
  ------------------
 1863|  35.2k|                return unexpected(eof_error::eof);
 1864|  35.2k|            }
 1865|  3.49M|        }
 1866|       |
 1867|  1.13M|        return it;
 1868|  1.16M|    }
 1869|  3.04M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.04M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  3.04M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  3.04M|        else {
 1106|  3.04M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.04M, False: 0]
  ------------------
 1107|  3.04M|                return static_cast<size_t>(
 1108|  3.04M|                    r.begin().parent()->chars_available() -
 1109|  3.04M|                    r.begin().position());
 1110|  3.04M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.04M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  3.04M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.78M|        : m_fptr([](storage fn,
  743|  2.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.78M|              cvref<T> obj = *get<T>(fn);
  745|  2.78M|              if constexpr (std::is_void_v<R>) {
  746|  2.78M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.78M|              }
  748|  2.78M|              else {
  749|  2.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.78M|              }
  751|  2.78M|          }),
  752|  2.78M|          m_storage(std::addressof(f))
  753|  2.78M|    {
  754|  2.78M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.6M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.6M|              else {
  749|  14.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.6M|              }
  751|  14.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.6M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.6M|        else if constexpr (std::is_object_v<T>) {
  688|  14.6M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.6M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.78M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.78M|        {
  662|  2.78M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.35M|    {
  763|  8.35M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.35M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.14M|        : m_fptr([](storage fn,
  743|  2.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.14M|              cvref<T> obj = *get<T>(fn);
  745|  2.14M|              if constexpr (std::is_void_v<R>) {
  746|  2.14M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.14M|              }
  748|  2.14M|              else {
  749|  2.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.14M|              }
  751|  2.14M|          }),
  752|  2.14M|          m_storage(std::addressof(f))
  753|  2.14M|    {
  754|  2.14M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.82M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.82M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.82M|              else {
  749|  3.82M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.82M|              }
  751|  3.82M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.82M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.82M|        else if constexpr (std::is_object_v<T>) {
  688|  3.82M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.82M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.14M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.14M|        {
  662|  2.14M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   831k|    {
 6026|   831k|        const bool need_skipped_width =
 6027|   831k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 831k]
  |  Branch (6027:33): [True: 0, False: 831k]
  ------------------
 6028|   831k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   831k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 831k]
  ------------------
 6032|   831k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 831k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   831k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 831k, False: 0]
  |  Branch (6036:56): [True: 831k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   831k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 831k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.64M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   831k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   831k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   831k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 816k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|   831k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.64M|                            make_eof_scan_error));
 6047|       |
 6048|  1.64M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 816k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   816k|            return result_type{it, 0};
 6056|  1.64M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   831k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.22M|{
 1964|  2.22M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.22M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.22M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.22M|    else {
 1949|  2.22M|        auto first = range.begin();
 1950|  11.8M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 11.8M, False: 26.2k]
  ------------------
 1951|  11.8M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.20M, False: 9.63M]
  ------------------
 1952|  2.20M|                return first;
 1953|  2.20M|            }
 1954|  11.8M|        }
 1955|  26.2k|        return first;
 1956|  2.22M|    }
 1957|  2.22M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.96M|    {
  108|  1.96M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.96M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.96M|    {
   94|  1.96M|        iter_difference_t<I> counter{0};
   95|  19.1M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.1M, False: 1.96M]
  ------------------
   96|  17.1M|            ++i;
   97|  17.1M|            ++counter;
   98|  17.1M|        }
   99|  1.96M|        return counter;
  100|  1.96M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.44M|    return [code, msg](parse_error err) {
  869|  3.44M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.44M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   429k|    {
 1768|   429k|        auto stdloc = loc.get<std::locale>();
 1769|   429k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   429k|        grouping = numpunct.grouping();
 1771|   429k|        thousands_sep =
 1772|   429k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 429k]
  ------------------
 1773|   429k|        decimal_point = numpunct.decimal_point();
 1774|   429k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   429k|{
 1705|   429k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 429k, False: 0]
  ------------------
 1706|   429k|        return std::use_facet<Facet>(stdloc);
 1707|   429k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   429k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  3.26M|{
 1834|  3.26M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 3.24M]
  |  |  ------------------
  ------------------
 1835|  19.0k|        return unexpected(e);
 1836|  19.0k|    }
 1837|       |
 1838|  3.24M|    return ranges::next(range.begin());
 1839|  3.26M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.74M|{
  950|  4.74M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.0k, False: 4.70M]
  |  |  ------------------
  ------------------
  951|  38.0k|        return eof_error::eof;
  952|  38.0k|    }
  953|  4.70M|    return eof_error::good;
  954|  4.74M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.63M|{
  944|  6.63M|    return is_range_eof(r.begin(), r.end());
  945|  6.63M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.63M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.63M|    {
  937|  6.63M|        return begin == end;
  938|  6.63M|    }
  939|  6.63M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.24M|    {
  296|  3.24M|        ++x;
  297|  3.24M|        return x;
  298|  3.24M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|  1.25M|{
 3130|  1.25M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.25M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 950k, False: 303k]
  ------------------
 3132|   950k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 950k, False: 288]
  ------------------
 3133|   950k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   950k|        }
 3135|    288|        return unexpected(eof_error::eof);
 3136|   950k|    }
 3137|       |
 3138|   303k|    auto& it = *r;
 3139|   303k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 127k, False: 176k]
  ------------------
 3140|   127k|        return std::pair{it, sign_type::minus_sign};
 3141|   127k|    }
 3142|   176k|    return std::pair{it, sign_type::plus_sign};
 3143|   303k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  2.18M|{
 2261|  2.18M|    auto it = read_code_unit(range);
 2262|  2.18M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 2.17M]
  |  |  ------------------
  ------------------
 2263|  11.0k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  11.0k|    }
 2265|       |
 2266|  4.09M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 4.09M, False: 1.75M]
  ------------------
 2267|  4.09M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 420k, False: 3.67M]
  ------------------
 2268|   420k|            return *it;
 2269|   420k|        }
 2270|  4.09M|    }
 2271|       |
 2272|  1.75M|    return unexpected(parse_error::error);
 2273|  2.17M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  3.04M|{
 2220|  3.04M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  3.04M|    else {
 2233|  3.04M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.04M|            if (ch < 'A' || ch > 'Z') {
 2235|  3.04M|                return ch;
 2236|  3.04M|            }
 2237|  3.04M|            return static_cast<char_type>(ch +
 2238|  3.04M|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.04M|        };
 2240|       |
 2241|  3.04M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.04M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.04M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.04M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.2k, False: 3.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  35.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  35.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  35.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  35.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  35.2k|    }                                                  \
  |  |  |  | 3667|  3.04M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  3.00M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  3.00M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  3.00M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.90M, False: 105k]
  |  |  ------------------
  ------------------
 2246|  3.00M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  3.00M|                    return ascii_tolower(a) ==
 2248|  3.00M|                           static_cast<detail::char_t<Range>>(b);
 2249|  3.00M|                }))) {
 2250|  2.90M|            return unexpected(parse_error::error);
 2251|  2.90M|        }
 2252|       |
 2253|   105k|        return it;
 2254|  3.00M|    }
 2255|  3.04M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  3.46M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.46M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 3.12M, False: 337k]
  |  Branch (2234:29): [True: 282k, False: 55.0k]
  ------------------
 2235|  3.41M|                return ch;
 2236|  3.41M|            }
 2237|  55.0k|            return static_cast<char_type>(ch +
 2238|  55.0k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.46M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  1.07M|{
 2135|  1.07M|    auto it = read_code_unit(range);
 2136|  1.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 1.07M]
  |  |  ------------------
  ------------------
 2137|  8.00k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  8.00k|    }
 2139|       |
 2140|  1.07M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 876k, False: 194k]
  |  |  ------------------
  ------------------
 2141|  1.07M|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   876k|        return unexpected(parse_error::error);
 2143|   876k|    }
 2144|       |
 2145|   194k|    return *it;
 2146|  1.07M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  2.22M|{
 1984|  2.22M|    auto it = read_while_code_unit(range, pred);
 1985|  2.22M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 905k, False: 1.31M]
  ------------------
 1986|   905k|        return unexpected(parse_error::error);
 1987|   905k|    }
 1988|  1.31M|    return it;
 1989|  2.22M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|  1.02M|    {
 1609|  1.02M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  1.02M|                           ranges::common_range<Range>) {
 1626|  1.02M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  1.02M|            auto end_seg = range.end().contiguous_segment();
 1628|  1.02M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 149k, False: 871k]
  |  |  ------------------
  ------------------
 1629|  1.02M|                             detail::to_address(end_seg.end()))) {
 1630|   149k|                auto& str = m_storage.emplace();
 1631|   149k|                str.reserve(range.end().position() - range.begin().position());
 1632|   149k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   149k|                m_view = string_view_type{str};
 1634|   149k|                return;
 1635|   149k|            }
 1636|       |
 1637|   871k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   871k|                                                            end_seg.data());
 1639|   871k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.02M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  6.96M|    {
 1570|  6.96M|        return m_view;
 1571|  6.96M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.24M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   752k|    {
 6068|   752k|        const bool need_skipped_width =
 6069|   752k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 752k]
  |  Branch (6069:33): [True: 0, False: 752k]
  ------------------
 6070|   752k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   752k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 752k]
  ------------------
 6073|   752k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 752k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   752k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 752k, False: 0]
  ------------------
 6082|   752k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 752k]
  ------------------
 6083|   752k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   752k|        return result_type{rng.begin(), 0};
 6107|   752k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  1.47M|{
 1834|  1.47M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 1.46M]
  |  |  ------------------
  ------------------
 1835|  4.74k|        return unexpected(e);
 1836|  4.74k|    }
 1837|       |
 1838|  1.46M|    return ranges::next(range.begin());
 1839|  1.47M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.76M|{
  950|  2.76M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 2.74M]
  |  |  ------------------
  ------------------
  951|  20.4k|        return eof_error::eof;
  952|  20.4k|    }
  953|  2.74M|    return eof_error::good;
  954|  2.76M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.76M|{
  944|  2.76M|    return is_range_eof(r.begin(), r.end());
  945|  2.76M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.76M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.76M|    {
  937|  2.76M|        return begin == end;
  938|  2.76M|    }
  939|  2.76M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.46M|    {
  296|  1.46M|        ++x;
  297|  1.46M|        return x;
  298|  1.46M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  1.01M|{
 3130|  1.01M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.01M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 768k, False: 245k]
  ------------------
 3132|   768k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 768k, False: 96]
  ------------------
 3133|   768k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   768k|        }
 3135|     96|        return unexpected(eof_error::eof);
 3136|   768k|    }
 3137|       |
 3138|   245k|    auto& it = *r;
 3139|   245k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 115k, False: 130k]
  ------------------
 3140|   115k|        return std::pair{it, sign_type::minus_sign};
 3141|   115k|    }
 3142|   130k|    return std::pair{it, sign_type::plus_sign};
 3143|   245k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.17M|{
 2261|  1.17M|    auto it = read_code_unit(range);
 2262|  1.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 1.17M]
  |  |  ------------------
  ------------------
 2263|  2.00k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  2.00k|    }
 2265|       |
 2266|  2.19M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.19M, False: 899k]
  ------------------
 2267|  2.19M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 272k, False: 1.92M]
  ------------------
 2268|   272k|            return *it;
 2269|   272k|        }
 2270|  2.19M|    }
 2271|       |
 2272|   899k|    return unexpected(parse_error::error);
 2273|  1.17M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  2.63M|{
 2220|  2.63M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  2.63M|                  std::is_same_v<char_type, char>) {
 2224|  2.63M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 35.4k, False: 2.59M]
  ------------------
 2225|  35.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  35.4k|        }
 2227|  2.59M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 2.49M, False: 100k]
  ------------------
 2228|  2.49M|            return unexpected(parse_error::error);
 2229|  2.49M|        }
 2230|   100k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  2.63M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   299k|{
 2135|   299k|    auto it = read_code_unit(range);
 2136|   299k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 296k]
  |  |  ------------------
  ------------------
 2137|  2.73k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  2.73k|    }
 2139|       |
 2140|   296k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 247k, False: 49.1k]
  |  |  ------------------
  ------------------
 2141|   296k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   247k|        return unexpected(parse_error::error);
 2143|   247k|    }
 2144|       |
 2145|  49.1k|    return *it;
 2146|   296k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  3.80M|    {
 1491|  3.80M|        return sv;
 1492|  3.80M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   553k|{
 1964|   553k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   553k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   553k|{
 1945|   553k|    if constexpr (ranges::common_range<Range>) {
 1946|   553k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   553k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   998k|{
 2940|   998k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 998k, False: 0]
  ------------------
 2941|   998k|        auto it = read_while_classic_space(range);
 2942|   998k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   998k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   998k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 986k]
  |  |  ------------------
  ------------------
 2944|  11.7k|            return unexpected(e);
 2945|  11.7k|        }
 2946|       |
 2947|   986k|        return it;
 2948|   998k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   998k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   998k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   998k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   998k|        auto buf = make_contiguous_buffer(range);
 2109|   998k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   998k|        return ranges::next(range.begin(),
 2111|   998k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   998k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   998k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   998k|                  ranges::sized_range<Range>) {
 1674|   998k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   998k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   998k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   998k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   998k|    {
 1478|   998k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.07M|    {
  304|  3.07M|        ranges::advance(x, n);
  305|  3.07M|        return x;
  306|  3.07M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.09M|    {
  268|  4.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.09M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.09M|    {
  181|  19.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.0M, False: 4.09M]
  ------------------
  182|  15.0M|            ++i;
  183|  15.0M|        }
  184|  4.09M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   268k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   268k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   268k|            auto rd = make_reader<T, char_type>();
 6195|   268k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   268k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 268k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   268k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   268k|                return impl(rd, range, value);
 6202|   268k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   268k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.53M|    {
 3029|  1.53M|        reader_error_handler eh{};
 3030|  1.53M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.53M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  1.53M|        return {};
 3035|  1.53M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  1.53M|    {
 3040|  1.53M|        return static_cast<Derived&>(*this);
 3041|  1.53M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  1.53M|    {
 4134|  1.53M|        detail::check_float_type_specs(specs, eh);
 4135|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   268k|    {
 6113|   268k|        const bool need_skipped_width =
 6114|   268k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 268k]
  |  Branch (6114:33): [True: 0, False: 268k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   268k|        auto it = rng.begin();
 6118|   268k|        std::ptrdiff_t prefix_width = 0;
 6119|   268k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 268k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   268k|        else {
 6127|   268k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   264k|            std::tie(it, prefix_width) = prefix_result;
 6129|   264k|        }
 6130|   264k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   264k|        std::ptrdiff_t value_width = 0;
 6134|   264k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 264k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   264k|        else {
 6150|   264k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.9k, False: 246k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.9k|    }                                                  \
  |  | 3667|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   246k|                                             specs, value, loc));
 6152|       |
 6153|   246k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 246k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   246k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   246k|        std::ptrdiff_t postfix_width = 0;
 6162|   246k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242k, False: 3.47k]
  ------------------
 6163|   242k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   242k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   242k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   242k|                                 value_width));
 6167|   242k|            std::tie(it, postfix_width) = postfix_result;
 6168|   242k|        }
 6169|       |
 6170|   246k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   246k|                                                 value_width, postfix_width);
 6172|   246k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 246k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   246k|        return it;
 6177|   246k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  3.54M|    {
 3024|  3.54M|        return true;
 3025|  3.54M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|  1.51M|    {
 4206|  1.51M|        unsigned options{};
 4207|  1.51M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 429k, False: 1.08M]
  ------------------
 4208|   429k|            options |= float_reader_base::allow_thsep;
 4209|   429k|        }
 4210|       |
 4211|  1.51M|        SCN_GCC_COMPAT_PUSH
 4212|  1.51M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  1.51M|        switch (specs.type) {
 4215|   219k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 219k, False: 1.29M]
  ------------------
 4216|   219k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  40.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 40.0k, False: 1.47M]
  ------------------
 4219|  40.0k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   463k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 463k, False: 1.04M]
  ------------------
 4222|   463k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   358k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 358k, False: 1.15M]
  ------------------
 4225|   358k|                return options | float_reader_base::allow_scientific |
 4226|   358k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   429k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 429k, False: 1.08M]
  ------------------
 4229|   429k|                return options | float_reader_base::allow_scientific |
 4230|   429k|                       float_reader_base::allow_fixed |
 4231|   429k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 1.51M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  1.51M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  1.51M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  1.51M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|  1.51M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  2.12M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  4.24M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   656k|    {
 3680|   656k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   656k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   656k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   656k|        const std::ptrdiff_t sign_len =
 3683|   656k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 162k, False: 494k]
  ------------------
 3684|       |
 3685|   656k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   656k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   656k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   656k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.6k, False: 640k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.6k|    }                                                  \
  |  |  |  | 3667|   656k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   640k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   656k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|  2.02M|    {
 4046|  2.02M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 2.02M, False: 0]
  ------------------
 4047|  2.02M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 2.02M, False: 0]
  ------------------
 4048|  2.02M|            return;
 4049|  2.02M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  2.32M|    {
 1575|  2.32M|        return m_storage.has_value();
 1576|  2.32M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  1.35M|    {
 1580|  1.35M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.35M|        return *m_storage;
 1582|  1.35M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   264k|    {
 4159|   264k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   264k|#if !SCN_DISABLE_LOCALE
 4162|   264k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 74.7k, False: 189k]
  ------------------
 4163|  74.7k|            return read_impl<Range>(
 4164|  74.7k|                range, rd,
 4165|  74.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  74.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  74.7k|                },
 4168|  74.7k|                value, loc);
 4169|  74.7k|        }
 4170|   189k|#endif
 4171|       |
 4172|   189k|        return read_impl<Range>(
 4173|   189k|            range, rd,
 4174|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   189k|                return r.read_source(SCN_FWD(args)...);
 4176|   189k|            },
 4177|   189k|            value);
 4178|   264k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   367k|    {
 4195|   367k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   367k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 347k]
  |  |  ------------------
  ------------------
 4197|  20.2k|            return unexpected(r.error());
 4198|  20.2k|        }
 4199|       |
 4200|   347k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.05k|    }                                                  \
  |  |  |  | 3667|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   344k|        return ranges::next(range.begin(), n);
 4202|   347k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.13M|    {
  763|  1.13M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.13M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  74.7k|        : m_fptr([](storage fn,
  743|  74.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.7k|              cvref<T> obj = *get<T>(fn);
  745|  74.7k|              if constexpr (std::is_void_v<R>) {
  746|  74.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.7k|              }
  748|  74.7k|              else {
  749|  74.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.7k|              }
  751|  74.7k|          }),
  752|  74.7k|          m_storage(std::addressof(f))
  753|  74.7k|    {
  754|  74.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  74.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.7k|              else {
  749|  74.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.7k|              }
  751|  74.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.7k|        else if constexpr (std::is_object_v<T>) {
  688|  74.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  74.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  74.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  74.7k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   234k|    {
 3668|   234k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   234k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   234k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 234k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   234k|        return read_source_impl(range);
 3674|   234k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|  1.13M|    {
 3694|  1.13M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.13M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.13M|        auto it = sign_result.first;
 3697|  1.13M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.13M|        auto digits_begin = it;
 3700|  1.13M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|  1.13M|        else {
 3727|  1.13M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.1k, False: 1.07M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  63.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  63.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  63.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  63.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  63.1k|    }                                                  \
  |  | 3667|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|  1.07M|                it,
 3729|  1.07M|                do_read_source_impl(
 3730|  1.07M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|  1.07M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|  1.07M|        }
 3733|       |
 3734|  1.13M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.07M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.06M, False: 5.98k]
  |  Branch (3736:48): [True: 1.06M, False: 5.28k]
  ------------------
 3737|  1.07M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.01M, False: 44.3k]
  ------------------
 3738|  1.07M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.01M, False: 1.59k]
  ------------------
 3739|  1.01M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.01M|        }
 3741|       |
 3742|  1.07M|        handle_separators();
 3743|       |
 3744|  1.07M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.07M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.07M|        return it;
 3757|  1.07M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|  1.13M|    {
 3989|  1.13M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.13M|        const bool allowed_nonhex =
 3991|  1.13M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.13M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.13M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.12M, False: 11.2k]
  |  Branch (3994:45): [True: 0, False: 1.12M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.13M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 11.2k, False: 1.12M]
  ------------------
 4000|  11.2k|            return *r;
 4001|  11.2k|        }
 4002|       |
 4003|  1.12M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.08M, False: 45.9k]
  |  Branch (4003:45): [True: 1.23k, False: 1.07M]
  ------------------
 4004|  1.23k|            return unexpected(r.error());
 4005|  1.23k|        }
 4006|  1.12M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 45.9k, False: 1.07M]
  ------------------
 4007|  45.9k|            return *r;
 4008|  45.9k|        }
 4009|       |
 4010|  1.07M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 765k, False: 313k]
  |  Branch (4010:28): [True: 240k, False: 525k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   240k|            auto it = range.begin();
 4014|       |
 4015|   240k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 12.5k, False: 227k]
  ------------------
 4016|  12.5k|                m_kind = float_kind::hex_with_prefix;
 4017|  12.5k|                it = *r;
 4018|  12.5k|            }
 4019|   227k|            else {
 4020|   227k|                m_kind = float_kind::hex_without_prefix;
 4021|   227k|            }
 4022|       |
 4023|   240k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   240k|        }
 4025|   839k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 313k, False: 525k]
  |  Branch (4025:29): [True: 313k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   313k|            m_kind = float_kind::generic;
 4029|   313k|            return read_regular_float(range);
 4030|   313k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   525k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 496k]
  |  |  ------------------
  ------------------
 4036|  28.8k|            m_kind = float_kind::hex_with_prefix;
 4037|  28.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  28.8k|        }
 4039|       |
 4040|   496k|        m_kind = float_kind::generic;
 4041|   496k|        return read_regular(range);
 4042|   525k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|  1.13M|    {
 3800|  1.13M|        auto it = range.begin();
 3801|  1.13M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.12M, False: 11.2k]
  ------------------
 3802|  1.12M|            return unexpected(r.error());
 3803|  1.12M|        }
 3804|  11.2k|        else {
 3805|  11.2k|            it = *r;
 3806|  11.2k|        }
 3807|       |
 3808|  11.2k|        if (auto r = read_matching_string_classic_nocase(
 3809|  11.2k|                ranges::subrange{it, range.end()}, "inity");
 3810|  11.2k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.98k, False: 5.28k]
  ------------------
 3811|  5.98k|            m_kind = float_kind::inf_short;
 3812|  5.98k|            return it;
 3813|  5.98k|        }
 3814|  5.28k|        else {
 3815|  5.28k|            m_kind = float_kind::inf_long;
 3816|  5.28k|            return *r;
 3817|  5.28k|        }
 3818|  11.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|  1.12M|    {
 3823|  1.12M|        auto it = range.begin();
 3824|  1.12M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.07M, False: 47.2k]
  ------------------
 3825|  1.07M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.07M|                scan_error::invalid_scanned_value,
 3827|  1.07M|                "Invalid floating-point NaN value"));
 3828|  1.07M|        }
 3829|  47.2k|        else {
 3830|  47.2k|            it = *r;
 3831|  47.2k|        }
 3832|       |
 3833|  47.2k|        if (auto r =
 3834|  47.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  47.2k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 44.3k, False: 2.83k]
  ------------------
 3836|  44.3k|            m_kind = float_kind::nan_simple;
 3837|  44.3k|            return it;
 3838|  44.3k|        }
 3839|  2.83k|        else {
 3840|  2.83k|            it = *r;
 3841|  2.83k|        }
 3842|       |
 3843|  2.83k|        auto payload_beg_it = it;
 3844|  2.83k|        it = read_while_code_unit(
 3845|  2.83k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  2.83k|                return is_ascii_char(ch) &&
 3847|  2.83k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  2.83k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  2.83k|            });
 3850|  2.83k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  2.83k|        m_kind = float_kind::nan_with_payload;
 3853|  2.83k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.59k, False: 1.23k]
  ------------------
 3854|  2.83k|                                             ')')) {
 3855|  1.59k|            return *r;
 3856|  1.59k|        }
 3857|  1.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.23k|                                     "Invalid floating-point NaN payload");
 3859|  2.83k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.83k|        : m_fptr([](storage fn,
  743|  2.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.83k|              cvref<T> obj = *get<T>(fn);
  745|  2.83k|              if constexpr (std::is_void_v<R>) {
  746|  2.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.83k|              }
  748|  2.83k|              else {
  749|  2.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.83k|              }
  751|  2.83k|          }),
  752|  2.83k|          m_storage(std::addressof(f))
  753|  2.83k|    {
  754|  2.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  39.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.0k|              else {
  749|  39.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.0k|              }
  751|  39.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  39.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.0k|        else if constexpr (std::is_object_v<T>) {
  688|  39.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.0k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3845|  39.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  39.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 38.9k, False: 89]
  ------------------
 3847|  39.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 37.1k, False: 1.76k]
  |  Branch (3847:39): [True: 29.3k, False: 7.82k]
  |  Branch (3847:54): [True: 2.58k, False: 7.00k]
  |  Branch (3847:67): [True: 2.49k, False: 83]
  ------------------
 3848|  38.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.76k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 1.84k]
  ------------------
 3849|  39.0k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.83k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.83k|        {
  662|  2.83k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   765k|    {
 3793|   765k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   765k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   269k|    {
 3893|   269k|        auto it = range.begin();
 3894|       |
 3895|   269k|        std::ptrdiff_t digits_count = 0;
 3896|   269k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   269k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.79k, False: 261k]
  |  |  ------------------
  ------------------
 3898|  7.79k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  7.79k|                scan_error::invalid_scanned_value,
 3900|  7.79k|                "Invalid hexadecimal floating-point value"));
 3901|  7.79k|        }
 3902|   261k|        else {
 3903|   261k|            digits_count += ranges::distance(it, *r);
 3904|   261k|            it = *r;
 3905|   261k|        }
 3906|       |
 3907|   261k|        m_integral_part_length = digits_count;
 3908|   261k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 40.4k, False: 220k]
  ------------------
 3909|   261k|                                             m_locale_options.decimal_point)) {
 3910|  40.4k|            it = *r;
 3911|  40.4k|        }
 3912|       |
 3913|   261k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 36.9k, False: 224k]
  ------------------
 3914|   261k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|  36.9k|            digits_count += ranges::distance(it, *r);
 3916|  36.9k|            it = *r;
 3917|  36.9k|        }
 3918|       |
 3919|   261k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 261k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   261k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   261k|        return it;
 3927|   261k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   530k|    {
 3778|   530k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 530k]
  |  |  |  Branch (859:45): [True: 0, False: 530k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   530k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   530k|        return read_while1_code_unit(
 3787|   530k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   530k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   530k|        : m_fptr([](storage fn,
  743|   530k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   530k|              cvref<T> obj = *get<T>(fn);
  745|   530k|              if constexpr (std::is_void_v<R>) {
  746|   530k|                  obj(static_cast<decltype(args)>(args)...);
  747|   530k|              }
  748|   530k|              else {
  749|   530k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   530k|              }
  751|   530k|          }),
  752|   530k|          m_storage(std::addressof(f))
  753|   530k|    {
  754|   530k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.74M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.74M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.74M|              else {
  749|  2.74M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.74M|              }
  751|  2.74M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.74M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.74M|        else if constexpr (std::is_object_v<T>) {
  688|  2.74M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.74M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3787|  2.74M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   530k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   530k|        {
  662|   530k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   929k|    {
 3865|   929k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 116k, False: 813k]
  ------------------
 3866|   116k|            auto beg_exp_it = range.begin();
 3867|   116k|            auto it = *r;
 3868|       |
 3869|   116k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 116k, False: 288]
  ------------------
 3870|   116k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|   116k|                it = r_sign->first;
 3872|   116k|            }
 3873|       |
 3874|   116k|            if (auto r_exp = read_while1_code_unit(
 3875|   116k|                    ranges::subrange{it, range.end()},
 3876|   116k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|   116k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.77k, False: 114k]
  |  |  ------------------
  ------------------
 3878|  1.77k|                it = beg_exp_it;
 3879|  1.77k|            }
 3880|   114k|            else {
 3881|   114k|                it = *r_exp;
 3882|   114k|            }
 3883|       |
 3884|   116k|            return it;
 3885|   116k|        }
 3886|   813k|        return range.begin();
 3887|   929k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   365k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   365k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   365k|              else {
  749|   365k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   365k|              }
  751|   365k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   365k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   365k|        else if constexpr (std::is_object_v<T>) {
  688|   365k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   365k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   365k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   810k|    {
 3933|   810k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   810k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 699k, False: 110k]
  |  Branch (3934:50): [True: 19.8k, False: 679k]
  ------------------
 3935|       |
 3936|   810k|        auto it = ranges::begin(range);
 3937|   810k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   810k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   810k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.8k, False: 767k]
  |  |  ------------------
  ------------------
 3941|  42.8k|            return r.transform_error(
 3942|  42.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  42.8k|                                              "Invalid floating-point value"));
 3944|  42.8k|        }
 3945|   767k|        else {
 3946|   767k|            digits_count += ranges::distance(it, *r);
 3947|   767k|            it = *r;
 3948|   767k|        }
 3949|       |
 3950|   767k|        m_integral_part_length = digits_count;
 3951|   767k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 149k, False: 617k]
  ------------------
 3952|   767k|                                             m_locale_options.decimal_point)) {
 3953|   149k|            it = *r;
 3954|   149k|        }
 3955|       |
 3956|   767k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 138k, False: 628k]
  ------------------
 3957|   767k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|   138k|            digits_count += ranges::distance(it, *r);
 3959|   138k|            it = *r;
 3960|   138k|        }
 3961|       |
 3962|   767k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 767k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   767k|        auto beg_exp_it = it;
 3968|   767k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 668k, False: 99.3k]
  ------------------
 3969|   668k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   668k|        }
 3971|   767k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 19.1k, False: 748k]
  |  Branch (3971:29): [True: 11.2k, False: 7.87k]
  ------------------
 3972|  11.2k|            return unexpected_scan_error(
 3973|  11.2k|                scan_error::invalid_scanned_value,
 3974|  11.2k|                "No exponent given to scientific float");
 3975|  11.2k|        }
 3976|       |
 3977|   756k|        m_kind =
 3978|   756k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 642k, False: 113k]
  ------------------
 3979|       |
 3980|   756k|        return it;
 3981|   767k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  1.57M|    {
 3763|  1.57M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57M]
  |  |  |  Branch (859:45): [True: 0, False: 1.57M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  1.57M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  1.57M|        return read_while1_code_unit(
 3772|  1.57M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  1.57M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.57M|        : m_fptr([](storage fn,
  743|  1.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.57M|              cvref<T> obj = *get<T>(fn);
  745|  1.57M|              if constexpr (std::is_void_v<R>) {
  746|  1.57M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.57M|              }
  748|  1.57M|              else {
  749|  1.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.57M|              }
  751|  1.57M|          }),
  752|  1.57M|          m_storage(std::addressof(f))
  753|  1.57M|    {
  754|  1.57M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.67M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.67M|              else {
  749|  8.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.67M|              }
  751|  8.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.67M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.67M|        else if constexpr (std::is_object_v<T>) {
  688|  8.67M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.67M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3772|  8.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.57M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.57M|        {
  662|  1.57M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|  1.02M|    {
 1565|  1.02M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.02M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  74.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  74.7k|        {
  662|  74.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   189k|        : m_fptr([](storage fn,
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
  752|   189k|          m_storage(std::addressof(f))
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   189k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  688|   189k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   189k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   189k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   189k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   903k|    {
 3654|   903k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   903k|        return read_source_impl(range);
 3660|   903k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   189k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   226k|    {
 4159|   226k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   226k|#if !SCN_DISABLE_LOCALE
 4162|   226k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 63.0k, False: 163k]
  ------------------
 4163|  63.0k|            return read_impl<Range>(
 4164|  63.0k|                range, rd,
 4165|  63.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  63.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  63.0k|                },
 4168|  63.0k|                value, loc);
 4169|  63.0k|        }
 4170|   163k|#endif
 4171|       |
 4172|   163k|        return read_impl<Range>(
 4173|   163k|            range, rd,
 4174|   163k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   163k|                return r.read_source(SCN_FWD(args)...);
 4176|   163k|            },
 4177|   163k|            value);
 4178|   226k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   320k|    {
 4195|   320k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   320k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 309k]
  |  |  ------------------
  ------------------
 4197|  11.6k|            return unexpected(r.error());
 4198|  11.6k|        }
 4199|       |
 4200|   309k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.6k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.6k|    }                                                  \
  |  |  |  | 3667|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   296k|        return ranges::next(range.begin(), n);
 4202|   309k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   986k|    {
  763|   986k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   986k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  63.0k|        : m_fptr([](storage fn,
  743|  63.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.0k|              cvref<T> obj = *get<T>(fn);
  745|  63.0k|              if constexpr (std::is_void_v<R>) {
  746|  63.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.0k|              }
  748|  63.0k|              else {
  749|  63.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.0k|              }
  751|  63.0k|          }),
  752|  63.0k|          m_storage(std::addressof(f))
  753|  63.0k|    {
  754|  63.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  63.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  63.0k|              else {
  749|  63.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.0k|              }
  751|  63.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  63.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  63.0k|        else if constexpr (std::is_object_v<T>) {
  688|  63.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  63.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  63.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  63.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  63.0k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   195k|    {
 3668|   195k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   195k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   195k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 195k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   195k|        return read_source_impl(range);
 3674|   195k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   986k|    {
 3694|   986k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   986k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   986k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   986k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 986k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   986k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   986k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   986k|        auto it = sign_result.first;
 3697|   986k|        m_sign = sign_result.second;
 3698|       |
 3699|   986k|        auto digits_begin = it;
 3700|   986k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   986k|                      ranges::sized_range<Range>) {
 3703|   986k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 986k]
  |  |  |  Branch (859:45): [True: 0, False: 986k]
  |  |  |  Branch (859:45): [True: 0, False: 986k]
  |  |  ------------------
  ------------------
 3704|   986k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   986k|            else {
 3713|   986k|                auto cb = [&](const auto& rr)
 3714|   986k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   986k|                    auto res = read_all(rr);
 3716|   986k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   986k|                        return unexpected_scan_error(
 3718|   986k|                            scan_error::invalid_scanned_value,
 3719|   986k|                            "Invalid float value");
 3720|   986k|                    }
 3721|   986k|                    return res;
 3722|   986k|                };
 3723|   986k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   986k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   986k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.8k, False: 951k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  35.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  35.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  35.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  35.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  35.8k|    }                                                  \
  |  | 3667|   986k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   951k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   986k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   986k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   986k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   951k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 945k, False: 5.80k]
  |  Branch (3736:48): [True: 940k, False: 4.98k]
  ------------------
 3737|   951k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 896k, False: 43.5k]
  ------------------
 3738|   951k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 895k, False: 1.52k]
  ------------------
 3739|   895k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   895k|        }
 3741|       |
 3742|   951k|        handle_separators();
 3743|       |
 3744|   951k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 951k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   951k|        return it;
 3757|   951k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   986k|    {
 3800|   986k|        auto it = range.begin();
 3801|   986k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 976k, False: 10.7k]
  ------------------
 3802|   976k|            return unexpected(r.error());
 3803|   976k|        }
 3804|  10.7k|        else {
 3805|  10.7k|            it = *r;
 3806|  10.7k|        }
 3807|       |
 3808|  10.7k|        if (auto r = read_matching_string_classic_nocase(
 3809|  10.7k|                ranges::subrange{it, range.end()}, "inity");
 3810|  10.7k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.80k, False: 4.98k]
  ------------------
 3811|  5.80k|            m_kind = float_kind::inf_short;
 3812|  5.80k|            return it;
 3813|  5.80k|        }
 3814|  4.98k|        else {
 3815|  4.98k|            m_kind = float_kind::inf_long;
 3816|  4.98k|            return *r;
 3817|  4.98k|        }
 3818|  10.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   976k|    {
 3823|   976k|        auto it = range.begin();
 3824|   976k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 929k, False: 46.2k]
  ------------------
 3825|   929k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   929k|                scan_error::invalid_scanned_value,
 3827|   929k|                "Invalid floating-point NaN value"));
 3828|   929k|        }
 3829|  46.2k|        else {
 3830|  46.2k|            it = *r;
 3831|  46.2k|        }
 3832|       |
 3833|  46.2k|        if (auto r =
 3834|  46.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  46.2k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 43.5k, False: 2.69k]
  ------------------
 3836|  43.5k|            m_kind = float_kind::nan_simple;
 3837|  43.5k|            return it;
 3838|  43.5k|        }
 3839|  2.69k|        else {
 3840|  2.69k|            it = *r;
 3841|  2.69k|        }
 3842|       |
 3843|  2.69k|        auto payload_beg_it = it;
 3844|  2.69k|        it = read_while_code_unit(
 3845|  2.69k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  2.69k|                return is_ascii_char(ch) &&
 3847|  2.69k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  2.69k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  2.69k|            });
 3850|  2.69k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  2.69k|        m_kind = float_kind::nan_with_payload;
 3853|  2.69k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.52k, False: 1.17k]
  ------------------
 3854|  2.69k|                                             ')')) {
 3855|  1.52k|            return *r;
 3856|  1.52k|        }
 3857|  1.17k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.17k|                                     "Invalid floating-point NaN payload");
 3859|  2.69k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  2.69k|        : m_fptr([](storage fn,
  743|  2.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.69k|              cvref<T> obj = *get<T>(fn);
  745|  2.69k|              if constexpr (std::is_void_v<R>) {
  746|  2.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.69k|              }
  748|  2.69k|              else {
  749|  2.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.69k|              }
  751|  2.69k|          }),
  752|  2.69k|          m_storage(std::addressof(f))
  753|  2.69k|    {
  754|  2.69k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  32.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.5k|              else {
  749|  32.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.5k|              }
  751|  32.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  32.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.5k|        else if constexpr (std::is_object_v<T>) {
  688|  32.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.5k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3845|  32.5k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  32.5k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 32.4k, False: 83]
  ------------------
 3847|  32.5k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 30.7k, False: 1.64k]
  |  Branch (3847:39): [True: 22.9k, False: 7.80k]
  |  Branch (3847:54): [True: 2.55k, False: 6.89k]
  |  Branch (3847:67): [True: 2.47k, False: 83]
  ------------------
 3848|  32.4k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.64k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 1.73k]
  ------------------
 3849|  32.5k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.69k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.69k|        {
  662|  2.69k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   656k|    {
 3793|   656k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   656k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   550k|{
 1984|   550k|    auto it = read_while_code_unit(range, pred);
 1985|   550k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 232k, False: 318k]
  ------------------
 1986|   232k|        return unexpected(parse_error::error);
 1987|   232k|    }
 1988|   318k|    return it;
 1989|   550k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   160k|    {
 3865|   160k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 26.9k, False: 133k]
  ------------------
 3866|  26.9k|            auto beg_exp_it = range.begin();
 3867|  26.9k|            auto it = *r;
 3868|       |
 3869|  26.9k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 26.9k, False: 96]
  ------------------
 3870|  26.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  26.9k|                it = r_sign->first;
 3872|  26.9k|            }
 3873|       |
 3874|  26.9k|            if (auto r_exp = read_while1_code_unit(
 3875|  26.9k|                    ranges::subrange{it, range.end()},
 3876|  26.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  26.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 646, False: 26.3k]
  |  |  ------------------
  ------------------
 3878|    646|                it = beg_exp_it;
 3879|    646|            }
 3880|  26.3k|            else {
 3881|  26.3k|                it = *r_exp;
 3882|  26.3k|            }
 3883|       |
 3884|  26.9k|            return it;
 3885|  26.9k|        }
 3886|   133k|        return range.begin();
 3887|   160k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  26.9k|        : m_fptr([](storage fn,
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|  26.9k|              if constexpr (std::is_void_v<R>) {
  746|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.9k|              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
  752|  26.9k|          m_storage(std::addressof(f))
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  77.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  77.2k|              else {
  749|  77.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.2k|              }
  751|  77.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  77.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  77.2k|        else if constexpr (std::is_object_v<T>) {
  688|  77.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  77.2k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3876|  77.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  26.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   273k|    {
 3933|   273k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   273k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 171k, False: 101k]
  |  Branch (3934:50): [True: 18.1k, False: 153k]
  ------------------
 3935|       |
 3936|   273k|        auto it = ranges::begin(range);
 3937|   273k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   273k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   273k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.7k, False: 250k]
  |  |  ------------------
  ------------------
 3941|  22.7k|            return r.transform_error(
 3942|  22.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  22.7k|                                              "Invalid floating-point value"));
 3944|  22.7k|        }
 3945|   250k|        else {
 3946|   250k|            digits_count += ranges::distance(it, *r);
 3947|   250k|            it = *r;
 3948|   250k|        }
 3949|       |
 3950|   250k|        m_integral_part_length = digits_count;
 3951|   250k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 44.9k, False: 205k]
  ------------------
 3952|   250k|                                             m_locale_options.decimal_point)) {
 3953|  44.9k|            it = *r;
 3954|  44.9k|        }
 3955|       |
 3956|   250k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 41.0k, False: 209k]
  ------------------
 3957|   250k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  41.0k|            digits_count += ranges::distance(it, *r);
 3959|  41.0k|            it = *r;
 3960|  41.0k|        }
 3961|       |
 3962|   250k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   250k|        auto beg_exp_it = it;
 3968|   250k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 160k, False: 90.1k]
  ------------------
 3969|   160k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   160k|        }
 3971|   250k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 17.0k, False: 233k]
  |  Branch (3971:29): [True: 11.0k, False: 6.01k]
  ------------------
 3972|  11.0k|            return unexpected_scan_error(
 3973|  11.0k|                scan_error::invalid_scanned_value,
 3974|  11.0k|                "No exponent given to scientific float");
 3975|  11.0k|        }
 3976|       |
 3977|   239k|        m_kind =
 3978|   239k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 213k, False: 26.3k]
  ------------------
 3979|       |
 3980|   239k|        return it;
 3981|   250k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   523k|    {
 3763|   523k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 523k]
  |  |  |  Branch (859:45): [True: 0, False: 523k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   523k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   523k|        return read_while1_code_unit(
 3772|   523k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   523k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   523k|        : m_fptr([](storage fn,
  743|   523k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   523k|              cvref<T> obj = *get<T>(fn);
  745|   523k|              if constexpr (std::is_void_v<R>) {
  746|   523k|                  obj(static_cast<decltype(args)>(args)...);
  747|   523k|              }
  748|   523k|              else {
  749|   523k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   523k|              }
  751|   523k|          }),
  752|   523k|          m_storage(std::addressof(f))
  753|   523k|    {
  754|   523k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.71M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.71M|              else {
  749|  2.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.71M|              }
  751|  2.71M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.71M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.71M|        else if constexpr (std::is_object_v<T>) {
  688|  2.71M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.71M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|  2.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   523k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   523k|        {
  662|   523k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   986k|    {
 3989|   986k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   986k|        const bool allowed_nonhex =
 3991|   986k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   986k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   986k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 976k, False: 10.7k]
  |  Branch (3994:45): [True: 0, False: 976k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   986k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 10.7k, False: 976k]
  ------------------
 4000|  10.7k|            return *r;
 4001|  10.7k|        }
 4002|       |
 4003|   976k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 931k, False: 45.1k]
  |  Branch (4003:45): [True: 1.17k, False: 929k]
  ------------------
 4004|  1.17k|            return unexpected(r.error());
 4005|  1.17k|        }
 4006|   974k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 45.1k, False: 929k]
  ------------------
 4007|  45.1k|            return *r;
 4008|  45.1k|        }
 4009|       |
 4010|   929k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 656k, False: 273k]
  |  Branch (4010:28): [True: 197k, False: 458k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   197k|            auto it = range.begin();
 4014|       |
 4015|   197k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 11.0k, False: 186k]
  ------------------
 4016|  11.0k|                m_kind = float_kind::hex_with_prefix;
 4017|  11.0k|                it = *r;
 4018|  11.0k|            }
 4019|   186k|            else {
 4020|   186k|                m_kind = float_kind::hex_without_prefix;
 4021|   186k|            }
 4022|       |
 4023|   197k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   197k|        }
 4025|   731k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 273k, False: 458k]
  |  Branch (4025:29): [True: 273k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   273k|            m_kind = float_kind::generic;
 4029|   273k|            return read_regular_float(range);
 4030|   273k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   458k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.0k, False: 431k]
  |  |  ------------------
  ------------------
 4036|  27.0k|            m_kind = float_kind::hex_with_prefix;
 4037|  27.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  27.0k|        }
 4039|       |
 4040|   431k|        m_kind = float_kind::generic;
 4041|   431k|        return read_regular(range);
 4042|   458k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   656k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   656k|                    auto res = read_all(rr);
 3716|   656k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 837, False: 655k]
  |  |  ------------------
  ------------------
 3717|    837|                        return unexpected_scan_error(
 3718|    837|                            scan_error::invalid_scanned_value,
 3719|    837|                            "Invalid float value");
 3720|    837|                    }
 3721|   655k|                    return res;
 3722|   656k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   656k|{
 1827|   656k|    return ranges::next(range.begin(), range.end());
 1828|   656k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   656k|    {
  313|   656k|        ranges::advance(x, bound);
  314|   656k|        return x;
  315|   656k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   656k|    {
  275|   656k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   656k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   656k|    {
  190|   656k|        i = std::move(bound);
  191|   656k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   897k|    {
 1565|   897k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   897k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   897k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|   897k|    {
 1609|   897k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   897k|                      ranges::sized_range<Range>) {
 1614|   897k|            m_storage.reset();
 1615|   897k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   897k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  63.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  63.0k|        {
  662|  63.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   163k|        : m_fptr([](storage fn,
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|   163k|              if constexpr (std::is_void_v<R>) {
  746|   163k|                  obj(static_cast<decltype(args)>(args)...);
  747|   163k|              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
  752|   163k|          m_storage(std::addressof(f))
  753|   163k|    {
  754|   163k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   163k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  688|   163k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   163k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   163k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   163k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   163k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   791k|    {
 3654|   791k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 791k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   791k|        return read_source_impl(range);
 3660|   791k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   163k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   163k|        {
  662|   163k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   279k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   279k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   279k|            auto rd = make_reader<T, char_type>();
 6195|   279k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   279k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 279k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   279k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   279k|                return impl(rd, range, value);
 6202|   279k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   279k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   279k|    {
 6113|   279k|        const bool need_skipped_width =
 6114|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 279k]
  |  Branch (6114:33): [True: 0, False: 279k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   279k|        auto it = rng.begin();
 6118|   279k|        std::ptrdiff_t prefix_width = 0;
 6119|   279k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 279k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   279k|        else {
 6127|   279k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.85k, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.85k|    }                                                  \
  |  |  |  | 3667|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   274k|            std::tie(it, prefix_width) = prefix_result;
 6129|   274k|        }
 6130|   274k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   274k|        std::ptrdiff_t value_width = 0;
 6134|   274k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 274k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   274k|        else {
 6150|   274k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   274k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   274k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.4k, False: 257k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.4k|    }                                                  \
  |  | 3667|   274k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   257k|                                             specs, value, loc));
 6152|       |
 6153|   257k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 257k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   257k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   257k|        std::ptrdiff_t postfix_width = 0;
 6162|   257k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 253k, False: 3.88k]
  ------------------
 6163|   253k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   253k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   253k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   253k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   253k|                                 value_width));
 6167|   253k|            std::tie(it, postfix_width) = postfix_result;
 6168|   253k|        }
 6169|       |
 6170|   257k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   257k|                                                 value_width, postfix_width);
 6172|   257k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 257k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   257k|        return it;
 6177|   257k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   681k|    {
 3680|   681k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   681k|        const std::ptrdiff_t sign_len =
 3683|   681k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 169k, False: 512k]
  ------------------
 3684|       |
 3685|   681k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   681k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   681k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   681k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.2k, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.2k|    }                                                  \
  |  |  |  | 3667|   681k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   668k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   681k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   274k|    {
 4159|   274k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   274k|#if !SCN_DISABLE_LOCALE
 4162|   274k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 79.2k, False: 195k]
  ------------------
 4163|  79.2k|            return read_impl<Range>(
 4164|  79.2k|                range, rd,
 4165|  79.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  79.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  79.2k|                },
 4168|  79.2k|                value, loc);
 4169|  79.2k|        }
 4170|   195k|#endif
 4171|       |
 4172|   195k|        return read_impl<Range>(
 4173|   195k|            range, rd,
 4174|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   195k|                return r.read_source(SCN_FWD(args)...);
 4176|   195k|            },
 4177|   195k|            value);
 4178|   274k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   383k|    {
 4195|   383k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   383k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.1k, False: 362k]
  |  |  ------------------
  ------------------
 4197|  21.1k|            return unexpected(r.error());
 4198|  21.1k|        }
 4199|       |
 4200|   362k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   362k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.45k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.45k|    }                                                  \
  |  |  |  | 3667|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   360k|        return ranges::next(range.begin(), n);
 4202|   362k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  79.2k|        : m_fptr([](storage fn,
  743|  79.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.2k|              cvref<T> obj = *get<T>(fn);
  745|  79.2k|              if constexpr (std::is_void_v<R>) {
  746|  79.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  79.2k|              }
  748|  79.2k|              else {
  749|  79.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.2k|              }
  751|  79.2k|          }),
  752|  79.2k|          m_storage(std::addressof(f))
  753|  79.2k|    {
  754|  79.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  79.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  79.2k|              else {
  749|  79.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.2k|              }
  751|  79.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  79.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  79.2k|        else if constexpr (std::is_object_v<T>) {
  688|  79.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  79.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  79.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  79.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  79.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  79.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  79.2k|        {
  662|  79.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   195k|        : m_fptr([](storage fn,
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|   195k|              if constexpr (std::is_void_v<R>) {
  746|   195k|                  obj(static_cast<decltype(args)>(args)...);
  747|   195k|              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
  752|   195k|          m_storage(std::addressof(f))
  753|   195k|    {
  754|   195k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   195k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  688|   195k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   195k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   195k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   195k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   195k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   195k|        {
  662|   195k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   232k|    {
 4159|   232k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   232k|#if !SCN_DISABLE_LOCALE
 4162|   232k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 65.5k, False: 167k]
  ------------------
 4163|  65.5k|            return read_impl<Range>(
 4164|  65.5k|                range, rd,
 4165|  65.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  65.5k|                },
 4168|  65.5k|                value, loc);
 4169|  65.5k|        }
 4170|   167k|#endif
 4171|       |
 4172|   167k|        return read_impl<Range>(
 4173|   167k|            range, rd,
 4174|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   167k|                return r.read_source(SCN_FWD(args)...);
 4176|   167k|            },
 4177|   167k|            value);
 4178|   232k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   331k|    {
 4195|   331k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   331k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 319k]
  |  |  ------------------
  ------------------
 4197|  11.9k|            return unexpected(r.error());
 4198|  11.9k|        }
 4199|       |
 4200|   319k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.7k, False: 307k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.7k|    }                                                  \
  |  |  |  | 3667|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   307k|        return ranges::next(range.begin(), n);
 4202|   319k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  65.5k|        : m_fptr([](storage fn,
  743|  65.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.5k|              cvref<T> obj = *get<T>(fn);
  745|  65.5k|              if constexpr (std::is_void_v<R>) {
  746|  65.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.5k|              }
  748|  65.5k|              else {
  749|  65.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.5k|              }
  751|  65.5k|          }),
  752|  65.5k|          m_storage(std::addressof(f))
  753|  65.5k|    {
  754|  65.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  65.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  65.5k|              else {
  749|  65.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.5k|              }
  751|  65.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  65.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  65.5k|        else if constexpr (std::is_object_v<T>) {
  688|  65.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  65.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  65.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  65.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  65.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  65.5k|        {
  662|  65.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   167k|        : m_fptr([](storage fn,
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|   167k|              if constexpr (std::is_void_v<R>) {
  746|   167k|                  obj(static_cast<decltype(args)>(args)...);
  747|   167k|              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
  752|   167k|          m_storage(std::addressof(f))
  753|   167k|    {
  754|   167k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   167k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   167k|        else if constexpr (std::is_object_v<T>) {
  688|   167k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   167k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   167k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   167k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   167k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   167k|        {
  662|   167k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   282k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   282k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   282k|            auto rd = make_reader<T, char_type>();
 6195|   282k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   282k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 282k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   282k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   282k|                return impl(rd, range, value);
 6202|   282k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   282k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   282k|    {
 6113|   282k|        const bool need_skipped_width =
 6114|   282k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 282k]
  |  Branch (6114:33): [True: 0, False: 282k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   282k|        auto it = rng.begin();
 6118|   282k|        std::ptrdiff_t prefix_width = 0;
 6119|   282k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 282k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   282k|        else {
 6127|   282k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.16k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.16k|    }                                                  \
  |  |  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   277k|            std::tie(it, prefix_width) = prefix_result;
 6129|   277k|        }
 6130|   277k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   277k|        std::ptrdiff_t value_width = 0;
 6134|   277k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 277k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   277k|        else {
 6150|   277k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.1k, False: 260k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.1k|    }                                                  \
  |  | 3667|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   260k|                                             specs, value, loc));
 6152|       |
 6153|   260k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 260k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   260k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   260k|        std::ptrdiff_t postfix_width = 0;
 6162|   260k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 256k, False: 4.14k]
  ------------------
 6163|   256k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   256k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   256k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   256k|                                 value_width));
 6167|   256k|            std::tie(it, postfix_width) = postfix_result;
 6168|   256k|        }
 6169|       |
 6170|   260k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   260k|                                                 value_width, postfix_width);
 6172|   260k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 260k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   260k|        return it;
 6177|   260k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   687k|    {
 3680|   687k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   687k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   687k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   687k|        const std::ptrdiff_t sign_len =
 3683|   687k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 172k, False: 514k]
  ------------------
 3684|       |
 3685|   687k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   687k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   687k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   687k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 676k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.5k|    }                                                  \
  |  |  |  | 3667|   687k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   676k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   687k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   277k|    {
 4159|   277k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   277k|#if !SCN_DISABLE_LOCALE
 4162|   277k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 80.2k, False: 197k]
  ------------------
 4163|  80.2k|            return read_impl<Range>(
 4164|  80.2k|                range, rd,
 4165|  80.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  80.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  80.2k|                },
 4168|  80.2k|                value, loc);
 4169|  80.2k|        }
 4170|   197k|#endif
 4171|       |
 4172|   197k|        return read_impl<Range>(
 4173|   197k|            range, rd,
 4174|   197k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   197k|                return r.read_source(SCN_FWD(args)...);
 4176|   197k|            },
 4177|   197k|            value);
 4178|   277k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   387k|    {
 4195|   387k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   387k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.7k, False: 365k]
  |  |  ------------------
  ------------------
 4197|  21.7k|            return unexpected(r.error());
 4198|  21.7k|        }
 4199|       |
 4200|   365k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 391, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    391|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    391|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    391|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    391|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    391|    }                                                  \
  |  |  |  | 3667|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   364k|        return ranges::next(range.begin(), n);
 4202|   365k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  80.2k|        : m_fptr([](storage fn,
  743|  80.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.2k|              cvref<T> obj = *get<T>(fn);
  745|  80.2k|              if constexpr (std::is_void_v<R>) {
  746|  80.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.2k|              }
  748|  80.2k|              else {
  749|  80.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.2k|              }
  751|  80.2k|          }),
  752|  80.2k|          m_storage(std::addressof(f))
  753|  80.2k|    {
  754|  80.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  80.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.2k|              else {
  749|  80.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.2k|              }
  751|  80.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  80.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.2k|        else if constexpr (std::is_object_v<T>) {
  688|  80.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  80.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  80.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  80.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  80.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  80.2k|        {
  662|  80.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   197k|        : m_fptr([](storage fn,
  743|   197k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   197k|              cvref<T> obj = *get<T>(fn);
  745|   197k|              if constexpr (std::is_void_v<R>) {
  746|   197k|                  obj(static_cast<decltype(args)>(args)...);
  747|   197k|              }
  748|   197k|              else {
  749|   197k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   197k|              }
  751|   197k|          }),
  752|   197k|          m_storage(std::addressof(f))
  753|   197k|    {
  754|   197k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   197k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   197k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   197k|              else {
  749|   197k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   197k|              }
  751|   197k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   197k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   197k|        else if constexpr (std::is_object_v<T>) {
  688|   197k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   197k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   197k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   197k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   197k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   197k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   197k|        {
  662|   197k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   235k|    {
 4159|   235k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   235k|#if !SCN_DISABLE_LOCALE
 4162|   235k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 66.5k, False: 168k]
  ------------------
 4163|  66.5k|            return read_impl<Range>(
 4164|  66.5k|                range, rd,
 4165|  66.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  66.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  66.5k|                },
 4168|  66.5k|                value, loc);
 4169|  66.5k|        }
 4170|   168k|#endif
 4171|       |
 4172|   168k|        return read_impl<Range>(
 4173|   168k|            range, rd,
 4174|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   168k|                return r.read_source(SCN_FWD(args)...);
 4176|   168k|            },
 4177|   168k|            value);
 4178|   235k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   334k|    {
 4195|   334k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   334k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 322k]
  |  |  ------------------
  ------------------
 4197|  12.2k|            return unexpected(r.error());
 4198|  12.2k|        }
 4199|       |
 4200|   322k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.1k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.1k|    }                                                  \
  |  |  |  | 3667|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   311k|        return ranges::next(range.begin(), n);
 4202|   322k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  66.5k|        : m_fptr([](storage fn,
  743|  66.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.5k|              cvref<T> obj = *get<T>(fn);
  745|  66.5k|              if constexpr (std::is_void_v<R>) {
  746|  66.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  66.5k|              }
  748|  66.5k|              else {
  749|  66.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.5k|              }
  751|  66.5k|          }),
  752|  66.5k|          m_storage(std::addressof(f))
  753|  66.5k|    {
  754|  66.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  66.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  66.5k|              else {
  749|  66.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.5k|              }
  751|  66.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  66.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  66.5k|        else if constexpr (std::is_object_v<T>) {
  688|  66.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  66.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  66.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  66.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  66.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  66.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  66.5k|        {
  662|  66.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   168k|        : m_fptr([](storage fn,
  743|   168k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   168k|              cvref<T> obj = *get<T>(fn);
  745|   168k|              if constexpr (std::is_void_v<R>) {
  746|   168k|                  obj(static_cast<decltype(args)>(args)...);
  747|   168k|              }
  748|   168k|              else {
  749|   168k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   168k|              }
  751|   168k|          }),
  752|   168k|          m_storage(std::addressof(f))
  753|   168k|    {
  754|   168k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   168k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   168k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   168k|              else {
  749|   168k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   168k|              }
  751|   168k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   168k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   168k|        else if constexpr (std::is_object_v<T>) {
  688|   168k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   168k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   168k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   168k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   168k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   168k|        {
  662|   168k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.15M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.15M|        else {
 1054|  1.15M|            return r.begin().contiguous_segment();
 1055|  1.15M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.15M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.01M|{
 2049|  1.01M|    auto it = range.begin();
 2050|  1.90M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.89M, False: 14.8k]
  ------------------
 2051|  1.89M|        const auto val =
 2052|  1.89M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.89M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.89M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.88M, False: 11.7k]
  |  |  ------------------
  ------------------
 2054|  1.88M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.88M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.88M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.00M, False: 878k]
  ------------------
 2057|  1.00M|                return it;
 2058|  1.00M|            }
 2059|  1.88M|        }
 2060|   890k|        it = val.iterator;
 2061|   890k|    }
 2062|       |
 2063|  14.8k|    return it;
 2064|  1.01M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.89M|{
 1887|  1.89M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.89M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.89M|    auto it = range.begin();
 1891|  1.89M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.89M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 1.88M]
  |  |  ------------------
  ------------------
 1894|  11.7k|        ++it;
 1895|  11.7k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  11.7k|        return {it, {}};
 1897|  11.7k|    }
 1898|       |
 1899|  1.88M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.86M, False: 18.4k]
  ------------------
 1900|  1.86M|        ++it;
 1901|  1.86M|        return {it, string_type(1, *range.begin())};
 1902|  1.86M|    }
 1903|       |
 1904|  18.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  18.4k|    return {it, string_type{range.begin(), it}};
 1906|  1.88M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  11.7k|{
 1155|  11.7k|    auto it = input.begin();
 1156|  97.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 95.7k, False: 1.36k]
  ------------------
 1157|  95.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.4k, False: 85.3k]
  ------------------
 1158|  10.4k|            break;
 1159|  10.4k|        }
 1160|  95.7k|    }
 1161|  11.7k|    return it;
 1162|  11.7k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.4k|    {
  283|  18.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.4k|    {
  252|  18.4k|        constexpr iter_difference_t<I> zero{0};
  253|  18.4k|        iter_difference_t<I> counter{0};
  254|       |
  255|  55.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.3k, False: 17.4k]
  |  Branch (255:30): [True: 37.3k, False: 965]
  ------------------
  256|  37.3k|            ++i;
  257|  37.3k|            ++counter;
  258|  37.3k|        }
  259|       |
  260|  18.4k|        return counter;
  261|  18.4k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.89M|    {
 1878|  1.89M|        return !codepoint.empty();
 1879|  1.89M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.01M|{
 2070|  1.01M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.01M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.15M|{
 2940|  1.15M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.15M, False: 0]
  ------------------
 2941|  1.15M|        auto it = read_while_classic_space(range);
 2942|  1.15M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.15M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 1.13M]
  |  |  ------------------
  ------------------
 2944|  14.8k|            return unexpected(e);
 2945|  14.8k|        }
 2946|       |
 2947|  1.13M|        return it;
 2948|  1.15M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.15M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.15M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.15M|    else {
 2114|  1.15M|        auto it = range.begin();
 2115|       |
 2116|  1.15M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.15M|            auto seg = get_contiguous_beginning(range);
 2118|  1.15M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.15M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 135k, False: 1.01M]
  ------------------
 2120|   135k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|   135k|            }
 2122|  1.01M|            ranges::advance(it, seg.size());
 2123|  1.01M|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.15M|            return detail::is_cp_space(cp);
 2127|  1.15M|        });
 2128|  1.15M|    }
 2129|  1.15M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.01M|        : m_fptr([](storage fn,
  743|  1.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.01M|              cvref<T> obj = *get<T>(fn);
  745|  1.01M|              if constexpr (std::is_void_v<R>) {
  746|  1.01M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.01M|              }
  748|  1.01M|              else {
  749|  1.01M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.01M|              }
  751|  1.01M|          }),
  752|  1.01M|          m_storage(std::addressof(f))
  753|  1.01M|    {
  754|  1.01M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.88M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.88M|              else {
  749|  1.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.88M|              }
  751|  1.88M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.88M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.88M|        else if constexpr (std::is_object_v<T>) {
  688|  1.88M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.88M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.88M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.88M|            return detail::is_cp_space(cp);
 2127|  1.88M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.01M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.01M|        {
  662|  1.01M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   566k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   566k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   566k|        auto beg = r.begin();
  990|   566k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 566k, False: 0]
  ------------------
  991|   566k|            return false;
  992|   566k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   566k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.96M|    {
  763|  3.96M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.96M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  1.48M|{
 1845|  1.48M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  1.48M|    else {
 1856|  1.48M|        auto it = range.begin();
 1857|  1.48M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 890k, False: 593k]
  ------------------
 1858|   890k|            return ranges::next(it, count);
 1859|   890k|        }
 1860|       |
 1861|  2.28M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.74M, False: 539k]
  ------------------
 1862|  1.74M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 54.0k, False: 1.69M]
  ------------------
 1863|  54.0k|                return unexpected(eof_error::eof);
 1864|  54.0k|            }
 1865|  1.74M|        }
 1866|       |
 1867|   539k|        return it;
 1868|   593k|    }
 1869|  1.48M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.48M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.48M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.48M|        else {
 1106|  1.48M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.48M, False: 0]
  ------------------
 1107|  1.48M|                return static_cast<size_t>(
 1108|  1.48M|                    r.begin().parent()->chars_available() -
 1109|  1.48M|                    r.begin().position());
 1110|  1.48M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.48M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.48M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.31M|        : m_fptr([](storage fn,
  743|  1.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.31M|              cvref<T> obj = *get<T>(fn);
  745|  1.31M|              if constexpr (std::is_void_v<R>) {
  746|  1.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.31M|              }
  748|  1.31M|              else {
  749|  1.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.31M|              }
  751|  1.31M|          }),
  752|  1.31M|          m_storage(std::addressof(f))
  753|  1.31M|    {
  754|  1.31M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.98M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.98M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.98M|              else {
  749|  1.98M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.98M|              }
  751|  1.98M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.98M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.98M|        else if constexpr (std::is_object_v<T>) {
  688|  1.98M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.98M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.31M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.31M|        {
  662|  1.31M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   416k|    {
 6026|   416k|        const bool need_skipped_width =
 6027|   416k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 416k]
  |  Branch (6027:33): [True: 0, False: 416k]
  ------------------
 6028|   416k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   416k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 416k]
  ------------------
 6032|   416k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 416k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   416k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 416k, False: 0]
  |  Branch (6036:56): [True: 416k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   416k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 416k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   829k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 413k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   829k|                            make_eof_scan_error));
 6047|       |
 6048|   829k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 413k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   413k|            return result_type{it, 0};
 6056|   829k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   416k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   972k|{
 1964|   972k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   972k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   972k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   972k|    else {
 1949|   972k|        auto first = range.begin();
 1950|  1.48M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.47M, False: 3.08k]
  ------------------
 1951|  1.47M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 969k, False: 510k]
  ------------------
 1952|   969k|                return first;
 1953|   969k|            }
 1954|  1.47M|        }
 1955|  3.08k|        return first;
 1956|   972k|    }
 1957|   972k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   682k|    {
  108|   682k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   682k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   682k|    {
   94|   682k|        iter_difference_t<I> counter{0};
   95|  1.81M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.12M, False: 682k]
  ------------------
   96|  1.12M|            ++i;
   97|  1.12M|            ++counter;
   98|  1.12M|        }
   99|   682k|        return counter;
  100|   682k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|   199k|    {
 1768|   199k|        auto stdloc = loc.get<std::locale>();
 1769|   199k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   199k|        grouping = numpunct.grouping();
 1771|   199k|        thousands_sep =
 1772|   199k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 199k]
  ------------------
 1773|   199k|        decimal_point = numpunct.decimal_point();
 1774|   199k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|   199k|{
 1705|   199k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 199k, False: 0]
  ------------------
 1706|   199k|        return std::use_facet<Facet>(stdloc);
 1707|   199k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   199k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  1.31M|{
 1834|  1.31M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 1.31M]
  |  |  ------------------
  ------------------
 1835|  2.00k|        return unexpected(e);
 1836|  2.00k|    }
 1837|       |
 1838|  1.31M|    return ranges::next(range.begin());
 1839|  1.31M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  2.03M|{
  950|  2.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.61k, False: 2.02M]
  |  |  ------------------
  ------------------
  951|  5.61k|        return eof_error::eof;
  952|  5.61k|    }
  953|  2.02M|    return eof_error::good;
  954|  2.03M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  3.00M|{
  944|  3.00M|    return is_range_eof(r.begin(), r.end());
  945|  3.00M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  3.00M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.00M|    {
  937|  3.00M|        return begin == end;
  938|  3.00M|    }
  939|  3.00M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.31M|    {
  296|  1.31M|        ++x;
  297|  1.31M|        return x;
  298|  1.31M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   574k|{
 3130|   574k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   574k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 568k, False: 5.22k]
  ------------------
 3132|   568k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 568k, False: 70]
  ------------------
 3133|   568k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   568k|        }
 3135|     70|        return unexpected(eof_error::eof);
 3136|   568k|    }
 3137|       |
 3138|  5.22k|    auto& it = *r;
 3139|  5.22k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 4.24k, False: 982]
  ------------------
 3140|  4.24k|        return std::pair{it, sign_type::minus_sign};
 3141|  4.24k|    }
 3142|    982|    return std::pair{it, sign_type::plus_sign};
 3143|  5.22k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   917k|{
 2261|   917k|    auto it = read_code_unit(range);
 2262|   917k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 916k]
  |  |  ------------------
  ------------------
 2263|  1.09k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  1.09k|    }
 2265|       |
 2266|  1.83M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.83M, False: 899k]
  ------------------
 2267|  1.83M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 16.5k, False: 1.81M]
  ------------------
 2268|  16.5k|            return *it;
 2269|  16.5k|        }
 2270|  1.83M|    }
 2271|       |
 2272|   899k|    return unexpected(parse_error::error);
 2273|   916k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  1.48M|{
 2220|  1.48M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.48M|    else {
 2233|  1.48M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.48M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.48M|                return ch;
 2236|  1.48M|            }
 2237|  1.48M|            return static_cast<char_type>(ch +
 2238|  1.48M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.48M|        };
 2240|       |
 2241|  1.48M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.0k, False: 1.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.0k|    }                                                  \
  |  |  |  | 3667|  1.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.42M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.42M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.42M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.42M, False: 758]
  |  |  ------------------
  ------------------
 2246|  1.42M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.42M|                    return ascii_tolower(a) ==
 2248|  1.42M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.42M|                }))) {
 2250|  1.42M|            return unexpected(parse_error::error);
 2251|  1.42M|        }
 2252|       |
 2253|    758|        return it;
 2254|  1.42M|    }
 2255|  1.48M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.66M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.66M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.31M, False: 358k]
  |  Branch (2234:29): [True: 347k, False: 10.9k]
  ------------------
 2235|  1.65M|                return ch;
 2236|  1.65M|            }
 2237|  10.9k|            return static_cast<char_type>(ch +
 2238|  10.9k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.66M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   398k|{
 2135|   398k|    auto it = read_code_unit(range);
 2136|   398k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 913, False: 397k]
  |  |  ------------------
  ------------------
 2137|    913|        return unexpected(make_eof_parse_error(it.error()));
 2138|    913|    }
 2139|       |
 2140|   397k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 395k, False: 2.26k]
  |  |  ------------------
  ------------------
 2141|   397k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   395k|        return unexpected(parse_error::error);
 2143|   395k|    }
 2144|       |
 2145|  2.26k|    return *it;
 2146|   397k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   972k|{
 1984|   972k|    auto it = read_while_code_unit(range, pred);
 1985|   972k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 562k, False: 410k]
  ------------------
 1986|   562k|        return unexpected(parse_error::error);
 1987|   562k|    }
 1988|   410k|    return it;
 1989|   972k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   395k|    {
 1609|   395k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   395k|                           ranges::common_range<Range>) {
 1626|   395k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   395k|            auto end_seg = range.end().contiguous_segment();
 1628|   395k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 381k]
  |  |  ------------------
  ------------------
 1629|   395k|                             detail::to_address(end_seg.end()))) {
 1630|  13.6k|                auto& str = m_storage.emplace();
 1631|  13.6k|                str.reserve(range.end().position() - range.begin().position());
 1632|  13.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  13.6k|                m_view = string_view_type{str};
 1634|  13.6k|                return;
 1635|  13.6k|            }
 1636|       |
 1637|   381k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   381k|                                                            end_seg.data());
 1639|   381k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   395k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  3.50M|    {
 1570|  3.50M|        return m_view;
 1571|  3.50M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.25M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   280k|    {
 6068|   280k|        const bool need_skipped_width =
 6069|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 280k]
  |  Branch (6069:33): [True: 0, False: 280k]
  ------------------
 6070|   280k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   280k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 280k]
  ------------------
 6073|   280k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 280k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   280k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 280k, False: 0]
  ------------------
 6082|   280k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 280k]
  ------------------
 6083|   280k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   280k|        return result_type{rng.begin(), 0};
 6107|   280k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  1.48M|{
 1845|  1.48M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  1.48M|    if constexpr (ranges::sized_range<Range>) {
 1848|  1.48M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  1.48M|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 54.1k, False: 1.43M]
  ------------------
 1850|  54.1k|            return unexpected(eof_error::eof);
 1851|  54.1k|        }
 1852|       |
 1853|  1.43M|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  1.48M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  1.68M|{
 1887|  1.68M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.68M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.68M|    auto it = range.begin();
 1891|  1.68M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.68M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.68M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.68M, False: 0]
  ------------------
 1900|  1.68M|        ++it;
 1901|  1.68M|        return {it, string_type(1, *range.begin())};
 1902|  1.68M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.68M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  3.17M|{
  944|  3.17M|    return is_range_eof(r.begin(), r.end());
  945|  3.17M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  3.17M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.17M|    {
  937|  3.17M|        return begin == end;
  938|  3.17M|    }
  939|  3.17M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   358k|    {
  190|   358k|        i = std::move(bound);
  191|   358k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  1.68M|    {
 1878|  1.68M|        return !codepoint.empty();
 1879|  1.68M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.48M|{
  950|  1.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 1.48M]
  |  |  ------------------
  ------------------
  951|  4.12k|        return eof_error::eof;
  952|  4.12k|    }
  953|  1.48M|    return eof_error::good;
  954|  1.48M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   771k|{
 1834|   771k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 516, False: 770k]
  |  |  ------------------
  ------------------
 1835|    516|        return unexpected(e);
 1836|    516|    }
 1837|       |
 1838|   770k|    return ranges::next(range.begin());
 1839|   771k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   770k|    {
  296|   770k|        ++x;
  297|   770k|        return x;
  298|   770k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   567k|{
 3130|   567k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   567k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 563k, False: 3.28k]
  ------------------
 3132|   563k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 563k, False: 24]
  ------------------
 3133|   563k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   563k|        }
 3135|     24|        return unexpected(eof_error::eof);
 3136|   563k|    }
 3137|       |
 3138|  3.28k|    auto& it = *r;
 3139|  3.28k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 2.46k, False: 816]
  ------------------
 3140|  2.46k|        return std::pair{it, sign_type::minus_sign};
 3141|  2.46k|    }
 3142|    816|    return std::pair{it, sign_type::plus_sign};
 3143|  3.28k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   641k|{
 2261|   641k|    auto it = read_code_unit(range);
 2262|   641k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 641k]
  |  |  ------------------
  ------------------
 2263|    250|        return unexpected(make_eof_parse_error(it.error()));
 2264|    250|    }
 2265|       |
 2266|  1.28M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.28M, False: 634k]
  ------------------
 2267|  1.28M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 7.16k, False: 1.27M]
  ------------------
 2268|  7.16k|            return *it;
 2269|  7.16k|        }
 2270|  1.28M|    }
 2271|       |
 2272|   634k|    return unexpected(parse_error::error);
 2273|   641k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  1.48M|{
 2220|  1.48M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.48M|    else {
 2233|  1.48M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.48M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.48M|                return ch;
 2236|  1.48M|            }
 2237|  1.48M|            return static_cast<char_type>(ch +
 2238|  1.48M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.48M|        };
 2240|       |
 2241|  1.48M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.1k, False: 1.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.1k|    }                                                  \
  |  |  |  | 3667|  1.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.43M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.43M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.43M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43M, False: 758]
  |  |  ------------------
  ------------------
 2246|  1.43M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.43M|                    return ascii_tolower(a) ==
 2248|  1.43M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.43M|                }))) {
 2250|  1.43M|            return unexpected(parse_error::error);
 2251|  1.43M|        }
 2252|       |
 2253|    758|        return it;
 2254|  1.43M|    }
 2255|  1.48M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.66M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.66M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.31M, False: 359k]
  |  Branch (2234:29): [True: 348k, False: 11.0k]
  ------------------
 2235|  1.65M|                return ch;
 2236|  1.65M|            }
 2237|  11.0k|            return static_cast<char_type>(ch +
 2238|  11.0k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.66M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   129k|{
 2135|   129k|    auto it = read_code_unit(range);
 2136|   129k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 129k]
  |  |  ------------------
  ------------------
 2137|    266|        return unexpected(make_eof_parse_error(it.error()));
 2138|    266|    }
 2139|       |
 2140|   129k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 894]
  |  |  ------------------
  ------------------
 2141|   129k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   128k|        return unexpected(parse_error::error);
 2143|   128k|    }
 2144|       |
 2145|    894|    return *it;
 2146|   129k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   338k|{
 1964|   338k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   338k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   338k|{
 1945|   338k|    if constexpr (ranges::common_range<Range>) {
 1946|   338k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   338k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   566k|{
 2940|   566k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 566k, False: 0]
  ------------------
 2941|   566k|        auto it = read_while_classic_space(range);
 2942|   566k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   566k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 563k]
  |  |  ------------------
  ------------------
 2944|  3.18k|            return unexpected(e);
 2945|  3.18k|        }
 2946|       |
 2947|   563k|        return it;
 2948|   566k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   566k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   566k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   566k|    else {
 2114|   566k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   566k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   566k|            return detail::is_cp_space(cp);
 2127|   566k|        });
 2128|   566k|    }
 2129|   566k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   566k|{
 2070|   566k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   566k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   955k|{
 2049|   955k|    auto it = range.begin();
 2050|  1.92M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.68M, False: 243k]
  ------------------
 2051|  1.68M|        const auto val =
 2052|  1.68M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.68M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.68M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.68M, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.68M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.68M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.68M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 711k, False: 972k]
  ------------------
 2057|   711k|                return it;
 2058|   711k|            }
 2059|  1.68M|        }
 2060|   972k|        it = val.iterator;
 2061|   972k|    }
 2062|       |
 2063|   243k|    return it;
 2064|   955k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   566k|        : m_fptr([](storage fn,
  743|   566k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   566k|              cvref<T> obj = *get<T>(fn);
  745|   566k|              if constexpr (std::is_void_v<R>) {
  746|   566k|                  obj(static_cast<decltype(args)>(args)...);
  747|   566k|              }
  748|   566k|              else {
  749|   566k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   566k|              }
  751|   566k|          }),
  752|   566k|          m_storage(std::addressof(f))
  753|   566k|    {
  754|   566k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   971k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   971k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   971k|              else {
  749|   971k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   971k|              }
  751|   971k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   971k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   971k|        else if constexpr (std::is_object_v<T>) {
  688|   971k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   971k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   971k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   971k|            return detail::is_cp_space(cp);
 2127|   971k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   566k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   566k|        {
  662|   566k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.28M|    {
  304|  1.28M|        ranges::advance(x, n);
  305|  1.28M|        return x;
  306|  1.28M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.28M|    {
  268|  1.28M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.28M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.28M|    {
  181|  4.10M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.82M, False: 1.28M]
  ------------------
  182|  2.82M|            ++i;
  183|  2.82M|        }
  184|  1.28M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   130k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   130k|            auto rd = make_reader<T, char_type>();
 6195|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   130k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 130k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   130k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   130k|                return impl(rd, range, value);
 6202|   130k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   130k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   832k|    {
 3029|   832k|        reader_error_handler eh{};
 3030|   832k|        get_derived().check_specs_impl(specs, eh);
 3031|   832k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 832k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   832k|        return {};
 3035|   832k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|   832k|    {
 3040|   832k|        return static_cast<Derived&>(*this);
 3041|   832k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|   832k|    {
 4134|   832k|        detail::check_float_type_specs(specs, eh);
 4135|   832k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   130k|    {
 6113|   130k|        const bool need_skipped_width =
 6114|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 130k]
  |  Branch (6114:33): [True: 0, False: 130k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   130k|        auto it = rng.begin();
 6118|   130k|        std::ptrdiff_t prefix_width = 0;
 6119|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 130k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   130k|        else {
 6127|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   129k|            std::tie(it, prefix_width) = prefix_result;
 6129|   129k|        }
 6130|   129k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   129k|        std::ptrdiff_t value_width = 0;
 6134|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 129k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   129k|        else {
 6150|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.8k, False: 85.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.8k|    }                                                  \
  |  | 3667|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  85.4k|                                             specs, value, loc));
 6152|       |
 6153|  85.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 85.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  85.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  85.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  85.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 85.0k, False: 360]
  ------------------
 6163|  85.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 85.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  85.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  85.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  85.0k|                                 value_width));
 6167|  85.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  85.0k|        }
 6169|       |
 6170|  85.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  85.4k|                                                 value_width, postfix_width);
 6172|  85.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 85.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  85.4k|        return it;
 6177|  85.4k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.69M|    {
 3024|  1.69M|        return true;
 3025|  1.69M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|   826k|    {
 4206|   826k|        unsigned options{};
 4207|   826k|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 199k, False: 627k]
  ------------------
 4208|   199k|            options |= float_reader_base::allow_thsep;
 4209|   199k|        }
 4210|       |
 4211|   826k|        SCN_GCC_COMPAT_PUSH
 4212|   826k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|   826k|        switch (specs.type) {
 4215|   163k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 163k, False: 663k]
  ------------------
 4216|   163k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  54.4k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 54.4k, False: 772k]
  ------------------
 4219|  54.4k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   217k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 217k, False: 608k]
  ------------------
 4222|   217k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   191k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 191k, False: 635k]
  ------------------
 4225|   191k|                return options | float_reader_base::allow_scientific |
 4226|   191k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   199k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 199k, False: 627k]
  ------------------
 4229|   199k|                return options | float_reader_base::allow_scientific |
 4230|   199k|                       float_reader_base::allow_fixed |
 4231|   199k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 826k]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|   826k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|   826k|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|   826k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|   826k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.12M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.25M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   264k|    {
 3680|   264k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   264k|        const std::ptrdiff_t sign_len =
 3683|   264k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.33k, False: 263k]
  ------------------
 3684|       |
 3685|   264k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   264k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.7k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  32.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  32.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  32.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  32.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  32.7k|    }                                                  \
  |  |  |  | 3667|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   231k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   264k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|   879k|    {
 4046|   879k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 879k, False: 0]
  ------------------
 4047|   879k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 879k, False: 0]
  ------------------
 4048|   879k|            return;
 4049|   879k|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   959k|    {
 1575|   959k|        return m_storage.has_value();
 1576|   959k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|   562k|    {
 1580|   562k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|   562k|        return *m_storage;
 1582|   562k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   129k|    {
 4159|   129k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   129k|#if !SCN_DISABLE_LOCALE
 4162|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 28.9k, False: 100k]
  ------------------
 4163|  28.9k|            return read_impl<Range>(
 4164|  28.9k|                range, rd,
 4165|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  28.9k|                },
 4168|  28.9k|                value, loc);
 4169|  28.9k|        }
 4170|   100k|#endif
 4171|       |
 4172|   100k|        return read_impl<Range>(
 4173|   100k|            range, rd,
 4174|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   100k|                return r.read_source(SCN_FWD(args)...);
 4176|   100k|            },
 4177|   100k|            value);
 4178|   129k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   172k|    {
 4195|   172k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 117k]
  |  |  ------------------
  ------------------
 4197|  55.1k|            return unexpected(r.error());
 4198|  55.1k|        }
 4199|       |
 4200|   117k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.74k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.74k|    }                                                  \
  |  |  |  | 3667|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   115k|        return ranges::next(range.begin(), n);
 4202|   117k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   562k|    {
  763|   562k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   562k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  28.9k|        : m_fptr([](storage fn,
  743|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.9k|              cvref<T> obj = *get<T>(fn);
  745|  28.9k|              if constexpr (std::is_void_v<R>) {
  746|  28.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.9k|              }
  748|  28.9k|              else {
  749|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.9k|              }
  751|  28.9k|          }),
  752|  28.9k|          m_storage(std::addressof(f))
  753|  28.9k|    {
  754|  28.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.9k|              else {
  749|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.9k|              }
  751|  28.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.9k|        else if constexpr (std::is_object_v<T>) {
  688|  28.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  28.9k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|  99.6k|    {
 3668|  99.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  99.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  99.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  99.6k|        return read_source_impl(range);
 3674|  99.6k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|   562k|    {
 3694|   562k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   562k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   562k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   562k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 562k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   562k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   562k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   562k|        auto it = sign_result.first;
 3697|   562k|        m_sign = sign_result.second;
 3698|       |
 3699|   562k|        auto digits_begin = it;
 3700|   562k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|   562k|        else {
 3727|   562k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   562k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   562k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 167k, False: 395k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   167k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   167k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   167k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   167k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   167k|    }                                                  \
  |  | 3667|   562k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|   395k|                it,
 3729|   395k|                do_read_source_impl(
 3730|   395k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|   395k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|   395k|        }
 3733|       |
 3734|   562k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   395k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 395k, False: 0]
  |  Branch (3736:48): [True: 395k, False: 0]
  ------------------
 3737|   395k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 395k, False: 0]
  ------------------
 3738|   395k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 395k, False: 0]
  ------------------
 3739|   395k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   395k|        }
 3741|       |
 3742|   395k|        handle_separators();
 3743|       |
 3744|   395k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 395k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   395k|        return it;
 3757|   395k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|   562k|    {
 3989|   562k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   562k|        const bool allowed_nonhex =
 3991|   562k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   562k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   562k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 562k, False: 0]
  |  Branch (3994:45): [True: 0, False: 562k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   562k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 562k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   562k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 562k, False: 0]
  |  Branch (4003:45): [True: 0, False: 562k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   562k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 562k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   562k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 358k, False: 204k]
  |  Branch (4010:28): [True: 108k, False: 249k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   108k|            auto it = range.begin();
 4014|       |
 4015|   108k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 228, False: 108k]
  ------------------
 4016|    228|                m_kind = float_kind::hex_with_prefix;
 4017|    228|                it = *r;
 4018|    228|            }
 4019|   108k|            else {
 4020|   108k|                m_kind = float_kind::hex_without_prefix;
 4021|   108k|            }
 4022|       |
 4023|   108k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   108k|        }
 4025|   453k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 204k, False: 249k]
  |  Branch (4025:29): [True: 204k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   204k|            m_kind = float_kind::generic;
 4029|   204k|            return read_regular_float(range);
 4030|   204k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   249k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 248k]
  |  |  ------------------
  ------------------
 4036|    530|            m_kind = float_kind::hex_with_prefix;
 4037|    530|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    530|        }
 4039|       |
 4040|   248k|        m_kind = float_kind::generic;
 4041|   248k|        return read_regular(range);
 4042|   249k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|   562k|    {
 3800|   562k|        auto it = range.begin();
 3801|   562k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 562k, False: 0]
  ------------------
 3802|   562k|            return unexpected(r.error());
 3803|   562k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   562k|    {
 3823|   562k|        auto it = range.begin();
 3824|   562k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 562k, False: 0]
  ------------------
 3825|   562k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   562k|                scan_error::invalid_scanned_value,
 3827|   562k|                "Invalid floating-point NaN value"));
 3828|   562k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   358k|    {
 3793|   358k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   358k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   109k|    {
 3893|   109k|        auto it = range.begin();
 3894|       |
 3895|   109k|        std::ptrdiff_t digits_count = 0;
 3896|   109k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 83.3k]
  |  |  ------------------
  ------------------
 3898|  26.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  26.0k|                scan_error::invalid_scanned_value,
 3900|  26.0k|                "Invalid hexadecimal floating-point value"));
 3901|  26.0k|        }
 3902|  83.3k|        else {
 3903|  83.3k|            digits_count += ranges::distance(it, *r);
 3904|  83.3k|            it = *r;
 3905|  83.3k|        }
 3906|       |
 3907|  83.3k|        m_integral_part_length = digits_count;
 3908|  83.3k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 414, False: 82.9k]
  ------------------
 3909|  83.3k|                                             m_locale_options.decimal_point)) {
 3910|    414|            it = *r;
 3911|    414|        }
 3912|       |
 3913|  83.3k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 324, False: 83.0k]
  ------------------
 3914|  83.3k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|    324|            digits_count += ranges::distance(it, *r);
 3916|    324|            it = *r;
 3917|    324|        }
 3918|       |
 3919|  83.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.3k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|  83.3k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|  83.3k|        return it;
 3927|  83.3k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   192k|    {
 3778|   192k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 192k]
  |  |  |  Branch (859:45): [True: 0, False: 192k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   192k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   192k|        return read_while1_code_unit(
 3787|   192k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   192k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   192k|        : m_fptr([](storage fn,
  743|   192k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   192k|              cvref<T> obj = *get<T>(fn);
  745|   192k|              if constexpr (std::is_void_v<R>) {
  746|   192k|                  obj(static_cast<decltype(args)>(args)...);
  747|   192k|              }
  748|   192k|              else {
  749|   192k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   192k|              }
  751|   192k|          }),
  752|   192k|          m_storage(std::addressof(f))
  753|   192k|    {
  754|   192k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   299k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   299k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   299k|              else {
  749|   299k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   299k|              }
  751|   299k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   299k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   299k|        else if constexpr (std::is_object_v<T>) {
  688|   299k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   299k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3787|   299k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   192k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   192k|        {
  662|   192k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   343k|    {
 3865|   343k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 11.2k, False: 331k]
  ------------------
 3866|  11.2k|            auto beg_exp_it = range.begin();
 3867|  11.2k|            auto it = *r;
 3868|       |
 3869|  11.2k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 11.2k, False: 70]
  ------------------
 3870|  11.2k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  11.2k|                it = r_sign->first;
 3872|  11.2k|            }
 3873|       |
 3874|  11.2k|            if (auto r_exp = read_while1_code_unit(
 3875|  11.2k|                    ranges::subrange{it, range.end()},
 3876|  11.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  11.2k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.11k, False: 10.1k]
  |  |  ------------------
  ------------------
 3878|  1.11k|                it = beg_exp_it;
 3879|  1.11k|            }
 3880|  10.1k|            else {
 3881|  10.1k|                it = *r_exp;
 3882|  10.1k|            }
 3883|       |
 3884|  11.2k|            return it;
 3885|  11.2k|        }
 3886|   331k|        return range.begin();
 3887|   343k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  11.2k|        : m_fptr([](storage fn,
  743|  11.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.2k|              cvref<T> obj = *get<T>(fn);
  745|  11.2k|              if constexpr (std::is_void_v<R>) {
  746|  11.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.2k|              }
  748|  11.2k|              else {
  749|  11.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.2k|              }
  751|  11.2k|          }),
  752|  11.2k|          m_storage(std::addressof(f))
  753|  11.2k|    {
  754|  11.2k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  38.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.1k|              else {
  749|  38.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.1k|              }
  751|  38.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  38.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.1k|        else if constexpr (std::is_object_v<T>) {
  688|  38.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  38.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  11.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.2k|        {
  662|  11.2k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   453k|    {
 3933|   453k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   453k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 371k, False: 81.5k]
  |  Branch (3934:50): [True: 27.2k, False: 344k]
  ------------------
 3935|       |
 3936|   453k|        auto it = ranges::begin(range);
 3937|   453k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   453k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   453k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138k, False: 315k]
  |  |  ------------------
  ------------------
 3941|   138k|            return r.transform_error(
 3942|   138k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   138k|                                              "Invalid floating-point value"));
 3944|   138k|        }
 3945|   315k|        else {
 3946|   315k|            digits_count += ranges::distance(it, *r);
 3947|   315k|            it = *r;
 3948|   315k|        }
 3949|       |
 3950|   315k|        m_integral_part_length = digits_count;
 3951|   315k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 1.85k, False: 313k]
  ------------------
 3952|   315k|                                             m_locale_options.decimal_point)) {
 3953|  1.85k|            it = *r;
 3954|  1.85k|        }
 3955|       |
 3956|   315k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 1.43k, False: 313k]
  ------------------
 3957|   315k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  1.43k|            digits_count += ranges::distance(it, *r);
 3959|  1.43k|            it = *r;
 3960|  1.43k|        }
 3961|       |
 3962|   315k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 315k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   315k|        auto beg_exp_it = it;
 3968|   315k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 259k, False: 55.2k]
  ------------------
 3969|   259k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   259k|        }
 3971|   315k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.11k, False: 310k]
  |  Branch (3971:29): [True: 3.30k, False: 804]
  ------------------
 3972|  3.30k|            return unexpected_scan_error(
 3973|  3.30k|                scan_error::invalid_scanned_value,
 3974|  3.30k|                "No exponent given to scientific float");
 3975|  3.30k|        }
 3976|       |
 3977|   311k|        m_kind =
 3978|   311k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 301k, False: 10.0k]
  ------------------
 3979|       |
 3980|   311k|        return it;
 3981|   315k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|   768k|    {
 3763|   768k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 768k]
  |  |  |  Branch (859:45): [True: 0, False: 768k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   768k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   768k|        return read_while1_code_unit(
 3772|   768k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   768k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   768k|        : m_fptr([](storage fn,
  743|   768k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   768k|              cvref<T> obj = *get<T>(fn);
  745|   768k|              if constexpr (std::is_void_v<R>) {
  746|   768k|                  obj(static_cast<decltype(args)>(args)...);
  747|   768k|              }
  748|   768k|              else {
  749|   768k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   768k|              }
  751|   768k|          }),
  752|   768k|          m_storage(std::addressof(f))
  753|   768k|    {
  754|   768k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.14M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.14M|              else {
  749|  1.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.14M|              }
  751|  1.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.14M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.14M|        else if constexpr (std::is_object_v<T>) {
  688|  1.14M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.14M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3772|  1.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   768k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   768k|        {
  662|   768k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   395k|    {
 1565|   395k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   395k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  28.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.9k|        {
  662|  28.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   100k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   463k|    {
 3654|   463k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   463k|        return read_source_impl(range);
 3660|   463k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   129k|    {
 4159|   129k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   129k|#if !SCN_DISABLE_LOCALE
 4162|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 29.0k, False: 100k]
  ------------------
 4163|  29.0k|            return read_impl<Range>(
 4164|  29.0k|                range, rd,
 4165|  29.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  29.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  29.0k|                },
 4168|  29.0k|                value, loc);
 4169|  29.0k|        }
 4170|   100k|#endif
 4171|       |
 4172|   100k|        return read_impl<Range>(
 4173|   100k|            range, rd,
 4174|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   100k|                return r.read_source(SCN_FWD(args)...);
 4176|   100k|            },
 4177|   100k|            value);
 4178|   129k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   172k|    {
 4195|   172k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.9k, False: 146k]
  |  |  ------------------
  ------------------
 4197|  25.9k|            return unexpected(r.error());
 4198|  25.9k|        }
 4199|       |
 4200|   146k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.9k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.9k|    }                                                  \
  |  |  |  | 3667|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   115k|        return ranges::next(range.begin(), n);
 4202|   146k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   563k|    {
  763|   563k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   563k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  29.0k|        : m_fptr([](storage fn,
  743|  29.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.0k|              cvref<T> obj = *get<T>(fn);
  745|  29.0k|              if constexpr (std::is_void_v<R>) {
  746|  29.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.0k|              }
  748|  29.0k|              else {
  749|  29.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.0k|              }
  751|  29.0k|          }),
  752|  29.0k|          m_storage(std::addressof(f))
  753|  29.0k|    {
  754|  29.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  29.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  29.0k|              else {
  749|  29.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.0k|              }
  751|  29.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  29.0k|        else if constexpr (std::is_object_v<T>) {
  688|  29.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  29.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  29.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  29.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  29.0k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|  99.7k|    {
 3668|  99.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  99.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  99.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 99.7k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  99.7k|        return read_source_impl(range);
 3674|  99.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   563k|    {
 3694|   563k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   563k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   563k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   563k|        auto it = sign_result.first;
 3697|   563k|        m_sign = sign_result.second;
 3698|       |
 3699|   563k|        auto digits_begin = it;
 3700|   563k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   563k|                      ranges::sized_range<Range>) {
 3703|   563k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  |  Branch (859:45): [True: 0, False: 563k]
  |  |  |  Branch (859:45): [True: 0, False: 563k]
  |  |  ------------------
  ------------------
 3704|   563k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   563k|            else {
 3713|   563k|                auto cb = [&](const auto& rr)
 3714|   563k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   563k|                    auto res = read_all(rr);
 3716|   563k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   563k|                        return unexpected_scan_error(
 3718|   563k|                            scan_error::invalid_scanned_value,
 3719|   563k|                            "Invalid float value");
 3720|   563k|                    }
 3721|   563k|                    return res;
 3722|   563k|                };
 3723|   563k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 78.4k, False: 484k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  78.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  78.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  78.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  78.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  78.4k|    }                                                  \
  |  | 3667|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   484k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   563k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   484k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 484k, False: 0]
  |  Branch (3736:48): [True: 484k, False: 0]
  ------------------
 3737|   484k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 484k, False: 0]
  ------------------
 3738|   484k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 484k, False: 0]
  ------------------
 3739|   484k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   484k|        }
 3741|       |
 3742|   484k|        handle_separators();
 3743|       |
 3744|   484k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 484k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   484k|        return it;
 3757|   484k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   563k|    {
 3800|   563k|        auto it = range.begin();
 3801|   563k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 563k, False: 0]
  ------------------
 3802|   563k|            return unexpected(r.error());
 3803|   563k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   563k|    {
 3823|   563k|        auto it = range.begin();
 3824|   563k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 563k, False: 0]
  ------------------
 3825|   563k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   563k|                scan_error::invalid_scanned_value,
 3827|   563k|                "Invalid floating-point NaN value"));
 3828|   563k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   358k|    {
 3793|   358k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   358k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   338k|{
 1984|   338k|    auto it = read_while_code_unit(range, pred);
 1985|   338k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 204k, False: 133k]
  ------------------
 1986|   204k|        return unexpected(parse_error::error);
 1987|   204k|    }
 1988|   133k|    return it;
 1989|   338k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|  74.5k|    {
 3865|  74.5k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 3.87k, False: 70.6k]
  ------------------
 3866|  3.87k|            auto beg_exp_it = range.begin();
 3867|  3.87k|            auto it = *r;
 3868|       |
 3869|  3.87k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 3.85k, False: 24]
  ------------------
 3870|  3.87k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  3.85k|                it = r_sign->first;
 3872|  3.85k|            }
 3873|       |
 3874|  3.87k|            if (auto r_exp = read_while1_code_unit(
 3875|  3.87k|                    ranges::subrange{it, range.end()},
 3876|  3.87k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  3.87k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 430, False: 3.44k]
  |  |  ------------------
  ------------------
 3878|    430|                it = beg_exp_it;
 3879|    430|            }
 3880|  3.44k|            else {
 3881|  3.44k|                it = *r_exp;
 3882|  3.44k|            }
 3883|       |
 3884|  3.87k|            return it;
 3885|  3.87k|        }
 3886|  70.6k|        return range.begin();
 3887|  74.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  3.87k|        : m_fptr([](storage fn,
  743|  3.87k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.87k|              cvref<T> obj = *get<T>(fn);
  745|  3.87k|              if constexpr (std::is_void_v<R>) {
  746|  3.87k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.87k|              }
  748|  3.87k|              else {
  749|  3.87k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.87k|              }
  751|  3.87k|          }),
  752|  3.87k|          m_storage(std::addressof(f))
  753|  3.87k|    {
  754|  3.87k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  12.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.9k|              else {
  749|  12.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.9k|              }
  751|  12.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  12.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  12.9k|        else if constexpr (std::is_object_v<T>) {
  688|  12.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.9k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  12.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  3.87k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.87k|        {
  662|  3.87k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   204k|    {
 3933|   204k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   204k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 123k, False: 81.5k]
  |  Branch (3934:50): [True: 27.2k, False: 95.9k]
  ------------------
 3935|       |
 3936|   204k|        auto it = ranges::begin(range);
 3937|   204k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   204k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   204k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 129k]
  |  |  ------------------
  ------------------
 3941|  74.9k|            return r.transform_error(
 3942|  74.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  74.9k|                                              "Invalid floating-point value"));
 3944|  74.9k|        }
 3945|   129k|        else {
 3946|   129k|            digits_count += ranges::distance(it, *r);
 3947|   129k|            it = *r;
 3948|   129k|        }
 3949|       |
 3950|   129k|        m_integral_part_length = digits_count;
 3951|   129k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 894, False: 128k]
  ------------------
 3952|   129k|                                             m_locale_options.decimal_point)) {
 3953|    894|            it = *r;
 3954|    894|        }
 3955|       |
 3956|   129k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 684, False: 129k]
  ------------------
 3957|   129k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|    684|            digits_count += ranges::distance(it, *r);
 3959|    684|            it = *r;
 3960|    684|        }
 3961|       |
 3962|   129k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   129k|        auto beg_exp_it = it;
 3968|   129k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 74.5k, False: 55.2k]
  ------------------
 3969|  74.5k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|  74.5k|        }
 3971|   129k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.11k, False: 125k]
  |  Branch (3971:29): [True: 3.30k, False: 804]
  ------------------
 3972|  3.30k|            return unexpected_scan_error(
 3973|  3.30k|                scan_error::invalid_scanned_value,
 3974|  3.30k|                "No exponent given to scientific float");
 3975|  3.30k|        }
 3976|       |
 3977|   126k|        m_kind =
 3978|   126k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 123k, False: 3.44k]
  ------------------
 3979|       |
 3980|   126k|        return it;
 3981|   129k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   334k|    {
 3763|   334k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 334k]
  |  |  |  Branch (859:45): [True: 0, False: 334k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   334k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   334k|        return read_while1_code_unit(
 3772|   334k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   334k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   334k|        : m_fptr([](storage fn,
  743|   334k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   334k|              cvref<T> obj = *get<T>(fn);
  745|   334k|              if constexpr (std::is_void_v<R>) {
  746|   334k|                  obj(static_cast<decltype(args)>(args)...);
  747|   334k|              }
  748|   334k|              else {
  749|   334k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   334k|              }
  751|   334k|          }),
  752|   334k|          m_storage(std::addressof(f))
  753|   334k|    {
  754|   334k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   491k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   491k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   491k|              else {
  749|   491k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   491k|              }
  751|   491k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   491k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   491k|        else if constexpr (std::is_object_v<T>) {
  688|   491k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   491k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|   491k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   334k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   334k|        {
  662|   334k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   563k|    {
 3989|   563k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   563k|        const bool allowed_nonhex =
 3991|   563k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   563k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   563k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 563k, False: 0]
  |  Branch (3994:45): [True: 0, False: 563k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   563k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 563k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   563k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 563k, False: 0]
  |  Branch (4003:45): [True: 0, False: 563k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   563k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 563k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   563k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 358k, False: 204k]
  |  Branch (4010:28): [True: 109k, False: 249k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   109k|            auto it = range.begin();
 4014|       |
 4015|   109k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 228, False: 108k]
  ------------------
 4016|    228|                m_kind = float_kind::hex_with_prefix;
 4017|    228|                it = *r;
 4018|    228|            }
 4019|   108k|            else {
 4020|   108k|                m_kind = float_kind::hex_without_prefix;
 4021|   108k|            }
 4022|       |
 4023|   109k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   109k|        }
 4025|   454k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 204k, False: 249k]
  |  Branch (4025:29): [True: 204k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   204k|            m_kind = float_kind::generic;
 4029|   204k|            return read_regular_float(range);
 4030|   204k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   249k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 248k]
  |  |  ------------------
  ------------------
 4036|    530|            m_kind = float_kind::hex_with_prefix;
 4037|    530|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    530|        }
 4039|       |
 4040|   248k|        m_kind = float_kind::generic;
 4041|   248k|        return read_regular(range);
 4042|   249k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   358k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   358k|                    auto res = read_all(rr);
 3716|   358k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 157, False: 358k]
  |  |  ------------------
  ------------------
 3717|    157|                        return unexpected_scan_error(
 3718|    157|                            scan_error::invalid_scanned_value,
 3719|    157|                            "Invalid float value");
 3720|    157|                    }
 3721|   358k|                    return res;
 3722|   358k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   358k|{
 1827|   358k|    return ranges::next(range.begin(), range.end());
 1828|   358k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   358k|    {
  313|   358k|        ranges::advance(x, bound);
  314|   358k|        return x;
  315|   358k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   358k|    {
  275|   358k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   358k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   484k|    {
 1565|   484k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   484k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|   484k|    {
 1609|   484k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   484k|                      ranges::sized_range<Range>) {
 1614|   484k|            m_storage.reset();
 1615|   484k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   484k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  29.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.0k|        {
  662|  29.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   100k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   463k|    {
 3654|   463k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   463k|        return read_source_impl(range);
 3660|   463k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   141k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   141k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   141k|            auto rd = make_reader<T, char_type>();
 6195|   141k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   141k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 141k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   141k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   141k|                return impl(rd, range, value);
 6202|   141k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   141k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   141k|    {
 6113|   141k|        const bool need_skipped_width =
 6114|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 141k]
  |  Branch (6114:33): [True: 0, False: 141k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   141k|        auto it = rng.begin();
 6118|   141k|        std::ptrdiff_t prefix_width = 0;
 6119|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 141k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   141k|        else {
 6127|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    904|    }                                                  \
  |  |  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   141k|            std::tie(it, prefix_width) = prefix_result;
 6129|   141k|        }
 6130|   141k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   141k|        std::ptrdiff_t value_width = 0;
 6134|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 141k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   141k|        else {
 6150|   141k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.7k, False: 97.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.7k|    }                                                  \
  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  97.3k|                                             specs, value, loc));
 6152|       |
 6153|  97.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 97.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  97.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  97.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  97.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 96.9k, False: 392]
  ------------------
 6163|  96.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  96.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 96.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  96.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  96.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  96.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  96.9k|                                 value_width));
 6167|  96.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  96.9k|        }
 6169|       |
 6170|  97.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  97.3k|                                                 value_width, postfix_width);
 6172|  97.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 97.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  97.3k|        return it;
 6177|  97.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   304k|    {
 3680|   304k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   304k|        const std::ptrdiff_t sign_len =
 3683|   304k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.38k, False: 303k]
  ------------------
 3684|       |
 3685|   304k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.5k, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  31.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  31.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  31.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  31.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  31.5k|    }                                                  \
  |  |  |  | 3667|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   273k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   304k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   141k|    {
 4159|   141k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   141k|#if !SCN_DISABLE_LOCALE
 4162|   141k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.8k, False: 106k]
  ------------------
 4163|  34.8k|            return read_impl<Range>(
 4164|  34.8k|                range, rd,
 4165|  34.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.8k|                },
 4168|  34.8k|                value, loc);
 4169|  34.8k|        }
 4170|   106k|#endif
 4171|       |
 4172|   106k|        return read_impl<Range>(
 4173|   106k|            range, rd,
 4174|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   106k|                return r.read_source(SCN_FWD(args)...);
 4176|   106k|            },
 4177|   106k|            value);
 4178|   141k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   193k|    {
 4195|   193k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   193k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.9k, False: 137k]
  |  |  ------------------
  ------------------
 4197|  55.9k|            return unexpected(r.error());
 4198|  55.9k|        }
 4199|       |
 4200|   137k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 849, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    849|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    849|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    849|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    849|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    849|    }                                                  \
  |  |  |  | 3667|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   136k|        return ranges::next(range.begin(), n);
 4202|   137k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  34.8k|        : m_fptr([](storage fn,
  743|  34.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.8k|              cvref<T> obj = *get<T>(fn);
  745|  34.8k|              if constexpr (std::is_void_v<R>) {
  746|  34.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.8k|              }
  748|  34.8k|              else {
  749|  34.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.8k|              }
  751|  34.8k|          }),
  752|  34.8k|          m_storage(std::addressof(f))
  753|  34.8k|    {
  754|  34.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  34.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.8k|              else {
  749|  34.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.8k|              }
  751|  34.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.8k|        else if constexpr (std::is_object_v<T>) {
  688|  34.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  34.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  34.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.8k|        {
  662|  34.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   106k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   141k|    {
 4159|   141k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   141k|#if !SCN_DISABLE_LOCALE
 4162|   141k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.9k, False: 106k]
  ------------------
 4163|  34.9k|            return read_impl<Range>(
 4164|  34.9k|                range, rd,
 4165|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.9k|                },
 4168|  34.9k|                value, loc);
 4169|  34.9k|        }
 4170|   106k|#endif
 4171|       |
 4172|   106k|        return read_impl<Range>(
 4173|   106k|            range, rd,
 4174|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   106k|                return r.read_source(SCN_FWD(args)...);
 4176|   106k|            },
 4177|   106k|            value);
 4178|   141k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   193k|    {
 4195|   193k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   193k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.1k, False: 167k]
  |  |  ------------------
  ------------------
 4197|  26.1k|            return unexpected(r.error());
 4198|  26.1k|        }
 4199|       |
 4200|   167k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.6k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.6k|    }                                                  \
  |  |  |  | 3667|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   136k|        return ranges::next(range.begin(), n);
 4202|   167k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  34.9k|        : m_fptr([](storage fn,
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|  34.9k|              if constexpr (std::is_void_v<R>) {
  746|  34.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.9k|              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
  752|  34.9k|          m_storage(std::addressof(f))
  753|  34.9k|    {
  754|  34.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.9k|        else if constexpr (std::is_object_v<T>) {
  688|  34.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  34.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.9k|        {
  662|  34.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   106k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   143k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   143k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   143k|            auto rd = make_reader<T, char_type>();
 6195|   143k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   143k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 143k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   143k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   143k|                return impl(rd, range, value);
 6202|   143k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   143k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   143k|    {
 6113|   143k|        const bool need_skipped_width =
 6114|   143k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 143k]
  |  Branch (6114:33): [True: 0, False: 143k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   143k|        auto it = rng.begin();
 6118|   143k|        std::ptrdiff_t prefix_width = 0;
 6119|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 143k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   143k|        else {
 6127|   143k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   143k|            std::tie(it, prefix_width) = prefix_result;
 6129|   143k|        }
 6130|   143k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   143k|        std::ptrdiff_t value_width = 0;
 6134|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 143k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   143k|        else {
 6150|   143k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 99.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  99.3k|                                             specs, value, loc));
 6152|       |
 6153|  99.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 99.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  99.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  99.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  99.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 98.9k, False: 410]
  ------------------
 6163|  98.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  98.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  98.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  98.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 98.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  98.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  98.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  98.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  98.9k|                                 value_width));
 6167|  98.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  98.9k|        }
 6169|       |
 6170|  99.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  99.3k|                                                 value_width, postfix_width);
 6172|  99.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 99.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  99.3k|        return it;
 6177|  99.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   310k|    {
 3680|   310k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   310k|        const std::ptrdiff_t sign_len =
 3683|   310k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.39k, False: 309k]
  ------------------
 3684|       |
 3685|   310k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.5k, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.5k|    }                                                  \
  |  |  |  | 3667|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   280k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   310k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   143k|    {
 4159|   143k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   143k|#if !SCN_DISABLE_LOCALE
 4162|   143k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 35.8k, False: 107k]
  ------------------
 4163|  35.8k|            return read_impl<Range>(
 4164|  35.8k|                range, rd,
 4165|  35.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  35.8k|                },
 4168|  35.8k|                value, loc);
 4169|  35.8k|        }
 4170|   107k|#endif
 4171|       |
 4172|   107k|        return read_impl<Range>(
 4173|   107k|            range, rd,
 4174|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   107k|                return r.read_source(SCN_FWD(args)...);
 4176|   107k|            },
 4177|   107k|            value);
 4178|   143k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   196k|    {
 4195|   196k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   196k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.5k, False: 140k]
  |  |  ------------------
  ------------------
 4197|  56.5k|            return unexpected(r.error());
 4198|  56.5k|        }
 4199|       |
 4200|   140k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 154, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    154|    }                                                  \
  |  |  |  | 3667|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   140k|        return ranges::next(range.begin(), n);
 4202|   140k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  35.8k|        : m_fptr([](storage fn,
  743|  35.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.8k|              cvref<T> obj = *get<T>(fn);
  745|  35.8k|              if constexpr (std::is_void_v<R>) {
  746|  35.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.8k|              }
  748|  35.8k|              else {
  749|  35.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.8k|              }
  751|  35.8k|          }),
  752|  35.8k|          m_storage(std::addressof(f))
  753|  35.8k|    {
  754|  35.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  35.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.8k|              else {
  749|  35.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.8k|              }
  751|  35.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.8k|        else if constexpr (std::is_object_v<T>) {
  688|  35.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  35.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  35.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  35.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.8k|        {
  662|  35.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   107k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   143k|    {
 4159|   143k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   143k|#if !SCN_DISABLE_LOCALE
 4162|   143k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 35.8k, False: 107k]
  ------------------
 4163|  35.8k|            return read_impl<Range>(
 4164|  35.8k|                range, rd,
 4165|  35.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  35.8k|                },
 4168|  35.8k|                value, loc);
 4169|  35.8k|        }
 4170|   107k|#endif
 4171|       |
 4172|   107k|        return read_impl<Range>(
 4173|   107k|            range, rd,
 4174|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   107k|                return r.read_source(SCN_FWD(args)...);
 4176|   107k|            },
 4177|   107k|            value);
 4178|   143k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   196k|    {
 4195|   196k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   196k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.3k, False: 170k]
  |  |  ------------------
  ------------------
 4197|  26.3k|            return unexpected(r.error());
 4198|  26.3k|        }
 4199|       |
 4200|   170k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.3k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.3k|    }                                                  \
  |  |  |  | 3667|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   140k|        return ranges::next(range.begin(), n);
 4202|   170k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  35.8k|        : m_fptr([](storage fn,
  743|  35.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.8k|              cvref<T> obj = *get<T>(fn);
  745|  35.8k|              if constexpr (std::is_void_v<R>) {
  746|  35.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.8k|              }
  748|  35.8k|              else {
  749|  35.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.8k|              }
  751|  35.8k|          }),
  752|  35.8k|          m_storage(std::addressof(f))
  753|  35.8k|    {
  754|  35.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  35.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.8k|              else {
  749|  35.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.8k|              }
  751|  35.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.8k|        else if constexpr (std::is_object_v<T>) {
  688|  35.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  35.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  35.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  35.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.8k|        {
  662|  35.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   107k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   566k|{
 2049|   566k|    auto it = range.begin();
 2050|   974k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 971k, False: 3.18k]
  ------------------
 2051|   971k|        const auto val =
 2052|   971k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   971k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   971k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 971k, False: 0]
  |  |  ------------------
  ------------------
 2054|   971k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   971k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   971k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 562k, False: 408k]
  ------------------
 2057|   562k|                return it;
 2058|   562k|            }
 2059|   971k|        }
 2060|   408k|        it = val.iterator;
 2061|   408k|    }
 2062|       |
 2063|  3.18k|    return it;
 2064|   566k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   971k|{
 1887|   971k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   971k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   971k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   971k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   971k|    auto it = range.begin();
 1891|   971k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   971k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   971k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 971k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   971k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 971k, False: 0]
  ------------------
 1900|   971k|        ++it;
 1901|   971k|        return {it, string_type(1, *range.begin())};
 1902|   971k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   971k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   971k|    {
 1878|   971k|        return !codepoint.empty();
 1879|   971k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   566k|{
 2070|   566k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   566k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   566k|{
 2940|   566k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 566k, False: 0]
  ------------------
 2941|   566k|        auto it = read_while_classic_space(range);
 2942|   566k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   566k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 562k]
  |  |  ------------------
  ------------------
 2944|  3.18k|            return unexpected(e);
 2945|  3.18k|        }
 2946|       |
 2947|   562k|        return it;
 2948|   566k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   566k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   566k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   566k|    else {
 2114|   566k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   566k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   566k|            return detail::is_cp_space(cp);
 2127|   566k|        });
 2128|   566k|    }
 2129|   566k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   566k|        : m_fptr([](storage fn,
  743|   566k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   566k|              cvref<T> obj = *get<T>(fn);
  745|   566k|              if constexpr (std::is_void_v<R>) {
  746|   566k|                  obj(static_cast<decltype(args)>(args)...);
  747|   566k|              }
  748|   566k|              else {
  749|   566k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   566k|              }
  751|   566k|          }),
  752|   566k|          m_storage(std::addressof(f))
  753|   566k|    {
  754|   566k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   971k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   971k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   971k|              else {
  749|   971k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   971k|              }
  751|   971k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   971k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   971k|        else if constexpr (std::is_object_v<T>) {
  688|   971k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   971k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   971k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   971k|            return detail::is_cp_space(cp);
 2127|   971k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   566k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   566k|        {
  662|   566k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   903k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   903k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   903k|        auto buf = make_contiguous_buffer(range);
 2080|   903k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   903k|        return ranges::next(range.begin(),
 2082|   903k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   903k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|   903k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   903k|                  ranges::sized_range<Range>) {
 1674|   903k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   903k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|   903k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   903k|    {
 1478|   903k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   903k|    {
 1565|   903k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   903k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1608|   903k|    {
 1609|   903k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   903k|                                          std::basic_string<CharT>>) {
 1619|   903k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   903k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   903k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4088|   656k|    {
 4089|   656k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 74.4k, False: 581k]
  ------------------
 4090|  74.4k|            return std::copysign(value, T{-1.0});
 4091|  74.4k|        }
 4092|   581k|        return std::copysign(value, T{1.0});
 4093|   656k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   388k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   388k|    else {
 2085|   388k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   388k|        return read_until_code_point(
 2097|   388k|            ranges::subrange{it, range.end()},
 2098|   388k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   388k|    }
 2100|   388k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   388k|        : m_fptr([](storage fn,
  743|   388k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   388k|              cvref<T> obj = *get<T>(fn);
  745|   388k|              if constexpr (std::is_void_v<R>) {
  746|   388k|                  obj(static_cast<decltype(args)>(args)...);
  747|   388k|              }
  748|   388k|              else {
  749|   388k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   388k|              }
  751|   388k|          }),
  752|   388k|          m_storage(std::addressof(f))
  753|   388k|    {
  754|   388k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   712k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   712k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   712k|              else {
  749|   712k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   712k|              }
  751|   712k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   712k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   712k|        else if constexpr (std::is_object_v<T>) {
  688|   712k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   712k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2098|   712k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   388k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   388k|        {
  662|   388k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   388k|    {
 1565|   388k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   388k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1608|   388k|    {
 1609|   388k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   388k|                                          std::basic_string<CharT>>) {
 1619|   388k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   388k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   388k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4088|   264k|    {
 4089|   264k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 983, False: 263k]
  ------------------
 4090|    983|            return std::copysign(value, T{-1.0});
 4091|    983|        }
 4092|   263k|        return std::copysign(value, T{1.0});
 4093|   264k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|   681k|    {
 4089|   681k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 77.0k, False: 604k]
  ------------------
 4090|  77.0k|            return std::copysign(value, T{-1.0});
 4091|  77.0k|        }
 4092|   604k|        return std::copysign(value, T{1.0});
 4093|   681k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|   304k|    {
 4089|   304k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 997, False: 303k]
  ------------------
 4090|    997|            return std::copysign(value, T{-1.0});
 4091|    997|        }
 4092|   303k|        return std::copysign(value, T{1.0});
 4093|   304k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4088|   687k|    {
 4089|   687k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 79.2k, False: 608k]
  ------------------
 4090|  79.2k|            return std::copysign(value, T{-1.0});
 4091|  79.2k|        }
 4092|   608k|        return std::copysign(value, T{1.0});
 4093|   687k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4088|   310k|    {
 4089|   310k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.01k, False: 309k]
  ------------------
 4090|  1.01k|            return std::copysign(value, T{-1.0});
 4091|  1.01k|        }
 4092|   309k|        return std::copysign(value, T{1.0});
 4093|   310k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   297k|{
 5784|   297k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.93k, False: 293k]
  |  |  ------------------
  ------------------
 5785|  3.93k|        return unexpected(e);
 5786|  3.93k|    }
 5787|       |
 5788|   293k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 293k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   293k|    return skip_classic_whitespace(range);
 5793|   293k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5859|  95.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  95.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  95.8k|            auto rd = make_reader<T, char_type>();
 5865|  95.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  95.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  95.8k|    {
 5852|  95.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  95.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  95.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  95.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  95.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.30k, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.30k|    }                                                  \
  |  |  |  | 3667|  95.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  94.5k|                        .transform_error(make_eof_scan_error));
 5854|  94.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  95.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  94.5k|    {
 4141|  94.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  94.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  94.5k|        float_reader<CharT> rd{};
 4144|  94.5k|        return read_impl<Range>(
 4145|  94.5k|            range, rd,
 4146|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  94.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  94.5k|            },
 4149|  94.5k|            value);
 4150|  94.5k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|   613k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|   913k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  94.5k|        : m_fptr([](storage fn,
  743|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.5k|              cvref<T> obj = *get<T>(fn);
  745|  94.5k|              if constexpr (std::is_void_v<R>) {
  746|  94.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.5k|              }
  748|  94.5k|              else {
  749|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.5k|              }
  751|  94.5k|          }),
  752|  94.5k|          m_storage(std::addressof(f))
  753|  94.5k|    {
  754|  94.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.5k|              else {
  749|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.5k|              }
  751|  94.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.5k|        else if constexpr (std::is_object_v<T>) {
  688|  94.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  94.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  94.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.5k|        {
  662|  94.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|  99.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  99.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  99.8k|            auto rd = make_reader<T, char_type>();
 5865|  99.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  99.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  99.8k|    {
 5852|  99.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  99.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  99.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  99.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 98.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|  99.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  98.3k|                        .transform_error(make_eof_scan_error));
 5854|  98.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  99.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  98.3k|    {
 4141|  98.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  98.3k|        float_reader<CharT> rd{};
 4144|  98.3k|        return read_impl<Range>(
 4145|  98.3k|            range, rd,
 4146|  98.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.3k|                return r.read_source(SCN_FWD(args)...);
 4148|  98.3k|            },
 4149|  98.3k|            value);
 4150|  98.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  98.3k|        : m_fptr([](storage fn,
  743|  98.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.3k|              cvref<T> obj = *get<T>(fn);
  745|  98.3k|              if constexpr (std::is_void_v<R>) {
  746|  98.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.3k|              }
  748|  98.3k|              else {
  749|  98.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.3k|              }
  751|  98.3k|          }),
  752|  98.3k|          m_storage(std::addressof(f))
  753|  98.3k|    {
  754|  98.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  98.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.3k|              else {
  749|  98.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.3k|              }
  751|  98.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.3k|        else if constexpr (std::is_object_v<T>) {
  688|  98.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  98.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  98.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.3k|        {
  662|  98.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5859|   101k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   101k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   101k|            auto rd = make_reader<T, char_type>();
 5865|   101k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   101k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   101k|    {
 5852|   101k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.61k, False: 99.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.61k|    }                                                  \
  |  |  |  | 3667|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  99.8k|                        .transform_error(make_eof_scan_error));
 5854|  99.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   101k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  99.8k|    {
 4141|  99.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  99.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  99.8k|        float_reader<CharT> rd{};
 4144|  99.8k|        return read_impl<Range>(
 4145|  99.8k|            range, rd,
 4146|  99.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  99.8k|                return r.read_source(SCN_FWD(args)...);
 4148|  99.8k|            },
 4149|  99.8k|            value);
 4150|  99.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  99.8k|        : m_fptr([](storage fn,
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|  99.8k|              if constexpr (std::is_void_v<R>) {
  746|  99.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.8k|              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
  752|  99.8k|          m_storage(std::addressof(f))
  753|  99.8k|    {
  754|  99.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  99.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.8k|        else if constexpr (std::is_object_v<T>) {
  688|  99.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  99.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  99.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  99.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  99.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  99.8k|        {
  662|  99.8k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   325k|{
 5784|   325k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.09k, False: 321k]
  |  |  ------------------
  ------------------
 5785|  4.09k|        return unexpected(e);
 5786|  4.09k|    }
 5787|       |
 5788|   321k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 321k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   321k|    return skip_classic_whitespace(range);
 5793|   321k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   104k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   104k|            auto rd = make_reader<T, char_type>();
 5869|   104k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 104k, False: 0]
  ------------------
 5870|   104k|                return impl(rd, range, value);
 5871|   104k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   104k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   104k|    {
 5852|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   103k|                        .transform_error(make_eof_scan_error));
 5854|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   104k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   103k|    {
 4141|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   103k|        float_reader<CharT> rd{};
 4144|   103k|        return read_impl<Range>(
 4145|   103k|            range, rd,
 4146|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   103k|                return r.read_source(SCN_FWD(args)...);
 4148|   103k|            },
 4149|   103k|            value);
 4150|   103k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   110k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   110k|            auto rd = make_reader<T, char_type>();
 5869|   110k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 110k, False: 0]
  ------------------
 5870|   110k|                return impl(rd, range, value);
 5871|   110k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   110k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   110k|    {
 5852|   110k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.56k|    }                                                  \
  |  |  |  | 3667|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   108k|                        .transform_error(make_eof_scan_error));
 5854|   108k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   108k|    {
 4141|   108k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   108k|        float_reader<CharT> rd{};
 4144|   108k|        return read_impl<Range>(
 4145|   108k|            range, rd,
 4146|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   108k|                return r.read_source(SCN_FWD(args)...);
 4148|   108k|            },
 4149|   108k|            value);
 4150|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   108k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   111k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   111k|            auto rd = make_reader<T, char_type>();
 5869|   111k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 111k, False: 0]
  ------------------
 5870|   111k|                return impl(rd, range, value);
 5871|   111k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   111k|    {
 5852|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.68k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.68k|    }                                                  \
  |  |  |  | 3667|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   109k|                        .transform_error(make_eof_scan_error));
 5854|   109k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   109k|    {
 4141|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   109k|        float_reader<CharT> rd{};
 4144|   109k|        return read_impl<Range>(
 4145|   109k|            range, rd,
 4146|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   109k|                return r.read_source(SCN_FWD(args)...);
 4148|   109k|            },
 4149|   109k|            value);
 4150|   109k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   109k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   705k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   705k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   705k|          m_current(m_range.begin())
 2867|   705k|    {
 2868|   705k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  2.04M|    {
 2872|  2.04M|        return m_current;
 2873|  2.04M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  1.34M|    {
 2877|  1.34M|        return m_range.end();
 2878|  1.34M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   638k|    {
 2892|   638k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   638k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   638k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   638k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   638k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 638k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   638k|        }
 2898|   638k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   638k|    static_cast<    \
  |  |  929|   638k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   638k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   705k|    {
 2882|   705k|        return ranges::subrange{begin(), end()};
 2883|   705k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   705k|    {
 6026|   705k|        const bool need_skipped_width =
 6027|   705k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 705k]
  |  Branch (6027:33): [True: 0, False: 705k]
  ------------------
 6028|   705k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   705k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 705k]
  ------------------
 6032|   705k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 705k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   705k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 705k, False: 0]
  |  Branch (6036:56): [True: 705k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   705k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 705k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.39M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   705k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   705k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   705k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.3k, False: 694k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.3k|    }                                                  \
  |  |  |  | 3667|   705k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.39M|                            make_eof_scan_error));
 6047|       |
 6048|  1.39M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 694k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   694k|            return result_type{it, 0};
 6056|  1.39M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   705k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   628k|    {
 6068|   628k|        const bool need_skipped_width =
 6069|   628k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 628k]
  |  Branch (6069:33): [True: 0, False: 628k]
  ------------------
 6070|   628k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   628k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 628k]
  ------------------
 6073|   628k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 628k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   628k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 628k, False: 0]
  ------------------
 6082|   628k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 628k]
  ------------------
 6083|   628k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   628k|        return result_type{rng.begin(), 0};
 6107|   628k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6181|   229k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   229k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   229k|            auto rd = make_reader<T, char_type>();
 6187|   229k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   229k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   229k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   229k|    {
 6113|   229k|        const bool need_skipped_width =
 6114|   229k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 229k]
  |  Branch (6114:33): [True: 0, False: 229k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   229k|        auto it = rng.begin();
 6118|   229k|        std::ptrdiff_t prefix_width = 0;
 6119|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 229k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   229k|        else {
 6127|   229k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.44k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.44k|    }                                                  \
  |  |  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   226k|            std::tie(it, prefix_width) = prefix_result;
 6129|   226k|        }
 6130|   226k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   226k|        std::ptrdiff_t value_width = 0;
 6134|   226k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 226k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   226k|        else {
 6150|   226k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.8k, False: 207k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.8k|    }                                                  \
  |  | 3667|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   207k|                                             specs, value, loc));
 6152|       |
 6153|   207k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 207k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   207k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   207k|        std::ptrdiff_t postfix_width = 0;
 6162|   207k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 204k, False: 3.04k]
  ------------------
 6163|   204k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   204k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   204k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   204k|                                 value_width));
 6167|   204k|            std::tie(it, postfix_width) = postfix_result;
 6168|   204k|        }
 6169|       |
 6170|   207k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   207k|                                                 value_width, postfix_width);
 6172|   207k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 207k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   207k|        return it;
 6177|   207k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|   236k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   236k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   236k|            auto rd = make_reader<T, char_type>();
 6187|   236k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   236k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   236k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   236k|    {
 6113|   236k|        const bool need_skipped_width =
 6114|   236k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 236k]
  |  Branch (6114:33): [True: 0, False: 236k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   236k|        auto it = rng.begin();
 6118|   236k|        std::ptrdiff_t prefix_width = 0;
 6119|   236k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 236k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   236k|        else {
 6127|   236k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.80k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.80k|    }                                                  \
  |  |  |  | 3667|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   232k|            std::tie(it, prefix_width) = prefix_result;
 6129|   232k|        }
 6130|   232k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   232k|        std::ptrdiff_t value_width = 0;
 6134|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 232k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   232k|        else {
 6150|   232k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.5k, False: 214k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.5k|    }                                                  \
  |  | 3667|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   214k|                                             specs, value, loc));
 6152|       |
 6153|   214k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 214k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   214k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   214k|        std::ptrdiff_t postfix_width = 0;
 6162|   214k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 210k, False: 3.36k]
  ------------------
 6163|   210k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   210k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   210k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   210k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   210k|                                 value_width));
 6167|   210k|            std::tie(it, postfix_width) = postfix_result;
 6168|   210k|        }
 6169|       |
 6170|   214k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   214k|                                                 value_width, postfix_width);
 6172|   214k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 214k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   214k|        return it;
 6177|   214k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6181|   239k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   239k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   239k|            auto rd = make_reader<T, char_type>();
 6187|   239k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 239k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   239k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   239k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   239k|    {
 6113|   239k|        const bool need_skipped_width =
 6114|   239k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 239k]
  |  Branch (6114:33): [True: 0, False: 239k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   239k|        auto it = rng.begin();
 6118|   239k|        std::ptrdiff_t prefix_width = 0;
 6119|   239k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 239k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   239k|        else {
 6127|   239k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.06k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.06k|    }                                                  \
  |  |  |  | 3667|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   235k|            std::tie(it, prefix_width) = prefix_result;
 6129|   235k|        }
 6130|   235k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   235k|        std::ptrdiff_t value_width = 0;
 6134|   235k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 235k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   235k|        else {
 6150|   235k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.2k, False: 216k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.2k|    }                                                  \
  |  | 3667|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   216k|                                             specs, value, loc));
 6152|       |
 6153|   216k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 216k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   216k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   216k|        std::ptrdiff_t postfix_width = 0;
 6162|   216k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 213k, False: 3.59k]
  ------------------
 6163|   213k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   213k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   213k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   213k|                                 value_width));
 6167|   213k|            std::tie(it, postfix_width) = postfix_result;
 6168|   213k|        }
 6169|       |
 6170|   216k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   216k|                                                 value_width, postfix_width);
 6172|   216k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 216k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   216k|        return it;
 6177|   216k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   150k|{
 5784|   150k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 150k]
  |  |  ------------------
  ------------------
 5785|    426|        return unexpected(e);
 5786|    426|    }
 5787|       |
 5788|   150k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 150k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   150k|    return skip_classic_whitespace(range);
 5793|   150k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5859|  43.7k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  43.7k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  43.7k|            auto rd = make_reader<T, char_type>();
 5865|  43.7k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  43.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  43.7k|    {
 5852|  43.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 273, False: 43.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    273|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    273|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    273|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    273|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    273|    }                                                  \
  |  |  |  | 3667|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.5k|                        .transform_error(make_eof_scan_error));
 5854|  43.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  43.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  43.5k|    {
 4141|  43.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  43.5k|        float_reader<CharT> rd{};
 4144|  43.5k|        return read_impl<Range>(
 4145|  43.5k|            range, rd,
 4146|  43.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  43.5k|            },
 4149|  43.5k|            value);
 4150|  43.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|   299k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  43.5k|        : m_fptr([](storage fn,
  743|  43.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.5k|              cvref<T> obj = *get<T>(fn);
  745|  43.5k|              if constexpr (std::is_void_v<R>) {
  746|  43.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.5k|              }
  748|  43.5k|              else {
  749|  43.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.5k|              }
  751|  43.5k|          }),
  752|  43.5k|          m_storage(std::addressof(f))
  753|  43.5k|    {
  754|  43.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  43.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.5k|              else {
  749|  43.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.5k|              }
  751|  43.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.5k|        else if constexpr (std::is_object_v<T>) {
  688|  43.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  43.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  43.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  43.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.5k|        {
  662|  43.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|  52.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  52.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  52.6k|            auto rd = make_reader<T, char_type>();
 5865|  52.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  52.6k|    {
 5852|  52.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 309, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    309|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    309|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    309|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    309|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    309|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  52.3k|                        .transform_error(make_eof_scan_error));
 5854|  52.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  52.3k|    {
 4141|  52.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  52.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  52.3k|        float_reader<CharT> rd{};
 4144|  52.3k|        return read_impl<Range>(
 4145|  52.3k|            range, rd,
 4146|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.3k|                return r.read_source(SCN_FWD(args)...);
 4148|  52.3k|            },
 4149|  52.3k|            value);
 4150|  52.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  52.3k|        : m_fptr([](storage fn,
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|  52.3k|              if constexpr (std::is_void_v<R>) {
  746|  52.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.3k|              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
  752|  52.3k|          m_storage(std::addressof(f))
  753|  52.3k|    {
  754|  52.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.3k|        else if constexpr (std::is_object_v<T>) {
  688|  52.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  52.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  52.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.3k|        {
  662|  52.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5859|  54.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  54.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  54.1k|            auto rd = make_reader<T, char_type>();
 5865|  54.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  54.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  54.1k|    {
 5852|  54.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 53.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    336|    }                                                  \
  |  |  |  | 3667|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  53.8k|                        .transform_error(make_eof_scan_error));
 5854|  53.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  54.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  53.8k|    {
 4141|  53.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  53.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  53.8k|        float_reader<CharT> rd{};
 4144|  53.8k|        return read_impl<Range>(
 4145|  53.8k|            range, rd,
 4146|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  53.8k|                return r.read_source(SCN_FWD(args)...);
 4148|  53.8k|            },
 4149|  53.8k|            value);
 4150|  53.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  53.8k|        : m_fptr([](storage fn,
  743|  53.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.8k|              cvref<T> obj = *get<T>(fn);
  745|  53.8k|              if constexpr (std::is_void_v<R>) {
  746|  53.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.8k|              }
  748|  53.8k|              else {
  749|  53.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.8k|              }
  751|  53.8k|          }),
  752|  53.8k|          m_storage(std::addressof(f))
  753|  53.8k|    {
  754|  53.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  53.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.8k|              else {
  749|  53.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.8k|              }
  751|  53.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.8k|        else if constexpr (std::is_object_v<T>) {
  688|  53.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  53.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  53.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  53.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.8k|        {
  662|  53.8k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   416k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   416k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   416k|          m_current(m_range.begin())
 2867|   416k|    {
 2868|   416k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.11M|    {
 2872|  1.11M|        return m_current;
 2873|  1.11M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   698k|    {
 2877|   698k|        return m_range.end();
 2878|   698k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   282k|    {
 2892|   282k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   282k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   282k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 282k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   282k|        }
 2898|   282k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   282k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   416k|    {
 2882|   416k|        return ranges::subrange{begin(), end()};
 2883|   416k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   416k|    {
 6026|   416k|        const bool need_skipped_width =
 6027|   416k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 416k]
  |  Branch (6027:33): [True: 0, False: 416k]
  ------------------
 6028|   416k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   416k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 416k]
  ------------------
 6032|   416k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 416k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   416k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 416k, False: 0]
  |  Branch (6036:56): [True: 416k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   416k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 416k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   829k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 413k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   829k|                            make_eof_scan_error));
 6047|       |
 6048|   829k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 413k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   413k|            return result_type{it, 0};
 6056|   829k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   416k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   281k|    {
 6068|   281k|        const bool need_skipped_width =
 6069|   281k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 281k]
  |  Branch (6069:33): [True: 0, False: 281k]
  ------------------
 6070|   281k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   281k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 281k]
  ------------------
 6073|   281k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 281k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   281k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 281k, False: 0]
  ------------------
 6082|   281k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 281k]
  ------------------
 6083|   281k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   281k|        return result_type{rng.begin(), 0};
 6107|   281k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6181|   130k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   130k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   130k|            auto rd = make_reader<T, char_type>();
 6187|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   130k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   130k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   130k|    {
 6113|   130k|        const bool need_skipped_width =
 6114|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 130k]
  |  Branch (6114:33): [True: 0, False: 130k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   130k|        auto it = rng.begin();
 6118|   130k|        std::ptrdiff_t prefix_width = 0;
 6119|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 130k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   130k|        else {
 6127|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   129k|            std::tie(it, prefix_width) = prefix_result;
 6129|   129k|        }
 6130|   129k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   129k|        std::ptrdiff_t value_width = 0;
 6134|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 129k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   129k|        else {
 6150|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.8k, False: 85.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.8k|    }                                                  \
  |  | 3667|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  85.5k|                                             specs, value, loc));
 6152|       |
 6153|  85.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 85.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  85.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  85.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  85.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 85.1k, False: 360]
  ------------------
 6163|  85.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  85.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  85.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  85.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 85.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  85.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  85.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  85.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  85.1k|                                 value_width));
 6167|  85.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  85.1k|        }
 6169|       |
 6170|  85.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  85.5k|                                                 value_width, postfix_width);
 6172|  85.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 85.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  85.5k|        return it;
 6177|  85.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|   142k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   142k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   142k|            auto rd = make_reader<T, char_type>();
 6187|   142k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   142k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   142k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   142k|    {
 6113|   142k|        const bool need_skipped_width =
 6114|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 142k]
  |  Branch (6114:33): [True: 0, False: 142k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   142k|        auto it = rng.begin();
 6118|   142k|        std::ptrdiff_t prefix_width = 0;
 6119|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 142k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   142k|        else {
 6127|   142k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    904|    }                                                  \
  |  |  |  | 3667|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   141k|            std::tie(it, prefix_width) = prefix_result;
 6129|   141k|        }
 6130|   141k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   141k|        std::ptrdiff_t value_width = 0;
 6134|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 141k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   141k|        else {
 6150|   141k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.7k, False: 97.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.7k|    }                                                  \
  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  97.4k|                                             specs, value, loc));
 6152|       |
 6153|  97.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 97.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  97.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  97.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  97.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 97.0k, False: 392]
  ------------------
 6163|  97.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 97.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  97.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  97.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  97.0k|                                 value_width));
 6167|  97.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  97.0k|        }
 6169|       |
 6170|  97.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  97.4k|                                                 value_width, postfix_width);
 6172|  97.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 97.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  97.4k|        return it;
 6177|  97.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6181|   144k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   144k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   144k|            auto rd = make_reader<T, char_type>();
 6187|   144k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   144k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   144k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   144k|    {
 6113|   144k|        const bool need_skipped_width =
 6114|   144k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 144k]
  |  Branch (6114:33): [True: 0, False: 144k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   144k|        auto it = rng.begin();
 6118|   144k|        std::ptrdiff_t prefix_width = 0;
 6119|   144k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 144k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   144k|        else {
 6127|   144k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   143k|            std::tie(it, prefix_width) = prefix_result;
 6129|   143k|        }
 6130|   143k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   143k|        std::ptrdiff_t value_width = 0;
 6134|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 143k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   143k|        else {
 6150|   143k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 99.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  99.4k|                                             specs, value, loc));
 6152|       |
 6153|  99.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 99.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  99.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  99.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  99.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 99.0k, False: 410]
  ------------------
 6163|  99.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  99.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  99.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  99.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 99.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  99.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  99.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  99.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  99.0k|                                 value_width));
 6167|  99.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  99.0k|        }
 6169|       |
 6170|  99.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  99.4k|                                                 value_width, postfix_width);
 6172|  99.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 99.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  99.4k|        return it;
 6177|  99.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   150k|{
 5784|   150k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 150k]
  |  |  ------------------
  ------------------
 5785|    426|        return unexpected(e);
 5786|    426|    }
 5787|       |
 5788|   150k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 150k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   150k|    return skip_classic_whitespace(range);
 5793|   150k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  43.7k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  43.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  43.7k|            auto rd = make_reader<T, char_type>();
 5869|  43.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 43.7k, False: 0]
  ------------------
 5870|  43.7k|                return impl(rd, range, value);
 5871|  43.7k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  43.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  43.7k|    {
 5852|  43.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 273, False: 43.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    273|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    273|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    273|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    273|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    273|    }                                                  \
  |  |  |  | 3667|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.4k|                        .transform_error(make_eof_scan_error));
 5854|  43.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  43.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  43.4k|    {
 4141|  43.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  43.4k|        float_reader<CharT> rd{};
 4144|  43.4k|        return read_impl<Range>(
 4145|  43.4k|            range, rd,
 4146|  43.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.4k|                return r.read_source(SCN_FWD(args)...);
 4148|  43.4k|            },
 4149|  43.4k|            value);
 4150|  43.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  43.4k|        : m_fptr([](storage fn,
  743|  43.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.4k|              cvref<T> obj = *get<T>(fn);
  745|  43.4k|              if constexpr (std::is_void_v<R>) {
  746|  43.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.4k|              }
  748|  43.4k|              else {
  749|  43.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.4k|              }
  751|  43.4k|          }),
  752|  43.4k|          m_storage(std::addressof(f))
  753|  43.4k|    {
  754|  43.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  43.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.4k|              else {
  749|  43.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.4k|              }
  751|  43.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.4k|        else if constexpr (std::is_object_v<T>) {
  688|  43.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  43.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  43.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  43.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.4k|        {
  662|  43.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  52.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  52.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  52.6k|            auto rd = make_reader<T, char_type>();
 5869|  52.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 52.6k, False: 0]
  ------------------
 5870|  52.6k|                return impl(rd, range, value);
 5871|  52.6k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  52.6k|    {
 5852|  52.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 309, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    309|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    309|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    309|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    309|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    309|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  52.3k|                        .transform_error(make_eof_scan_error));
 5854|  52.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  52.3k|    {
 4141|  52.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  52.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  52.3k|        float_reader<CharT> rd{};
 4144|  52.3k|        return read_impl<Range>(
 4145|  52.3k|            range, rd,
 4146|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.3k|                return r.read_source(SCN_FWD(args)...);
 4148|  52.3k|            },
 4149|  52.3k|            value);
 4150|  52.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  52.3k|        : m_fptr([](storage fn,
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|  52.3k|              if constexpr (std::is_void_v<R>) {
  746|  52.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.3k|              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
  752|  52.3k|          m_storage(std::addressof(f))
  753|  52.3k|    {
  754|  52.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.3k|        else if constexpr (std::is_object_v<T>) {
  688|  52.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  52.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  52.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.3k|        {
  662|  52.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  54.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  54.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  54.0k|            auto rd = make_reader<T, char_type>();
 5869|  54.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 54.0k, False: 0]
  ------------------
 5870|  54.0k|                return impl(rd, range, value);
 5871|  54.0k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  54.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  54.0k|    {
 5852|  54.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 53.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    336|    }                                                  \
  |  |  |  | 3667|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  53.7k|                        .transform_error(make_eof_scan_error));
 5854|  53.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  54.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  53.7k|    {
 4141|  53.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  53.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  53.7k|        float_reader<CharT> rd{};
 4144|  53.7k|        return read_impl<Range>(
 4145|  53.7k|            range, rd,
 4146|  53.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  53.7k|                return r.read_source(SCN_FWD(args)...);
 4148|  53.7k|            },
 4149|  53.7k|            value);
 4150|  53.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  53.7k|        : m_fptr([](storage fn,
  743|  53.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.7k|              cvref<T> obj = *get<T>(fn);
  745|  53.7k|              if constexpr (std::is_void_v<R>) {
  746|  53.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.7k|              }
  748|  53.7k|              else {
  749|  53.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.7k|              }
  751|  53.7k|          }),
  752|  53.7k|          m_storage(std::addressof(f))
  753|  53.7k|    {
  754|  53.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  53.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.7k|              else {
  749|  53.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.7k|              }
  751|  53.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.7k|        else if constexpr (std::is_object_v<T>) {
  688|  53.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  53.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  53.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  53.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.7k|        {
  662|  53.7k|        }

LLVMFuzzerTestOneInput:
   54|  2.23k|{
   55|  2.23k|    scn::fuzz::run(data, size);
   56|  2.23k|    return 0;
   57|  2.23k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.23k|{
   33|  2.23k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.23k]
  |  Branch (33:35): [True: 0, False: 2.23k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.23k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.23k|    const auto& f =
   40|  2.23k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.23k|    do_basic_run(sv, f);
   42|       |
   43|  2.23k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.23k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.23k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.23k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.23k, False: 0]
  ------------------
   47|  2.23k|        do_basic_run(wsv_transcode, wf);
   48|  2.23k|    }
   49|  2.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.23k|{
   25|  2.23k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.23k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.23k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.23k|{
   25|  2.23k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.23k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.23k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.23k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.46k|{
   25|  4.46k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.46k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.46k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.46k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.46k|{
   25|  4.46k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.46k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.46k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.46k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.23k|{
   52|  2.23k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.23k|    string_buffer.resize(size);
   56|  2.23k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.23k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.23k|    const auto wsv_reinterpret_size =
   61|  2.23k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 70, False: 2.16k]
  ------------------
   62|  2.23k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.23k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.23k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.23k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.23k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.23k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.23k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.23k|{
  122|  2.23k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.23k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.23k|    buf.resize(sizeof...(Args));
  125|  2.23k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.23k|    return buf;
  127|  2.23k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.23k|{
  108|  2.23k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.23k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.23k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.23k|{
  185|  2.23k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.23k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.23k|                                   format_strings);
  188|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 133k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   133k|            it = result->begin();
  145|   133k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 133k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   133k|            it = result->begin();
  161|   133k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  31.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.9k|            auto result = scn::scan_value<T>(
  170|  31.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 29.7k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  29.7k|            it = result->begin();
  175|  29.7k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   151k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   151k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   151k|            auto result = scn::scan<T>(
  139|   151k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   151k|                scn::runtime_format(f));
  141|   151k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 138k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   138k|            it = result->begin();
  145|   138k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   151k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   151k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   151k|            auto result = scn::scan<T>(
  154|   151k|                global_locale,
  155|   151k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   151k|                scn::runtime_format(f));
  157|   151k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 138k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   138k|            it = result->begin();
  161|   138k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  33.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.2k|            auto result = scn::scan_value<T>(
  170|  33.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 31.0k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  31.0k|            it = result->begin();
  175|  31.0k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   153k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   153k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   153k|            auto result = scn::scan<T>(
  139|   153k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   153k|                scn::runtime_format(f));
  141|   153k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 139k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   139k|            it = result->begin();
  145|   139k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   153k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   153k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   153k|            auto result = scn::scan<T>(
  154|   153k|                global_locale,
  155|   153k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   153k|                scn::runtime_format(f));
  157|   153k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 139k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   139k|            it = result->begin();
  161|   139k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  33.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.8k|            auto result = scn::scan_value<T>(
  170|  33.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 31.5k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  31.5k|            it = result->begin();
  175|  31.5k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   169k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   169k|            auto result = scn::scan<T>(
  139|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   169k|                scn::runtime_format(f));
  141|   169k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 155k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   155k|            it = result->begin();
  145|   155k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   169k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   169k|            auto result = scn::scan<T>(
  154|   169k|                global_locale,
  155|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   169k|                scn::runtime_format(f));
  157|   169k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 155k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   155k|            it = result->begin();
  161|   155k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  34.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.8k|            auto result = scn::scan_value<T>(
  170|  34.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 32.6k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  32.6k|            it = result->begin();
  175|  32.6k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   176k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   176k|            auto result = scn::scan<T>(
  139|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   176k|                scn::runtime_format(f));
  141|   176k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 163k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   163k|            it = result->begin();
  145|   163k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   176k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   176k|            auto result = scn::scan<T>(
  154|   176k|                global_locale,
  155|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   176k|                scn::runtime_format(f));
  157|   176k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 163k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   163k|            it = result->begin();
  161|   163k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  36.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.7k|            auto result = scn::scan_value<T>(
  170|  36.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 34.4k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  34.4k|            it = result->begin();
  175|  34.4k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.23k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.23k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   178k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   178k|            auto result = scn::scan<T>(
  139|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   178k|                scn::runtime_format(f));
  141|   178k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 164k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   164k|            it = result->begin();
  145|   164k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.23k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   178k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   178k|            auto result = scn::scan<T>(
  154|   178k|                global_locale,
  155|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   178k|                scn::runtime_format(f));
  157|   178k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 164k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   164k|            it = result->begin();
  161|   164k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.23k|    {
  166|  2.23k|        auto it = scn::ranges::begin(source);
  167|  37.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.0k|            auto result = scn::scan_value<T>(
  170|  37.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.23k, False: 34.8k]
  ------------------
  172|  2.23k|                break;
  173|  2.23k|            }
  174|  34.8k|            it = result->begin();
  175|  34.8k|        }
  176|  2.23k|    }
  177|  2.23k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.23k|{
   90|  2.23k|    using char_type = ranges::range_value_t<Source>;
   91|  2.23k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.23k|    deque.clear();
   93|  2.23k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.23k|              std::back_inserter(deque));
   95|  2.23k|    return deque;
   96|  2.23k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.23k|{
   79|  2.23k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.23k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.23k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.23k|{
  122|  2.23k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.23k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.23k|    buf.resize(sizeof...(Args));
  125|  2.23k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.23k|    return buf;
  127|  2.23k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.23k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.23k|    else {
  112|  2.23k|        return wformat_string_view_buffer;
  113|  2.23k|    }
  114|  2.23k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.46k|{
  185|  4.46k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.46k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.46k|                                   format_strings);
  188|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  79.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  79.6k|            auto result = scn::scan<T>(
  139|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  79.6k|                scn::runtime_format(f));
  141|  79.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 52.8k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  52.8k|            it = result->begin();
  145|  52.8k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  79.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  79.6k|            auto result = scn::scan<T>(
  154|  79.6k|                global_locale,
  155|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  79.6k|                scn::runtime_format(f));
  157|  79.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 52.8k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  52.8k|            it = result->begin();
  161|  52.8k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  14.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.5k|            auto result = scn::scan_value<T>(
  170|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 10.1k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  10.1k|            it = result->begin();
  175|  10.1k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  88.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  88.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  88.5k|            auto result = scn::scan<T>(
  139|  88.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  88.5k|                scn::runtime_format(f));
  141|  88.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 61.7k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  61.7k|            it = result->begin();
  145|  61.7k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  88.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  88.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  88.5k|            auto result = scn::scan<T>(
  154|  88.5k|                global_locale,
  155|  88.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  88.5k|                scn::runtime_format(f));
  157|  88.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 61.7k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  61.7k|            it = result->begin();
  161|  61.7k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  17.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.5k|            auto result = scn::scan_value<T>(
  170|  17.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 13.0k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  13.0k|            it = result->begin();
  175|  13.0k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  90.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  90.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  90.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  90.0k|            auto result = scn::scan<T>(
  139|  90.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  90.0k|                scn::runtime_format(f));
  141|  90.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 63.2k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  63.2k|            it = result->begin();
  145|  63.2k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  90.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  90.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  90.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  90.0k|            auto result = scn::scan<T>(
  154|  90.0k|                global_locale,
  155|  90.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  90.0k|                scn::runtime_format(f));
  157|  90.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 63.2k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  63.2k|            it = result->begin();
  161|  63.2k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  18.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.0k|            auto result = scn::scan_value<T>(
  170|  18.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 13.5k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  13.5k|            it = result->begin();
  175|  13.5k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  79.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  79.6k|            auto result = scn::scan<T>(
  139|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  79.6k|                scn::runtime_format(f));
  141|  79.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 52.8k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  52.8k|            it = result->begin();
  145|  52.8k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  79.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  79.6k|            auto result = scn::scan<T>(
  154|  79.6k|                global_locale,
  155|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  79.6k|                scn::runtime_format(f));
  157|  79.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 52.8k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  52.8k|            it = result->begin();
  161|  52.8k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  14.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.5k|            auto result = scn::scan_value<T>(
  170|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 10.1k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  10.1k|            it = result->begin();
  175|  10.1k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  88.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  88.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  88.5k|            auto result = scn::scan<T>(
  139|  88.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  88.5k|                scn::runtime_format(f));
  141|  88.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 61.7k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  61.7k|            it = result->begin();
  145|  61.7k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  88.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  88.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  88.5k|            auto result = scn::scan<T>(
  154|  88.5k|                global_locale,
  155|  88.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  88.5k|                scn::runtime_format(f));
  157|  88.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 61.7k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  61.7k|            it = result->begin();
  161|  61.7k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  17.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.5k|            auto result = scn::scan_value<T>(
  170|  17.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 13.0k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  13.0k|            it = result->begin();
  175|  13.0k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.46k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.46k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  90.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  90.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  90.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  90.0k|            auto result = scn::scan<T>(
  139|  90.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  90.0k|                scn::runtime_format(f));
  141|  90.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 63.2k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  63.2k|            it = result->begin();
  145|  63.2k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.46k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  90.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  90.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  90.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  90.0k|            auto result = scn::scan<T>(
  154|  90.0k|                global_locale,
  155|  90.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  90.0k|                scn::runtime_format(f));
  157|  90.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 63.2k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  63.2k|            it = result->begin();
  161|  63.2k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.46k|    {
  166|  4.46k|        auto it = scn::ranges::begin(source);
  167|  18.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.0k|            auto result = scn::scan_value<T>(
  170|  18.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.46k, False: 13.5k]
  ------------------
  172|  4.46k|                break;
  173|  4.46k|            }
  174|  13.5k|            it = result->begin();
  175|  13.5k|        }
  176|  4.46k|    }
  177|  4.46k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.46k|{
   90|  4.46k|    using char_type = ranges::range_value_t<Source>;
   91|  4.46k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.46k|    deque.clear();
   93|  4.46k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.46k|              std::back_inserter(deque));
   95|  4.46k|    return deque;
   96|  4.46k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.46k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.46k|    else {
   83|  4.46k|        return wnoncontiguous_buffer;
   84|  4.46k|    }
   85|  4.46k|}

