_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   935k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   935k|  chars_format const fmt = options.format;
  277|   935k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   935k|  parsed_number_string_t<UC> answer;
  280|   935k|  answer.valid = false;
  281|   935k|  answer.too_many_digits = false;
  282|   935k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   935k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 935k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   935k|  UC const * const start_digits = p;
  303|       |
  304|   935k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.00M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.53M, False: 466k]
  |  Branch (306:25): [True: 4.06M, False: 469k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.06M|    i = 10 * i +
  310|  4.06M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.06M|    ++p;
  312|  4.06M|  }
  313|   935k|  UC const * const end_of_integer_part = p;
  314|   935k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   935k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   935k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   935k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 935k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   935k|  int64_t exponent = 0;
  324|   935k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 469k, False: 466k]
  |  Branch (324:49): [True: 171k, False: 297k]
  ------------------
  325|   935k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 171k, False: 763k]
  ------------------
  326|   171k|    ++p;
  327|   171k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   171k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   714k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 607k, False: 106k]
  |  Branch (332:27): [True: 542k, False: 64.8k]
  ------------------
  333|   542k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   542k|      ++p;
  335|   542k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   542k|    }
  337|   171k|    exponent = before - p;
  338|   171k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   171k|    digit_count -= exponent;
  340|   171k|  }
  341|   935k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   935k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 935k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   935k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 935k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   935k|  int64_t exp_number = 0;            // explicit exponential part
  351|   935k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 807k, False: 127k]
  ------------------
  352|   935k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 362k, False: 445k]
  ------------------
  353|   935k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 80.6k, False: 282k]
  |  Branch (353:29): [True: 49.7k, False: 232k]
  ------------------
  354|   935k|       ||
  355|   935k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   805k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 805k]
  ------------------
  356|   805k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   805k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   130k|    UC const * location_of_e = p;
  359|   130k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 80.6k, False: 49.7k]
  |  Branch (359:28): [True: 49.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   130k|      ++p;
  361|   130k|    }
  362|   130k|    bool neg_exp = false;
  363|   130k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 130k, False: 125]
  |  Branch (363:24): [True: 6.13k, False: 124k]
  ------------------
  364|  6.13k|      neg_exp = true;
  365|  6.13k|      ++p;
  366|   124k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 124k, False: 125]
  |  Branch (366:31): [True: 31.9k, False: 92.2k]
  ------------------
  367|  31.9k|      ++p;
  368|  31.9k|    }
  369|   130k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 130k]
  |  Branch (369:24): [True: 505, False: 129k]
  ------------------
  370|    680|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 680]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    680|      p = location_of_e;
  376|   129k|    } else {
  377|   401k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 306k, False: 95.3k]
  |  Branch (377:29): [True: 271k, False: 34.4k]
  ------------------
  378|   271k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   271k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 250k, False: 21.2k]
  ------------------
  380|   250k|          exp_number = 10 * exp_number + digit;
  381|   250k|        }
  382|   271k|        ++p;
  383|   271k|      }
  384|   129k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.10k, False: 123k]
  ------------------
  385|   129k|      exponent += exp_number;
  386|   129k|    }
  387|   805k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   805k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 677k, False: 127k]
  |  Branch (389:44): [True: 0, False: 677k]
  ------------------
  390|   805k|  }
  391|   935k|  answer.lastmatch = p;
  392|   935k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   935k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 157k, False: 778k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   157k|    UC const * start = start_digits;
  405|   634k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 633k, False: 1.22k]
  |  Branch (405:32): [True: 470k, False: 162k]
  |  Branch (405:53): [True: 6.90k, False: 155k]
  ------------------
  406|   477k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 470k, False: 6.90k]
  ------------------
  407|   477k|      start++;
  408|   477k|    }
  409|       |
  410|   157k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 152k, False: 4.34k]
  ------------------
  411|   152k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   152k|      i = 0;
  416|   152k|      p = answer.integer.ptr;
  417|   152k|      UC const* int_end = p + answer.integer.len();
  418|   152k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.56M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.52M, False: 40.9k]
  |  Branch (419:54): [True: 1.41M, False: 111k]
  ------------------
  420|  1.41M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.41M|        ++p;
  422|  1.41M|      }
  423|   152k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 40.9k, False: 111k]
  ------------------
  424|  40.9k|        exponent = end_of_integer_part - p + exp_number;
  425|  40.9k|      }
  426|   111k|      else { // We have a value with a fractional component.
  427|   111k|        p = answer.fraction.ptr;
  428|   111k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.96M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.84M, False: 111k]
  |  Branch (429:56): [True: 1.84M, False: 0]
  ------------------
  430|  1.84M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.84M|          ++p;
  432|  1.84M|        }
  433|   111k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   111k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   152k|    }
  437|   157k|  }
  438|   935k|  answer.exponent = exponent;
  439|   935k|  answer.mantissa = i;
  440|   935k|  return answer;
  441|   935k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.58M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.58M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 149k, False: 5.43M]
  |  Branch (36:27): [True: 419k, False: 5.01M]
  ------------------
   37|  5.58M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   171k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   628k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 508k, False: 120k]
  |  Branch (249:43): [True: 456k, False: 51.6k]
  ------------------
  250|   456k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   456k|    p += 8;
  252|   456k|  }
  253|   171k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   508k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   508k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   508k|     0x8080808080808080));
  172|   508k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.16M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.16M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.16M|  uint64_t val;
   63|  1.16M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.16M|  return val;
   69|  1.16M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   655k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   655k|  const uint64_t mask = 0x000000FF000000FF;
  148|   655k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   655k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   655k|  val -= 0x3030303030303030;
  151|   655k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   655k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   655k|  return uint32_t(val);
  154|   655k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   198k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   198k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   198k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   198k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   198k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   319k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   319k|  chars_format const fmt = options.format;
  277|   319k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   319k|  parsed_number_string_t<UC> answer;
  280|   319k|  answer.valid = false;
  281|   319k|  answer.too_many_digits = false;
  282|   319k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   319k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 319k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   319k|  UC const * const start_digits = p;
  303|       |
  304|   319k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   676k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 454k, False: 222k]
  |  Branch (306:25): [True: 356k, False: 97.6k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   356k|    i = 10 * i +
  310|   356k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   356k|    ++p;
  312|   356k|  }
  313|   319k|  UC const * const end_of_integer_part = p;
  314|   319k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   319k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   319k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   319k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 319k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   319k|  int64_t exponent = 0;
  324|   319k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 97.6k, False: 222k]
  |  Branch (324:49): [True: 1.15k, False: 96.4k]
  ------------------
  325|   319k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 1.15k, False: 318k]
  ------------------
  326|  1.15k|    ++p;
  327|  1.15k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  1.15k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  3.94k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 3.11k, False: 821]
  |  Branch (332:27): [True: 2.78k, False: 337]
  ------------------
  333|  2.78k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.78k|      ++p;
  335|  2.78k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.78k|    }
  337|  1.15k|    exponent = before - p;
  338|  1.15k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  1.15k|    digit_count -= exponent;
  340|  1.15k|  }
  341|   319k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   319k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 319k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   319k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 319k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   319k|  int64_t exp_number = 0;            // explicit exponential part
  351|   319k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 254k, False: 65.5k]
  ------------------
  352|   319k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 96.7k, False: 157k]
  ------------------
  353|   319k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 179, False: 96.6k]
  |  Branch (353:29): [True: 9.60k, False: 87.0k]
  ------------------
  354|   319k|       ||
  355|   319k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   309k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 309k]
  ------------------
  356|   309k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   309k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  9.78k|    UC const * location_of_e = p;
  359|  9.78k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 179, False: 9.60k]
  |  Branch (359:28): [True: 9.60k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  9.78k|      ++p;
  361|  9.78k|    }
  362|  9.78k|    bool neg_exp = false;
  363|  9.78k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 9.76k, False: 20]
  |  Branch (363:24): [True: 2.26k, False: 7.50k]
  ------------------
  364|  2.26k|      neg_exp = true;
  365|  2.26k|      ++p;
  366|  7.52k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 7.50k, False: 20]
  |  Branch (366:31): [True: 227, False: 7.27k]
  ------------------
  367|    227|      ++p;
  368|    227|    }
  369|  9.78k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 9.75k]
  |  Branch (369:24): [True: 390, False: 9.36k]
  ------------------
  370|    420|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 420]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    420|      p = location_of_e;
  376|  9.36k|    } else {
  377|  34.7k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 28.1k, False: 6.53k]
  |  Branch (377:29): [True: 25.3k, False: 2.82k]
  ------------------
  378|  25.3k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  25.3k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 23.9k, False: 1.43k]
  ------------------
  380|  23.9k|          exp_number = 10 * exp_number + digit;
  381|  23.9k|        }
  382|  25.3k|        ++p;
  383|  25.3k|      }
  384|  9.36k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.24k, False: 7.12k]
  ------------------
  385|  9.36k|      exponent += exp_number;
  386|  9.36k|    }
  387|   309k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   309k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 244k, False: 65.5k]
  |  Branch (389:44): [True: 0, False: 244k]
  ------------------
  390|   309k|  }
  391|   319k|  answer.lastmatch = p;
  392|   319k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   319k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 288, False: 319k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    288|    UC const * start = start_digits;
  405|    324|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 324, False: 0]
  |  Branch (405:32): [True: 36, False: 288]
  |  Branch (405:53): [True: 0, False: 288]
  ------------------
  406|     36|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 36, False: 0]
  ------------------
  407|     36|      start++;
  408|     36|    }
  409|       |
  410|    288|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 252, False: 36]
  ------------------
  411|    252|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    252|      i = 0;
  416|    252|      p = answer.integer.ptr;
  417|    252|      UC const* int_end = p + answer.integer.len();
  418|    252|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.35k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.17k, False: 180]
  |  Branch (419:54): [True: 4.10k, False: 72]
  ------------------
  420|  4.10k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.10k|        ++p;
  422|  4.10k|      }
  423|    252|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 180, False: 72]
  ------------------
  424|    180|        exponent = end_of_integer_part - p + exp_number;
  425|    180|      }
  426|     72|      else { // We have a value with a fractional component.
  427|     72|        p = answer.fraction.ptr;
  428|     72|        UC const* frac_end = p + answer.fraction.len();
  429|    756|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 684, False: 72]
  |  Branch (429:56): [True: 684, False: 0]
  ------------------
  430|    684|          i = i * 10 + uint64_t(*p - UC('0'));
  431|    684|          ++p;
  432|    684|        }
  433|     72|        exponent = answer.fraction.ptr - p + exp_number;
  434|     72|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    252|    }
  437|    288|  }
  438|   319k|  answer.exponent = exponent;
  439|   319k|  answer.mantissa = i;
  440|   319k|  return answer;
  441|   319k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   495k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   495k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 99.3k, False: 396k]
  |  Branch (36:27): [True: 1.80k, False: 394k]
  ------------------
   37|   495k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|  1.15k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  1.15k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  1.15k|    return;
  240|  1.15k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  52.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   114k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   178k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   178k|    return small_mul(vec, y);
  565|   178k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   262k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   262k|  limb carry = 0;
  284|  1.05M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 790k, False: 262k]
  ------------------
  285|   790k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   790k|  }
  287|   262k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 150k, False: 111k]
  ------------------
  288|   150k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   150k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
  289|   150k|  }
  290|   262k|  return true;
  291|   262k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.01M|  constexpr size_t len() const noexcept {
   77|  2.01M|    return length;
   78|  2.01M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   790k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   790k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   790k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   790k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   790k|  carry = limb(z >> limb_bits);
  235|   790k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   790k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.17M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.17M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.17M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.17M|    return data[index];
   60|  2.17M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   214k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   214k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 214k, False: 0]
  ------------------
   93|   214k|      push_unchecked(value);
   94|   214k|      return true;
   95|   214k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   214k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   248k|  constexpr size_t capacity() const noexcept {
   83|   248k|    return size;
   84|   248k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   263k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   263k|    data[length] = value;
   88|   263k|    length++;
   89|   263k|  }
_ZN10fast_float6bigint3addEm:
  567|   178k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   178k|    return small_add(vec, y);
  569|   178k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   178k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   178k|  return small_add_from(vec, y, 0);
  277|   178k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   178k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   178k|  size_t index = start;
  259|   178k|  limb carry = y;
  260|   178k|  bool overflow;
  261|   271k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 146k, False: 125k]
  |  Branch (261:24): [True: 93.0k, False: 52.9k]
  ------------------
  262|  93.0k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  93.0k|    carry = limb(overflow);
  264|  93.0k|    index += 1;
  265|  93.0k|  }
  266|   178k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 52.9k, False: 125k]
  ------------------
  267|  52.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  52.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 52.9k]
  |  |  ------------------
  ------------------
  268|  52.9k|  }
  269|   178k|  return true;
  270|   178k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   220k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   220k|  limb z;
  211|       |// gcc and clang
  212|   220k|#if defined(__has_builtin)
  213|   220k|  #if __has_builtin(__builtin_add_overflow)
  214|   220k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   220k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   220k|      return z;
  217|   220k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   220k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.03k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.03k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.03k]
  |  |  ------------------
  ------------------
  611|  4.03k|    return pow2(exp);
  612|  4.03k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  52.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  52.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  52.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  56.0k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.07k, False: 52.9k]
  ------------------
  582|  3.07k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  583|  3.07k|      exp -= large_step;
  584|  3.07k|    }
  585|  52.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  52.9k|    uint32_t small_step = 27;
  587|  52.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  75.0k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.0k, False: 52.9k]
  ------------------
  593|  22.0k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.0k]
  |  |  ------------------
  ------------------
  594|  22.0k|      exp -= small_step;
  595|  22.0k|    }
  596|  52.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 46.1k, False: 6.87k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  46.1k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  46.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 46.1k]
  |  |  ------------------
  ------------------
  601|  46.1k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  46.1k|      );
  603|  46.1k|    }
  604|       |
  605|  52.9k|    return true;
  606|  52.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.07k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.07k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.07k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.07k|  } else {
  368|  3.07k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  369|  3.07k|  }
  370|  3.07k|  return true;
  371|  3.07k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.07k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.07k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.07k|  stackvec<size> z(xs);
  338|  3.07k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.07k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.07k, False: 0]
  ------------------
  341|  3.07k|    limb y0 = y[0];
  342|  3.07k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  343|  15.3k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.2k, False: 3.07k]
  ------------------
  344|  12.2k|      limb yi = y[index];
  345|  12.2k|      stackvec<size> zi;
  346|  12.2k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.2k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.2k|        zi.set_len(0);
  349|  12.2k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
  350|  12.2k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
  351|  12.2k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.2k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
  353|  12.2k|      }
  354|  12.2k|    }
  355|  3.07k|  }
  356|       |
  357|  3.07k|  x.normalize();
  358|  3.07k|  return true;
  359|  3.07k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.07k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.07k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.07k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.07k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  45.4k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  45.4k|    length = uint16_t(len);
   75|  45.4k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.3k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.3k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.3k, False: 0]
  ------------------
  108|  15.3k|      extend_unchecked(s);
  109|  15.3k|      return true;
  110|  15.3k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.3k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.3k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.3k|    limb* ptr = data + length;
  102|  15.3k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.3k|    set_len(len() + s.len());
  104|  15.3k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.2k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.2k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.2k]
  |  Branch (300:26): [True: 12.1k, False: 180]
  ------------------
  301|  12.1k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
  302|  12.1k|  }
  303|       |
  304|  12.2k|  bool carry = false;
  305|   104k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 92.2k, False: 12.2k]
  ------------------
  306|  92.2k|    limb xi = x[index + start];
  307|  92.2k|    limb yi = y[index];
  308|  92.2k|    bool c1 = false;
  309|  92.2k|    bool c2 = false;
  310|  92.2k|    xi = scalar_add(xi, yi, c1);
  311|  92.2k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 35.3k, False: 56.9k]
  ------------------
  312|  35.3k|      xi = scalar_add(xi, 1, c2);
  313|  35.3k|    }
  314|  92.2k|    x[index + start] = xi;
  315|  92.2k|    carry = c1 | c2;
  316|  92.2k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.2k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.2k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.2k|  return true;
  323|  12.2k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.1k]
  ------------------
  132|      0|      return false;
  133|  12.1k|    } else {
  134|  12.1k|      resize_unchecked(new_len, value);
  135|  12.1k|      return true;
  136|  12.1k|    }
  137|  12.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.1k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.1k, False: 0]
  ------------------
  120|  12.1k|      size_t count = new_len - len();
  121|  12.1k|      limb* first = data + len();
  122|  12.1k|      limb* last = first + count;
  123|  12.1k|      ::std::fill(first, last, value);
  124|  12.1k|      set_len(new_len);
  125|  12.1k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  52.0k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  52.0k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 52.0k, False: 0]
  |  Branch (152:25): [True: 0, False: 52.0k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  52.0k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  63.6k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  63.6k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  63.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  63.6k|    size_t rindex = length - index - 1;
   69|  63.6k|    return data[rindex];
   70|  63.6k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  52.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  52.9k|    return shl(exp);
  574|  52.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  52.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  52.9k|    size_t rem = n % limb_bits;
  532|  52.9k|    size_t div = n / limb_bits;
  533|  52.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 48.9k, False: 3.95k]
  ------------------
  534|  48.9k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  48.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 48.9k]
  |  |  ------------------
  ------------------
  535|  48.9k|    }
  536|  52.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 5.72k, False: 47.1k]
  ------------------
  537|  5.72k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  5.72k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.72k]
  |  |  ------------------
  ------------------
  538|  5.72k|    }
  539|  52.9k|    return true;
  540|  52.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  48.9k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  48.9k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  48.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  48.9k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  48.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  48.9k|    size_t shl = n;
  493|  48.9k|    size_t shr = limb_bits - shl;
  494|  48.9k|    limb prev = 0;
  495|   160k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 111k, False: 48.9k]
  ------------------
  496|   111k|      limb xi = vec[index];
  497|   111k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   111k|      prev = xi;
  499|   111k|    }
  500|       |
  501|  48.9k|    limb carry = prev >> shr;
  502|  48.9k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 11.0k, False: 37.9k]
  ------------------
  503|  11.0k|      return vec.try_push(carry);
  504|  11.0k|    }
  505|  37.9k|    return true;
  506|  48.9k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  5.72k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  5.72k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  5.72k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  5.72k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 5.72k]
  ------------------
  512|      0|      return false;
  513|  5.72k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 5.72k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  5.72k|      limb* dst = vec.data + n;
  516|  5.72k|      const limb* src = vec.data;
  517|  5.72k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  5.72k|      limb* first = vec.data;
  520|  5.72k|      limb* last = first + n;
  521|  5.72k|      ::std::fill(first, last, 0);
  522|  5.72k|      vec.set_len(n + vec.len());
  523|  5.72k|      return true;
  524|  5.72k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  5.72k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  9.75k|  constexpr bool is_empty() const noexcept {
   80|  9.75k|    return length == 0;
   81|  9.75k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.03k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.03k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.03k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.03k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.03k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 976, False: 3.06k]
  ------------------
  435|    976|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.06k|    } else {
  437|  3.06k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.06k|      truncated |= vec.nonzero(2);
  439|  3.06k|      return result;
  440|  3.06k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.03k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    976|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    976|  truncated = false;
  167|    976|  int shl = leading_zeroes(r0);
  168|    976|  return r0 << shl;
  169|    976|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.06k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.06k|  int shl = leading_zeroes(r0);
  174|  3.06k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.02k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.02k|  } else {
  178|  3.02k|    int shr = 64 - shl;
  179|  3.02k|    truncated = (r1 << shl) != 0;
  180|  3.02k|    return (r0 << shl) | (r1 >> shr);
  181|  3.02k|  }
  182|  3.06k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.06k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.09k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 473, False: 2.62k]
  ------------------
  143|    473|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 435, False: 38]
  ------------------
  144|    435|        return true;
  145|    435|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.62k|    return false;
  149|  3.06k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.03k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.03k|    int lz = ctlz();
  560|  4.03k|    return int(limb_bits * vec.len()) - lz;
  561|  4.03k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.03k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.03k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.03k]
  ------------------
  545|      0|      return 0;
  546|  4.03k|    } else {
  547|  4.03k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.03k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.03k|    }
  555|  4.03k|  }
_ZN10fast_float6bigintC2Em:
  418|  48.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  48.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  48.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  48.9k|    vec.normalize();
  426|  48.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  48.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  48.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 48.9k]
  ------------------
  464|      0|      return 1;
  465|  48.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 48.9k]
  ------------------
  466|      0|      return -1;
  467|  48.9k|    } else {
  468|  95.7k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 92.1k, False: 3.51k]
  ------------------
  469|  92.1k|        limb xi = vec[index - 1];
  470|  92.1k|        limb yi = other.vec[index - 1];
  471|  92.1k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.2k, False: 80.9k]
  ------------------
  472|  11.2k|          return 1;
  473|  80.9k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 34.2k, False: 46.7k]
  ------------------
  474|  34.2k|          return -1;
  475|  34.2k|        }
  476|  92.1k|      }
  477|  3.51k|      return 0;
  478|  48.9k|    }
  479|  48.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   184k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   184k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   184k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   184k|    return data[index];
   64|   184k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   207k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   207k|  adjusted_mantissa answer;
   96|   207k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.51k, False: 204k]
  |  Branch (96:19): [True: 1.02k, False: 203k]
  ------------------
   97|  4.53k|    answer.power2 = 0;
   98|  4.53k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.53k|    return answer;
  101|  4.53k|  }
  102|   203k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.66k, False: 196k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.66k|    answer.power2 = binary::infinite_power();
  105|  6.66k|    answer.mantissa = 0;
  106|  6.66k|    return answer;
  107|  6.66k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   196k|  int lz = leading_zeroes(w);
  112|   196k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   196k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   196k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   196k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   196k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   196k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 852, False: 195k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    852|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 106, False: 746]
  ------------------
  137|    106|      answer.power2 = 0;
  138|    106|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    106|      return answer;
  141|    106|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    746|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    746|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    746|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    746|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 746, False: 0]
  ------------------
  156|    746|    return answer;
  157|    852|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   195k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 69.7k, False: 125k]
  |  Branch (162:30): [True: 67.9k, False: 1.81k]
  |  Branch (162:77): [True: 61.3k, False: 6.60k]
  ------------------
  163|   195k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.01k, False: 53.3k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.01k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.68k, False: 4.33k]
  ------------------
  168|  3.68k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.68k|    }
  170|  8.01k|  }
  171|       |
  172|   195k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   195k|  answer.mantissa >>= 1;
  174|   195k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.3k, False: 182k]
  ------------------
  175|  13.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.3k|    answer.power2++; // undo previous addition
  177|  13.3k|  }
  178|       |
  179|   195k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   195k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.08k, False: 194k]
  ------------------
  181|  1.08k|    answer.power2 = binary::infinite_power();
  182|  1.08k|    answer.mantissa = 0;
  183|  1.08k|  }
  184|   195k|  return answer;
  185|   196k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   219k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   219k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   219k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   219k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   219k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   219k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   219k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 43.6k, False: 175k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  43.6k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  43.6k|    firstproduct.low += secondproduct.high;
   35|  43.6k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 30.5k, False: 13.0k]
  ------------------
   36|  30.5k|      firstproduct.high++;
   37|  30.5k|    }
   38|  43.6k|  }
   39|   219k|  return firstproduct;
   40|   219k|}
_ZN10fast_float6detail5powerEi:
   58|   431k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   431k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   431k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  22.5k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  22.5k|  int lz = leading_zeroes(w);
   82|  22.5k|  w <<= lz;
   83|  22.5k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  22.5k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  22.5k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  22.5k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  22.5k|  int hilz = int(w >> 63) ^ 1;
   69|  22.5k|  adjusted_mantissa answer;
   70|  22.5k|  answer.mantissa = w << hilz;
   71|  22.5k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  22.5k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  22.5k|  return answer;
   74|  22.5k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   188k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   188k|  adjusted_mantissa answer;
   96|   188k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.25k, False: 185k]
  |  Branch (96:19): [True: 278, False: 185k]
  ------------------
   97|  3.53k|    answer.power2 = 0;
   98|  3.53k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.53k|    return answer;
  101|  3.53k|  }
  102|   185k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.29k, False: 181k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.29k|    answer.power2 = binary::infinite_power();
  105|  3.29k|    answer.mantissa = 0;
  106|  3.29k|    return answer;
  107|  3.29k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   181k|  int lz = leading_zeroes(w);
  112|   181k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   181k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   181k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   181k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   181k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   181k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.44k, False: 179k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.44k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 52, False: 2.39k]
  ------------------
  137|     52|      answer.power2 = 0;
  138|     52|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     52|      return answer;
  141|     52|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.39k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.39k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.39k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.39k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.39k, False: 0]
  ------------------
  156|  2.39k|    return answer;
  157|  2.44k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   179k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 56.3k, False: 123k]
  |  Branch (162:30): [True: 31.2k, False: 25.0k]
  |  Branch (162:77): [True: 26.8k, False: 4.43k]
  ------------------
  163|   179k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.25k, False: 21.6k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.25k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.17k, False: 1.07k]
  ------------------
  168|  4.17k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.17k|    }
  170|  5.25k|  }
  171|       |
  172|   179k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   179k|  answer.mantissa >>= 1;
  174|   179k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.9k, False: 166k]
  ------------------
  175|  12.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.9k|    answer.power2++; // undo previous addition
  177|  12.9k|  }
  178|       |
  179|   179k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   179k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 284, False: 179k]
  ------------------
  181|    284|    answer.power2 = binary::infinite_power();
  182|    284|    answer.mantissa = 0;
  183|    284|  }
  184|   179k|  return answer;
  185|   181k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   212k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   212k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   212k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   212k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   212k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   212k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   212k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 84.3k, False: 128k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  84.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  84.3k|    firstproduct.low += secondproduct.high;
   35|  84.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 27.6k, False: 56.7k]
  ------------------
   36|  27.6k|      firstproduct.high++;
   37|  27.6k|    }
   38|  84.3k|  }
   39|   212k|  return firstproduct;
   40|   212k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  30.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  30.4k|  int lz = leading_zeroes(w);
   82|  30.4k|  w <<= lz;
   83|  30.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  30.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  30.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  30.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  30.4k|  int hilz = int(w >> 63) ^ 1;
   69|  30.4k|  adjusted_mantissa answer;
   70|  30.4k|  answer.mantissa = w << hilz;
   71|  30.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  30.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  30.4k|  return answer;
   74|  30.4k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  22.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  22.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  22.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  22.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  22.5k|  size_t digits = 0;
  413|  22.5k|  bigint bigmant;
  414|  22.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  22.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  22.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 514, False: 22.0k]
  ------------------
  418|    514|    return positive_digit_comp<T>(bigmant, exponent);
  419|  22.0k|  } else {
  420|  22.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  22.0k|  }
  422|  22.5k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  52.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  52.9k|  uint64_t mantissa = num.mantissa;
   30|  52.9k|  int32_t exponent = int32_t(num.exponent);
   31|   264k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 211k, False: 52.9k]
  ------------------
   32|   211k|    mantissa /= 10000;
   33|   211k|    exponent += 4;
   34|   211k|  }
   35|   105k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 52.9k, False: 52.9k]
  ------------------
   36|  52.9k|    mantissa /= 100;
   37|  52.9k|    exponent += 2;
   38|  52.9k|  }
   39|  52.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 52.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  52.9k|  return exponent;
   44|  52.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  52.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  52.9k|  size_t counter = 0;
  245|  52.9k|  digits = 0;
  246|  52.9k|  limb value = 0;
  247|  52.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  52.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  52.9k|  UC const * p = num.integer.ptr;
  255|  52.9k|  UC const * pend = p + num.integer.len();
  256|  52.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   120k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 67.3k, False: 52.6k]
  ------------------
  259|   115k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 62.6k, False: 52.8k]
  |  Branch (259:45): [True: 48.4k, False: 14.2k]
  |  Branch (259:70): [True: 48.2k, False: 291]
  ------------------
  260|  48.2k|      parse_eight_digits(p, value, counter, digits);
  261|  48.2k|    }
  262|   212k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 196k, False: 16.4k]
  |  Branch (262:30): [True: 145k, False: 50.5k]
  |  Branch (262:43): [True: 145k, False: 291]
  ------------------
  263|   145k|      parse_one_digit(p, value, counter, digits);
  264|   145k|    }
  265|  67.3k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 291, False: 67.0k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    291|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    291|      bool truncated = is_truncated(p, pend);
  269|    291|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 259, False: 32]
  ------------------
  270|    259|        truncated |= is_truncated(num.fraction);
  271|    259|      }
  272|    291|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 189, False: 102]
  ------------------
  273|    189|        round_up_bigint(result, digits);
  274|    189|      }
  275|    291|      return;
  276|  67.0k|    } else {
  277|  67.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  67.0k|      counter = 0;
  279|  67.0k|      value = 0;
  280|  67.0k|    }
  281|  67.3k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  52.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 49.0k, False: 3.60k]
  ------------------
  285|  49.0k|    p = num.fraction.ptr;
  286|  49.0k|    pend = p + num.fraction.len();
  287|  49.0k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.12k, False: 46.9k]
  ------------------
  288|  2.12k|      skip_zeros(p, pend);
  289|  2.12k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   155k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 109k, False: 46.3k]
  ------------------
  292|   260k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 201k, False: 59.0k]
  |  Branch (292:47): [True: 152k, False: 48.9k]
  |  Branch (292:72): [True: 150k, False: 1.29k]
  ------------------
  293|   150k|        parse_eight_digits(p, value, counter, digits);
  294|   150k|      }
  295|   455k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 393k, False: 62.1k]
  |  Branch (295:32): [True: 348k, False: 45.0k]
  |  Branch (295:45): [True: 346k, False: 2.13k]
  ------------------
  296|   346k|        parse_one_digit(p, value, counter, digits);
  297|   346k|      }
  298|   109k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.71k, False: 106k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.71k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.71k|        bool truncated = is_truncated(p, pend);
  302|  2.71k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.88k, False: 833]
  ------------------
  303|  1.88k|          round_up_bigint(result, digits);
  304|  1.88k|        }
  305|  2.71k|        return;
  306|   106k|      } else {
  307|   106k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   106k|        counter = 0;
  309|   106k|        value = 0;
  310|   106k|      }
  311|   109k|    }
  312|  49.0k|  }
  313|       |
  314|  49.9k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 49.9k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  49.9k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  55.1k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  55.1k|  uint64_t val;
  161|  66.4k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 31.6k, False: 34.8k]
  ------------------
  162|  31.6k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  31.6k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 20.3k, False: 11.3k]
  ------------------
  164|  20.3k|      break;
  165|  20.3k|    }
  166|  11.3k|    first += int_cmp_len<UC>();
  167|  11.3k|  }
  168|   107k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 105k, False: 2.12k]
  ------------------
  169|   105k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 52.9k, False: 52.2k]
  ------------------
  170|  52.9k|      break;
  171|  52.9k|    }
  172|  52.2k|    first++;
  173|  52.2k|  }
  174|  55.1k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   198k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   198k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   198k|  p += 8;
  210|   198k|  counter += 8;
  211|   198k|  count += 8;
  212|   198k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   491k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   491k|  value = value * 10 + limb(*p - UC('0'));
  218|   491k|  p++;
  219|   491k|  counter++;
  220|   491k|  count++;
  221|   491k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   178k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   178k|  big.mul(power);
  226|   178k|  big.add(value);
  227|   178k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.26k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.26k|  uint64_t val;
  183|  7.60k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.39k, False: 2.20k]
  ------------------
  184|  5.39k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.39k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.06k, False: 4.33k]
  ------------------
  186|  1.06k|      return true;
  187|  1.06k|    }
  188|  4.33k|    first += int_cmp_len<UC>();
  189|  4.33k|  }
  190|  3.76k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.66k, False: 1.10k]
  ------------------
  191|  2.66k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.10k, False: 1.56k]
  ------------------
  192|  1.10k|      return true;
  193|  1.10k|    }
  194|  1.56k|    ++first;
  195|  1.56k|  }
  196|  1.10k|  return false;
  197|  2.20k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    259|bool is_truncated(span<const UC> s) noexcept {
  201|    259|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    259|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.07k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.07k|  add_native(big, 10, 1);
  234|  2.07k|  count++;
  235|  2.07k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    514|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    514|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    514|  adjusted_mantissa answer;
  324|    514|  bool truncated;
  325|    514|  answer.mantissa = bigmant.hi64(truncated);
  326|    514|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
  334|       |
  335|    514|  return answer;
  336|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    514|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 514]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    514|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    514|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 514]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 514]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    514|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    514|  const uint64_t mask
  125|    514|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 514]
  ------------------
  126|    514|    ? UINT64_MAX
  127|    514|    : (uint64_t(1) << shift) - 1;
  128|    514|  const uint64_t halfway
  129|    514|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 514]
  ------------------
  130|    514|    ? 0
  131|    514|    : uint64_t(1) << (shift - 1);
  132|    514|  uint64_t truncated_bits = am.mantissa & mask;
  133|    514|  bool is_above = truncated_bits > halfway;
  134|    514|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    514|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 514]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    514|  } else {
  140|    514|    am.mantissa >>= shift;
  141|    514|  }
  142|    514|  am.power2 += shift;
  143|       |
  144|    514|  bool is_odd = (am.mantissa & 1) == 1;
  145|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 440]
  |  Branch (331:27): [True: 348, False: 92]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 56, False: 326]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    514|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  22.0k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  22.0k|  bigint& real_digits = bigmant;
  347|  22.0k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  22.0k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  22.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  22.0k|  T b;
  354|  22.0k|  to_float(false, am_b, b);
  355|  22.0k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  22.0k|  bigint theor_digits(theor.mantissa);
  357|  22.0k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  22.0k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  22.0k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  22.0k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 22.0k, False: 0]
  ------------------
  363|  22.0k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  22.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  22.0k|  }
  365|  22.0k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 22.0k, False: 0]
  ------------------
  366|  22.0k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  22.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  22.0k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  22.0k|  int ord = real_digits.compare(theor_digits);
  373|  22.0k|  adjusted_mantissa answer = am;
  374|  22.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.0k|      (void)_;  // not needed, since we've done our comparison
  377|  22.0k|      (void)__; // not needed, since we've done our comparison
  378|  22.0k|      if (ord > 0) {
  379|  22.0k|        return true;
  380|  22.0k|      } else if (ord < 0) {
  381|  22.0k|        return false;
  382|  22.0k|      } else {
  383|  22.0k|        return is_odd;
  384|  22.0k|      }
  385|  22.0k|    });
  386|  22.0k|  });
  387|       |
  388|  22.0k|  return answer;
  389|  22.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  22.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  22.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  48.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  48.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 48.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  48.9k|  } else {
  153|  48.9k|    am.mantissa >>= shift;
  154|  48.9k|  }
  155|  48.9k|  am.power2 += shift;
  156|  48.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  22.0k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  22.0k|  adjusted_mantissa am = to_extended(value);
   84|  22.0k|  am.mantissa <<= 1;
   85|  22.0k|  am.mantissa += 1;
   86|  22.0k|  am.power2 -= 1;
   87|  22.0k|  return am;
   88|  22.0k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  22.0k|adjusted_mantissa to_extended(T value) noexcept {
   50|  22.0k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  22.0k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  22.0k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  22.0k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  22.0k|  adjusted_mantissa am;
   56|  22.0k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  22.0k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  22.0k|  ::memcpy(&bits, &value, sizeof(T));
   62|  22.0k|#endif
   63|  22.0k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 22.0k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  22.0k|  } else {
   68|       |    // normal
   69|  22.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  22.0k|    am.power2 -= bias;
   71|  22.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  22.0k|  }
   73|       |
   74|  22.0k|  return am;
   75|  22.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  22.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  22.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.0k|      (void)_;  // not needed, since we've done our comparison
  377|  22.0k|      (void)__; // not needed, since we've done our comparison
  378|  22.0k|      if (ord > 0) {
  379|  22.0k|        return true;
  380|  22.0k|      } else if (ord < 0) {
  381|  22.0k|        return false;
  382|  22.0k|      } else {
  383|  22.0k|        return is_odd;
  384|  22.0k|      }
  385|  22.0k|    });
  386|  22.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  22.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  22.0k|  const uint64_t mask
  125|  22.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 22.0k]
  ------------------
  126|  22.0k|    ? UINT64_MAX
  127|  22.0k|    : (uint64_t(1) << shift) - 1;
  128|  22.0k|  const uint64_t halfway
  129|  22.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 22.0k]
  ------------------
  130|  22.0k|    ? 0
  131|  22.0k|    : uint64_t(1) << (shift - 1);
  132|  22.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  22.0k|  bool is_above = truncated_bits > halfway;
  134|  22.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  22.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 22.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  22.0k|  } else {
  140|  22.0k|    am.mantissa >>= shift;
  141|  22.0k|  }
  142|  22.0k|  am.power2 += shift;
  143|       |
  144|  22.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  22.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  22.0k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  22.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.0k|      (void)_;  // not needed, since we've done our comparison
  377|  22.0k|      (void)__; // not needed, since we've done our comparison
  378|  22.0k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 21.8k]
  ------------------
  379|    210|        return true;
  380|  21.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 18.7k, False: 3.03k]
  ------------------
  381|  18.7k|        return false;
  382|  18.7k|      } else {
  383|  3.03k|        return is_odd;
  384|  3.03k|      }
  385|  22.0k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  30.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  30.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  30.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  30.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  30.4k|  size_t digits = 0;
  413|  30.4k|  bigint bigmant;
  414|  30.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  30.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  30.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.52k, False: 26.9k]
  ------------------
  418|  3.52k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  26.9k|  } else {
  420|  26.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  26.9k|  }
  422|  30.4k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.52k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.52k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.52k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.52k|  adjusted_mantissa answer;
  324|  3.52k|  bool truncated;
  325|  3.52k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.52k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.52k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.52k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.52k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.52k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.52k|    });
  333|  3.52k|  });
  334|       |
  335|  3.52k|  return answer;
  336|  3.52k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.52k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.52k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.52k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.52k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.52k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.52k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 456, False: 3.06k]
  ------------------
  109|    456|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    456|    am.power2++;
  111|    456|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.52k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.52k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.52k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.52k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.52k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.52k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.52k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.52k|    });
  333|  3.52k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.52k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.52k|  const uint64_t mask
  125|  3.52k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.52k]
  ------------------
  126|  3.52k|    ? UINT64_MAX
  127|  3.52k|    : (uint64_t(1) << shift) - 1;
  128|  3.52k|  const uint64_t halfway
  129|  3.52k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.52k]
  ------------------
  130|  3.52k|    ? 0
  131|  3.52k|    : uint64_t(1) << (shift - 1);
  132|  3.52k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.52k|  bool is_above = truncated_bits > halfway;
  134|  3.52k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.52k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.52k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.52k|  } else {
  140|  3.52k|    am.mantissa >>= shift;
  141|  3.52k|  }
  142|  3.52k|  am.power2 += shift;
  143|       |
  144|  3.52k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.52k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.52k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.52k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.52k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 508, False: 3.01k]
  |  Branch (331:27): [True: 2.41k, False: 604]
  |  Branch (331:41): [True: 677, False: 1.73k]
  |  Branch (331:56): [True: 312, False: 2.02k]
  |  Branch (331:66): [True: 60, False: 252]
  ------------------
  332|  3.52k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  26.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  26.9k|  bigint& real_digits = bigmant;
  347|  26.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  26.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  26.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  26.9k|  T b;
  354|  26.9k|  to_float(false, am_b, b);
  355|  26.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  26.9k|  bigint theor_digits(theor.mantissa);
  357|  26.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  26.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  26.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  26.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 26.9k, False: 0]
  ------------------
  363|  26.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  26.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  26.9k|  }
  365|  26.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.40k, False: 24.5k]
  ------------------
  366|  2.40k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.40k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  24.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 24.4k, False: 74]
  ------------------
  368|  24.4k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  24.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  24.4k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  26.9k|  int ord = real_digits.compare(theor_digits);
  373|  26.9k|  adjusted_mantissa answer = am;
  374|  26.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  379|  26.9k|        return true;
  380|  26.9k|      } else if (ord < 0) {
  381|  26.9k|        return false;
  382|  26.9k|      } else {
  383|  26.9k|        return is_odd;
  384|  26.9k|      }
  385|  26.9k|    });
  386|  26.9k|  });
  387|       |
  388|  26.9k|  return answer;
  389|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  26.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 26.8k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 26.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  26.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  26.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  26.9k|  adjusted_mantissa am = to_extended(value);
   84|  26.9k|  am.mantissa <<= 1;
   85|  26.9k|  am.mantissa += 1;
   86|  26.9k|  am.power2 -= 1;
   87|  26.9k|  return am;
   88|  26.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  26.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  26.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  26.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  26.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  26.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  26.9k|  adjusted_mantissa am;
   56|  26.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  26.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  26.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  26.9k|#endif
   63|  26.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 104, False: 26.8k]
  ------------------
   64|       |    // denormal
   65|    104|    am.power2 = 1 - bias;
   66|    104|    am.mantissa = bits & mantissa_mask;
   67|  26.8k|  } else {
   68|       |    // normal
   69|  26.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  26.8k|    am.power2 -= bias;
   71|  26.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  26.8k|  }
   73|       |
   74|  26.9k|  return am;
   75|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  26.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 26.8k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 26.7k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  26.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  379|  26.9k|        return true;
  380|  26.9k|      } else if (ord < 0) {
  381|  26.9k|        return false;
  382|  26.9k|      } else {
  383|  26.9k|        return is_odd;
  384|  26.9k|      }
  385|  26.9k|    });
  386|  26.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  26.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  26.9k|  const uint64_t mask
  125|  26.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 26.9k]
  ------------------
  126|  26.9k|    ? UINT64_MAX
  127|  26.9k|    : (uint64_t(1) << shift) - 1;
  128|  26.9k|  const uint64_t halfway
  129|  26.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 26.9k]
  ------------------
  130|  26.9k|    ? 0
  131|  26.9k|    : uint64_t(1) << (shift - 1);
  132|  26.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  26.9k|  bool is_above = truncated_bits > halfway;
  134|  26.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  26.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 26.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  26.9k|  } else {
  140|  26.9k|    am.mantissa >>= shift;
  141|  26.9k|  }
  142|  26.9k|  am.power2 += shift;
  143|       |
  144|  26.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  26.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  26.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  26.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.9k|      (void)_;  // not needed, since we've done our comparison
  377|  26.9k|      (void)__; // not needed, since we've done our comparison
  378|  26.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.0k, False: 15.9k]
  ------------------
  379|  11.0k|        return true;
  380|  15.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 15.4k, False: 488]
  ------------------
  381|  15.4k|        return false;
  382|  15.4k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  26.9k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.87M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.10M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   367k|  constexpr size_t len() const noexcept {
  238|   367k|    return length;
  239|   367k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   614k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   614k|  return -10;
  469|   614k|#endif
  470|   614k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   575k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   575k|  return 10;
  517|   575k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   505k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   505k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   505k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.47M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.47M|  return 23;
  477|  1.47M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   481k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   481k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   481k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   502k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   204k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   204k|  return -65;
  568|   204k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   203k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   203k|  return 38;
  559|   203k|}
_ZN10fast_float14leading_zeroesEm:
  268|   439k|int leading_zeroes(uint64_t input_num) {
  269|   439k|  assert(input_num > 0);
  270|   439k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   439k|  return __builtin_clzll(input_num);
  285|   439k|#endif
  286|   439k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   559k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   559k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   559k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   559k|  answer.low = uint64_t(r);
  337|   559k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   559k|  return answer;
  342|   559k|}
_ZN10fast_float8value128C2Ev:
  251|   559k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   241k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   241k|  return -127;
  500|   241k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  69.7k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  69.7k|  return -17;
  493|  69.7k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  67.9k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  67.9k|  return 10;
  485|  67.9k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   153k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   153k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 52.9k, False: 100k]
  |  Branch (352:38): [True: 0, False: 100k]
  ------------------
  353|   153k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  22.5k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  22.5k|  return 114;
  575|  22.5k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  89.7k|{
  650|  89.7k|    return sizeof(uint64_t) / sizeof(UC);
  651|  89.7k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  37.0k|{
  644|  37.0k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  37.0k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  37.0k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  71.4k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   196k|  constexpr size_t len() const noexcept {
  238|   196k|    return length;
  239|   196k|  }
_ZNK10fast_float4spanImEixEm:
  241|   107k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   107k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   107k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   107k|    return ptr[index];
  244|   107k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   154k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   154k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   154k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   154k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   154k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   154k|  ::memcpy(&value, &word, sizeof(T));
  615|   154k|#endif
  616|   154k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   154k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   378k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   378k|  return 0xFF;
  507|   378k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   935k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   639k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   320k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    324|  constexpr size_t len() const noexcept {
  238|    324|    return length;
  239|    324|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   319k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   641k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   641k|  return -22;
  461|   641k|#endif
  462|   641k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   634k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   634k|  return 22;
  514|   634k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   534k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   534k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   534k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.49M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.49M|  return 52;
  474|  1.49M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   530k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   530k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   530k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   185k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   185k|  return -342;
  564|   185k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   185k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   185k|  return 308;
  555|   185k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   242k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   242k|  return -1023;
  497|   242k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  56.3k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  56.3k|  return -4;
  489|  56.3k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  31.2k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  31.2k|  return 23;
  481|  31.2k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  30.4k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  30.4k|  return 769;
  572|  30.4k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   138k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   138k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   138k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   138k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   138k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   138k|  ::memcpy(&value, &word, sizeof(T));
  615|   138k|#endif
  616|   138k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   138k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   351k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   351k|  return 0x7FF;
  504|   351k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   458k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   458k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   458k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   458k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   458k|    return from_chars_advanced(first, last, value, options);
  143|   458k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   458k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   458k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   458k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   458k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   458k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 458k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   458k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   458k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 458k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   458k|  answer.ec = std::errc(); // be optimistic
  221|   458k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   458k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 421k, False: 37.2k]
  |  Branch (227:69): [True: 396k, False: 25.5k]
  |  Branch (227:131): [True: 353k, False: 42.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   353k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 353k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   353k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 330k, False: 22.9k]
  ------------------
  239|   330k|        value = T(pns.mantissa);
  240|   330k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.17k, False: 323k]
  ------------------
  241|   323k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   330k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 330k]
  ------------------
  243|   330k|        return answer;
  244|   330k|      }
  245|   353k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   353k|  }
  262|   128k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   128k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 75.3k, False: 53.1k]
  |  Branch (263:29): [True: 75.3k, False: 0]
  ------------------
  264|  75.3k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 22.5k, False: 52.8k]
  ------------------
  265|  22.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  22.5k|    }
  267|  75.3k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   128k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 22.5k, False: 105k]
  ------------------
  271|   128k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   128k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 125k, False: 3.17k]
  |  Branch (273:29): [True: 14.0k, False: 111k]
  |  Branch (273:49): [True: 716, False: 13.3k]
  |  Branch (273:68): [True: 4.13k, False: 123k]
  ------------------
  274|  4.85k|    answer.ec = std::errc::result_out_of_range;
  275|  4.85k|  }
  276|   128k|  return answer;
  277|   458k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.03M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.03M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.03M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.03M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.03M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.03M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   155k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   155k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   155k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   155k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   155k|    return from_chars_advanced(first, last, value, options);
  143|   155k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   155k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   155k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   155k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   155k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   155k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 155k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   155k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   155k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 155k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   155k|  answer.ec = std::errc(); // be optimistic
  221|   155k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   155k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 154k, False: 930]
  |  Branch (227:69): [True: 151k, False: 2.48k]
  |  Branch (227:131): [True: 151k, False: 72]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   151k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 151k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   151k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 151k, False: 338]
  ------------------
  239|   151k|        value = T(pns.mantissa);
  240|   151k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 358, False: 151k]
  ------------------
  241|   151k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   151k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 151k]
  ------------------
  243|   151k|        return answer;
  244|   151k|      }
  245|   151k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   151k|  }
  262|  3.82k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.82k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 126, False: 3.69k]
  |  Branch (263:29): [True: 126, False: 0]
  ------------------
  264|    126|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 126]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    126|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.82k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.82k]
  ------------------
  271|  3.82k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.82k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 3.48k, False: 340]
  |  Branch (273:29): [True: 2.62k, False: 858]
  |  Branch (273:49): [True: 610, False: 2.01k]
  |  Branch (273:68): [True: 2.01k, False: 1.19k]
  ------------------
  274|  2.62k|    answer.ec = std::errc::result_out_of_range;
  275|  2.62k|  }
  276|  3.82k|  return answer;
  277|   155k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   476k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   476k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   476k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   476k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   476k|    return from_chars_advanced(first, last, value, options);
  143|   476k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   476k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   476k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   476k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   476k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   476k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 476k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   476k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   476k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 476k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   476k|  answer.ec = std::errc(); // be optimistic
  221|   476k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   476k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 471k, False: 5.30k]
  |  Branch (227:69): [True: 446k, False: 24.7k]
  |  Branch (227:131): [True: 373k, False: 72.9k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   373k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 373k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   373k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 369k, False: 4.37k]
  ------------------
  239|   369k|        value = T(pns.mantissa);
  240|   369k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 19.4k, False: 349k]
  ------------------
  241|   349k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   369k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 369k]
  ------------------
  243|   369k|        return answer;
  244|   369k|      }
  245|   373k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   373k|  }
  262|   107k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   107k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 77.5k, False: 29.8k]
  |  Branch (263:29): [True: 77.5k, False: 0]
  ------------------
  264|  77.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 30.4k, False: 47.0k]
  ------------------
  265|  30.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  30.4k|    }
  267|  77.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   107k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 30.4k, False: 76.9k]
  ------------------
  271|   107k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   107k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 104k, False: 2.91k]
  |  Branch (273:29): [True: 9.02k, False: 95.4k]
  |  Branch (273:49): [True: 166, False: 8.85k]
  |  Branch (273:68): [True: 2.06k, False: 105k]
  ------------------
  274|  2.22k|    answer.ec = std::errc::result_out_of_range;
  275|  2.22k|  }
  276|   107k|  return answer;
  277|   476k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   164k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   164k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   164k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   164k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   164k|    return from_chars_advanced(first, last, value, options);
  143|   164k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   164k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   164k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   164k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   164k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   164k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 164k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   164k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   164k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 164k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   164k|  answer.ec = std::errc(); // be optimistic
  221|   164k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   164k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 163k, False: 1.08k]
  |  Branch (227:69): [True: 160k, False: 2.53k]
  |  Branch (227:131): [True: 160k, False: 126]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   160k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 160k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   160k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 160k, False: 72]
  ------------------
  239|   160k|        value = T(pns.mantissa);
  240|   160k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 486, False: 160k]
  ------------------
  241|   160k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   160k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 160k]
  ------------------
  243|   160k|        return answer;
  244|   160k|      }
  245|   160k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   160k|  }
  262|  3.80k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.80k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 126, False: 3.68k]
  |  Branch (263:29): [True: 126, False: 0]
  ------------------
  264|    126|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 126]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    126|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.80k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.80k]
  ------------------
  271|  3.80k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.80k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 3.46k, False: 340]
  |  Branch (273:29): [True: 1.32k, False: 2.14k]
  |  Branch (273:49): [True: 124, False: 1.19k]
  |  Branch (273:68): [True: 1.19k, False: 2.48k]
  ------------------
  274|  1.32k|    answer.ec = std::errc::result_out_of_range;
  275|  1.32k|  }
  276|  3.80k|  return answer;
  277|   164k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.01M|{
 3807|  3.01M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.01M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.01M|    }
 3810|  3.01M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.01M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.01M|    }
 3813|  3.01M|    else {
 3814|       |        // utf-32
 3815|  3.01M|        static_assert(sizeof(U) == 4);
 3816|  3.01M|        SCN_UNUSED(ch);
 3817|  3.01M|        return 1;
 3818|  3.01M|    }
 3819|  3.01M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.01M|{
 3771|  3.01M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.01M|    SCN_GCC_COMPAT_PUSH
 3774|  3.01M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.01M|    constexpr char lengths[] =
 3776|  3.01M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.01M|        "\1\1\1\1\1\1\1\1"
 3778|  3.01M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.01M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.01M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.01M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.01M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.01M|    SCN_GCC_COMPAT_POP
 3785|  3.01M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.73M|{
 4013|  2.73M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.73M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.73M|    }
 4016|  2.73M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.73M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.73M|    }
 4019|  2.73M|    else {
 4020|  2.73M|        SCN_EXPECT(input.size() == 1);
 4021|  2.73M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.73M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.73M|            return invalid_code_point;
 4024|  2.73M|        }
 4025|  2.73M|        return cp;
 4026|  2.73M|    }
 4027|  2.73M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.73M|{
 3826|  2.73M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.73M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.73M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.73M|    };
 3831|       |
 3832|  2.73M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.67M, False: 61.5k]
  ------------------
 3833|  2.67M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 696, False: 2.66M]
  ------------------
 3834|    696|            SCN_UNLIKELY_ATTR
 3835|    696|            return invalid_code_point;
 3836|    696|        }
 3837|  2.66M|        return static_cast<char32_t>(input[0]);
 3838|  2.67M|    }
 3839|       |
 3840|  61.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 55.9k, False: 5.64k]
  ------------------
 3841|  55.9k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 140, False: 55.8k]
  ------------------
 3842|    140|            SCN_UNLIKELY_ATTR
 3843|    140|            return invalid_code_point;
 3844|    140|        }
 3845|  55.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 5.00k, False: 50.8k]
  ------------------
 3846|  5.00k|            SCN_UNLIKELY_ATTR
 3847|  5.00k|            return invalid_code_point;
 3848|  5.00k|        }
 3849|       |
 3850|  50.8k|        char32_t cp{};
 3851|  50.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  50.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  50.8k|        return cp;
 3854|  55.8k|    }
 3855|       |
 3856|  5.64k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.16k, False: 2.48k]
  ------------------
 3857|  3.16k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.04k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.04k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.04k, False: 2.00k]
  ------------------
 3862|  3.04k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 597, False: 1.40k]
  ------------------
 3863|  1.64k|            SCN_UNLIKELY_ATTR
 3864|  1.64k|            return invalid_code_point;
 3865|  1.64k|        }
 3866|       |
 3867|  1.40k|        char32_t cp{};
 3868|  1.40k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.40k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.40k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.40k|        return cp;
 3872|  3.04k|    }
 3873|       |
 3874|  2.48k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.48k, False: 0]
  ------------------
 3875|  2.48k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.48k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.48k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 486, False: 2.00k]
  ------------------
 3880|    486|            SCN_UNLIKELY_ATTR
 3881|    486|            return invalid_code_point;
 3882|    486|        }
 3883|  2.00k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 584, False: 1.41k]
  ------------------
 3884|  2.00k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 559, False: 858]
  ------------------
 3885|  2.00k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 542, False: 316]
  ------------------
 3886|  1.68k|            SCN_UNLIKELY_ATTR
 3887|  1.68k|            return invalid_code_point;
 3888|  1.68k|        }
 3889|       |
 3890|    316|        char32_t cp{};
 3891|    316|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    316|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    316|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    316|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    316|        return cp;
 3896|  2.00k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  65.1k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  65.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  65.1k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.60M|{
 3699|  4.60M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.60M|                                          decltype(first), decltype(last)> &&
 3701|  4.60M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.60M|        return {first, last};
 3703|  4.60M|    }
 3704|  4.60M|    else {
 3705|  4.60M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.60M|                                       to_address(first), to_address(last)))};
 3707|  4.60M|    }
 3708|  4.60M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.0M|{
  326|  14.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  16.0M|{
  304|  16.0M|    return p;
  305|  16.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.33M|{
 3730|  7.33M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.33M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.33M|                      decltype(it)> &&
 3733|  7.33M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.33M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.33M|        return it;
 3736|  7.33M|    }
 3737|  7.33M|    else {
 3738|  7.33M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.33M|    }
 3740|  7.33M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  85.5k|    {
 2724|  85.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  85.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  85.5k|    {
 2705|  85.5k|        return decay_copy(t.begin());
 2706|  85.5k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  10.6M|{
 1949|  10.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.01M|    {
 2781|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.01M|    {
 2763|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.01M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   146k|{
 8867|   146k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   146k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   146k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   631k|{
 5396|   631k|    detail::check_scan_arg_types<Args...>();
 5397|   631k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   631k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.00M|{
 5135|  1.00M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.00M|                  "Scan argument types must be default constructible");
 5137|  1.00M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.00M|                  "Scan argument types must be Destructible");
 5139|  1.00M|    static_assert(
 5140|  1.00M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.00M|        "Scan argument types must not be references");
 5142|  1.00M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   631k|    {
 5349|   631k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   631k|    {
 5360|   631k|        return {detail::make_arg<
 5361|   631k|            kind, Context,
 5362|   631k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   631k|                                 typename Context::char_type>::value>(args)...};
 5364|   631k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   631k|{
 5170|   631k|    return make_value<Context>(value).ref_value;
 5171|   631k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   697k|{
 5120|   697k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   697k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   697k|                                  needs_context_tag>) {
 5124|   697k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   697k|    }
 5126|   697k|    else {
 5127|   697k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   697k|            value, context_tag<Context>{}));
 5129|   697k|    }
 5130|   697k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   697k|    {                                                                        \
 4959|   697k|        return val;                                                          \
 4960|   697k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.00M|{
 5089|  1.00M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.00M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.00M|    constexpr bool scannable_char =
 5093|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.00M|    static_assert(scannable_char,
 5095|  1.00M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.00M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.00M|    constexpr bool scannable_const =
 5099|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.00M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.00M|    constexpr bool scannable_disabled =
 5103|  1.00M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.00M|    static_assert(scannable_disabled,
 5105|  1.00M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.00M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.00M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.00M|    static_assert(
 5110|  1.00M|        scannable,
 5111|  1.00M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.00M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.00M|    return arg_value{arg};
 5115|  1.00M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  1.00M|    {
 4902|  1.00M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   453k|{
 8654|   453k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   453k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   453k|{
 8591|   453k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   453k|    auto result = vscan_impl(buffer, format, args);
 8594|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 414k]
  |  |  ------------------
  ------------------
 8595|  38.5k|        return unexpected(result.error());
 8596|  38.5k|    }
 8597|   414k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   453k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.00M|{
 4720|  1.00M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.00M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.00M|                  "\n"
 4724|  1.00M|                  "Unsupported range type given as input to a scanning "
 4725|  1.00M|                  "function.\n"
 4726|  1.00M|                  "A range needs to have a character type (value type) "
 4727|  1.00M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.00M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.00M|                  "to be included.\n"
 4730|  1.00M|                  "See the scnlib documentation for more details.");
 4731|  1.00M|    static_assert(
 4732|  1.00M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.00M|        "\n"
 4734|  1.00M|        "Unsupported range type given as input to a scanning "
 4735|  1.00M|        "function.\n"
 4736|  1.00M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.00M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.00M|        "not supported.");
 4739|  1.00M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.00M|                  "\n"
 4741|  1.00M|                  "Unsupported range type given as input to a scanning "
 4742|  1.00M|                  "function.\n"
 4743|  1.00M|                  "file_marker_found cannot be used as an "
 4744|  1.00M|                  "source range type to scn::scan.\n"
 4745|  1.00M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.00M|                  "and do not provide an explicit source range, "
 4747|  1.00M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.00M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.00M|                  "\n"
 4750|  1.00M|                  "Unsupported range type given as input to a scanning "
 4751|  1.00M|                  "function.\n"
 4752|  1.00M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.00M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.00M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.00M|                  "\n"
 4756|  1.00M|                  "Unsupported range type given as input to a scanning "
 4757|  1.00M|                  "function.\n"
 4758|  1.00M|                  "A range needs to model forward_range and have a valid "
 4759|  1.00M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.00M|                  "Examples of scannable ranges are std::string, "
 4761|  1.00M|                  "std::string_view, "
 4762|  1.00M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.00M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.00M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.00M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.00M|{
 4659|  1.00M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.00M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.00M|    }
 4662|  1.00M|    else {
 4663|  1.00M|        return invalid_char_type{};
 4664|  1.00M|    }
 4665|  1.00M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.00M|    {
 2855|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.00M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.00M|    {
 2836|  1.00M|        return t.data();
 2837|  1.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.00M|    {
 3231|  1.00M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 13.9k, False: 991k]
  ------------------
 3232|  1.00M|                   ? nullptr
 3233|  1.00M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.00M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.00M|    {
 3005|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.00M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.00M|    {
 2978|  1.00M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  5.50M|    {
 3339|  5.50M|        return m_iterator == m_sentinel;
 3340|  5.50M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.99M|    {
 3185|  1.99M|        return static_cast<const D&>(*this);
 3186|  1.99M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.91M|    {
 2724|  1.91M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.91M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.91M|    {
 2705|  1.91M|        return decay_copy(t.begin());
 2706|  1.91M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  24.2M|    {
 3330|  24.2M|        return m_iterator;
 3331|  24.2M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.00M|    {
 2930|  1.00M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.00M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.00M|    {
 2896|  1.00M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.00M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.06M|{
 1949|  4.06M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.06M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  5.54M|    {
 3346|  5.54M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  5.54M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.1M|    {
 1598|  10.1M|        return has_value();
 1599|  10.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  20.0M|    {
  485|  20.0M|        return m_has_value;
  486|  20.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   757k|    {
 1604|   757k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   757k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   757k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   757k|        return this->get_unexpected().error();
 1606|   757k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   757k|    {
  468|   757k|        return m_unexpected;
  469|   757k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.85M|    {
  361|  5.85M|        return m_unexpected;
  362|  5.85M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.86M|    {
  347|  2.86M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.86M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  83.4k|    {
 1476|  83.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  83.4k|    {
  447|  83.4k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.28M|    {
  356|  6.28M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00M|    {
 1177|  1.00M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   922k|{
 5923|   922k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   922k|                      ranges::iterator_t<SourceRange>>) {
 5925|   922k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   922k|    }
 5927|   922k|    else {
 5928|   922k|        auto it = ranges::begin(source);
 5929|   922k|        while (n > 0) {
 5930|   922k|            --n;
 5931|   922k|            ++it;
 5932|   922k|        }
 5933|   922k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   922k|    }
 5935|   922k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.68M|    {
 2724|  5.68M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.68M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.68M|    {
 2705|  5.68M|        return decay_copy(t.begin());
 2706|  5.68M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   922k|{
 5910|   922k|    return ranges::end(source);
 5911|   922k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   922k|    {
 2781|   922k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   922k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   922k|    {
 2763|   922k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   922k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  11.8M|    {
 3334|  11.8M|        return m_sentinel;
 3335|  11.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.96M|    {
 1653|  3.96M|        return value();
 1654|  3.96M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  9.15M|    {
 1627|  9.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.15M|        return this->get_value();
 1629|  9.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.15M|    {
  451|  9.15M|        return m_value;
  452|  9.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   922k|    {
 1430|   922k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   922k|    {
  437|   922k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   293k|    {
 7975|   293k|        return m_str;
 7976|   293k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   631k|    {
 5426|   631k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   631k|    {
 5379|   631k|        return m_argptrs;
 5380|   631k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  1.94M|    {
 5478|  1.94M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   293k|{
 8820|   293k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 268k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   268k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   293k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.00M|    {
 1598|  1.00M|        return has_value();
 1599|  1.00M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.01M|    {
  485|  2.01M|        return m_has_value;
  486|  2.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  83.4k|    {
 1604|  83.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  83.4k|        return this->get_unexpected().error();
 1606|  83.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  83.4k|    {
  468|  83.4k|        return m_unexpected;
  469|  83.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   325k|    {
 1177|   325k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   829k|    {
 1653|   829k|        return value();
 1654|   829k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   922k|    {
 1627|   922k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   922k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   922k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   922k|        return this->get_value();
 1629|   922k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   922k|    {
  451|   922k|        return m_value;
  452|   922k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   297k|    {
 5830|   297k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   922k|    {
 5681|   922k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   835k|    {
 5616|   835k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   297k|    {
 1430|   297k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   297k|    {
  437|   297k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   631k|    {
 5374|   631k|        return m_args;
 5375|   631k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  9.44M|    {
 3316|  9.44M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  1.94M|{
 7691|  1.94M|    return s;
 7692|  1.94M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  1.94M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   293k|    {
 7971|   293k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   325k|    {
 1598|   325k|        return has_value();
 1599|   325k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   623k|    {
  485|   623k|        return m_has_value;
  486|   623k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   297k|    {
 1673|   297k|        return &value();
 1674|   297k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   297k|    {
 1627|   297k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   297k|        return this->get_value();
 1629|   297k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   297k|    {
  451|   297k|        return m_value;
  452|   297k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   922k|    {
 5698|   922k|        return ranges::begin(m_range);
 5699|   922k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   146k|{
 8934|   146k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   146k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   146k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   146k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   453k|{
 8672|   453k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   453k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   453k|{
 8607|   453k|#if !SCN_DISABLE_LOCALE
 8608|   453k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   453k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   453k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   453k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 414k]
  |  |  ------------------
  ------------------
 8615|  38.5k|        return unexpected(result.error());
 8616|  38.5k|    }
 8617|   414k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   453k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  31.8k|{
 8973|  31.8k|    T value;
 8974|  31.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  31.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  31.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  31.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  29.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  31.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  66.6k|{
 5155|  66.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  66.6k|    basic_scan_arg<Context> arg;
 5158|  66.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  66.6k|    arg.m_value = make_value<Context>(value);
 5160|  66.6k|    return arg;
 5161|  66.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.15M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.09M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  99.0k|{
 8685|  99.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  99.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  99.0k|{
 8631|  99.0k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  99.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  99.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  99.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.41k, False: 92.6k]
  |  |  ------------------
  ------------------
 8635|  6.41k|        return unexpected(result.error());
 8636|  6.41k|    }
 8637|  92.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  99.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  92.6k|    {
 1663|  92.6k|        return std::move(value());
 1664|  92.6k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   152k|{
 8867|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   152k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   152k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   655k|{
 5396|   655k|    detail::check_scan_arg_types<Args...>();
 5397|   655k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   655k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.03M|{
 5135|  1.03M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.03M|                  "Scan argument types must be default constructible");
 5137|  1.03M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.03M|                  "Scan argument types must be Destructible");
 5139|  1.03M|    static_assert(
 5140|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.03M|        "Scan argument types must not be references");
 5142|  1.03M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   655k|    {
 5349|   655k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   655k|    {
 5360|   655k|        return {detail::make_arg<
 5361|   655k|            kind, Context,
 5362|   655k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   655k|                                 typename Context::char_type>::value>(args)...};
 5364|   655k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   655k|{
 5170|   655k|    return make_value<Context>(value).ref_value;
 5171|   655k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   725k|{
 5120|   725k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   725k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   725k|                                  needs_context_tag>) {
 5124|   725k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   725k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   725k|    }
 5126|   725k|    else {
 5127|   725k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   725k|            value, context_tag<Context>{}));
 5129|   725k|    }
 5130|   725k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   725k|    {                                                                        \
 4959|   725k|        return val;                                                          \
 4960|   725k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.03M|{
 5089|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.03M|    constexpr bool scannable_char =
 5093|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.03M|    static_assert(scannable_char,
 5095|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.03M|    constexpr bool scannable_const =
 5099|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.03M|    constexpr bool scannable_disabled =
 5103|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.03M|    static_assert(scannable_disabled,
 5105|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.03M|    static_assert(
 5110|  1.03M|        scannable,
 5111|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.03M|    return arg_value{arg};
 5115|  1.03M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.03M|    {
 4902|  1.03M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   304k|    {
 7975|   304k|        return m_str;
 7976|   304k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   655k|    {
 5426|   655k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   655k|    {
 5379|   655k|        return m_argptrs;
 5380|   655k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   304k|{
 8820|   304k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 278k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   278k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   304k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   337k|    {
 1177|   337k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   310k|    {
 5830|   310k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   872k|    {
 5616|   872k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   310k|    {
 1430|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   310k|    {
  437|   310k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   655k|    {
 5374|   655k|        return m_args;
 5375|   655k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   304k|    {
 7971|   304k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   337k|    {
 1598|   337k|        return has_value();
 1599|   337k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   647k|    {
  485|   647k|        return m_has_value;
  486|   647k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   310k|    {
 1673|   310k|        return &value();
 1674|   310k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   310k|    {
 1627|   310k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   310k|        return this->get_value();
 1629|   310k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   310k|    {
  451|   310k|        return m_value;
  452|   310k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   152k|{
 8934|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   152k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   152k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  33.3k|{
 8973|  33.3k|    T value;
 8974|  33.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  31.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.1k|    static_cast<    \
  |  |  929|  31.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.1k|    static_cast<    \
  |  |  929|  31.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  69.7k|{
 5155|  69.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  69.7k|    basic_scan_arg<Context> arg;
 5158|  69.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  69.7k|    arg.m_value = make_value<Context>(value);
 5160|  69.7k|    return arg;
 5161|  69.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   154k|{
 8867|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   154k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   154k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   662k|{
 5396|   662k|    detail::check_scan_arg_types<Args...>();
 5397|   662k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   662k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.05M|{
 5135|  1.05M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.05M|                  "Scan argument types must be default constructible");
 5137|  1.05M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.05M|                  "Scan argument types must be Destructible");
 5139|  1.05M|    static_assert(
 5140|  1.05M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.05M|        "Scan argument types must not be references");
 5142|  1.05M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   662k|    {
 5349|   662k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   662k|    {
 5360|   662k|        return {detail::make_arg<
 5361|   662k|            kind, Context,
 5362|   662k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   662k|                                 typename Context::char_type>::value>(args)...};
 5364|   662k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   662k|{
 5170|   662k|    return make_value<Context>(value).ref_value;
 5171|   662k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   733k|{
 5120|   733k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   733k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   733k|                                  needs_context_tag>) {
 5124|   733k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   733k|    }
 5126|   733k|    else {
 5127|   733k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   733k|            value, context_tag<Context>{}));
 5129|   733k|    }
 5130|   733k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   733k|    {                                                                        \
 4959|   733k|        return val;                                                          \
 4960|   733k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.05M|{
 5089|  1.05M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.05M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.05M|    constexpr bool scannable_char =
 5093|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.05M|    static_assert(scannable_char,
 5095|  1.05M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.05M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.05M|    constexpr bool scannable_const =
 5099|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.05M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.05M|    constexpr bool scannable_disabled =
 5103|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.05M|    static_assert(scannable_disabled,
 5105|  1.05M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.05M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.05M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.05M|    static_assert(
 5110|  1.05M|        scannable,
 5111|  1.05M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.05M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.05M|    return arg_value{arg};
 5115|  1.05M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.05M|    {
 4902|  1.05M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   308k|    {
 7975|   308k|        return m_str;
 7976|   308k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   662k|    {
 5426|   662k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   662k|    {
 5379|   662k|        return m_argptrs;
 5380|   662k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   308k|{
 8820|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 282k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   282k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   308k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   342k|    {
 1177|   342k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   314k|    {
 5830|   314k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   886k|    {
 5616|   886k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   314k|    {
 1430|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   314k|    {
  437|   314k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   662k|    {
 5374|   662k|        return m_args;
 5375|   662k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   308k|    {
 7971|   308k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   342k|    {
 1598|   342k|        return has_value();
 1599|   342k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   656k|    {
  485|   656k|        return m_has_value;
  486|   656k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   314k|    {
 1673|   314k|        return &value();
 1674|   314k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   314k|    {
 1627|   314k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   314k|        return this->get_value();
 1629|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   314k|    {
  451|   314k|        return m_value;
  452|   314k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   154k|{
 8934|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   154k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   154k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  33.8k|{
 8973|  33.8k|    T value;
 8974|  33.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 31.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  31.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.7k|    static_cast<    \
  |  |  929|  31.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.7k|    static_cast<    \
  |  |  929|  31.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  70.7k|{
 5155|  70.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  70.7k|    basic_scan_arg<Context> arg;
 5158|  70.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  70.7k|    arg.m_value = make_value<Context>(value);
 5160|  70.7k|    return arg;
 5161|  70.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  83.4k|    {
 2724|  83.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  83.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  83.4k|    {
 2705|  83.4k|        return decay_copy(t.begin());
 2706|  83.4k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  48.9M|{
 1949|  48.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.30M|    {
 2781|  2.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.30M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.30M|    {
 2763|  2.30M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.30M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   168k|{
 8867|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   168k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   168k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   521k|{
 8654|   521k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   521k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   521k|{
 8591|   521k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   521k|    auto result = vscan_impl(buffer, format, args);
 8594|   521k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 482k]
  |  |  ------------------
  ------------------
 8595|  38.5k|        return unexpected(result.error());
 8596|  38.5k|    }
 8597|   482k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   521k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.15M|{
 4720|  1.15M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.15M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.15M|                  "\n"
 4724|  1.15M|                  "Unsupported range type given as input to a scanning "
 4725|  1.15M|                  "function.\n"
 4726|  1.15M|                  "A range needs to have a character type (value type) "
 4727|  1.15M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.15M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.15M|                  "to be included.\n"
 4730|  1.15M|                  "See the scnlib documentation for more details.");
 4731|  1.15M|    static_assert(
 4732|  1.15M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.15M|        "\n"
 4734|  1.15M|        "Unsupported range type given as input to a scanning "
 4735|  1.15M|        "function.\n"
 4736|  1.15M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.15M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.15M|        "not supported.");
 4739|  1.15M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.15M|                  "\n"
 4741|  1.15M|                  "Unsupported range type given as input to a scanning "
 4742|  1.15M|                  "function.\n"
 4743|  1.15M|                  "file_marker_found cannot be used as an "
 4744|  1.15M|                  "source range type to scn::scan.\n"
 4745|  1.15M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.15M|                  "and do not provide an explicit source range, "
 4747|  1.15M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.15M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.15M|                  "\n"
 4750|  1.15M|                  "Unsupported range type given as input to a scanning "
 4751|  1.15M|                  "function.\n"
 4752|  1.15M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.15M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.15M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.15M|                  "\n"
 4756|  1.15M|                  "Unsupported range type given as input to a scanning "
 4757|  1.15M|                  "function.\n"
 4758|  1.15M|                  "A range needs to model forward_range and have a valid "
 4759|  1.15M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.15M|                  "Examples of scannable ranges are std::string, "
 4761|  1.15M|                  "std::string_view, "
 4762|  1.15M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.15M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.15M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.15M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.15M|{
 4690|  1.15M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.15M|        return file_marker_found{};
 4692|  1.15M|    }
 4693|  1.15M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.15M|        if constexpr (ranges::range<Range>) {
 4695|  1.15M|            return insufficient_range{};
 4696|  1.15M|        }
 4697|  1.15M|        else {
 4698|  1.15M|            return invalid_input_range{};
 4699|  1.15M|        }
 4700|  1.15M|    }
 4701|  1.15M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.15M|        return invalid_char_type{};
 4703|  1.15M|    }
 4704|  1.15M|    else {
 4705|  1.15M|        return make_forward_scan_buffer(r);
 4706|  1.15M|    }
 4707|  1.15M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.15M|{
 4524|  1.15M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.15M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.15M|    {
 4411|  1.15M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.15M|    {
 4382|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.15M|    {
 4151|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.15M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.21M|    {
 2724|  2.21M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.21M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.21M|    {
 2705|  2.21M|        return decay_copy(t.begin());
 2706|  2.21M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.28M|    {
 3330|  3.28M|        return m_iterator;
 3331|  3.28M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  14.2M|    {
 4415|  14.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 280k, False: 13.9M]
  ------------------
 4416|   280k|            return false;
 4417|   280k|        }
 4418|  13.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  13.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  13.9M|        }
 4421|  13.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 12.8M, False: 1.13M]
  ------------------
 4422|  12.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  12.8M|                                          this->m_current_view.begin(),
 4424|  12.8M|                                          this->m_current_view.end());
 4425|  12.8M|        }
 4426|  13.9M|        m_latest = *m_cursor;
 4427|  13.9M|        ++m_cursor;
 4428|  13.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  13.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  13.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  13.9M|        }
 4432|  13.9M|        return true;
 4433|  13.9M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  42.2M|    {
 2781|  42.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  42.2M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  42.2M|    {
 2763|  42.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  42.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  43.2M|    {
 3334|  43.2M|        return m_sentinel;
 3335|  43.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.15M|    {
 4071|  1.15M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  83.4k|    {
 1476|  83.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  83.4k|    {
  447|  83.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.06M|{
 5923|  1.06M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.06M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.06M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.06M|    }
 5927|  1.06M|    else {
 5928|  1.06M|        auto it = ranges::begin(source);
 5929|  1.06M|        while (n > 0) {
 5930|  1.06M|            --n;
 5931|  1.06M|            ++it;
 5932|  1.06M|        }
 5933|  1.06M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.06M|    }
 5935|  1.06M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.06M|    {
 2724|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.06M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.06M|    {
 2705|  1.06M|        return decay_copy(t.begin());
 2706|  1.06M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.06M|{
 5910|  1.06M|    return ranges::end(source);
 5911|  1.06M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.06M|    {
 2781|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.06M|    {
 2763|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.06M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.06M|    {
  437|  1.06M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   337k|    {
 7975|   337k|        return m_str;
 7976|   337k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   337k|{
 8820|   337k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 311k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   311k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   337k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.15M|    {
 1598|  1.15M|        return has_value();
 1599|  1.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.30M|    {
  485|  2.30M|        return m_has_value;
  486|  2.30M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  83.4k|    {
 1604|  83.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  83.4k|        return this->get_unexpected().error();
 1606|  83.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  83.4k|    {
  468|  83.4k|        return m_unexpected;
  469|  83.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   372k|    {
 1177|   372k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   965k|    {
 1653|   965k|        return value();
 1654|   965k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.06M|    {
 1627|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06M|        return this->get_value();
 1629|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.06M|    {
  451|  1.06M|        return m_value;
  452|  1.06M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   344k|    {
 5830|   344k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.06M|    {
 5681|  1.06M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   344k|    {
 1430|   344k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   344k|    {
  437|   344k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.21M|    {
 3316|  2.21M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   337k|    {
 7971|   337k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   372k|    {
 1598|   372k|        return has_value();
 1599|   372k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   716k|    {
  485|   716k|        return m_has_value;
  486|   716k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   344k|    {
 1673|   344k|        return &value();
 1674|   344k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   344k|    {
 1627|   344k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   344k|        return this->get_value();
 1629|   344k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   344k|    {
  451|   344k|        return m_value;
  452|   344k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.06M|    {
 5698|  1.06M|        return ranges::begin(m_range);
 5699|  1.06M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   168k|{
 8934|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   168k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   168k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   521k|{
 8672|   521k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   521k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   521k|{
 8607|   521k|#if !SCN_DISABLE_LOCALE
 8608|   521k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   521k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   521k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   521k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   521k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 482k]
  |  |  ------------------
  ------------------
 8615|  38.5k|        return unexpected(result.error());
 8616|  38.5k|    }
 8617|   482k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   521k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  34.8k|{
 8973|  34.8k|    T value;
 8974|  34.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  34.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  34.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   108k|{
 8685|   108k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   108k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   108k|{
 8631|   108k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   108k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   108k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.41k, False: 101k]
  |  |  ------------------
  ------------------
 8635|  6.41k|        return unexpected(result.error());
 8636|  6.41k|    }
 8637|   101k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   108k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   101k|    {
 1663|   101k|        return std::move(value());
 1664|   101k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   175k|{
 8867|   175k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   175k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   175k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   175k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   351k|    {
 7975|   351k|        return m_str;
 7976|   351k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   351k|{
 8820|   351k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 325k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   325k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   351k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   387k|    {
 1177|   387k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   359k|    {
 5830|   359k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   359k|    {
 1430|   359k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   359k|    {
  437|   359k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   351k|    {
 7971|   351k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   387k|    {
 1598|   387k|        return has_value();
 1599|   387k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   747k|    {
  485|   747k|        return m_has_value;
  486|   747k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   359k|    {
 1673|   359k|        return &value();
 1674|   359k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   359k|    {
 1627|   359k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   359k|        return this->get_value();
 1629|   359k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   359k|    {
  451|   359k|        return m_value;
  452|   359k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   175k|{
 8934|   175k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   175k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   175k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   175k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  36.4k|{
 8973|  36.4k|    T value;
 8974|  36.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.3k|    static_cast<    \
  |  |  929|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.3k|    static_cast<    \
  |  |  929|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   177k|{
 8867|   177k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   177k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   177k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   177k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   354k|    {
 7975|   354k|        return m_str;
 7976|   354k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   354k|{
 8820|   354k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 328k]
  |  |  ------------------
  ------------------
 8821|  25.6k|        return unexpected(result.error());
 8822|  25.6k|    }
 8823|   328k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   328k|    static_cast<    \
  |  |  929|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   328k|    static_cast<    \
  |  |  929|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   354k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.8k|    {
 1476|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.8k|    {
  447|  27.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   391k|    {
 1177|   391k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   363k|    {
 5830|   363k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   363k|    {
 1430|   363k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   363k|    {
  437|   363k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   354k|    {
 7971|   354k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   391k|    {
 1598|   391k|        return has_value();
 1599|   391k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   755k|    {
  485|   755k|        return m_has_value;
  486|   755k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   363k|    {
 1673|   363k|        return &value();
 1674|   363k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   363k|    {
 1627|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   363k|        return this->get_value();
 1629|   363k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   363k|    {
  451|   363k|        return m_value;
  452|   363k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   177k|{
 8934|   177k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   177k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   177k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   177k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  36.8k|{
 8973|  36.8k|    T value;
 8974|  36.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|  36.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   171k|    {
 2724|   171k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   171k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   171k|    {
 2705|   171k|        return decay_copy(t.begin());
 2706|   171k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.05M|{
 1949|  3.05M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.05M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   942k|    {
 2781|   942k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   942k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   942k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   942k|    {
 2763|   942k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   942k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   942k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   278k|{
 5396|   278k|    detail::check_scan_arg_types<Args...>();
 5397|   278k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   278k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   278k|    {
 5349|   278k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   278k|    {
 5360|   278k|        return {detail::make_arg<
 5361|   278k|            kind, Context,
 5362|   278k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   278k|                                 typename Context::char_type>::value>(args)...};
 5364|   278k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   278k|{
 5170|   278k|    return make_value<Context>(value).ref_value;
 5171|   278k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   303k|{
 5120|   303k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   303k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   303k|                                  needs_context_tag>) {
 5124|   303k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   303k|    }
 5126|   303k|    else {
 5127|   303k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   303k|            value, context_tag<Context>{}));
 5129|   303k|    }
 5130|   303k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   303k|    {                                                                        \
 4959|   303k|        return val;                                                          \
 4960|   303k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   214k|{
 8591|   214k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   214k|    auto result = vscan_impl(buffer, format, args);
 8594|   214k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.0k, False: 137k]
  |  |  ------------------
  ------------------
 8595|  77.0k|        return unexpected(result.error());
 8596|  77.0k|    }
 8597|   137k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   214k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   469k|{
 4720|   469k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   469k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   469k|                  "\n"
 4724|   469k|                  "Unsupported range type given as input to a scanning "
 4725|   469k|                  "function.\n"
 4726|   469k|                  "A range needs to have a character type (value type) "
 4727|   469k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   469k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   469k|                  "to be included.\n"
 4730|   469k|                  "See the scnlib documentation for more details.");
 4731|   469k|    static_assert(
 4732|   469k|        !std::is_same_v<T, custom_char_traits>,
 4733|   469k|        "\n"
 4734|   469k|        "Unsupported range type given as input to a scanning "
 4735|   469k|        "function.\n"
 4736|   469k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   469k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   469k|        "not supported.");
 4739|   469k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   469k|                  "\n"
 4741|   469k|                  "Unsupported range type given as input to a scanning "
 4742|   469k|                  "function.\n"
 4743|   469k|                  "file_marker_found cannot be used as an "
 4744|   469k|                  "source range type to scn::scan.\n"
 4745|   469k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   469k|                  "and do not provide an explicit source range, "
 4747|   469k|                  "or use scn::scan with a FILE* directly.");
 4748|   469k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   469k|                  "\n"
 4750|   469k|                  "Unsupported range type given as input to a scanning "
 4751|   469k|                  "function.\n"
 4752|   469k|                  "In order to be scannable, a range needs to satisfy "
 4753|   469k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   469k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   469k|                  "\n"
 4756|   469k|                  "Unsupported range type given as input to a scanning "
 4757|   469k|                  "function.\n"
 4758|   469k|                  "A range needs to model forward_range and have a valid "
 4759|   469k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   469k|                  "Examples of scannable ranges are std::string, "
 4761|   469k|                  "std::string_view, "
 4762|   469k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   469k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   469k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   469k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   469k|{
 4659|   469k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   469k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   469k|    }
 4662|   469k|    else {
 4663|   469k|        return invalid_char_type{};
 4664|   469k|    }
 4665|   469k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   469k|    {
 2855|   469k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   469k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   469k|    {
 2836|   469k|        return t.data();
 2837|   469k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   469k|    {
 3231|   469k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.42k, False: 467k]
  ------------------
 3232|   469k|                   ? nullptr
 3233|   469k|                   : std::addressof(*ranges::begin(derived()));
 3234|   469k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   469k|    {
 3005|   469k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   469k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   469k|    {
 2978|   469k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   469k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   859k|    {
 3339|   859k|        return m_iterator == m_sentinel;
 3340|   859k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   936k|    {
 3185|   936k|        return static_cast<const D&>(*this);
 3186|   936k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   770k|    {
 2724|   770k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   770k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   770k|    {
 2705|   770k|        return decay_copy(t.begin());
 2706|   770k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  16.0M|    {
 3330|  16.0M|        return m_iterator;
 3331|  16.0M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   469k|    {
 2930|   469k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   469k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   469k|    {
 2896|   469k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   469k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  2.07M|    {
 3346|  2.07M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.07M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   166k|    {
 1476|   166k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   166k|    {
  447|   166k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   469k|    {
 1177|   469k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   302k|{
 5923|   302k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   302k|                      ranges::iterator_t<SourceRange>>) {
 5925|   302k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   302k|    }
 5927|   302k|    else {
 5928|   302k|        auto it = ranges::begin(source);
 5929|   302k|        while (n > 0) {
 5930|   302k|            --n;
 5931|   302k|            ++it;
 5932|   302k|        }
 5933|   302k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   302k|    }
 5935|   302k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   873k|    {
 2724|   873k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   873k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   873k|    {
 2705|   873k|        return decay_copy(t.begin());
 2706|   873k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   302k|{
 5910|   302k|    return ranges::end(source);
 5911|   302k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   302k|    {
 2781|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   302k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   302k|    {
 2763|   302k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   302k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  9.14M|    {
 3334|  9.14M|        return m_sentinel;
 3335|  9.14M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   302k|    {
 1430|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   302k|    {
  437|   302k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   139k|    {
 7975|   139k|        return m_str;
 7976|   139k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   278k|    {
 5426|   278k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   278k|    {
 5379|   278k|        return m_argptrs;
 5380|   278k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   857k|    {
 5478|   857k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   139k|{
 8820|   139k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 87.7k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  87.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   139k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   469k|    {
 1598|   469k|        return has_value();
 1599|   469k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   938k|    {
  485|   938k|        return m_has_value;
  486|   938k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   166k|    {
 1604|   166k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   166k|        return this->get_unexpected().error();
 1606|   166k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   166k|    {
  468|   166k|        return m_unexpected;
  469|   166k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   151k|    {
 1177|   151k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   274k|    {
 1653|   274k|        return value();
 1654|   274k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   302k|    {
 1627|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   302k|        return this->get_value();
 1629|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   302k|    {
  451|   302k|        return m_value;
  452|   302k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  96.3k|    {
 5830|  96.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   302k|    {
 5681|   302k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  96.3k|    {
 1430|  96.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  96.3k|    {
  437|  96.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   278k|    {
 5374|   278k|        return m_args;
 5375|   278k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  5.73M|    {
 3316|  5.73M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   857k|{
 7696|   857k|    return s;
 7697|   857k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   857k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   139k|    {
 7971|   139k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   151k|    {
 1598|   151k|        return has_value();
 1599|   151k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   248k|    {
  485|   248k|        return m_has_value;
  486|   248k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  96.3k|    {
 1673|  96.3k|        return &value();
 1674|  96.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  96.3k|    {
 1627|  96.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.3k|        return this->get_value();
 1629|  96.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.3k|    {
  451|  96.3k|        return m_value;
  452|  96.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   302k|    {
 5698|   302k|        return ranges::begin(m_range);
 5699|   302k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   214k|{
 8607|   214k|#if !SCN_DISABLE_LOCALE
 8608|   214k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   214k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   214k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   214k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   214k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.0k, False: 137k]
  |  |  ------------------
  ------------------
 8615|  77.0k|        return unexpected(result.error());
 8616|  77.0k|    }
 8617|   137k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   214k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  25.7k|{
 5155|  25.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  25.7k|    basic_scan_arg<Context> arg;
 5158|  25.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  25.7k|    arg.m_value = make_value<Context>(value);
 5160|  25.7k|    return arg;
 5161|  25.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   938k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  40.4k|{
 8631|  40.4k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  40.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  40.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 27.6k]
  |  |  ------------------
  ------------------
 8635|  12.8k|        return unexpected(result.error());
 8636|  12.8k|    }
 8637|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  40.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  27.6k|    {
 1663|  27.6k|        return std::move(value());
 1664|  27.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   287k|{
 5396|   287k|    detail::check_scan_arg_types<Args...>();
 5397|   287k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   287k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   287k|    {
 5349|   287k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   287k|    {
 5360|   287k|        return {detail::make_arg<
 5361|   287k|            kind, Context,
 5362|   287k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   287k|                                 typename Context::char_type>::value>(args)...};
 5364|   287k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   287k|{
 5170|   287k|    return make_value<Context>(value).ref_value;
 5171|   287k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   314k|{
 5120|   314k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   314k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   314k|                                  needs_context_tag>) {
 5124|   314k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   314k|    }
 5126|   314k|    else {
 5127|   314k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   314k|            value, context_tag<Context>{}));
 5129|   314k|    }
 5130|   314k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   314k|    {                                                                        \
 4959|   314k|        return val;                                                          \
 4960|   314k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   143k|    {
 7975|   143k|        return m_str;
 7976|   143k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   287k|    {
 5426|   287k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   287k|    {
 5379|   287k|        return m_argptrs;
 5380|   287k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   143k|{
 8820|   143k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 92.2k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  92.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  92.2k|    static_cast<    \
  |  |  929|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  92.2k|    static_cast<    \
  |  |  929|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   143k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   101k|    {
 5830|   101k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   101k|    {
 1430|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   101k|    {
  437|   101k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   287k|    {
 5374|   287k|        return m_args;
 5375|   287k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   143k|    {
 7971|   143k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   258k|    {
  485|   258k|        return m_has_value;
  486|   258k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   101k|    {
 1673|   101k|        return &value();
 1674|   101k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   101k|    {
 1627|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   101k|        return this->get_value();
 1629|   101k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   101k|    {
  451|   101k|        return m_value;
  452|   101k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.1k|{
 5155|  27.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.1k|    basic_scan_arg<Context> arg;
 5158|  27.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.1k|    arg.m_value = make_value<Context>(value);
 5160|  27.1k|    return arg;
 5161|  27.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   291k|{
 5396|   291k|    detail::check_scan_arg_types<Args...>();
 5397|   291k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   291k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   291k|    {
 5349|   291k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   291k|    {
 5360|   291k|        return {detail::make_arg<
 5361|   291k|            kind, Context,
 5362|   291k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   291k|                                 typename Context::char_type>::value>(args)...};
 5364|   291k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   291k|{
 5170|   291k|    return make_value<Context>(value).ref_value;
 5171|   291k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   319k|{
 5120|   319k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   319k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   319k|                                  needs_context_tag>) {
 5124|   319k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   319k|    }
 5126|   319k|    else {
 5127|   319k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   319k|            value, context_tag<Context>{}));
 5129|   319k|    }
 5130|   319k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   319k|    {                                                                        \
 4959|   319k|        return val;                                                          \
 4960|   319k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   146k|    {
 7975|   146k|        return m_str;
 7976|   146k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   291k|    {
 5426|   291k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   291k|    {
 5379|   291k|        return m_argptrs;
 5380|   291k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   146k|{
 8820|   146k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 94.6k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  94.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  94.6k|    static_cast<    \
  |  |  929|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  94.6k|    static_cast<    \
  |  |  929|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   146k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   160k|    {
 1177|   160k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   104k|    {
 5830|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   104k|    {
 1430|   104k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   104k|    {
  437|   104k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   291k|    {
 5374|   291k|        return m_args;
 5375|   291k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   146k|    {
 7971|   146k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   160k|    {
 1598|   160k|        return has_value();
 1599|   160k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   264k|    {
  485|   264k|        return m_has_value;
  486|   264k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   104k|    {
 1673|   104k|        return &value();
 1674|   104k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   104k|    {
 1627|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   104k|        return this->get_value();
 1629|   104k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   104k|    {
  451|   104k|        return m_value;
  452|   104k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  27.9k|{
 5155|  27.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  27.9k|    basic_scan_arg<Context> arg;
 5158|  27.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  27.9k|    arg.m_value = make_value<Context>(value);
 5160|  27.9k|    return arg;
 5161|  27.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   166k|    {
 2724|   166k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   166k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   166k|    {
 2705|   166k|        return decay_copy(t.begin());
 2706|   166k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  9.10M|{
 1949|  9.10M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.10M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   937k|    {
 2781|   937k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   937k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   937k|    {
 2763|   937k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   937k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   214k|{
 8591|   214k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   214k|    auto result = vscan_impl(buffer, format, args);
 8594|   214k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.0k, False: 137k]
  |  |  ------------------
  ------------------
 8595|  77.0k|        return unexpected(result.error());
 8596|  77.0k|    }
 8597|   137k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   214k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   468k|{
 4720|   468k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   468k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   468k|                  "\n"
 4724|   468k|                  "Unsupported range type given as input to a scanning "
 4725|   468k|                  "function.\n"
 4726|   468k|                  "A range needs to have a character type (value type) "
 4727|   468k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   468k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   468k|                  "to be included.\n"
 4730|   468k|                  "See the scnlib documentation for more details.");
 4731|   468k|    static_assert(
 4732|   468k|        !std::is_same_v<T, custom_char_traits>,
 4733|   468k|        "\n"
 4734|   468k|        "Unsupported range type given as input to a scanning "
 4735|   468k|        "function.\n"
 4736|   468k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   468k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   468k|        "not supported.");
 4739|   468k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   468k|                  "\n"
 4741|   468k|                  "Unsupported range type given as input to a scanning "
 4742|   468k|                  "function.\n"
 4743|   468k|                  "file_marker_found cannot be used as an "
 4744|   468k|                  "source range type to scn::scan.\n"
 4745|   468k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   468k|                  "and do not provide an explicit source range, "
 4747|   468k|                  "or use scn::scan with a FILE* directly.");
 4748|   468k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   468k|                  "\n"
 4750|   468k|                  "Unsupported range type given as input to a scanning "
 4751|   468k|                  "function.\n"
 4752|   468k|                  "In order to be scannable, a range needs to satisfy "
 4753|   468k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   468k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   468k|                  "\n"
 4756|   468k|                  "Unsupported range type given as input to a scanning "
 4757|   468k|                  "function.\n"
 4758|   468k|                  "A range needs to model forward_range and have a valid "
 4759|   468k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   468k|                  "Examples of scannable ranges are std::string, "
 4761|   468k|                  "std::string_view, "
 4762|   468k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   468k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   468k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   468k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   468k|{
 4690|   468k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   468k|        return file_marker_found{};
 4692|   468k|    }
 4693|   468k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   468k|        if constexpr (ranges::range<Range>) {
 4695|   468k|            return insufficient_range{};
 4696|   468k|        }
 4697|   468k|        else {
 4698|   468k|            return invalid_input_range{};
 4699|   468k|        }
 4700|   468k|    }
 4701|   468k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   468k|        return invalid_char_type{};
 4703|   468k|    }
 4704|   468k|    else {
 4705|   468k|        return make_forward_scan_buffer(r);
 4706|   468k|    }
 4707|   468k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   468k|{
 4524|   468k|    return basic_scan_forward_buffer_impl(range);
 4525|   468k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   468k|    {
 4411|   468k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   468k|    {
 4382|   468k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   468k|    {
 4151|   468k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   468k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   771k|    {
 2724|   771k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   771k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   771k|    {
 2705|   771k|        return decay_copy(t.begin());
 2706|   771k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.07M|    {
 3330|  1.07M|        return m_iterator;
 3331|  1.07M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  2.31M|    {
 4415|  2.31M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 166k, False: 2.15M]
  ------------------
 4416|   166k|            return false;
 4417|   166k|        }
 4418|  2.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.15M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.15M|        }
 4421|  2.15M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.68M, False: 467k]
  ------------------
 4422|  1.68M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.68M|                                          this->m_current_view.begin(),
 4424|  1.68M|                                          this->m_current_view.end());
 4425|  1.68M|        }
 4426|  2.15M|        m_latest = *m_cursor;
 4427|  2.15M|        ++m_cursor;
 4428|  2.15M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.15M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.15M|        }
 4432|  2.15M|        return true;
 4433|  2.15M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.62M|    {
 2781|  6.62M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.62M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.62M|    {
 2763|  6.62M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  6.92M|    {
 3334|  6.92M|        return m_sentinel;
 3335|  6.92M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   468k|    {
 4071|   468k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   468k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   468k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   166k|    {
 1476|   166k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   166k|    {
  447|   166k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   468k|    {
 1177|   468k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   302k|{
 5923|   302k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   302k|                      ranges::iterator_t<SourceRange>>) {
 5925|   302k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   302k|    }
 5927|   302k|    else {
 5928|   302k|        auto it = ranges::begin(source);
 5929|   302k|        while (n > 0) {
 5930|   302k|            --n;
 5931|   302k|            ++it;
 5932|   302k|        }
 5933|   302k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   302k|    }
 5935|   302k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   302k|    {
 2724|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   302k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   302k|    {
 2705|   302k|        return decay_copy(t.begin());
 2706|   302k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   302k|{
 5910|   302k|    return ranges::end(source);
 5911|   302k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   302k|    {
 2781|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   302k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   302k|    {
 2763|   302k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   302k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   302k|    {
 1430|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   302k|    {
  437|   302k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   139k|    {
 7975|   139k|        return m_str;
 7976|   139k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   139k|{
 8820|   139k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 87.7k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  87.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   139k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   468k|    {
 1598|   468k|        return has_value();
 1599|   468k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   937k|    {
  485|   937k|        return m_has_value;
  486|   937k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   166k|    {
 1604|   166k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   166k|        return this->get_unexpected().error();
 1606|   166k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   166k|    {
  468|   166k|        return m_unexpected;
  469|   166k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   151k|    {
 1177|   151k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   274k|    {
 1653|   274k|        return value();
 1654|   274k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   302k|    {
 1627|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   302k|        return this->get_value();
 1629|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   302k|    {
  451|   302k|        return m_value;
  452|   302k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  96.2k|    {
 5830|  96.2k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   302k|    {
 5681|   302k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  96.2k|    {
 1430|  96.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  96.2k|    {
  437|  96.2k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   771k|    {
 3316|   771k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   139k|    {
 7971|   139k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   151k|    {
 1598|   151k|        return has_value();
 1599|   151k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   248k|    {
  485|   248k|        return m_has_value;
  486|   248k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  96.2k|    {
 1673|  96.2k|        return &value();
 1674|  96.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  96.2k|    {
 1627|  96.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.2k|        return this->get_value();
 1629|  96.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.2k|    {
  451|  96.2k|        return m_value;
  452|  96.2k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   302k|    {
 5698|   302k|        return ranges::begin(m_range);
 5699|   302k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   214k|{
 8607|   214k|#if !SCN_DISABLE_LOCALE
 8608|   214k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   214k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   214k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   214k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   214k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.0k, False: 137k]
  |  |  ------------------
  ------------------
 8615|  77.0k|        return unexpected(result.error());
 8616|  77.0k|    }
 8617|   137k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   214k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  40.4k|{
 8631|  40.4k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  40.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  40.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 27.6k]
  |  |  ------------------
  ------------------
 8635|  12.8k|        return unexpected(result.error());
 8636|  12.8k|    }
 8637|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  40.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  27.6k|    {
 1663|  27.6k|        return std::move(value());
 1664|  27.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   143k|    {
 7975|   143k|        return m_str;
 7976|   143k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   143k|{
 8820|   143k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 92.1k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  92.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  92.1k|    static_cast<    \
  |  |  929|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  92.1k|    static_cast<    \
  |  |  929|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   143k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   101k|    {
 5830|   101k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   101k|    {
 1430|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   101k|    {
  437|   101k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   143k|    {
 7971|   143k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   258k|    {
  485|   258k|        return m_has_value;
  486|   258k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   101k|    {
 1673|   101k|        return &value();
 1674|   101k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   101k|    {
 1627|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   101k|        return this->get_value();
 1629|   101k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   101k|    {
  451|   101k|        return m_value;
  452|   101k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   145k|    {
 7975|   145k|        return m_str;
 7976|   145k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   145k|{
 8820|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.3k, False: 94.6k]
  |  |  ------------------
  ------------------
 8821|  51.3k|        return unexpected(result.error());
 8822|  51.3k|    }
 8823|  94.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  94.6k|    static_cast<    \
  |  |  929|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  94.6k|    static_cast<    \
  |  |  929|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   145k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  55.6k|    {
 1476|  55.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  55.6k|    {
  447|  55.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   159k|    {
 1177|   159k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   104k|    {
 5830|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   104k|    {
 1430|   104k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   104k|    {
  437|   104k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   145k|    {
 7971|   145k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   159k|    {
 1598|   159k|        return has_value();
 1599|   159k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   264k|    {
  485|   264k|        return m_has_value;
  486|   264k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   104k|    {
 1673|   104k|        return &value();
 1674|   104k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   104k|    {
 1627|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   104k|        return this->get_value();
 1629|   104k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   104k|    {
  451|   104k|        return m_value;
  452|   104k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.43M|    {
 3568|  3.43M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.43M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  14.2M|    {
 3574|  14.2M|        return m_code == good;
 3575|  14.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   385k|    {
 3585|   385k|        return m_code;
 3586|   385k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  51.9M|    {
 3330|  51.9M|        return m_iterator;
 3331|  51.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  19.2M|    {
 3330|  19.2M|        return m_iterator;
 3331|  19.2M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.23M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   595k|    {
 6272|   595k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   595k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   595k|            m_specs.localized = true;
 6274|   595k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   595k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.63M|    {
 6303|  1.63M|        m_specs.type = type;
 6304|  1.63M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.23M|    {
 6376|  2.23M|        return static_cast<bool>(m_error);
 6377|  2.23M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   385k|{
 3609|   385k|    return a.code() == b;
 3610|   385k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   385k|{
 3613|   385k|    return !(a == b);
 3614|   385k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   595k|{
 7063|   595k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 595k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 595k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 595k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 595k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 595k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 595k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 595k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 595k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 595k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 595k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 595k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 595k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 595k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 595k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 595k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 595k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   190k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 190k, False: 404k]
  ------------------
 7091|   391k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 200k, False: 394k]
  ------------------
 7092|   595k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 204k, False: 391k]
  ------------------
 7093|   595k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 595k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 595k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 595k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 595k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 595k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 595k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   595k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   595k|            SCN_CLANG_POP
 7110|   595k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   595k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.59M|    {
 2896|  2.59M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.59M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.59M|    {
 2930|  2.59M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.59M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.59M|    {
 2953|  2.59M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.59M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.59M|    {
 2962|  2.59M|        return fn::impl(std::forward<T>(t));
 2963|  2.59M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    962|{
 3654|    962|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    962|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.22k|{
 3654|  2.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.22k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  27.1k|{
 3654|  27.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  27.1k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.23M|{
 7193|  2.23M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.63M, False: 595k]
  ------------------
 7194|  2.23M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.63M]
  ------------------
 7195|  1.63M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.63M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.23M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   324M|    {
 4195|   324M|        return m_end == nullptr;
 4196|   324M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   865k|{
 3715|   865k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   865k|                                          const CharT*, const CharT*>) {
 3717|   865k|        return {first, last};
 3718|   865k|    }
 3719|   865k|    else {
 3720|   865k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   865k|    }
 3722|   865k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.33M|    {
 4211|  4.33M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.33M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.33M|        return parent()->get_segment_starting_at(position());
 4217|  4.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   180M|    {
 4205|   180M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   180M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   180M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   180M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.33M|    {
 4101|  4.33M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87M, False: 2.45M]
  |  |  ------------------
  ------------------
 4102|  4.33M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.87M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.87M|        }
 4105|  2.45M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.45M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.45M|        return m_current_view.substr(start);
 4108|  2.45M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.02M|    {
 4200|  3.02M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.02M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  7.95M|    {
 4190|  7.95M|        return m_position;
 4191|  7.95M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.45M|    {
 4123|  3.45M|        return m_is_contiguous;
 4124|  3.45M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  60.7M|    {
 4195|  60.7M|        return m_end == nullptr;
 4196|  60.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   293k|{
 3715|   293k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   293k|                                          const CharT*, const CharT*>) {
 3717|   293k|        return {first, last};
 3718|   293k|    }
 3719|   293k|    else {
 3720|   293k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   293k|    }
 3722|   293k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.07M|    {
 4211|  1.07M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.07M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.07M|        return parent()->get_segment_starting_at(position());
 4217|  1.07M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  32.5M|    {
 4205|  32.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  32.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  32.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  32.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.07M|    {
 4101|  1.07M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 597k, False: 480k]
  |  |  ------------------
  ------------------
 4102|  1.07M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   597k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   597k|        }
 4105|   480k|        const auto start = pos - m_putback_buffer.size();
 4106|   480k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   480k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   480k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   480k|        return m_current_view.substr(start);
 4108|   480k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.21M|    {
 4200|  1.21M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.21M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.21M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.39M|    {
 4190|  2.39M|        return m_position;
 4191|  2.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.40M|    {
 4123|  1.40M|        return m_is_contiguous;
 4124|  1.40M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  8.99M|    {
 3180|  8.99M|        return static_cast<D&>(*this);
 3181|  8.99M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.50M|    {
 2978|  4.50M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.50M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.50M|    {
 3005|  4.50M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.50M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.50M|    {
 3221|  4.50M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.1k, False: 4.49M]
  ------------------
 3222|  4.50M|                   ? nullptr
 3223|  4.50M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.50M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   781k|    {
 3180|   781k|        return static_cast<D&>(*this);
 3181|   781k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   390k|    {
 2978|   390k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   390k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   390k|    {
 3005|   390k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   390k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   390k|    {
 3221|   390k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 390k]
  ------------------
 3222|   390k|                   ? nullptr
 3223|   390k|                   : std::addressof(*ranges::begin(derived()));
 3224|   390k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   826k|    {
 8169|   826k|        return ranges::subrange{begin(), end()};
 8170|   826k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.41M|    {
 8153|  2.41M|        return m_current;
 8154|  2.41M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   826k|    {
 8161|   826k|        return ranges::default_sentinel;
 8162|   826k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  12.6M|    {
 3316|  12.6M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.73M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.15M|{
 1323|  1.15M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.15M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.15M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.15M|            return result(*std::forward<Exp>(exp));
 1327|  1.15M|        }
 1328|       |
 1329|  1.15M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.15M|        return result(unexpect, monostate{});
 1331|  1.15M|    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 18.6k]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  18.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.6k|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.2M|    {
  485|  12.2M|        return m_has_value;
  486|  12.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.11M|    {
 1663|  4.11M|        return std::move(value());
 1664|  4.11M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.73M|    {
 1627|  4.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.73M|        return this->get_value();
 1629|  4.73M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.73M|    {
  451|  4.73M|        return m_value;
  452|  4.73M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.09M|    {
 1430|  5.09M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.09M|    {
  437|  5.09M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.50M|    {
 1177|  6.50M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  41.0k|{
 1211|  41.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  41.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  54.3k|    {
 1614|  54.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.3k|        return std::move(this->get_unexpected().error());
 1616|  54.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  73.0k|    {
  468|  73.0k|        return m_unexpected;
  469|  73.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   406k|    {
  361|   406k|        return m_unexpected;
  362|   406k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.13M|    {
 1486|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.34M|    {
  447|  1.34M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   347k|    {
 8169|   347k|        return ranges::subrange{begin(), end()};
 8170|   347k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   914k|    {
 8153|   914k|        return m_current;
 8154|   914k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   347k|    {
 8161|   347k|        return ranges::default_sentinel;
 8162|   347k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  4.65M|    {
 3316|  4.65M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   468k|    {
 1837|   468k|        return detail::transform_error_impl(std::move(*this),
 1838|   468k|                                            std::forward<F>(f));
 1839|   468k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   468k|{
 1323|   468k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   468k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   468k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   468k|            return result(*std::forward<Exp>(exp));
 1327|   468k|        }
 1328|       |
 1329|   468k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   468k|        return result(unexpect, monostate{});
 1331|   468k|    }
 1332|   468k|    else {
 1333|   468k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   468k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   468k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 465k, False: 3.32k]
  |  |  ------------------
  ------------------
 1335|   468k|                   ? result(*std::forward<Exp>(exp))
 1336|   468k|                   : result(unexpect,
 1337|  3.32k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.32k|                                           std::forward<Exp>(exp).error()));
 1339|   468k|    }
 1340|   468k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.42M|    {
  485|  4.42M|        return m_has_value;
  486|  4.42M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.63M|    {
 1663|  1.63M|        return std::move(value());
 1664|  1.63M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.64M|    {
 1627|  1.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.64M|        return this->get_value();
 1629|  1.64M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.64M|    {
  451|  1.64M|        return m_value;
  452|  1.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.59M|    {
 1430|  1.59M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.59M|    {
  437|  1.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.67M|    {
 1177|  2.67M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.5k|    {
 1614|  53.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.5k|        return std::move(this->get_unexpected().error());
 1616|  53.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  55.2k|    {
  468|  55.2k|        return m_unexpected;
  469|  55.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   627k|    {
 1486|   627k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.08M|    {
  447|  1.08M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   145k|    {
  347|   145k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   145k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   145k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   183k|    {
 1476|   183k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.15M|    {
  447|  1.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.66M|    {
 1177|  5.66M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.45M|    {
 1430|  4.45M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.45M|    {
  437|  4.45M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  6.64M|    {
 1598|  6.64M|        return has_value();
 1599|  6.64M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.4M|    {
  485|  10.4M|        return m_has_value;
  486|  10.4M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   221k|    {
 1604|   221k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   221k|        return this->get_unexpected().error();
 1606|   221k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   221k|    {
  468|   221k|        return m_unexpected;
  469|   221k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.86M|    {
 1663|  2.86M|        return std::move(value());
 1664|  2.86M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.55M|    {
 1627|  3.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.55M|        return this->get_value();
 1629|  3.55M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.55M|    {
  451|  3.55M|        return m_value;
  452|  3.55M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   371k|    {
 1476|   371k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   912k|    {
  447|   912k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.68M|    {
 1177|  2.68M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.76M|    {
 1430|  1.76M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.76M|    {
  437|  1.76M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.14M|    {
 1598|  3.14M|        return has_value();
 1599|  3.14M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.97M|    {
  485|  4.97M|        return m_has_value;
  486|  4.97M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   446k|    {
 1604|   446k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   446k|        return this->get_unexpected().error();
 1606|   446k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   446k|    {
  468|   446k|        return m_unexpected;
  469|   446k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.15M|    {
 1663|  1.15M|        return std::move(value());
 1664|  1.15M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.37M|    {
 1627|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.37M|        return this->get_value();
 1629|  1.37M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.37M|    {
  451|  1.37M|        return m_value;
  452|  1.37M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.00M|    {
 1837|  1.00M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.00M|                                            std::forward<F>(f));
 1839|  1.00M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.00M|{
 1323|  1.00M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.00M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.00M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.00M|            return result(*std::forward<Exp>(exp));
 1327|  1.00M|        }
 1328|       |
 1329|  1.00M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.00M|        return result(unexpect, monostate{});
 1331|  1.00M|    }
 1332|  1.00M|    else {
 1333|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 989k, False: 15.7k]
  |  |  ------------------
  ------------------
 1335|  1.00M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00M|                   : result(unexpect,
 1337|  15.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.7k|                                           std::forward<Exp>(exp).error()));
 1339|  1.00M|    }
 1340|  1.00M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.82M|    {
  485|  3.82M|        return m_has_value;
  486|  3.82M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   989k|    {
 1663|   989k|        return std::move(value());
 1664|   989k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.31M|    {
 1627|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.31M|        return this->get_value();
 1629|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.31M|    {
  451|  1.31M|        return m_value;
  452|  1.31M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.7k|    {
 1614|  15.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.7k|        return std::move(this->get_unexpected().error());
 1616|  15.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.4k|    {
  468|  20.4k|        return m_unexpected;
  469|  20.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   968k|    {
 1486|   968k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.77M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   206k|    {
 1476|   206k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  10.1M|    {
 4280|  10.1M|        return x.is_at_end();
 4281|  10.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  24.6M|    {
 4324|  24.6M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 24.6M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  24.6M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 24.6M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  24.6M|        return !read_at_position();
 4331|  24.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   106M|    {
 4304|   106M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   106M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   106M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 106M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   106M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   106M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 91.8M, False: 14.2M]
  |  |  ------------------
  ------------------
 4311|  91.8M|            return true;
 4312|  91.8M|        }
 4313|       |
 4314|  28.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 14.2M, False: 13.9M]
  ------------------
 4315|  14.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 280k, False: 13.9M]
  ------------------
 4316|   280k|                return false;
 4317|   280k|            }
 4318|  14.2M|        }
 4319|  13.9M|        return true;
 4320|  14.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   137M|    {
 4081|   137M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   137M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  27.6M|    {
 4239|  27.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  27.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 27.6M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  27.6M|        auto res = read_at_position();
 4248|  27.6M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  27.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  27.6M|        return parent()->get_character_at(m_position);
 4250|  27.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  27.6M|    {
 4112|  27.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  27.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.6M, False: 10.0M]
  |  |  ------------------
  ------------------
 4113|  27.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  17.6M|            return m_putback_buffer[pos];
 4115|  17.6M|        }
 4116|  10.0M|        const auto start = pos - m_putback_buffer.size();
 4117|  10.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  10.0M|        return m_current_view[start];
 4119|  10.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  7.34M|    {
 1430|  7.34M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  7.34M|    {
  437|  7.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.42M|    {
 1177|  7.42M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   136k|    {
  347|   136k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   136k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   136k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  73.0k|    {
 1476|  73.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  73.0k|    {
  447|  73.0k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   203k|    {
  356|   203k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   203k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   203k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.24M|    {
 1598|  3.24M|        return has_value();
 1599|  3.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   612k|    {
 1653|   612k|        return value();
 1654|   612k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  25.8M|    {
 4274|  25.8M|        return !(lhs == rhs);
 4275|  25.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  28.8M|    {
 4269|  28.8M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 28.8M, False: 0]
  |  Branch (4269:46): [True: 3.80M, False: 25.0M]
  ------------------
 4270|  28.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  53.7M|    {
 4225|  53.7M|        ++m_position;
 4226|  53.7M|        (void)read_at_position();
 4227|  53.7M|        return *this;
 4228|  53.7M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  66.6k|    {
  347|  66.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  66.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  66.6k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  14.0k|    {
 1476|  14.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  14.0k|    {
  447|  14.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.57M|    {
 1177|  1.57M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.56M|    {
 1430|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.56M|    {
  437|  1.56M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.57M|    {
 1598|  1.57M|        return has_value();
 1599|  1.57M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.15M|    {
  485|  3.15M|        return m_has_value;
  486|  3.15M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  14.0k|    {
 1604|  14.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.0k|        return this->get_unexpected().error();
 1606|  14.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.0k|    {
  468|  14.0k|        return m_unexpected;
  469|  14.0k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.56M|    {
 1663|  1.56M|        return std::move(value());
 1664|  1.56M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.56M|    {
 1627|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56M|        return this->get_value();
 1629|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.56M|    {
  451|  1.56M|        return m_value;
  452|  1.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  35.2M|    {
 3334|  35.2M|        return m_sentinel;
 3335|  35.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  61.0k|    {
  347|  61.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  61.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  61.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.2M|    {
  361|  12.2M|        return m_unexpected;
  362|  12.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.36M|    {
  356|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.36M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  14.9M|    {
  347|  14.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  14.9M|    {
  361|  14.9M|        return m_unexpected;
  362|  14.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  14.9M|    {
  356|  14.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   136k|{
 1211|   136k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   136k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.16M|    {
  347|  3.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  18.7k|    {
 1604|  18.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.7k|        return this->get_unexpected().error();
 1606|  18.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.17M|    {
 1476|  1.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.21M|    {
  447|  1.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.6M|    {
 1177|  12.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   618k|    {
 1430|   618k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   618k|    {
  437|   618k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.40M|    {
 1476|  6.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.40M|    {
  447|  6.40M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  13.7M|    {
 1598|  13.7M|        return has_value();
 1599|  13.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.3M|    {
  485|  24.3M|        return m_has_value;
  486|  24.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.22M|    {
 1604|  3.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.22M|        return this->get_unexpected().error();
 1606|  3.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.22M|    {
  468|  3.22M|        return m_unexpected;
  469|  3.22M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.24M|    {
 1430|  1.24M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.24M|    {
  437|  1.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.24M|    {
 1177|  1.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.23M|    {
 1653|  3.23M|        return value();
 1654|  3.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.22M|    {
 1627|  6.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.22M|        return this->get_value();
 1629|  6.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.22M|    {
  451|  6.22M|        return m_value;
  452|  6.22M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   117k|    {
 1598|   117k|        return has_value();
 1599|   117k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.49M|    {
  485|  2.49M|        return m_has_value;
  486|  2.49M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.24M|    {
 1627|  1.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.24M|        return this->get_value();
 1629|  1.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.24M|    {
  451|  1.24M|        return m_value;
  452|  1.24M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.02M|    {
 1837|  3.02M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.02M|                                            std::forward<F>(f));
 1839|  3.02M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.02M|{
 1323|  3.02M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.02M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.02M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.02M|            return result(*std::forward<Exp>(exp));
 1327|  3.02M|        }
 1328|       |
 1329|  3.02M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.02M|        return result(unexpect, monostate{});
 1331|  3.02M|    }
 1332|  3.02M|    else {
 1333|  3.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.98M, False: 35.7k]
  |  |  ------------------
  ------------------
 1335|  3.02M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.02M|                   : result(unexpect,
 1337|  35.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.7k|                                           std::forward<Exp>(exp).error()));
 1339|  3.02M|    }
 1340|  3.02M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.40M|    {
 1430|  4.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.40M|    {
  437|  4.40M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.7k|    {
 1486|  35.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  2.98M|    {
 1663|  2.98M|        return std::move(value());
 1664|  2.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.31M|    {
 3330|  1.31M|        return m_iterator;
 3331|  1.31M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.31M|    {
 3334|  1.31M|        return m_sentinel;
 3335|  1.31M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.61M|    {
 1598|  7.61M|        return has_value();
 1599|  7.61M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  11.9M|    {
  485|  11.9M|        return m_has_value;
  486|  11.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   273k|    {
 1604|   273k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   273k|        return this->get_unexpected().error();
 1606|   273k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   273k|    {
  468|   273k|        return m_unexpected;
  469|   273k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.27M|    {
 1663|  3.27M|        return std::move(value());
 1664|  3.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.08M|    {
 1627|  4.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.08M|        return this->get_value();
 1629|  4.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.08M|    {
  451|  4.08M|        return m_value;
  452|  4.08M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.03M|{
  326|  2.03M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.03M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.01M|    {
 3316|  1.01M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  14.5M|    {
 4291|  14.5M|        return !x.is_at_end();
 4292|  14.5M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.4k|    {
 1476|  20.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.4k|    {
  447|  20.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.48M|    {
 1177|  2.48M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.46M|    {
 1430|  2.46M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.46M|    {
  437|  2.46M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.48M|    {
 1598|  1.48M|        return has_value();
 1599|  1.48M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   327k|    {
 1653|   327k|        return value();
 1654|   327k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.3k|    {
  447|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.34M|    {
 1177|  1.34M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.33M|    {
 1430|  1.33M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.33M|    {
  437|  1.33M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.34M|    {
 1598|  1.34M|        return has_value();
 1599|  1.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.68M|    {
  485|  2.68M|        return m_has_value;
  486|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.3k|    {
 1604|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.3k|        return this->get_unexpected().error();
 1606|  11.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.3k|    {
  468|  11.3k|        return m_unexpected;
  469|  11.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.33M|    {
 1663|  1.33M|        return std::move(value());
 1664|  1.33M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.33M|    {
 1627|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.33M|        return this->get_value();
 1629|  1.33M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.33M|    {
  451|  1.33M|        return m_value;
  452|  1.33M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.71k|    {
 1604|  4.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.71k|        return this->get_unexpected().error();
 1606|  4.71k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.01M|    {
 1476|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.01M|    {
  447|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.66M|    {
 1177|  5.66M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   332k|    {
 1430|   332k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   332k|    {
  437|   332k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  3.88M|    {
 1476|  3.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.88M|    {
  447|  3.88M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  6.65M|    {
 1598|  6.65M|        return has_value();
 1599|  6.65M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.3M|    {
  485|  11.3M|        return m_has_value;
  486|  11.3M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.69M|    {
 1604|  2.69M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.69M|        return this->get_unexpected().error();
 1606|  2.69M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.69M|    {
  468|  2.69M|        return m_unexpected;
  469|  2.69M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.01M|    {
  437|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.05M|    {
 1653|  1.05M|        return value();
 1654|  1.05M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.05M|    {
 1627|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05M|        return this->get_value();
 1629|  1.05M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.05M|    {
  451|  1.05M|        return m_value;
  452|  1.05M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  28.2k|    {
 1598|  28.2k|        return has_value();
 1599|  28.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.03M|    {
  485|  2.03M|        return m_has_value;
  486|  2.03M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   989k|    {
 1663|   989k|        return std::move(value());
 1664|   989k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   426k|    {
 1430|   426k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   426k|    {
  437|   426k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.90M|    {
 2855|  1.90M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.90M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.90M|    {
 2836|  1.90M|        return t.data();
 2837|  1.90M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   757k|    {
 1476|   757k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   757k|    {
  447|   757k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.54M|    {
 1177|  8.54M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  7.67M|    {
 1430|  7.67M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  7.67M|    {
  437|  7.67M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.18M|    {
 1663|  5.18M|        return std::move(value());
 1664|  5.18M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.23M|{
 1211|  3.23M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.23M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.13M|    {
 1837|  1.13M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.13M|                                            std::forward<F>(f));
 1839|  1.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.13M|{
 1323|  1.13M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.13M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.13M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.13M|            return result(*std::forward<Exp>(exp));
 1327|  1.13M|        }
 1328|       |
 1329|  1.13M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.13M|        return result(unexpect, monostate{});
 1331|  1.13M|    }
 1332|  1.13M|    else {
 1333|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.13M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.13M|    }
 1340|  1.13M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.13M|    {
  437|  1.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.26M|    {
  485|  2.26M|        return m_has_value;
  486|  2.26M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.12M|    {
 1823|  1.12M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.12M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.12M|{
 1323|  1.12M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.12M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.12M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.12M|            return result(*std::forward<Exp>(exp));
 1327|  1.12M|        }
 1328|       |
 1329|  1.12M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.12M|        return result(unexpect, monostate{});
 1331|  1.12M|    }
 1332|  1.12M|    else {
 1333|  1.12M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1335|  1.12M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12M|                   : result(unexpect,
 1337|  1.12M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.12M|                                           std::forward<Exp>(exp).error()));
 1339|  1.12M|    }
 1340|  1.12M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  59.9k|    {
 1430|  59.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  59.9k|    {
  437|  59.9k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   808k|    {
 1653|   808k|        return value();
 1654|   808k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   259k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   116k|    {
 1673|   116k|        return &value();
 1674|   116k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   813k|    {
 2724|   813k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   813k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   813k|    {
 2705|   813k|        return decay_copy(t.begin());
 2706|   813k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   813k|{
 1949|   813k|    return SCN_FWD(t);
  ------------------
  |  |  930|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   813k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   497k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   989k|    {
 1837|   989k|        return detail::transform_error_impl(std::move(*this),
 1838|   989k|                                            std::forward<F>(f));
 1839|   989k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   989k|{
 1323|   989k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   989k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   989k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   989k|            return result(*std::forward<Exp>(exp));
 1327|   989k|        }
 1328|       |
 1329|   989k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   989k|        return result(unexpect, monostate{});
 1331|   989k|    }
 1332|   989k|    else {
 1333|   989k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   989k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   989k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 989k, False: 0]
  |  |  ------------------
  ------------------
 1335|   989k|                   ? result(*std::forward<Exp>(exp))
 1336|   989k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   989k|    }
 1340|   989k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   989k|    {
 1430|   989k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   989k|    {
  437|   989k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   989k|    {
 1177|   989k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   989k|    {
 1598|   989k|        return has_value();
 1599|   989k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.97M|    {
  485|  1.97M|        return m_has_value;
  486|  1.97M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   989k|    {
 1663|   989k|        return std::move(value());
 1664|   989k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   989k|    {
 1627|   989k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   989k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   989k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   989k|        return this->get_value();
 1629|   989k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   989k|    {
  451|   989k|        return m_value;
  452|   989k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|   953k|    {
 1823|   953k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   953k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   953k|{
 1323|   953k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   953k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   953k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   953k|            return result(*std::forward<Exp>(exp));
 1327|   953k|        }
 1328|       |
 1329|   953k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   953k|        return result(unexpect, monostate{});
 1331|   953k|    }
 1332|   953k|    else {
 1333|   953k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   953k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   953k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 953k]
  |  |  ------------------
  ------------------
 1335|   953k|                   ? result(*std::forward<Exp>(exp))
 1336|   953k|                   : result(unexpect,
 1337|   953k|                            trivial_invoke(std::forward<F>(f),
 1338|   953k|                                           std::forward<Exp>(exp).error()));
 1339|   953k|    }
 1340|   953k|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  58.6k|    {
 1430|  58.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  58.6k|    {
  437|  58.6k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   953k|    {
 3648|   953k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   690k|    {
 1653|   690k|        return value();
 1654|   690k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  28.1k|    {
 1673|  28.1k|        return &value();
 1674|  28.1k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.12M|    {
 3648|  1.12M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   456k|    {
 1476|   456k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.85M|    {
 4280|  3.85M|        return x.is_at_end();
 4281|  3.85M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  6.01M|    {
 4324|  6.01M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 6.01M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  6.01M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 6.01M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  6.01M|        return !read_at_position();
 4331|  6.01M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  18.8M|    {
 4304|  18.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  18.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 18.8M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  18.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  18.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.4M, False: 2.31M]
  |  |  ------------------
  ------------------
 4311|  16.4M|            return true;
 4312|  16.4M|        }
 4313|       |
 4314|  4.47M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.31M, False: 2.15M]
  ------------------
 4315|  2.31M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 166k, False: 2.15M]
  ------------------
 4316|   166k|                return false;
 4317|   166k|            }
 4318|  2.31M|        }
 4319|  2.15M|        return true;
 4320|  2.31M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  24.5M|    {
 4081|  24.5M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  24.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  5.87M|    {
 4239|  5.87M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  5.87M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 5.87M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  5.87M|        auto res = read_at_position();
 4248|  5.87M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  5.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  5.87M|        return parent()->get_character_at(m_position);
 4250|  5.87M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  5.87M|    {
 4112|  5.87M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98M, False: 887k]
  |  |  ------------------
  ------------------
 4113|  5.87M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.98M|            return m_putback_buffer[pos];
 4115|  4.98M|        }
 4116|   887k|        const auto start = pos - m_putback_buffer.size();
 4117|   887k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   887k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   887k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   887k|        return m_current_view[start];
 4119|   887k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  2.08M|{
 3807|  2.08M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  2.08M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  2.08M|    }
 3810|  2.08M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  2.08M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  2.08M|    }
 3813|  2.08M|    else {
 3814|       |        // utf-32
 3815|  2.08M|        static_assert(sizeof(U) == 4);
 3816|  2.08M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  2.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  2.08M|        return 1;
 3818|  2.08M|    }
 3819|  2.08M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.66M|    {
 1430|  2.66M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.66M|    {
  437|  2.66M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.72M|    {
 1177|  2.72M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  55.2k|    {
 1476|  55.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  55.2k|    {
  447|  55.2k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.03M|    {
 1598|  1.03M|        return has_value();
 1599|  1.03M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  13.1k|    {
 1653|  13.1k|        return value();
 1654|  13.1k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.77M|    {
 4274|  2.77M|        return !(lhs == rhs);
 4275|  2.77M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  3.80M|    {
 4269|  3.80M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.80M, False: 0]
  |  Branch (4269:46): [True: 1.24M, False: 2.56M]
  ------------------
 4270|  3.80M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  6.92M|    {
 4225|  6.92M|        ++m_position;
 4226|  6.92M|        (void)read_at_position();
 4227|  6.92M|        return *this;
 4228|  6.92M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.08M|{
 4013|  2.08M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.08M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.08M|    }
 4016|  2.08M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  2.08M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.08M|    }
 4019|  2.08M|    else {
 4020|  2.08M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  2.08M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.08M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178k, False: 1.90M]
  |  |  ------------------
  ------------------
 4023|   178k|            return invalid_code_point;
 4024|   178k|        }
 4025|  1.90M|        return cp;
 4026|  2.08M|    }
 4027|  2.08M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.48k|    {
 1476|  2.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.48k|    {
  447|  2.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   565k|    {
 1177|   565k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   563k|    {
 1430|   563k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   563k|    {
  437|   563k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   565k|    {
 1598|   565k|        return has_value();
 1599|   565k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.48k|    {
 1604|  2.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.48k|        return this->get_unexpected().error();
 1606|  2.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.48k|    {
  468|  2.48k|        return m_unexpected;
  469|  2.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   563k|    {
 1663|   563k|        return std::move(value());
 1664|   563k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   563k|    {
 1627|   563k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   563k|        return this->get_value();
 1629|   563k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   563k|    {
  451|   563k|        return m_value;
  452|   563k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  9.85M|    {
 3334|  9.85M|        return m_sentinel;
 3335|  9.85M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.74k|    {
 1604|  1.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.74k|        return this->get_unexpected().error();
 1606|  1.74k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   517k|    {
 1476|   517k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   567k|    {
  447|   567k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.71M|    {
 1177|  4.71M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  13.1k|    {
 1430|  13.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  13.1k|    {
  437|  13.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.65M|    {
 1476|  2.65M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.65M|    {
  447|  2.65M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  5.18M|    {
 1598|  5.18M|        return has_value();
 1599|  5.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.22M|    {
  485|  9.22M|        return m_has_value;
  486|  9.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.61M|    {
 1604|  1.61M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.61M|        return this->get_unexpected().error();
 1606|  1.61M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.61M|    {
  468|  1.61M|        return m_unexpected;
  469|  1.61M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   474k|    {
 1430|   474k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   474k|    {
  437|   474k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   474k|    {
 1177|   474k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   636k|    {
 1653|   636k|        return value();
 1654|   636k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.80M|    {
 1627|  1.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.80M|        return this->get_value();
 1629|  1.80M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.80M|    {
  451|  1.80M|        return m_value;
  452|  1.80M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  8.48k|    {
 1598|  8.48k|        return has_value();
 1599|  8.48k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   948k|    {
  485|   948k|        return m_has_value;
  486|   948k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   465k|    {
 1663|   465k|        return std::move(value());
 1664|   465k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   474k|    {
 1627|   474k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   474k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   474k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   474k|        return this->get_value();
 1629|   474k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   474k|    {
  451|   474k|        return m_value;
  452|   474k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.21M|    {
 1837|  1.21M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.21M|                                            std::forward<F>(f));
 1839|  1.21M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.21M|{
 1323|  1.21M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.21M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.21M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.21M|            return result(*std::forward<Exp>(exp));
 1327|  1.21M|        }
 1328|       |
 1329|  1.21M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.21M|        return result(unexpect, monostate{});
 1331|  1.21M|    }
 1332|  1.21M|    else {
 1333|  1.21M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.21M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.16M, False: 50.1k]
  |  |  ------------------
  ------------------
 1335|  1.21M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.21M|                   : result(unexpect,
 1337|  50.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  50.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.21M|    }
 1340|  1.21M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.48M|    {
 1430|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48M|    {
  437|  1.48M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  50.1k|    {
 1486|  50.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.16M|    {
 1663|  1.16M|        return std::move(value());
 1664|  1.16M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   324k|    {
 3330|   324k|        return m_iterator;
 3331|   324k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   324k|    {
 3334|   324k|        return m_sentinel;
 3335|   324k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.14M|    {
 1598|  3.14M|        return has_value();
 1599|  3.14M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.05M|    {
  485|  5.05M|        return m_has_value;
  486|  5.05M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   618k|    {
 1604|   618k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   618k|        return this->get_unexpected().error();
 1606|   618k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   618k|    {
  468|   618k|        return m_unexpected;
  469|   618k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   608k|{
  304|   608k|    return p;
  305|   608k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   608k|{
  326|   608k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   608k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   304k|    {
 3316|   304k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.15M|    {
 4291|  2.15M|        return !x.is_at_end();
 4292|  2.15M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  54.0k|    {
 1476|  54.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  54.0k|    {
  447|  54.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.32M|    {
 1177|  2.32M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.26M|    {
 1430|  2.26M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.26M|    {
  437|  2.26M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   635k|    {
 1598|   635k|        return has_value();
 1599|   635k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.01M|    {
  485|  4.01M|        return m_has_value;
  486|  4.01M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  5.49k|    {
 1653|  5.49k|        return value();
 1654|  5.49k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.63M|    {
 1627|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.63M|        return this->get_value();
 1629|  1.63M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.63M|    {
  451|  1.63M|        return m_value;
  452|  1.63M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.48k|    {
 1476|  2.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.48k|    {
  447|  2.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   566k|    {
 1177|   566k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   563k|    {
 1430|   563k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   563k|    {
  437|   563k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   469k|    {
 1837|   469k|        return detail::transform_error_impl(std::move(*this),
 1838|   469k|                                            std::forward<F>(f));
 1839|   469k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   469k|{
 1323|   469k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   469k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   469k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   469k|            return result(*std::forward<Exp>(exp));
 1327|   469k|        }
 1328|       |
 1329|   469k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   469k|        return result(unexpect, monostate{});
 1331|   469k|    }
 1332|   469k|    else {
 1333|   469k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   469k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   469k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 465k, False: 3.32k]
  |  |  ------------------
  ------------------
 1335|   469k|                   ? result(*std::forward<Exp>(exp))
 1336|   469k|                   : result(unexpect,
 1337|  3.32k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.32k|                                           std::forward<Exp>(exp).error()));
 1339|   469k|    }
 1340|   469k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.63M|    {
 1663|  1.63M|        return std::move(value());
 1664|  1.63M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  53.6k|    {
 1614|  53.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.6k|        return std::move(this->get_unexpected().error());
 1616|  53.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  54.0k|    {
  468|  54.0k|        return m_unexpected;
  469|  54.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   541k|    {
 1486|   541k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   566k|    {
 1598|   566k|        return has_value();
 1599|   566k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.48k|    {
 1604|  2.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.48k|        return this->get_unexpected().error();
 1606|  2.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.48k|    {
  468|  2.48k|        return m_unexpected;
  469|  2.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   563k|    {
 1663|   563k|        return std::move(value());
 1664|   563k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   563k|    {
 1627|   563k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   563k|        return this->get_value();
 1629|   563k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   563k|    {
  451|   563k|        return m_value;
  452|   563k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    440|    {
 1604|    440|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    440|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    440|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    440|        return this->get_unexpected().error();
 1606|    440|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   516k|    {
 1476|   516k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   566k|    {
  447|   566k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.82M|    {
 1177|  3.82M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  5.49k|    {
 1430|  5.49k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  5.49k|    {
  437|  5.49k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.97M|    {
 1476|  1.97M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.97M|    {
  447|  1.97M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  4.29M|    {
 1598|  4.29M|        return has_value();
 1599|  4.29M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.74M|    {
  485|  7.74M|        return m_has_value;
  486|  7.74M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.52M|    {
 1604|  1.52M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.52M|        return this->get_unexpected().error();
 1606|  1.52M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.52M|    {
  468|  1.52M|        return m_unexpected;
  469|  1.52M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   468k|    {
 1430|   468k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   468k|    {
  437|   468k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   468k|    {
 1177|   468k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   224k|    {
 1653|   224k|        return value();
 1654|   224k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.39M|    {
 1627|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39M|        return this->get_value();
 1629|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.39M|    {
  451|  1.39M|        return m_value;
  452|  1.39M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.95k|    {
 1598|  2.95k|        return has_value();
 1599|  2.95k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   937k|    {
  485|   937k|        return m_has_value;
  486|   937k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   465k|    {
 1663|   465k|        return std::move(value());
 1664|   465k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   468k|    {
 1627|   468k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   468k|        return this->get_value();
 1629|   468k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   468k|    {
  451|   468k|        return m_value;
  452|   468k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.21M|    {
 1837|  1.21M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.21M|                                            std::forward<F>(f));
 1839|  1.21M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.21M|{
 1323|  1.21M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.21M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.21M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.21M|            return result(*std::forward<Exp>(exp));
 1327|  1.21M|        }
 1328|       |
 1329|  1.21M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.21M|        return result(unexpect, monostate{});
 1331|  1.21M|    }
 1332|  1.21M|    else {
 1333|  1.21M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.21M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.16M, False: 50.2k]
  |  |  ------------------
  ------------------
 1335|  1.21M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.21M|                   : result(unexpect,
 1337|  50.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  50.2k|                                           std::forward<Exp>(exp).error()));
 1339|  1.21M|    }
 1340|  1.21M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.27M|    {
 1430|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.27M|    {
  437|  1.27M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  50.2k|    {
 1486|  50.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.16M|    {
 1663|  1.16M|        return std::move(value());
 1664|  1.16M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   390k|    {
 2855|   390k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   390k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   390k|    {
 2836|   390k|        return t.data();
 2837|   390k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   465k|    {
 1837|   465k|        return detail::transform_error_impl(std::move(*this),
 1838|   465k|                                            std::forward<F>(f));
 1839|   465k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   465k|{
 1323|   465k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   465k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   465k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   465k|            return result(*std::forward<Exp>(exp));
 1327|   465k|        }
 1328|       |
 1329|   465k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   465k|        return result(unexpect, monostate{});
 1331|   465k|    }
 1332|   465k|    else {
 1333|   465k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   465k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   465k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 465k, False: 0]
  |  |  ------------------
  ------------------
 1335|   465k|                   ? result(*std::forward<Exp>(exp))
 1336|   465k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   465k|    }
 1340|   465k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   465k|    {
 1430|   465k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   465k|    {
  437|   465k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   465k|    {
 1177|   465k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   465k|    {
 1598|   465k|        return has_value();
 1599|   465k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   931k|    {
  485|   931k|        return m_has_value;
  486|   931k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   465k|    {
 1663|   465k|        return std::move(value());
 1664|   465k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   465k|    {
 1627|   465k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   465k|        return this->get_value();
 1629|   465k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   465k|    {
  451|   465k|        return m_value;
  452|   465k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   624k|    {
 1823|   624k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   624k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   624k|{
 1323|   624k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   624k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   624k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   624k|            return result(*std::forward<Exp>(exp));
 1327|   624k|        }
 1328|       |
 1329|   624k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   624k|        return result(unexpect, monostate{});
 1331|   624k|    }
 1332|   624k|    else {
 1333|   624k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   624k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   624k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 624k]
  |  |  ------------------
  ------------------
 1335|   624k|                   ? result(*std::forward<Exp>(exp))
 1336|   624k|                   : result(unexpect,
 1337|   624k|                            trivial_invoke(std::forward<F>(f),
 1338|   624k|                                           std::forward<Exp>(exp).error()));
 1339|   624k|    }
 1340|   624k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   219k|    {
 1653|   219k|        return value();
 1654|   219k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  84.9k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  8.41k|    {
 1673|  8.41k|        return &value();
 1674|  8.41k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   380k|    {
 2724|   380k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   380k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   380k|    {
 2705|   380k|        return decay_copy(t.begin());
 2706|   380k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   380k|{
 1949|   380k|    return SCN_FWD(t);
  ------------------
  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   380k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   200k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   465k|    {
 1837|   465k|        return detail::transform_error_impl(std::move(*this),
 1838|   465k|                                            std::forward<F>(f));
 1839|   465k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   465k|{
 1323|   465k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   465k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   465k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   465k|            return result(*std::forward<Exp>(exp));
 1327|   465k|        }
 1328|       |
 1329|   465k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   465k|        return result(unexpect, monostate{});
 1331|   465k|    }
 1332|   465k|    else {
 1333|   465k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   465k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   465k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 465k, False: 0]
  |  |  ------------------
  ------------------
 1335|   465k|                   ? result(*std::forward<Exp>(exp))
 1336|   465k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   465k|    }
 1340|   465k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   465k|    {
 1430|   465k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   465k|    {
  437|   465k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   465k|    {
 1177|   465k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   465k|    {
 1598|   465k|        return has_value();
 1599|   465k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   931k|    {
  485|   931k|        return m_has_value;
  486|   931k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   465k|    {
 1663|   465k|        return std::move(value());
 1664|   465k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   465k|    {
 1627|   465k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   465k|        return this->get_value();
 1629|   465k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   465k|    {
  451|   465k|        return m_value;
  452|   465k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   538k|    {
 1823|   538k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   538k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   538k|{
 1323|   538k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   538k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   538k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   538k|            return result(*std::forward<Exp>(exp));
 1327|   538k|        }
 1328|       |
 1329|   538k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   538k|        return result(unexpect, monostate{});
 1331|   538k|    }
 1332|   538k|    else {
 1333|   538k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   538k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   538k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 538k]
  |  |  ------------------
  ------------------
 1335|   538k|                   ? result(*std::forward<Exp>(exp))
 1336|   538k|                   : result(unexpect,
 1337|   538k|                            trivial_invoke(std::forward<F>(f),
 1338|   538k|                                           std::forward<Exp>(exp).error()));
 1339|   538k|    }
 1340|   538k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   538k|    {
 3648|   538k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   219k|    {
 1653|   219k|        return value();
 1654|   219k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.93k|    {
 1673|  2.93k|        return &value();
 1674|  2.93k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   624k|    {
 3648|   624k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   113k|    {
 1430|   113k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   113k|    {
  437|   113k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   115k|{
 3654|   115k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   115k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   896k|    {
 2855|   896k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   896k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   896k|    {
 2836|   896k|        return t.data();
 2837|   896k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  1.94M|    {
 5466|  1.94M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.94M|        return static_cast<std::size_t>(m_desc &
 5471|  1.94M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.94M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  3.89M|    {
 5491|  3.89M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  3.89M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  1.94M|    {
 5434|  1.94M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.94M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.94M|        const auto t = type(id);
 5446|  1.94M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.94M|        basic_scan_arg<Context> arg;
 5451|  1.94M|        arg.m_type = t;
 5452|  1.94M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.94M, False: 0]
  ------------------
 5453|  1.94M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.94M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.94M|        return arg;
 5459|  1.94M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  1.94M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.94M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.94M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.94M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.94M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  1.94M|    {
 5495|  1.94M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.94M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  3.69M|    {
 5247|  3.69M|        return m_type != detail::arg_type::none_type;
 5248|  3.69M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   297k|{
 8417|   297k|#define SCN_VISIT(Type)                                         \
 8418|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   297k|    }                                                           \
 8421|   297k|    else {                                                      \
 8422|   297k|        return vis(monostate_val);                              \
 8423|   297k|    }
 8424|       |
 8425|   297k|    monostate monostate_val{};
 8426|       |
 8427|   297k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 297k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 297k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 297k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 297k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 297k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 297k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 297k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 297k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 297k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 297k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 297k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 297k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 297k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 297k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 297k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  95.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 95.4k, False: 201k]
  ------------------
 8459|  95.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  95.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  95.4k|    }                                                           \
  |  | 8421|  95.4k|    else {                                                      \
  |  | 8422|  95.4k|        return vis(monostate_val);                              \
  |  | 8423|  95.4k|    }
  ------------------
 8460|  99.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 99.9k, False: 197k]
  ------------------
 8461|  99.9k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  99.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  99.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  99.9k|    }                                                           \
  |  | 8421|  99.9k|    else {                                                      \
  |  | 8422|  99.9k|        return vis(monostate_val);                              \
  |  | 8423|  99.9k|    }
  ------------------
 8462|   101k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 101k, False: 195k]
  ------------------
 8463|   101k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   101k|    }                                                           \
  |  | 8421|   101k|    else {                                                      \
  |  | 8422|   101k|        return vis(monostate_val);                              \
  |  | 8423|   101k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 297k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 297k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 297k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 297k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 297k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 297k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 297k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 297k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 297k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   297k|            SCN_CLANG_POP
 8495|   297k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.53M|    {
 5545|  1.53M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   826k|    {
 8138|   826k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.53M|    {
 8056|  1.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.15M|{
 4344|  1.15M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.15M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.15M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.15M|                            ranges::default_sentinel};
 4350|  1.15M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.15M|    {
 4177|  1.15M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.15M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.15M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   324k|{
 8417|   324k|#define SCN_VISIT(Type)                                         \
 8418|   324k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   324k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   324k|    }                                                           \
 8421|   324k|    else {                                                      \
 8422|   324k|        return vis(monostate_val);                              \
 8423|   324k|    }
 8424|       |
 8425|   324k|    monostate monostate_val{};
 8426|       |
 8427|   324k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 324k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 324k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 324k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 324k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 324k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 324k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 324k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 324k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 324k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 324k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 324k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 324k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 324k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 324k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 324k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 104k, False: 219k]
  ------------------
 8459|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   104k|    }                                                           \
  |  | 8421|   104k|    else {                                                      \
  |  | 8422|   104k|        return vis(monostate_val);                              \
  |  | 8423|   104k|    }
  ------------------
 8460|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 109k, False: 215k]
  ------------------
 8461|   109k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   109k|    }                                                           \
  |  | 8421|   109k|    else {                                                      \
  |  | 8422|   109k|        return vis(monostate_val);                              \
  |  | 8423|   109k|    }
  ------------------
 8462|   110k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 110k, False: 213k]
  ------------------
 8463|   110k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   110k|    }                                                           \
  |  | 8421|   110k|    else {                                                      \
  |  | 8422|   110k|        return vis(monostate_val);                              \
  |  | 8423|   110k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 324k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 324k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 324k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 324k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 324k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 324k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 324k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 324k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 324k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   324k|            SCN_CLANG_POP
 8495|   324k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   708k|{
 7044|   708k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   708k|    handler.check_args_exhausted();
 7046|   708k|    return handler.get_error();
 7047|   708k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   708k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   708k|    auto begin = format.data();
 7013|   708k|    auto it = begin;
 7014|   708k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.35M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 708k, False: 644k]
  ------------------
 7017|   708k|        const auto ch = *it++;
 7018|   708k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 708k, False: 0]
  ------------------
 7019|   708k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   708k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   708k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 64.1k, False: 644k]
  ------------------
 7023|  64.1k|                return;
 7024|  64.1k|            }
 7025|   708k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   708k|    }
 7036|       |
 7037|   644k|    handler.on_literal_text(begin, end);
 7038|   644k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   708k|{
 6942|   708k|    struct id_adapter {
 6943|   708k|        constexpr void operator()()
 6944|   708k|        {
 6945|   708k|            arg_id = handler.on_arg_id();
 6946|   708k|        }
 6947|   708k|        constexpr void operator()(std::size_t id)
 6948|   708k|        {
 6949|   708k|            arg_id = handler.on_arg_id(id);
 6950|   708k|        }
 6951|       |
 6952|   708k|        constexpr void on_error(const char* msg)
 6953|   708k|        {
 6954|   708k|            SCN_UNLIKELY_ATTR
 6955|   708k|            handler.on_error(msg);
 6956|   708k|        }
 6957|       |
 6958|   708k|        Handler& handler;
 6959|   708k|        std::size_t arg_id;
 6960|   708k|    };
 6961|       |
 6962|   708k|    ++begin;
 6963|   708k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   708k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 708k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   708k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 708k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   708k|    else {
 6975|   708k|        auto adapter = id_adapter{handler, 0};
 6976|   708k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   708k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   708k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 708k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   708k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 708k, False: 0]
  ------------------
 6987|   708k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   708k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   708k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  |  Branch (859:45): [True: 0, False: 708k]
  |  |  |  Branch (859:45): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   708k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   708k|    }
 7003|   708k|    return begin + 1;
 7004|   708k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.53M|    {
 8039|  1.53M|        return m_args.get(id);
 8040|  1.53M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.53M|    {
 8049|  1.53M|        return m_locale;
 8050|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.53M|    {
 5566|  1.53M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.53M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.53M|        do_check_arg_id(id);
 5574|  1.53M|        return id;
 5575|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.53M|{
 6054|  1.53M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.53M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.53M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   708k|{
 6443|   708k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   708k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 708k, False: 0]
  |  Branch (6444:26): [True: 0, False: 708k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   708k|    handler();
 6449|   708k|    return begin;
 6450|   708k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   708k|        {
 6945|   708k|            arg_id = handler.on_arg_id();
 6946|   708k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.07M|    {
 5252|  3.07M|        return m_type;
 5253|  3.07M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.53M|    {
 5561|  1.53M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.53M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.07M|    {
 5550|  3.07M|        return m_format.data();
 5551|  3.07M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   708k|    {
 7122|   708k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   708k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   708k|{
 6858|   708k|    auto do_presentation = [&]() -> const CharT* {
 6859|   708k|        if (*begin == CharT{'['}) {
 6860|   708k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   708k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   708k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   708k|                return begin;
 6866|   708k|            }
 6867|   708k|            handler.on_character_set_string(set);
 6868|   708k|            return begin;
 6869|   708k|        }
 6870|   708k|        if (*begin == CharT{'/'}) {
 6871|   708k|            return parse_presentation_regex(begin, end, handler);
 6872|   708k|        }
 6873|   708k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   708k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   708k|            handler.on_error("Invalid type specifier in format string");
 6876|   708k|            return begin;
 6877|   708k|        }
 6878|   708k|        handler.on_type(type);
 6879|   708k|        return begin;
 6880|   708k|    };
 6881|       |
 6882|   708k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 708k, False: 0]
  |  Branch (6882:28): [True: 708k, False: 0]
  ------------------
 6883|   708k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 708k, False: 0]
  |  Branch (6883:36): [True: 510k, False: 198k]
  ------------------
 6884|   510k|        return do_presentation();
 6885|   510k|    }
 6886|       |
 6887|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   198k|    begin = parse_align(begin, end, handler);
 6893|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   198k|    begin = parse_width(begin, end, handler);
 6899|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   198k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 198k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   198k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 198k, False: 0]
  ------------------
 6918|   198k|        handler.on_localized();
 6919|   198k|        ++begin;
 6920|   198k|    }
 6921|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   198k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 198k, False: 0]
  |  Branch (6926:25): [True: 0, False: 198k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   198k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   198k|    return begin;
 6935|   198k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.53M|{
 6507|  1.53M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.10M, False: 433k]
  |  Branch (6507:33): [True: 1.10M, False: 0]
  ------------------
 6508|  1.53M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 433k, False: 0]
  |  Branch (6508:33): [True: 433k, False: 0]
  ------------------
 6509|  1.53M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   510k|    auto do_presentation = [&]() -> const CharT* {
 6859|   510k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 510k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   510k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 510k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   510k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   510k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   510k|        handler.on_type(type);
 6879|   510k|        return begin;
 6880|   510k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.10M|{
 6455|  1.10M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.10M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.10M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.10M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.10M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.10M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.10M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.10M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.10M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.10M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.10M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   469k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 469k, False: 632k]
  ------------------
 6474|   469k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.10M]
  ------------------
 6475|   469k|            return presentation_type::float_hex;
 6476|  41.0k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 41.0k, False: 1.06M]
  ------------------
 6477|  41.0k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.10M]
  ------------------
 6478|  41.0k|            return presentation_type::float_scientific;
 6479|   223k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 223k, False: 877k]
  ------------------
 6480|   223k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.10M]
  ------------------
 6481|   223k|            return presentation_type::float_fixed;
 6482|   367k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 367k, False: 733k]
  ------------------
 6483|   367k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.10M]
  ------------------
 6484|   367k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.10M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.10M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.10M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.10M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.10M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.10M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.10M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.10M|    }
 6502|  1.10M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   198k|{
 6532|   198k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   198k|    auto check_align = [](wchar_t ch) {
 6535|   198k|        switch (ch) {
 6536|   198k|            case L'<':
 6537|   198k|                return align_type::left;
 6538|   198k|            case L'>':
 6539|   198k|                return align_type::right;
 6540|   198k|            case L'^':
 6541|   198k|                return align_type::center;
 6542|   198k|            default:
 6543|   198k|                return align_type::none;
 6544|   198k|        }
 6545|   198k|    };
 6546|       |
 6547|   198k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   198k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  |  Branch (859:45): [True: 0, False: 198k]
  |  |  |  Branch (859:45): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6549|   198k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   198k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   198k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   198k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   198k|    const auto begin_before_fill = begin;
 6559|   198k|    begin += potential_fill_len;
 6560|       |
 6561|   198k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 198k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   198k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   198k|    const auto begin_after_fill = begin;
 6567|   198k|    ++begin;
 6568|       |
 6569|   198k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 198k, False: 0]
  ------------------
 6570|   198k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   198k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 198k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   198k|    }
 6578|       |
 6579|   198k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 198k, False: 0]
  ------------------
 6580|   198k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 198k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   198k|        return begin_before_fill;
 6585|   198k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   198k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   433k|{
 6514|   433k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   433k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   433k|        return 1;
 6517|   433k|    }
 6518|   433k|    else {
 6519|   433k|        const auto lengths =
 6520|   433k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   433k|            "\3\4";
 6522|   433k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   433k|        return len;
 6524|   433k|    }
 6525|   433k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   396k|    auto check_align = [](wchar_t ch) {
 6535|   396k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 396k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 396k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 396k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   396k|            default:
  ------------------
  |  Branch (6542:13): [True: 396k, False: 0]
  ------------------
 6543|   396k|                return align_type::none;
 6544|   396k|        }
 6545|   396k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   198k|{
 6597|   198k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   198k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 198k, False: 0]
  |  Branch (6599:33): [True: 0, False: 198k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   198k|    return begin;
 6610|   198k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   198k|    {
 7127|   198k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   198k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 198k, False: 0]
  ------------------
 7129|   198k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 198k, False: 0]
  ------------------
 7130|   198k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 198k]
  ------------------
 7131|   198k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   198k|        Handler::on_localized();
 7139|   198k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   708k|{
 8417|   708k|#define SCN_VISIT(Type)                                         \
 8418|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   708k|    }                                                           \
 8421|   708k|    else {                                                      \
 8422|   708k|        return vis(monostate_val);                              \
 8423|   708k|    }
 8424|       |
 8425|   708k|    monostate monostate_val{};
 8426|       |
 8427|   708k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 708k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 708k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 708k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 708k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 708k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 708k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 708k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 708k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 708k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 708k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 708k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 708k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 708k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 708k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 708k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   230k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 230k, False: 478k]
  ------------------
 8459|   230k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8460|   237k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 237k, False: 470k]
  ------------------
 8461|   237k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   237k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   237k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   237k|    }                                                           \
  |  | 8421|   237k|    else {                                                      \
  |  | 8422|   237k|        return vis(monostate_val);                              \
  |  | 8423|   237k|    }
  ------------------
 8462|   240k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 240k, False: 468k]
  ------------------
 8463|   240k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   240k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   240k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   240k|    }                                                           \
  |  | 8421|   240k|    else {                                                      \
  |  | 8422|   240k|        return vis(monostate_val);                              \
  |  | 8423|   240k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 708k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 708k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 708k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 708k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 708k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 708k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 708k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 708k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 708k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   708k|            SCN_CLANG_POP
 8495|   708k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   826k|{
 7044|   826k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   826k|    handler.check_args_exhausted();
 7046|   826k|    return handler.get_error();
 7047|   826k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   826k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   826k|    auto begin = format.data();
 7013|   826k|    auto it = begin;
 7014|   826k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.58M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 826k, False: 762k]
  ------------------
 7017|   826k|        const auto ch = *it++;
 7018|   826k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 826k, False: 0]
  ------------------
 7019|   826k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   826k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   826k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 64.1k, False: 762k]
  ------------------
 7023|  64.1k|                return;
 7024|  64.1k|            }
 7025|   826k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   826k|    }
 7036|       |
 7037|   762k|    handler.on_literal_text(begin, end);
 7038|   762k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   762k|    {
 8175|   762k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   762k|    static_cast<    \
  |  |  929|   762k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   762k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   826k|{
 6942|   826k|    struct id_adapter {
 6943|   826k|        constexpr void operator()()
 6944|   826k|        {
 6945|   826k|            arg_id = handler.on_arg_id();
 6946|   826k|        }
 6947|   826k|        constexpr void operator()(std::size_t id)
 6948|   826k|        {
 6949|   826k|            arg_id = handler.on_arg_id(id);
 6950|   826k|        }
 6951|       |
 6952|   826k|        constexpr void on_error(const char* msg)
 6953|   826k|        {
 6954|   826k|            SCN_UNLIKELY_ATTR
 6955|   826k|            handler.on_error(msg);
 6956|   826k|        }
 6957|       |
 6958|   826k|        Handler& handler;
 6959|   826k|        std::size_t arg_id;
 6960|   826k|    };
 6961|       |
 6962|   826k|    ++begin;
 6963|   826k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   826k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 826k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   826k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 826k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   826k|    else {
 6975|   826k|        auto adapter = id_adapter{handler, 0};
 6976|   826k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   826k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   826k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 826k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   826k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 826k, False: 0]
  ------------------
 6987|   826k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   826k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   826k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  |  Branch (859:45): [True: 0, False: 826k]
  |  |  |  Branch (859:45): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   826k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   826k|    }
 7003|   826k|    return begin + 1;
 7004|   826k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   826k|{
 6443|   826k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   826k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   826k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   826k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 826k, False: 0]
  |  Branch (6444:26): [True: 0, False: 826k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   826k|    handler();
 6449|   826k|    return begin;
 6450|   826k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   826k|        {
 6945|   826k|            arg_id = handler.on_arg_id();
 6946|   826k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   826k|    {
 7122|   826k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   826k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   826k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   826k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   826k|{
 6858|   826k|    auto do_presentation = [&]() -> const CharT* {
 6859|   826k|        if (*begin == CharT{'['}) {
 6860|   826k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   826k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   826k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   826k|                return begin;
 6866|   826k|            }
 6867|   826k|            handler.on_character_set_string(set);
 6868|   826k|            return begin;
 6869|   826k|        }
 6870|   826k|        if (*begin == CharT{'/'}) {
 6871|   826k|            return parse_presentation_regex(begin, end, handler);
 6872|   826k|        }
 6873|   826k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   826k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   826k|            handler.on_error("Invalid type specifier in format string");
 6876|   826k|            return begin;
 6877|   826k|        }
 6878|   826k|        handler.on_type(type);
 6879|   826k|        return begin;
 6880|   826k|    };
 6881|       |
 6882|   826k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 826k, False: 0]
  |  Branch (6882:28): [True: 826k, False: 0]
  ------------------
 6883|   826k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 826k, False: 0]
  |  Branch (6883:36): [True: 591k, False: 235k]
  ------------------
 6884|   591k|        return do_presentation();
 6885|   591k|    }
 6886|       |
 6887|   235k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   235k|    begin = parse_align(begin, end, handler);
 6893|   235k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   235k|    begin = parse_width(begin, end, handler);
 6899|   235k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   235k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 235k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   235k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 235k, False: 0]
  ------------------
 6918|   235k|        handler.on_localized();
 6919|   235k|        ++begin;
 6920|   235k|    }
 6921|   235k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   235k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 235k, False: 0]
  |  Branch (6926:25): [True: 0, False: 235k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   235k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   235k|    return begin;
 6935|   235k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   591k|    auto do_presentation = [&]() -> const CharT* {
 6859|   591k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 591k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   591k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 591k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   591k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   591k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 591k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   591k|        handler.on_type(type);
 6879|   591k|        return begin;
 6880|   591k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   235k|{
 6532|   235k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   235k|    auto check_align = [](wchar_t ch) {
 6535|   235k|        switch (ch) {
 6536|   235k|            case L'<':
 6537|   235k|                return align_type::left;
 6538|   235k|            case L'>':
 6539|   235k|                return align_type::right;
 6540|   235k|            case L'^':
 6541|   235k|                return align_type::center;
 6542|   235k|            default:
 6543|   235k|                return align_type::none;
 6544|   235k|        }
 6545|   235k|    };
 6546|       |
 6547|   235k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   235k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  |  Branch (859:45): [True: 0, False: 235k]
  |  |  |  Branch (859:45): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6549|   235k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   235k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   235k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   235k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   235k|    const auto begin_before_fill = begin;
 6559|   235k|    begin += potential_fill_len;
 6560|       |
 6561|   235k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 235k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   235k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   235k|    const auto begin_after_fill = begin;
 6567|   235k|    ++begin;
 6568|       |
 6569|   235k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 235k, False: 0]
  ------------------
 6570|   235k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   235k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 235k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   235k|    }
 6578|       |
 6579|   235k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 235k, False: 0]
  ------------------
 6580|   235k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 235k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   235k|        return begin_before_fill;
 6585|   235k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   235k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   471k|    auto check_align = [](wchar_t ch) {
 6535|   471k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 471k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 471k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 471k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   471k|            default:
  ------------------
  |  Branch (6542:13): [True: 471k, False: 0]
  ------------------
 6543|   471k|                return align_type::none;
 6544|   471k|        }
 6545|   471k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   235k|{
 6597|   235k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   235k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 235k, False: 0]
  |  Branch (6599:33): [True: 0, False: 235k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   235k|    return begin;
 6610|   235k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   235k|    {
 7127|   235k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   235k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 235k, False: 0]
  ------------------
 7129|   235k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 235k, False: 0]
  ------------------
 7130|   235k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 235k]
  ------------------
 7131|   235k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   235k|        Handler::on_localized();
 7139|   235k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   826k|{
 8417|   826k|#define SCN_VISIT(Type)                                         \
 8418|   826k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   826k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   826k|    }                                                           \
 8421|   826k|    else {                                                      \
 8422|   826k|        return vis(monostate_val);                              \
 8423|   826k|    }
 8424|       |
 8425|   826k|    monostate monostate_val{};
 8426|       |
 8427|   826k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 826k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 826k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 826k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 826k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 826k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 826k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 826k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 826k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 826k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 826k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 826k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 826k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 826k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 826k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 826k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   267k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 267k, False: 559k]
  ------------------
 8459|   267k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   267k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   267k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   267k|    }                                                           \
  |  | 8421|   267k|    else {                                                      \
  |  | 8422|   267k|        return vis(monostate_val);                              \
  |  | 8423|   267k|    }
  ------------------
 8460|   278k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 278k, False: 548k]
  ------------------
 8461|   278k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   278k|    }                                                           \
  |  | 8421|   278k|    else {                                                      \
  |  | 8422|   278k|        return vis(monostate_val);                              \
  |  | 8423|   278k|    }
  ------------------
 8462|   280k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 280k, False: 545k]
  ------------------
 8463|   280k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   280k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   280k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   280k|    }                                                           \
  |  | 8421|   280k|    else {                                                      \
  |  | 8422|   280k|        return vis(monostate_val);                              \
  |  | 8423|   280k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 826k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 826k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 826k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 826k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 826k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 826k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 826k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 826k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 826k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   826k|            SCN_CLANG_POP
 8495|   826k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  83.4k|    {
 4076|  83.4k|        sync(0);
 4077|  83.4k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   857k|    {
 5466|   857k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 857k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   857k|        return static_cast<std::size_t>(m_desc &
 5471|   857k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   857k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.71M|    {
 5491|  1.71M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.71M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   857k|    {
 5434|   857k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 857k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   857k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 857k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   857k|        const auto t = type(id);
 5446|   857k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 857k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   857k|        basic_scan_arg<Context> arg;
 5451|   857k|        arg.m_type = t;
 5452|   857k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 857k, False: 0]
  ------------------
 5453|   857k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   857k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   857k|        return arg;
 5459|   857k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   857k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   857k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   857k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   857k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   857k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   857k|    {
 5495|   857k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   857k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.63M|    {
 5247|  1.63M|        return m_type != detail::arg_type::none_type;
 5248|  1.63M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   121k|{
 8417|   121k|#define SCN_VISIT(Type)                                         \
 8418|   121k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   121k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   121k|    }                                                           \
 8421|   121k|    else {                                                      \
 8422|   121k|        return vis(monostate_val);                              \
 8423|   121k|    }
 8424|       |
 8425|   121k|    monostate monostate_val{};
 8426|       |
 8427|   121k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 121k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 121k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 121k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 121k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 121k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 121k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 121k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 121k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 121k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 121k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 121k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 121k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 121k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 121k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 121k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  38.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 38.5k, False: 82.8k]
  ------------------
 8459|  38.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  38.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.5k|    }                                                           \
  |  | 8421|  38.5k|    else {                                                      \
  |  | 8422|  38.5k|        return vis(monostate_val);                              \
  |  | 8423|  38.5k|    }
  ------------------
 8460|  40.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 40.8k, False: 80.5k]
  ------------------
 8461|  40.8k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  40.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  40.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  40.8k|    }                                                           \
  |  | 8421|  40.8k|    else {                                                      \
  |  | 8422|  40.8k|        return vis(monostate_val);                              \
  |  | 8423|  40.8k|    }
  ------------------
 8462|  41.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 41.9k, False: 79.4k]
  ------------------
 8463|  41.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  41.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.9k|    }                                                           \
  |  | 8421|  41.9k|    else {                                                      \
  |  | 8422|  41.9k|        return vis(monostate_val);                              \
  |  | 8423|  41.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 121k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 121k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 121k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 121k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 121k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 121k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 121k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 121k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 121k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   121k|            SCN_CLANG_POP
 8495|   121k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   695k|    {
 5545|   695k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   347k|    {
 8138|   347k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   695k|    {
 8056|   695k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   347k|{
 7044|   347k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   347k|    handler.check_args_exhausted();
 7046|   347k|    return handler.get_error();
 7047|   347k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   347k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   347k|    auto begin = format.data();
 7013|   347k|    auto it = begin;
 7014|   347k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   567k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 347k, False: 219k]
  ------------------
 7017|   347k|        const auto ch = *it++;
 7018|   347k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 347k, False: 0]
  ------------------
 7019|   347k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   347k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   347k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 128k, False: 219k]
  ------------------
 7023|   128k|                return;
 7024|   128k|            }
 7025|   347k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   347k|    }
 7036|       |
 7037|   219k|    handler.on_literal_text(begin, end);
 7038|   219k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   347k|{
 6942|   347k|    struct id_adapter {
 6943|   347k|        constexpr void operator()()
 6944|   347k|        {
 6945|   347k|            arg_id = handler.on_arg_id();
 6946|   347k|        }
 6947|   347k|        constexpr void operator()(std::size_t id)
 6948|   347k|        {
 6949|   347k|            arg_id = handler.on_arg_id(id);
 6950|   347k|        }
 6951|       |
 6952|   347k|        constexpr void on_error(const char* msg)
 6953|   347k|        {
 6954|   347k|            SCN_UNLIKELY_ATTR
 6955|   347k|            handler.on_error(msg);
 6956|   347k|        }
 6957|       |
 6958|   347k|        Handler& handler;
 6959|   347k|        std::size_t arg_id;
 6960|   347k|    };
 6961|       |
 6962|   347k|    ++begin;
 6963|   347k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   347k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 347k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   347k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 347k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   347k|    else {
 6975|   347k|        auto adapter = id_adapter{handler, 0};
 6976|   347k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   347k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   347k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 347k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   347k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 347k, False: 0]
  ------------------
 6987|   347k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   347k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   347k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  |  Branch (859:45): [True: 0, False: 347k]
  |  |  |  Branch (859:45): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   347k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   347k|    }
 7003|   347k|    return begin + 1;
 7004|   347k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   695k|    {
 8039|   695k|        return m_args.get(id);
 8040|   695k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   695k|    {
 8049|   695k|        return m_locale;
 8050|   695k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   695k|    {
 5566|   695k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   695k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   695k|        do_check_arg_id(id);
 5574|   695k|        return id;
 5575|   695k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   695k|{
 6054|   695k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   695k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   695k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   347k|{
 6443|   347k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   347k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 347k, False: 0]
  |  Branch (6444:26): [True: 0, False: 347k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   347k|    handler();
 6449|   347k|    return begin;
 6450|   347k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   347k|        {
 6945|   347k|            arg_id = handler.on_arg_id();
 6946|   347k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.39M|    {
 5252|  1.39M|        return m_type;
 5253|  1.39M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   695k|    {
 5561|   695k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   695k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   468k|{
 4344|   468k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 468k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   468k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   468k|                            ranges::default_sentinel};
 4350|   468k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   468k|    {
 4177|   468k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   468k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   468k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.39M|    {
 5550|  1.39M|        return m_format.data();
 5551|  1.39M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   347k|    {
 7122|   347k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   347k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   347k|{
 6858|   347k|    auto do_presentation = [&]() -> const CharT* {
 6859|   347k|        if (*begin == CharT{'['}) {
 6860|   347k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   347k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   347k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   347k|                return begin;
 6866|   347k|            }
 6867|   347k|            handler.on_character_set_string(set);
 6868|   347k|            return begin;
 6869|   347k|        }
 6870|   347k|        if (*begin == CharT{'/'}) {
 6871|   347k|            return parse_presentation_regex(begin, end, handler);
 6872|   347k|        }
 6873|   347k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   347k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   347k|            handler.on_error("Invalid type specifier in format string");
 6876|   347k|            return begin;
 6877|   347k|        }
 6878|   347k|        handler.on_type(type);
 6879|   347k|        return begin;
 6880|   347k|    };
 6881|       |
 6882|   347k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 347k, False: 0]
  |  Branch (6882:28): [True: 347k, False: 0]
  ------------------
 6883|   347k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 347k, False: 0]
  |  Branch (6883:36): [True: 266k, False: 80.9k]
  ------------------
 6884|   266k|        return do_presentation();
 6885|   266k|    }
 6886|       |
 6887|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  80.9k|    begin = parse_align(begin, end, handler);
 6893|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  80.9k|    begin = parse_width(begin, end, handler);
 6899|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  80.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 80.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  80.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 80.9k, False: 0]
  ------------------
 6918|  80.9k|        handler.on_localized();
 6919|  80.9k|        ++begin;
 6920|  80.9k|    }
 6921|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  80.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 80.9k, False: 0]
  |  Branch (6926:25): [True: 0, False: 80.9k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  80.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  80.9k|    return begin;
 6935|  80.9k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   695k|{
 6507|   695k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 533k, False: 161k]
  |  Branch (6507:33): [True: 533k, False: 0]
  ------------------
 6508|   695k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 161k, False: 0]
  |  Branch (6508:33): [True: 161k, False: 0]
  ------------------
 6509|   695k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   266k|    auto do_presentation = [&]() -> const CharT* {
 6859|   266k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 266k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   266k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 266k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   266k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   266k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   266k|        handler.on_type(type);
 6879|   266k|        return begin;
 6880|   266k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   533k|{
 6455|   533k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 533k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 533k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 533k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 533k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 533k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 533k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 533k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 533k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 533k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 533k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   170k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 170k, False: 362k]
  ------------------
 6474|   170k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 533k]
  ------------------
 6475|   170k|            return presentation_type::float_hex;
 6476|  52.3k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 52.3k, False: 481k]
  ------------------
 6477|  52.3k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 533k]
  ------------------
 6478|  52.3k|            return presentation_type::float_scientific;
 6479|   149k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 149k, False: 383k]
  ------------------
 6480|   149k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 533k]
  ------------------
 6481|   149k|            return presentation_type::float_fixed;
 6482|   160k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 160k, False: 372k]
  ------------------
 6483|   160k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 533k]
  ------------------
 6484|   160k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 533k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 533k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 533k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 533k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 533k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 533k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 533k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   533k|    }
 6502|   533k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  80.9k|{
 6532|  80.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  80.9k|    auto check_align = [](wchar_t ch) {
 6535|  80.9k|        switch (ch) {
 6536|  80.9k|            case L'<':
 6537|  80.9k|                return align_type::left;
 6538|  80.9k|            case L'>':
 6539|  80.9k|                return align_type::right;
 6540|  80.9k|            case L'^':
 6541|  80.9k|                return align_type::center;
 6542|  80.9k|            default:
 6543|  80.9k|                return align_type::none;
 6544|  80.9k|        }
 6545|  80.9k|    };
 6546|       |
 6547|  80.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  80.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  |  Branch (859:45): [True: 0, False: 80.9k]
  |  |  |  Branch (859:45): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6549|  80.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  80.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  80.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  80.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  80.9k|    const auto begin_before_fill = begin;
 6559|  80.9k|    begin += potential_fill_len;
 6560|       |
 6561|  80.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 80.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  80.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  80.9k|    const auto begin_after_fill = begin;
 6567|  80.9k|    ++begin;
 6568|       |
 6569|  80.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 80.9k, False: 0]
  ------------------
 6570|  80.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  80.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 80.9k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  80.9k|    }
 6578|       |
 6579|  80.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 80.9k, False: 0]
  ------------------
 6580|  80.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 80.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  80.9k|        return begin_before_fill;
 6585|  80.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  80.9k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   161k|{
 6514|   161k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   161k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   161k|        return 1;
 6517|   161k|    }
 6518|   161k|    else {
 6519|   161k|        const auto lengths =
 6520|   161k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   161k|            "\3\4";
 6522|   161k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   161k|        return len;
 6524|   161k|    }
 6525|   161k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   161k|    auto check_align = [](wchar_t ch) {
 6535|   161k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 161k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 161k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 161k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   161k|            default:
  ------------------
  |  Branch (6542:13): [True: 161k, False: 0]
  ------------------
 6543|   161k|                return align_type::none;
 6544|   161k|        }
 6545|   161k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  80.9k|{
 6597|  80.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  80.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 80.9k, False: 0]
  |  Branch (6599:33): [True: 0, False: 80.9k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  80.9k|    return begin;
 6610|  80.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  80.9k|    {
 7127|  80.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  80.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 80.9k, False: 0]
  ------------------
 7129|  80.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 80.9k, False: 0]
  ------------------
 7130|  80.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 80.9k]
  ------------------
 7131|  80.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  80.9k|        Handler::on_localized();
 7139|  80.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   347k|{
 8417|   347k|#define SCN_VISIT(Type)                                         \
 8418|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   347k|    }                                                           \
 8421|   347k|    else {                                                      \
 8422|   347k|        return vis(monostate_val);                              \
 8423|   347k|    }
 8424|       |
 8425|   347k|    monostate monostate_val{};
 8426|       |
 8427|   347k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 347k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 347k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 347k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 347k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 347k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 347k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 347k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 347k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 347k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 347k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 347k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 347k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 347k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 347k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 347k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   113k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 113k, False: 234k]
  ------------------
 8459|   113k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   113k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   113k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   113k|    }                                                           \
  |  | 8421|   113k|    else {                                                      \
  |  | 8422|   113k|        return vis(monostate_val);                              \
  |  | 8423|   113k|    }
  ------------------
 8460|   116k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 116k, False: 231k]
  ------------------
 8461|   116k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   116k|    }                                                           \
  |  | 8421|   116k|    else {                                                      \
  |  | 8422|   116k|        return vis(monostate_val);                              \
  |  | 8423|   116k|    }
  ------------------
 8462|   118k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 118k, False: 229k]
  ------------------
 8463|   118k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   118k|    }                                                           \
  |  | 8421|   118k|    else {                                                      \
  |  | 8422|   118k|        return vis(monostate_val);                              \
  |  | 8423|   118k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 347k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 347k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 347k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 347k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 347k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 347k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 347k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 347k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 347k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   347k|            SCN_CLANG_POP
 8495|   347k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   121k|{
 8417|   121k|#define SCN_VISIT(Type)                                         \
 8418|   121k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   121k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   121k|    }                                                           \
 8421|   121k|    else {                                                      \
 8422|   121k|        return vis(monostate_val);                              \
 8423|   121k|    }
 8424|       |
 8425|   121k|    monostate monostate_val{};
 8426|       |
 8427|   121k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 121k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 121k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 121k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 121k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 121k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 121k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 121k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 121k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 121k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 121k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 121k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 121k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 121k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 121k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 121k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  38.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 38.5k, False: 82.7k]
  ------------------
 8459|  38.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  38.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.5k|    }                                                           \
  |  | 8421|  38.5k|    else {                                                      \
  |  | 8422|  38.5k|        return vis(monostate_val);                              \
  |  | 8423|  38.5k|    }
  ------------------
 8460|  40.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 40.7k, False: 80.5k]
  ------------------
 8461|  40.7k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  40.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  40.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  40.7k|    }                                                           \
  |  | 8421|  40.7k|    else {                                                      \
  |  | 8422|  40.7k|        return vis(monostate_val);                              \
  |  | 8423|  40.7k|    }
  ------------------
 8462|  41.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 41.9k, False: 79.3k]
  ------------------
 8463|  41.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  41.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  41.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  41.9k|    }                                                           \
  |  | 8421|  41.9k|    else {                                                      \
  |  | 8422|  41.9k|        return vis(monostate_val);                              \
  |  | 8423|  41.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 121k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 121k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 121k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 121k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 121k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 121k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 121k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 121k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 121k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   121k|            SCN_CLANG_POP
 8495|   121k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   347k|{
 7044|   347k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   347k|    handler.check_args_exhausted();
 7046|   347k|    return handler.get_error();
 7047|   347k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   347k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   347k|    auto begin = format.data();
 7013|   347k|    auto it = begin;
 7014|   347k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   566k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 347k, False: 219k]
  ------------------
 7017|   347k|        const auto ch = *it++;
 7018|   347k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 347k, False: 0]
  ------------------
 7019|   347k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   347k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   347k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 128k, False: 219k]
  ------------------
 7023|   128k|                return;
 7024|   128k|            }
 7025|   347k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   347k|    }
 7036|       |
 7037|   219k|    handler.on_literal_text(begin, end);
 7038|   219k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   219k|    {
 8175|   219k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   219k|    static_cast<    \
  |  |  929|   219k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   219k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   347k|{
 6942|   347k|    struct id_adapter {
 6943|   347k|        constexpr void operator()()
 6944|   347k|        {
 6945|   347k|            arg_id = handler.on_arg_id();
 6946|   347k|        }
 6947|   347k|        constexpr void operator()(std::size_t id)
 6948|   347k|        {
 6949|   347k|            arg_id = handler.on_arg_id(id);
 6950|   347k|        }
 6951|       |
 6952|   347k|        constexpr void on_error(const char* msg)
 6953|   347k|        {
 6954|   347k|            SCN_UNLIKELY_ATTR
 6955|   347k|            handler.on_error(msg);
 6956|   347k|        }
 6957|       |
 6958|   347k|        Handler& handler;
 6959|   347k|        std::size_t arg_id;
 6960|   347k|    };
 6961|       |
 6962|   347k|    ++begin;
 6963|   347k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   347k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 347k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   347k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 347k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   347k|    else {
 6975|   347k|        auto adapter = id_adapter{handler, 0};
 6976|   347k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   347k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   347k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 347k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   347k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 347k, False: 0]
  ------------------
 6987|   347k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   347k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   347k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  |  Branch (859:45): [True: 0, False: 347k]
  |  |  |  Branch (859:45): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   347k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   347k|    }
 7003|   347k|    return begin + 1;
 7004|   347k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   347k|{
 6443|   347k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   347k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 347k, False: 0]
  |  Branch (6444:26): [True: 0, False: 347k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   347k|    handler();
 6449|   347k|    return begin;
 6450|   347k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   347k|        {
 6945|   347k|            arg_id = handler.on_arg_id();
 6946|   347k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   347k|    {
 7122|   347k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   347k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   347k|{
 6858|   347k|    auto do_presentation = [&]() -> const CharT* {
 6859|   347k|        if (*begin == CharT{'['}) {
 6860|   347k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   347k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   347k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   347k|                return begin;
 6866|   347k|            }
 6867|   347k|            handler.on_character_set_string(set);
 6868|   347k|            return begin;
 6869|   347k|        }
 6870|   347k|        if (*begin == CharT{'/'}) {
 6871|   347k|            return parse_presentation_regex(begin, end, handler);
 6872|   347k|        }
 6873|   347k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   347k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   347k|            handler.on_error("Invalid type specifier in format string");
 6876|   347k|            return begin;
 6877|   347k|        }
 6878|   347k|        handler.on_type(type);
 6879|   347k|        return begin;
 6880|   347k|    };
 6881|       |
 6882|   347k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 347k, False: 0]
  |  Branch (6882:28): [True: 347k, False: 0]
  ------------------
 6883|   347k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 347k, False: 0]
  |  Branch (6883:36): [True: 266k, False: 80.8k]
  ------------------
 6884|   266k|        return do_presentation();
 6885|   266k|    }
 6886|       |
 6887|  80.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  80.8k|    begin = parse_align(begin, end, handler);
 6893|  80.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  80.8k|    begin = parse_width(begin, end, handler);
 6899|  80.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  80.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 80.8k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  80.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 80.8k, False: 0]
  ------------------
 6918|  80.8k|        handler.on_localized();
 6919|  80.8k|        ++begin;
 6920|  80.8k|    }
 6921|  80.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  80.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 80.8k, False: 0]
  |  Branch (6926:25): [True: 0, False: 80.8k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  80.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  80.8k|    return begin;
 6935|  80.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   266k|    auto do_presentation = [&]() -> const CharT* {
 6859|   266k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 266k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   266k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 266k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   266k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   266k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   266k|        handler.on_type(type);
 6879|   266k|        return begin;
 6880|   266k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  80.8k|{
 6532|  80.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  80.8k|    auto check_align = [](wchar_t ch) {
 6535|  80.8k|        switch (ch) {
 6536|  80.8k|            case L'<':
 6537|  80.8k|                return align_type::left;
 6538|  80.8k|            case L'>':
 6539|  80.8k|                return align_type::right;
 6540|  80.8k|            case L'^':
 6541|  80.8k|                return align_type::center;
 6542|  80.8k|            default:
 6543|  80.8k|                return align_type::none;
 6544|  80.8k|        }
 6545|  80.8k|    };
 6546|       |
 6547|  80.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  80.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  |  Branch (859:45): [True: 0, False: 80.8k]
  |  |  |  Branch (859:45): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6549|  80.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  80.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  80.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  80.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  80.8k|    const auto begin_before_fill = begin;
 6559|  80.8k|    begin += potential_fill_len;
 6560|       |
 6561|  80.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 80.8k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  80.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  80.8k|    const auto begin_after_fill = begin;
 6567|  80.8k|    ++begin;
 6568|       |
 6569|  80.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 80.8k, False: 0]
  ------------------
 6570|  80.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  80.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 80.8k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  80.8k|    }
 6578|       |
 6579|  80.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 80.8k, False: 0]
  ------------------
 6580|  80.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 80.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  80.8k|        return begin_before_fill;
 6585|  80.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  80.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   161k|    auto check_align = [](wchar_t ch) {
 6535|   161k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 161k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 161k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 161k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   161k|            default:
  ------------------
  |  Branch (6542:13): [True: 161k, False: 0]
  ------------------
 6543|   161k|                return align_type::none;
 6544|   161k|        }
 6545|   161k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  80.8k|{
 6597|  80.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  80.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 80.8k, False: 0]
  |  Branch (6599:33): [True: 0, False: 80.8k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  80.8k|    return begin;
 6610|  80.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  80.8k|    {
 7127|  80.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  80.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 80.8k, False: 0]
  ------------------
 7129|  80.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 80.8k, False: 0]
  ------------------
 7130|  80.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 80.8k]
  ------------------
 7131|  80.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  80.8k|        Handler::on_localized();
 7139|  80.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   347k|{
 8417|   347k|#define SCN_VISIT(Type)                                         \
 8418|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   347k|    }                                                           \
 8421|   347k|    else {                                                      \
 8422|   347k|        return vis(monostate_val);                              \
 8423|   347k|    }
 8424|       |
 8425|   347k|    monostate monostate_val{};
 8426|       |
 8427|   347k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 347k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 347k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 347k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 347k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 347k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 347k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 347k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 347k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 347k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 347k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 347k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 347k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 347k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 347k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 347k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   113k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 113k, False: 234k]
  ------------------
 8459|   113k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   113k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   113k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   113k|    }                                                           \
  |  | 8421|   113k|    else {                                                      \
  |  | 8422|   113k|        return vis(monostate_val);                              \
  |  | 8423|   113k|    }
  ------------------
 8460|   116k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 116k, False: 231k]
  ------------------
 8461|   116k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   116k|    }                                                           \
  |  | 8421|   116k|    else {                                                      \
  |  | 8422|   116k|        return vis(monostate_val);                              \
  |  | 8423|   116k|    }
  ------------------
 8462|   117k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 117k, False: 229k]
  ------------------
 8463|   117k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   117k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   117k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   117k|    }                                                           \
  |  | 8421|   117k|    else {                                                      \
  |  | 8422|   117k|        return vis(monostate_val);                              \
  |  | 8423|   117k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 347k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 347k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 347k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 347k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 347k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 347k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 347k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 347k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 347k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   347k|            SCN_CLANG_POP
 8495|   347k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   166k|    {
 4076|   166k|        sync(0);
 4077|   166k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   207k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  80.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  69.5k|{
   89|  69.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  69.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  69.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   214k|{
   44|   214k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   214k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  69.5k|{
  127|  69.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  69.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  69.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  69.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   214k|{
   60|   214k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   214k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  12.8k|{
  163|  12.8k|    T value;
  164|  12.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 8.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.58k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.58k|    static_cast<    \
  |  |  929|  8.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.58k|    static_cast<    \
  |  |  929|  8.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  40.4k|{
   72|  40.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  40.4k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  71.7k|{
   89|  71.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  71.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  71.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  71.7k|{
  127|  71.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  71.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  71.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  71.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.6k|{
  163|  13.6k|    T value;
  164|  13.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 9.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.32k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.32k|    static_cast<    \
  |  |  929|  9.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.32k|    static_cast<    \
  |  |  929|  9.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  73.0k|{
   89|  73.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  73.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  73.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  73.0k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  73.0k|{
  127|  73.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  73.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  73.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  73.0k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  13.9k|{
  163|  13.9k|    T value;
  164|  13.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 9.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.72k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.72k|    static_cast<    \
  |  |  929|  9.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.72k|    static_cast<    \
  |  |  929|  9.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.9k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  69.5k|{
   89|  69.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  69.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  69.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   214k|{
   44|   214k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   214k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  69.5k|{
  127|  69.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  69.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  69.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  69.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   214k|{
   60|   214k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   214k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  12.8k|{
  163|  12.8k|    T value;
  164|  12.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  12.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 8.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  8.57k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.57k|    static_cast<    \
  |  |  929|  8.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  8.57k|    static_cast<    \
  |  |  929|  8.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  12.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  40.4k|{
   72|  40.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  40.4k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  71.7k|{
   89|  71.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  71.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  71.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  71.7k|{
  127|  71.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  71.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  71.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  71.7k|    static_cast<    \
  |  |  929|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  71.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.5k|{
  163|  13.5k|    T value;
  164|  13.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 9.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.31k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.31k|    static_cast<    \
  |  |  929|  9.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.31k|    static_cast<    \
  |  |  929|  9.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  72.9k|{
   89|  72.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  72.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  72.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  72.9k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  72.9k|{
  127|  72.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  72.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  72.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  72.9k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  13.9k|{
  163|  13.9k|    T value;
  164|  13.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  13.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 9.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.27k|    }                                                  \
  |  |  |  | 3671|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.70k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.70k|    static_cast<    \
  |  |  929|  9.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.70k|    static_cast<    \
  |  |  929|  9.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.40M|{
  653|  1.40M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.40M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   587k|{
  659|   587k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   587k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 293k, False: 293k]
  ------------------
  661|   587k|                    : std::locale{};
  662|   587k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   657k|{
 1221|   657k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   657k|                                  m_nan_payload_buffer, value);
 1223|   657k|    value = this->setsign(value);
 1224|   657k|    return n;
 1225|   657k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   223k|{
 1221|   223k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   223k|                                  m_nan_payload_buffer, value);
 1223|   223k|    value = this->setsign(value);
 1224|   223k|    return n;
 1225|   223k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   682k|{
 1221|   682k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   682k|                                  m_nan_payload_buffer, value);
 1223|   682k|    value = this->setsign(value);
 1224|   682k|    return n;
 1225|   682k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   233k|{
 1221|   233k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   233k|                                  m_nan_payload_buffer, value);
 1223|   233k|    value = this->setsign(value);
 1224|   233k|    return n;
 1225|   233k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   688k|{
 1221|   688k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   688k|                                  m_nan_payload_buffer, value);
 1223|   688k|    value = this->setsign(value);
 1224|   688k|    return n;
 1225|   688k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   237k|{
 1221|   237k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   237k|                                  m_nan_payload_buffer, value);
 1223|   237k|    value = this->setsign(value);
 1224|   237k|    return n;
 1225|   237k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   453k|{
 2184|   453k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   453k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   521k|{
 2192|   521k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   521k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   521k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 482k, False: 38.5k]
  |  |  ------------------
  ------------------
 2194|   482k|        source.sync(*n);
 2195|   482k|    }
 2196|  38.5k|    else {
 2197|  38.5k|        source.sync_all();
 2198|  38.5k|    }
 2199|   521k|    return n;
 2200|   521k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   214k|{
 2208|   214k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   214k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   214k|{
 2216|   214k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   214k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   214k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 137k, False: 77.0k]
  |  |  ------------------
  ------------------
 2218|   137k|        source.sync(*n);
 2219|   137k|    }
 2220|  77.0k|    else {
 2221|  77.0k|        source.sync_all();
 2222|  77.0k|    }
 2223|   214k|    return n;
 2224|   214k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   896k|{
  194|   896k|    return find_classic_impl(
  195|   896k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   896k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   896k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.14M|{
  202|  2.14M|    return find_classic_impl(
  203|  2.14M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.14M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.14M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   453k|{
 2141|   453k|    return vscan_internal(source, format, args);
 2142|   453k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   521k|{
 2147|   521k|    auto n = vscan_internal(source, format, args);
 2148|   521k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   521k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 482k, False: 38.5k]
  |  |  ------------------
  ------------------
 2149|   482k|        source.sync(*n);
 2150|   482k|    }
 2151|  38.5k|    else {
 2152|  38.5k|        source.sync_all();
 2153|  38.5k|    }
 2154|   521k|    return n;
 2155|   521k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   214k|{
 2161|   214k|    return vscan_internal(source, format, args);
 2162|   214k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   214k|{
 2167|   214k|    auto n = vscan_internal(source, format, args);
 2168|   214k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   214k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 137k, False: 77.0k]
  |  |  ------------------
  ------------------
 2169|   137k|        source.sync(*n);
 2170|   137k|    }
 2171|  77.0k|    else {
 2172|  77.0k|        source.sync_all();
 2173|  77.0k|    }
 2174|   214k|    return n;
 2175|   214k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  99.0k|{
 2251|  99.0k|    return vscan_value_internal(source, arg);
 2252|  99.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   108k|{
 2256|   108k|    auto n = vscan_value_internal(source, arg);
 2257|   108k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 101k, False: 6.41k]
  |  |  ------------------
  ------------------
 2258|   101k|        source.sync(*n);
 2259|   101k|    }
 2260|  6.41k|    else {
 2261|  6.41k|        source.sync_all();
 2262|  6.41k|    }
 2263|   108k|    return n;
 2264|   108k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  40.4k|{
 2270|  40.4k|    return vscan_value_internal(source, arg);
 2271|  40.4k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  40.4k|{
 2276|  40.4k|    auto n = vscan_value_internal(source, arg);
 2277|  40.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  40.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.6k, False: 12.8k]
  |  |  ------------------
  ------------------
 2278|  27.6k|        source.sync(*n);
 2279|  27.6k|    }
 2280|  12.8k|    else {
 2281|  12.8k|        source.sync_all();
 2282|  12.8k|    }
 2283|  40.4k|    return n;
 2284|  40.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   896k|{
  118|   896k|    auto it = source.begin();
  119|       |
  120|  2.98M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.41M, False: 575k]
  ------------------
  121|  2.41M|        auto sv =
  122|  2.41M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.41M|                .substr(0, 8);
  124|       |
  125|  2.41M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.35M, False: 56.7k]
  ------------------
  126|  2.35M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.35M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.35M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 297k, False: 2.05M]
  ------------------
  129|   297k|                break;
  130|   297k|            }
  131|  2.05M|            continue;
  132|  2.35M|        }
  133|       |
  134|   188k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 154k, False: 33.6k]
  ------------------
  135|   154k|            auto tmp =
  136|   154k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   154k|            auto res = get_next_code_point(tmp);
  138|   154k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 23.0k, False: 131k]
  ------------------
  139|  23.0k|                return it;
  140|  23.0k|            }
  141|   131k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   131k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   131k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   131k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   131k|        }
  145|  56.7k|    }
  146|       |
  147|   873k|    return detail::make_string_view_iterator(source, it);
  148|   896k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.73M|{
  105|  3.73M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.73M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.73M|    uint64_t word{};
  108|  3.73M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.73M|    return has_byte_greater(word, 127) != 0;
  111|  3.73M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.4M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   154k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.14M|{
  118|  2.14M|    auto it = source.begin();
  119|       |
  120|  2.34M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.32M, False: 1.02M]
  ------------------
  121|  1.32M|        auto sv =
  122|  1.32M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.32M|                .substr(0, 8);
  124|       |
  125|  1.32M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.24M, False: 78.0k]
  ------------------
  126|  1.24M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.24M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.24M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.05M, False: 188k]
  ------------------
  129|  1.05M|                break;
  130|  1.05M|            }
  131|   188k|            continue;
  132|  1.24M|        }
  133|       |
  134|   149k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 141k, False: 7.93k]
  ------------------
  135|   141k|            auto tmp =
  136|   141k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   141k|            auto res = get_next_code_point(tmp);
  138|   141k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 70.1k, False: 71.8k]
  ------------------
  139|  70.1k|                return it;
  140|  70.1k|            }
  141|  71.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  71.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  71.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  71.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  71.8k|        }
  145|  78.0k|    }
  146|       |
  147|  2.07M|    return detail::make_string_view_iterator(source, it);
  148|  2.14M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.90M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   141k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   657k|{
 1138|   657k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.09k, False: 653k]
  ------------------
 1139|  4.09k|        value = std::numeric_limits<T>::infinity();
 1140|  4.09k|        return 3;
 1141|  4.09k|    }
 1142|   653k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.36k, False: 649k]
  ------------------
 1143|  3.36k|        value = std::numeric_limits<T>::infinity();
 1144|  3.36k|        return 8;
 1145|  3.36k|    }
 1146|   649k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.2k, False: 620k]
  ------------------
 1147|  29.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.2k|        return 3;
 1149|  29.2k|    }
 1150|   620k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 846, False: 619k]
  ------------------
 1151|    846|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    846|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    846|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    846|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    846|    }
 1182|       |
 1183|   619k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   619k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   619k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   619k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 133k, False: 486k]
  ------------------
 1185|   133k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.53k, False: 130k]
  |  |  ------------------
  ------------------
 1186|  2.53k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.53k|                                         "Invalid floating-point digit");
 1188|  2.53k|        }
 1189|   133k|    }
 1190|   617k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.79k, False: 610k]
  |  |  ------------------
  ------------------
 1191|  6.79k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.79k|                                     "Invalid floating-point digit");
 1193|  6.79k|    }
 1194|       |
 1195|   610k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   610k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   610k|            double tmp{};
 1200|   610k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   610k|            value = tmp;
 1202|   610k|            return ret;
 1203|   610k|        }
 1204|   610k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   610k|            return fast_float_fallback(data, value);
 1208|   610k|        }
 1209|   610k|    }
 1210|   610k|    else {
 1211|       |        // Default to fast_float
 1212|   610k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   610k|    }
 1214|   610k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   610k|    {
 1078|   610k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.19M|    {
  712|  2.19M|        return {kind, options};
  713|  2.19M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   610k|    {
 1082|   610k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 130k, False: 479k]
  ------------------
 1083|   610k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 20.7k, False: 458k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   151k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   151k|                                              value);
 1087|   151k|        }
 1088|       |
 1089|   458k|        const auto flags = get_flags();
 1090|   458k|        const auto view = get_view();
 1091|   458k|        const auto result = fast_float::from_chars(
 1092|   458k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   458k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 458k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   458k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.85k, False: 453k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.85k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.85k|                                              value);
 1102|  4.85k|        }
 1103|       |
 1104|   453k|        return result.ptr - view.data();
 1105|   458k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   156k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   156k|    {
 1048|   156k|#if !SCN_DISABLE_STRTOD
 1049|   156k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   156k|    }
 1056|   156k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   156k|    {
  894|   156k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   199k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   156k|    {
  898|   156k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   156k|                           generic_strtod);
  900|   156k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   156k|    {
  732|   156k|        CharT* end{};
  733|   156k|        errno = 0;
  734|   156k|        value = strtod_cb(src, &end);
  735|   156k|        const auto saved_errno = errno;
  736|   156k|        auto chars_read = end - src;
  737|       |
  738|   156k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   156k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.71k, False: 150k]
  |  |  ------------------
  ------------------
  740|  5.71k|            return unexpected(e);
  741|  5.71k|        }
  742|       |
  743|   150k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 130k, False: 20.6k]
  ------------------
  744|   150k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 130k, False: 0]
  ------------------
  745|   130k|            chars_read -= 2;
  746|   130k|        }
  747|       |
  748|   150k|        return chars_read;
  749|   156k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   199k|    {
  778|   199k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 73.1k, False: 125k]
  |  Branch (778:37): [True: 0, False: 73.1k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   199k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 21.0k, False: 178k]
  ------------------
  785|   199k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 21.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   199k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.40k, False: 190k]
  |  Branch (791:34): [True: 1.45k, False: 6.95k]
  ------------------
  792|  1.45k|            SCN_UNLIKELY_ATTR
  793|  1.45k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.45k|        }
  795|       |
  796|   197k|        SCN_GCC_COMPAT_PUSH
  797|   197k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   197k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 197k, False: 0]
  ------------------
  800|   197k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 197k, False: 0]
  ------------------
  801|   197k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.93k, False: 190k]
  ------------------
  802|  6.93k|            SCN_UNLIKELY_ATTR
  803|  6.93k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.93k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   190k|            return {};
  809|   197k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   207k|{
  687|   207k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 74.6k, False: 132k]
  |  Branch (687:25): [True: 0, False: 132k]
  ------------------
  688|   207k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   156k|    {
  755|   156k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 152k, False: 4.00k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   152k|            auto first_space = read_until_classic_space(input.view());
  758|   152k|            input.assign(
  759|   152k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   152k|        }
  761|       |
  762|   156k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 130k, False: 25.6k]
  ------------------
  763|   130k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   130k|                input.get_allocated_string().insert(0, "0x");
  765|   130k|            }
  766|   130k|            else {
  767|   130k|                input.get_allocated_string().insert(0, L"0x");
  768|   130k|            }
  769|   130k|        }
  770|       |
  771|   156k|        return input.get_allocated_string().c_str();
  772|   156k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   156k|    {
  905|   156k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   156k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   156k|        }
  908|   156k|        else {
  909|   156k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   156k|        }
  911|   156k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   156k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   156k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   156k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   156k|            return std::strtof(str, str_end);
  839|   156k|        }
  840|   156k|        else if constexpr (std::is_same_v<T, double>) {
  841|   156k|            return std::strtod(str, str_end);
  842|   156k|        }
  843|   156k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   156k|            return std::strtold(str, str_end);
  845|   156k|        }
  846|   156k|#endif
  847|   156k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.25M|    {
 1061|  1.25M|        unsigned format_flags{};
 1062|  1.25M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.24M, False: 10.2k]
  ------------------
 1063|  1.24M|            format_flags |= fast_float::fixed;
 1064|  1.24M|        }
 1065|  1.25M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.06M, False: 193k]
  ------------------
 1066|  1.06M|            format_flags |= fast_float::scientific;
 1067|  1.06M|        }
 1068|       |
 1069|  1.25M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.25M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   458k|    {
 1110|   458k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   458k|            return m_input.view();
 1112|   458k|        }
 1113|   458k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   458k|            return std::u16string_view{
 1115|   458k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   458k|                m_input.view().size()};
 1117|   458k|        }
 1118|   458k|        else {
 1119|   458k|            return std::u32string_view{
 1120|   458k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   458k|                m_input.view().size()};
 1122|   458k|        }
 1123|   458k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   223k|{
 1138|   223k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 223k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   223k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 223k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   223k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 223k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   223k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 223k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   223k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   223k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 48.0k, False: 175k]
  ------------------
 1185|  48.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.24k, False: 39.8k]
  |  |  ------------------
  ------------------
 1186|  8.24k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.24k|                                         "Invalid floating-point digit");
 1188|  8.24k|        }
 1189|  48.0k|    }
 1190|   215k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 195k]
  |  |  ------------------
  ------------------
 1191|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.0k|                                     "Invalid floating-point digit");
 1193|  20.0k|    }
 1194|       |
 1195|   195k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   195k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   195k|            double tmp{};
 1200|   195k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   195k|            value = tmp;
 1202|   195k|            return ret;
 1203|   195k|        }
 1204|   195k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   195k|            return fast_float_fallback(data, value);
 1208|   195k|        }
 1209|   195k|    }
 1210|   195k|    else {
 1211|       |        // Default to fast_float
 1212|   195k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   195k|    }
 1214|   195k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   195k|    {
 1078|   195k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   692k|    {
  712|   692k|        return {kind, options};
  713|   692k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   195k|    {
 1082|   195k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 39.8k, False: 155k]
  ------------------
 1083|   195k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 233, False: 155k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  40.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  40.0k|                                              value);
 1087|  40.0k|        }
 1088|       |
 1089|   155k|        const auto flags = get_flags();
 1090|   155k|        const auto view = get_view();
 1091|   155k|        const auto result = fast_float::from_chars(
 1092|   155k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   155k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   155k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.62k, False: 152k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.62k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.62k|                                              value);
 1102|  2.62k|        }
 1103|       |
 1104|   152k|        return result.ptr - view.data();
 1105|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  42.6k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  42.6k|    {
 1048|  42.6k|#if !SCN_DISABLE_STRTOD
 1049|  42.6k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  42.6k|    }
 1056|  42.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  42.6k|    {
  894|  42.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  42.6k|    {
  898|  42.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  42.6k|                           generic_strtod);
  900|  42.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  42.6k|    {
  732|  42.6k|        CharT* end{};
  733|  42.6k|        errno = 0;
  734|  42.6k|        value = strtod_cb(src, &end);
  735|  42.6k|        const auto saved_errno = errno;
  736|  42.6k|        auto chars_read = end - src;
  737|       |
  738|  42.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  42.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.67k, False: 40.0k]
  |  |  ------------------
  ------------------
  740|  2.67k|            return unexpected(e);
  741|  2.67k|        }
  742|       |
  743|  40.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 39.7k, False: 233]
  ------------------
  744|  40.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 39.7k, False: 0]
  ------------------
  745|  39.7k|            chars_read -= 2;
  746|  39.7k|        }
  747|       |
  748|  40.0k|        return chars_read;
  749|  42.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  42.6k|    {
  755|  42.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 41.0k, False: 1.65k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  41.0k|            auto first_space = read_until_classic_space(input.view());
  758|  41.0k|            input.assign(
  759|  41.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  41.0k|        }
  761|       |
  762|  42.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 39.8k, False: 2.85k]
  ------------------
  763|  39.8k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  39.8k|                input.get_allocated_string().insert(0, "0x");
  765|  39.8k|            }
  766|  39.8k|            else {
  767|  39.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  39.8k|            }
  769|  39.8k|        }
  770|       |
  771|  42.6k|        return input.get_allocated_string().c_str();
  772|  42.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  42.6k|    {
  905|  42.6k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  42.6k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  42.6k|        }
  908|  42.6k|        else {
  909|  42.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  42.6k|        }
  911|  42.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  42.6k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  42.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  42.6k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  42.6k|            return std::wcstof(str, str_end);
  877|  42.6k|        }
  878|  42.6k|        else if constexpr (std::is_same_v<T, double>) {
  879|  42.6k|            return std::wcstod(str, str_end);
  880|  42.6k|        }
  881|  42.6k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  42.6k|            return std::wcstold(str, str_end);
  883|  42.6k|        }
  884|  42.6k|#endif
  885|  42.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   155k|    {
 1110|   155k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   155k|            return m_input.view();
 1112|   155k|        }
 1113|   155k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   155k|            return std::u16string_view{
 1115|   155k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   155k|                m_input.view().size()};
 1117|   155k|        }
 1118|   155k|        else {
 1119|   155k|            return std::u32string_view{
 1120|   155k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   155k|                m_input.view().size()};
 1122|   155k|        }
 1123|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   682k|{
 1138|   682k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.44k, False: 677k]
  ------------------
 1139|  4.44k|        value = std::numeric_limits<T>::infinity();
 1140|  4.44k|        return 3;
 1141|  4.44k|    }
 1142|   677k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.64k, False: 674k]
  ------------------
 1143|  3.64k|        value = std::numeric_limits<T>::infinity();
 1144|  3.64k|        return 8;
 1145|  3.64k|    }
 1146|   674k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.8k, False: 644k]
  ------------------
 1147|  29.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.8k|        return 3;
 1149|  29.8k|    }
 1150|   644k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 916, False: 643k]
  ------------------
 1151|    916|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    916|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    916|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    916|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    916|    }
 1182|       |
 1183|   643k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   643k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 136k, False: 506k]
  ------------------
 1185|   136k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.60k, False: 134k]
  |  |  ------------------
  ------------------
 1186|  2.60k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.60k|                                         "Invalid floating-point digit");
 1188|  2.60k|        }
 1189|   136k|    }
 1190|   640k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.27k, False: 633k]
  |  |  ------------------
  ------------------
 1191|  7.27k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.27k|                                     "Invalid floating-point digit");
 1193|  7.27k|    }
 1194|       |
 1195|   633k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   633k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   633k|            double tmp{};
 1200|   633k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   633k|            value = tmp;
 1202|   633k|            return ret;
 1203|   633k|        }
 1204|   633k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   633k|            return fast_float_fallback(data, value);
 1208|   633k|        }
 1209|   633k|    }
 1210|   633k|    else {
 1211|       |        // Default to fast_float
 1212|   633k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   633k|    }
 1214|   633k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   633k|    {
 1078|   633k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   633k|    {
 1082|   633k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 134k, False: 499k]
  ------------------
 1083|   633k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 22.6k, False: 476k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   156k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   156k|                                              value);
 1087|   156k|        }
 1088|       |
 1089|   476k|        const auto flags = get_flags();
 1090|   476k|        const auto view = get_view();
 1091|   476k|        const auto result = fast_float::from_chars(
 1092|   476k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   476k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 476k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   476k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 474k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.22k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.22k|                                              value);
 1102|  2.22k|        }
 1103|       |
 1104|   474k|        return result.ptr - view.data();
 1105|   476k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   158k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   158k|    {
 1048|   158k|#if !SCN_DISABLE_STRTOD
 1049|   158k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   158k|    }
 1056|   158k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   158k|    {
  894|   158k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   200k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   158k|    {
  898|   158k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   158k|                           generic_strtod);
  900|   158k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   158k|    {
  732|   158k|        CharT* end{};
  733|   158k|        errno = 0;
  734|   158k|        value = strtod_cb(src, &end);
  735|   158k|        const auto saved_errno = errno;
  736|   158k|        auto chars_read = end - src;
  737|       |
  738|   158k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   158k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.67k, False: 156k]
  |  |  ------------------
  ------------------
  740|  2.67k|            return unexpected(e);
  741|  2.67k|        }
  742|       |
  743|   156k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 133k, False: 22.6k]
  ------------------
  744|   156k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 133k, False: 0]
  ------------------
  745|   133k|            chars_read -= 2;
  746|   133k|        }
  747|       |
  748|   156k|        return chars_read;
  749|   158k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   200k|    {
  778|   200k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 72.6k, False: 127k]
  |  Branch (778:37): [True: 0, False: 72.6k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   200k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 22.9k, False: 177k]
  ------------------
  785|   200k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 22.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   200k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.04k, False: 196k]
  |  Branch (791:34): [True: 366, False: 3.67k]
  ------------------
  792|    366|            SCN_UNLIKELY_ATTR
  793|    366|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    366|        }
  795|       |
  796|   199k|        SCN_GCC_COMPAT_PUSH
  797|   199k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   199k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 199k, False: 0]
  ------------------
  800|   199k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 199k, False: 0]
  ------------------
  801|   199k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.67k, False: 196k]
  ------------------
  802|  3.67k|            SCN_UNLIKELY_ATTR
  803|  3.67k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.67k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   196k|            return {};
  809|   199k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   204k|{
  691|   204k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 72.9k, False: 131k]
  |  Branch (691:24): [True: 0, False: 131k]
  ------------------
  692|   204k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   158k|    {
  755|   158k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 156k, False: 2.90k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   156k|            auto first_space = read_until_classic_space(input.view());
  758|   156k|            input.assign(
  759|   156k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   156k|        }
  761|       |
  762|   158k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 134k, False: 24.9k]
  ------------------
  763|   134k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   134k|                input.get_allocated_string().insert(0, "0x");
  765|   134k|            }
  766|   134k|            else {
  767|   134k|                input.get_allocated_string().insert(0, L"0x");
  768|   134k|            }
  769|   134k|        }
  770|       |
  771|   158k|        return input.get_allocated_string().c_str();
  772|   158k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   158k|    {
  905|   158k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   158k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   158k|        }
  908|   158k|        else {
  909|   158k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   158k|        }
  911|   158k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   158k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   158k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   158k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   158k|            return std::strtof(str, str_end);
  839|   158k|        }
  840|   158k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   158k|            return std::strtod(str, str_end);
  842|   158k|        }
  843|   158k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   158k|            return std::strtold(str, str_end);
  845|   158k|        }
  846|   158k|#endif
  847|   158k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   476k|    {
 1110|   476k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   476k|            return m_input.view();
 1112|   476k|        }
 1113|   476k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   476k|            return std::u16string_view{
 1115|   476k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   476k|                m_input.view().size()};
 1117|   476k|        }
 1118|   476k|        else {
 1119|   476k|            return std::u32string_view{
 1120|   476k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   476k|                m_input.view().size()};
 1122|   476k|        }
 1123|   476k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   233k|{
 1138|   233k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 233k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   233k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 233k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   233k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 233k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   233k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 233k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   233k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   233k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 48.0k, False: 185k]
  ------------------
 1185|  48.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.24k, False: 39.8k]
  |  |  ------------------
  ------------------
 1186|  8.24k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.24k|                                         "Invalid floating-point digit");
 1188|  8.24k|        }
 1189|  48.0k|    }
 1190|   224k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 204k]
  |  |  ------------------
  ------------------
 1191|  20.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.4k|                                     "Invalid floating-point digit");
 1193|  20.4k|    }
 1194|       |
 1195|   204k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   204k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   204k|            double tmp{};
 1200|   204k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   204k|            value = tmp;
 1202|   204k|            return ret;
 1203|   204k|        }
 1204|   204k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   204k|            return fast_float_fallback(data, value);
 1208|   204k|        }
 1209|   204k|    }
 1210|   204k|    else {
 1211|       |        // Default to fast_float
 1212|   204k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   204k|    }
 1214|   204k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   204k|    {
 1078|   204k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   204k|    {
 1082|   204k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 39.8k, False: 164k]
  ------------------
 1083|   204k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 233, False: 164k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  40.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  40.0k|                                              value);
 1087|  40.0k|        }
 1088|       |
 1089|   164k|        const auto flags = get_flags();
 1090|   164k|        const auto view = get_view();
 1091|   164k|        const auto result = fast_float::from_chars(
 1092|   164k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   164k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   164k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32k, False: 163k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.32k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.32k|                                              value);
 1102|  1.32k|        }
 1103|       |
 1104|   163k|        return result.ptr - view.data();
 1105|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  41.3k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  41.3k|    {
 1048|  41.3k|#if !SCN_DISABLE_STRTOD
 1049|  41.3k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  41.3k|    }
 1056|  41.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  41.3k|    {
  894|  41.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  41.3k|    {
  898|  41.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  41.3k|                           generic_strtod);
  900|  41.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  41.3k|    {
  732|  41.3k|        CharT* end{};
  733|  41.3k|        errno = 0;
  734|  41.3k|        value = strtod_cb(src, &end);
  735|  41.3k|        const auto saved_errno = errno;
  736|  41.3k|        auto chars_read = end - src;
  737|       |
  738|  41.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  41.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 40.0k]
  |  |  ------------------
  ------------------
  740|  1.36k|            return unexpected(e);
  741|  1.36k|        }
  742|       |
  743|  40.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 39.7k, False: 233]
  ------------------
  744|  40.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 39.7k, False: 0]
  ------------------
  745|  39.7k|            chars_read -= 2;
  746|  39.7k|        }
  747|       |
  748|  40.0k|        return chars_read;
  749|  41.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  41.3k|    {
  755|  41.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 40.3k, False: 1.01k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  40.3k|            auto first_space = read_until_classic_space(input.view());
  758|  40.3k|            input.assign(
  759|  40.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  40.3k|        }
  761|       |
  762|  41.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 39.8k, False: 1.55k]
  ------------------
  763|  39.8k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  39.8k|                input.get_allocated_string().insert(0, "0x");
  765|  39.8k|            }
  766|  39.8k|            else {
  767|  39.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  39.8k|            }
  769|  39.8k|        }
  770|       |
  771|  41.3k|        return input.get_allocated_string().c_str();
  772|  41.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  41.3k|    {
  905|  41.3k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  41.3k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  41.3k|        }
  908|  41.3k|        else {
  909|  41.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  41.3k|        }
  911|  41.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  41.3k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  41.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  41.3k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  41.3k|            return std::wcstof(str, str_end);
  877|  41.3k|        }
  878|  41.3k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  41.3k|            return std::wcstod(str, str_end);
  880|  41.3k|        }
  881|  41.3k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  41.3k|            return std::wcstold(str, str_end);
  883|  41.3k|        }
  884|  41.3k|#endif
  885|  41.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   164k|    {
 1110|   164k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   164k|            return m_input.view();
 1112|   164k|        }
 1113|   164k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   164k|            return std::u16string_view{
 1115|   164k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   164k|                m_input.view().size()};
 1117|   164k|        }
 1118|   164k|        else {
 1119|   164k|            return std::u32string_view{
 1120|   164k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   164k|                m_input.view().size()};
 1122|   164k|        }
 1123|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   688k|{
 1138|   688k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.57k, False: 684k]
  ------------------
 1139|  4.57k|        value = std::numeric_limits<T>::infinity();
 1140|  4.57k|        return 3;
 1141|  4.57k|    }
 1142|   684k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.73k, False: 680k]
  ------------------
 1143|  3.73k|        value = std::numeric_limits<T>::infinity();
 1144|  3.73k|        return 8;
 1145|  3.73k|    }
 1146|   680k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.1k, False: 650k]
  ------------------
 1147|  30.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.1k|        return 3;
 1149|  30.1k|    }
 1150|   650k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 948, False: 649k]
  ------------------
 1151|    948|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    948|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    948|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    948|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    948|    }
 1182|       |
 1183|   649k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   649k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 137k, False: 512k]
  ------------------
 1185|   137k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.68k, False: 134k]
  |  |  ------------------
  ------------------
 1186|  2.68k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.68k|                                         "Invalid floating-point digit");
 1188|  2.68k|        }
 1189|   137k|    }
 1190|   646k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.56k, False: 639k]
  |  |  ------------------
  ------------------
 1191|  7.56k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.56k|                                     "Invalid floating-point digit");
 1193|  7.56k|    }
 1194|       |
 1195|   639k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   639k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   639k|            double tmp{};
 1200|   639k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   639k|            value = tmp;
 1202|   639k|            return ret;
 1203|   639k|        }
 1204|   639k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   639k|            return fast_float_fallback(data, value);
 1208|   639k|        }
 1209|   639k|    }
 1210|   639k|    else {
 1211|       |        // Default to fast_float
 1212|   639k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   639k|    }
 1214|   639k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   639k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   639k|    {
 1048|   639k|#if !SCN_DISABLE_STRTOD
 1049|   639k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   639k|    }
 1056|   639k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   639k|    {
  894|   639k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   847k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   639k|    {
  898|   639k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   639k|                           generic_strtod);
  900|   639k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   639k|    {
  732|   639k|        CharT* end{};
  733|   639k|        errno = 0;
  734|   639k|        value = strtod_cb(src, &end);
  735|   639k|        const auto saved_errno = errno;
  736|   639k|        auto chars_read = end - src;
  737|       |
  738|   639k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   639k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 551, False: 638k]
  |  |  ------------------
  ------------------
  740|    551|            return unexpected(e);
  741|    551|        }
  742|       |
  743|   638k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 134k, False: 504k]
  ------------------
  744|   638k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 134k, False: 0]
  ------------------
  745|   134k|            chars_read -= 2;
  746|   134k|        }
  747|       |
  748|   638k|        return chars_read;
  749|   639k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   847k|    {
  778|   847k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 344k, False: 503k]
  |  Branch (778:37): [True: 0, False: 344k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   847k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 22.9k, False: 825k]
  ------------------
  785|   847k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 22.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   847k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 697, False: 847k]
  |  Branch (791:34): [True: 88, False: 609]
  ------------------
  792|     88|            SCN_UNLIKELY_ATTR
  793|     88|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     88|        }
  795|       |
  796|   847k|        SCN_GCC_COMPAT_PUSH
  797|   847k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   847k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 847k, False: 0]
  ------------------
  800|   847k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 847k, False: 0]
  ------------------
  801|   847k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 609, False: 847k]
  ------------------
  802|    609|            SCN_UNLIKELY_ATTR
  803|    609|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    609|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   847k|            return {};
  809|   847k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   848k|{
  695|   848k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 344k, False: 503k]
  |  Branch (695:26): [True: 0, False: 503k]
  ------------------
  696|   848k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   639k|    {
  755|   639k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 588k, False: 51.0k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   588k|            auto first_space = read_until_classic_space(input.view());
  758|   588k|            input.assign(
  759|   588k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   588k|        }
  761|       |
  762|   639k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 134k, False: 504k]
  ------------------
  763|   134k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   134k|                input.get_allocated_string().insert(0, "0x");
  765|   134k|            }
  766|   134k|            else {
  767|   134k|                input.get_allocated_string().insert(0, L"0x");
  768|   134k|            }
  769|   134k|        }
  770|       |
  771|   639k|        return input.get_allocated_string().c_str();
  772|   639k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   639k|    {
  905|   639k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   639k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   639k|        }
  908|   639k|        else {
  909|   639k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   639k|        }
  911|   639k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   639k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   639k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   639k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   639k|            return std::strtof(str, str_end);
  839|   639k|        }
  840|   639k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   639k|            return std::strtod(str, str_end);
  842|   639k|        }
  843|   639k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   639k|            return std::strtold(str, str_end);
  845|   639k|        }
  846|   639k|#endif
  847|   639k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   237k|{
 1138|   237k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 237k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   237k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 237k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   237k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 237k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   237k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 237k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   237k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   237k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 48.1k, False: 189k]
  ------------------
 1185|  48.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.25k, False: 39.8k]
  |  |  ------------------
  ------------------
 1186|  8.25k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.25k|                                         "Invalid floating-point digit");
 1188|  8.25k|        }
 1189|  48.1k|    }
 1190|   229k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.8k, False: 208k]
  |  |  ------------------
  ------------------
 1191|  20.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.8k|                                     "Invalid floating-point digit");
 1193|  20.8k|    }
 1194|       |
 1195|   208k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   208k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   208k|            double tmp{};
 1200|   208k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   208k|            value = tmp;
 1202|   208k|            return ret;
 1203|   208k|        }
 1204|   208k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   208k|            return fast_float_fallback(data, value);
 1208|   208k|        }
 1209|   208k|    }
 1210|   208k|    else {
 1211|       |        // Default to fast_float
 1212|   208k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   208k|    }
 1214|   208k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   208k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   208k|    {
 1048|   208k|#if !SCN_DISABLE_STRTOD
 1049|   208k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   208k|    }
 1056|   208k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   208k|    {
  894|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   208k|    {
  898|   208k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   208k|                           generic_strtod);
  900|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   208k|    {
  732|   208k|        CharT* end{};
  733|   208k|        errno = 0;
  734|   208k|        value = strtod_cb(src, &end);
  735|   208k|        const auto saved_errno = errno;
  736|   208k|        auto chars_read = end - src;
  737|       |
  738|   208k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   208k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 208k]
  |  |  ------------------
  ------------------
  740|    146|            return unexpected(e);
  741|    146|        }
  742|       |
  743|   208k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 39.8k, False: 168k]
  ------------------
  744|   208k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 39.8k, False: 0]
  ------------------
  745|  39.8k|            chars_read -= 2;
  746|  39.8k|        }
  747|       |
  748|   208k|        return chars_read;
  749|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   208k|    {
  755|   208k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 205k, False: 3.61k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   205k|            auto first_space = read_until_classic_space(input.view());
  758|   205k|            input.assign(
  759|   205k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   205k|        }
  761|       |
  762|   208k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 39.8k, False: 169k]
  ------------------
  763|  39.8k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  39.8k|                input.get_allocated_string().insert(0, "0x");
  765|  39.8k|            }
  766|  39.8k|            else {
  767|  39.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  39.8k|            }
  769|  39.8k|        }
  770|       |
  771|   208k|        return input.get_allocated_string().c_str();
  772|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   208k|    {
  905|   208k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   208k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   208k|        }
  908|   208k|        else {
  909|   208k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   208k|        }
  911|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   208k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   208k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   208k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   208k|            return std::wcstof(str, str_end);
  877|   208k|        }
  878|   208k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   208k|            return std::wcstod(str, str_end);
  880|   208k|        }
  881|   208k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   208k|            return std::wcstold(str, str_end);
  883|   208k|        }
  884|   208k|#endif
  885|   208k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.04M|{
 2073|  1.04M|    const auto argcount = args.size();
 2074|  1.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 216k, False: 826k]
  |  Branch (2074:60): [True: 216k, False: 0]
  ------------------
 2075|   216k|        auto arg = args.get(0);
 2076|   216k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   216k|    static_cast<    \
  |  |  929|   216k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   216k|    }
 2078|       |
 2079|   826k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 826k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   826k|    SCN_UNLIKELY_ATTR
 2087|   826k|    {
 2088|   826k|        auto handler = format_handler<false, CharT>{
 2089|   826k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   826k|    static_cast<    \
  |  |  929|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   826k|    static_cast<    \
  |  |  929|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   826k|        return vscan_parse_format_string(format, handler);
 2091|   826k|    }
 2092|   826k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.94M|{
 1625|  1.94M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.53M, False: 414k]
  ------------------
 1626|  1.53M|        return false;
 1627|  1.53M|    }
 1628|   414k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 414k, False: 0]
  |  Branch (1628:39): [True: 414k, False: 0]
  ------------------
 1629|  1.94M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   324k|{
 1658|   324k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   324k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   324k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   324k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   324k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   324k|    static_cast<    \
  |  |  929|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   324k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.2k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.2k|    }                                                  \
  |  |  |  | 3671|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   305k|    return it.position();
 1675|   324k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   708k|    {
 1903|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.23M|    {
 1722|  2.23M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   708k|    {
 1853|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   708k|{
 2038|   708k|    const auto beg = handler.get_ctx().begin();
 2039|   708k|    detail::parse_format_string<false>(format, handler);
 2040|   708k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.1k, False: 644k]
  |  |  ------------------
  ------------------
 2041|  64.1k|        return unexpected(handler.error);
 2042|  64.1k|    }
 2043|   644k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   708k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  4.83M|    {
 2022|  4.83M|        return ctx.get();
 2023|  4.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  4.83M|    {
 1857|  4.83M|        return contiguous_ctx;
 1858|  4.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.35M|    {
 1907|  1.35M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.35M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   708k|{
 1681|   708k|    auto arg = ctx.arg(id);
 1682|   708k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   708k|    return arg;
 1686|   708k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.23M|    {
 1797|  2.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.23M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.23M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.23M|            visited_args_lower64 |= (1ull << id);
 1808|  2.23M|            return;
 1809|  2.23M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.23M|    {
 1782|  2.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.23M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.23M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.23M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   385k|    {
 1766|   385k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 385k, False: 0]
  |  |  ------------------
  ------------------
 1767|   385k|            error = err;
 1768|   385k|        }
 1769|   385k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   708k|    {
 1944|   708k|        return parse_ctx.next_arg_id();
 1945|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   708k|    {
 1985|   708k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   708k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   708k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 708k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   708k|        auto specs = detail::format_specs{};
 1998|   708k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   708k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   708k|            arg.type()};
 2001|       |
 2002|   708k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   708k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 708k]
  |  Branch (2003:29): [True: 0, False: 708k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   708k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   708k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   708k|        on_visit_scan_arg(
 2014|   708k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   708k|                                           get_ctx().locale()},
 2016|   708k|            arg);
 2017|   708k|        return parse_ctx.begin();
 2018|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   708k|    {
 1701|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   708k|    {
 1956|   708k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 708k]
  |  Branch (1956:23): [True: 0, False: 708k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   708k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   708k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.1k, False: 644k]
  |  |  ------------------
  ------------------
 1963|  64.1k|            on_error(r.error());
 1964|  64.1k|        }
 1965|   644k|        else {
 1966|   644k|            get_ctx().advance_to(*r);
 1967|   644k|        }
 1968|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.23M|    {
 1729|  2.23M|        {
 1730|  2.23M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.23M]
  ------------------
 1731|  2.23M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.23M]
  ------------------
 1732|  2.23M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.23M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.23M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.23M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.23M|        }
 1739|       |
 1740|  2.23M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.23M, False: 0]
  ------------------
 1741|  2.23M|            return;
 1742|  2.23M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.23M|    {
 1777|  2.23M|        return error;
 1778|  2.23M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.69M|    {
 1773|  6.69M|        return static_cast<bool>(error);
 1774|  6.69M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   826k|    {
 1903|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   826k|    {
 1830|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   826k|{
 2038|   826k|    const auto beg = handler.get_ctx().begin();
 2039|   826k|    detail::parse_format_string<false>(format, handler);
 2040|   826k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.1k, False: 762k]
  |  |  ------------------
  ------------------
 2041|  64.1k|        return unexpected(handler.error);
 2042|  64.1k|    }
 2043|   762k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   826k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.65M|    {
 2022|  5.65M|        return ctx.get();
 2023|  5.65M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.65M|    {
 1834|  5.65M|        return ctx;
 1835|  5.65M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.58M|    {
 1907|  1.58M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.58M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.58M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   826k|{
 1681|   826k|    auto arg = ctx.arg(id);
 1682|   826k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   826k|    return arg;
 1686|   826k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   826k|    {
 1944|   826k|        return parse_ctx.next_arg_id();
 1945|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   826k|    {
 1985|   826k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   826k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   826k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 826k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   826k|        auto specs = detail::format_specs{};
 1998|   826k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   826k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   826k|            arg.type()};
 2001|       |
 2002|   826k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   826k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 826k]
  |  Branch (2003:29): [True: 0, False: 826k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   826k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   826k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   826k|        on_visit_scan_arg(
 2014|   826k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   826k|                                           get_ctx().locale()},
 2016|   826k|            arg);
 2017|   826k|        return parse_ctx.begin();
 2018|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   826k|    {
 1701|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   826k|    {
 1956|   826k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 826k]
  |  Branch (1956:23): [True: 0, False: 826k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   826k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   826k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   826k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.1k, False: 762k]
  |  |  ------------------
  ------------------
 1963|  64.1k|            on_error(r.error());
 1964|  64.1k|        }
 1965|   762k|        else {
 1966|   762k|            get_ctx().advance_to(*r);
 1967|   762k|        }
 1968|   826k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   906k|{
 2053|   906k|    const auto argcount = args.size();
 2054|   906k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 198k, False: 708k]
  |  Branch (2054:60): [True: 198k, False: 0]
  ------------------
 2055|   198k|        auto arg = args.get(0);
 2056|   198k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   198k|    }
 2058|       |
 2059|   708k|    auto handler = format_handler<true, CharT>{
 2060|   708k|        ranges::subrange<const CharT*>{source.data(),
 2061|   708k|                                       source.data() + source.size()},
 2062|   708k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   708k|    return vscan_parse_format_string(format, handler);
 2064|   906k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   297k|{
 1638|   297k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   297k|    auto reader =
 1644|   297k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   297k|            ranges::subrange<const CharT*>{source.data(),
 1646|   297k|                                           source.data() + source.size()},
 1647|   297k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   297k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.2k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.2k|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   277k|    return ranges::distance(source.data(), it);
 1650|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   428k|{
 2053|   428k|    const auto argcount = args.size();
 2054|   428k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 80.9k, False: 347k]
  |  Branch (2054:60): [True: 80.9k, False: 0]
  ------------------
 2055|  80.9k|        auto arg = args.get(0);
 2056|  80.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  80.9k|    static_cast<    \
  |  |  929|  80.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  80.9k|    }
 2058|       |
 2059|   347k|    auto handler = format_handler<true, CharT>{
 2060|   347k|        ranges::subrange<const CharT*>{source.data(),
 2061|   347k|                                       source.data() + source.size()},
 2062|   347k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   347k|    return vscan_parse_format_string(format, handler);
 2064|   428k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   857k|{
 1625|   857k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 695k, False: 161k]
  ------------------
 1626|   695k|        return false;
 1627|   695k|    }
 1628|   161k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 161k, False: 0]
  |  Branch (1628:39): [True: 161k, False: 0]
  ------------------
 1629|   857k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   121k|{
 1638|   121k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   121k|    auto reader =
 1644|   121k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   121k|            ranges::subrange<const CharT*>{source.data(),
 1646|   121k|                                           source.data() + source.size()},
 1647|   121k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   121k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.5k|    }                                                  \
  |  |  |  | 3671|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  82.9k|    return ranges::distance(source.data(), it);
 1650|   121k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   347k|    {
 1903|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   347k|    {
 1853|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   347k|{
 2038|   347k|    const auto beg = handler.get_ctx().begin();
 2039|   347k|    detail::parse_format_string<false>(format, handler);
 2040|   347k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 219k]
  |  |  ------------------
  ------------------
 2041|   128k|        return unexpected(handler.error);
 2042|   128k|    }
 2043|   219k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   347k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.17M|    {
 2022|  2.17M|        return ctx.get();
 2023|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.17M|    {
 1857|  2.17M|        return contiguous_ctx;
 1858|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   567k|    {
 1907|   567k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 567k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   567k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   347k|{
 1681|   347k|    auto arg = ctx.arg(id);
 1682|   347k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   347k|    return arg;
 1686|   347k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   347k|    {
 1944|   347k|        return parse_ctx.next_arg_id();
 1945|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   347k|    {
 1985|   347k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   347k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   347k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 347k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   347k|        auto specs = detail::format_specs{};
 1998|   347k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   347k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   347k|            arg.type()};
 2001|       |
 2002|   347k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   347k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 347k]
  |  Branch (2003:29): [True: 0, False: 347k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   347k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   347k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   347k|        on_visit_scan_arg(
 2014|   347k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   347k|                                           get_ctx().locale()},
 2016|   347k|            arg);
 2017|   347k|        return parse_ctx.begin();
 2018|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   347k|    {
 1701|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   347k|    {
 1956|   347k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 347k]
  |  Branch (1956:23): [True: 0, False: 347k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   347k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   347k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 219k]
  |  |  ------------------
  ------------------
 1963|   128k|            on_error(r.error());
 1964|   128k|        }
 1965|   219k|        else {
 1966|   219k|            get_ctx().advance_to(*r);
 1967|   219k|        }
 1968|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   428k|{
 2073|   428k|    const auto argcount = args.size();
 2074|   428k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 80.8k, False: 347k]
  |  Branch (2074:60): [True: 80.8k, False: 0]
  ------------------
 2075|  80.8k|        auto arg = args.get(0);
 2076|  80.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  80.8k|    static_cast<    \
  |  |  929|  80.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  80.8k|    }
 2078|       |
 2079|   347k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 347k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   347k|    SCN_UNLIKELY_ATTR
 2087|   347k|    {
 2088|   347k|        auto handler = format_handler<false, CharT>{
 2089|   347k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   347k|        return vscan_parse_format_string(format, handler);
 2091|   347k|    }
 2092|   347k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   121k|{
 1658|   121k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   121k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   121k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   121k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   121k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   121k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.5k, False: 82.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.5k|    }                                                  \
  |  |  |  | 3671|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  82.8k|    return it.position();
 1675|   121k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   347k|    {
 1903|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   347k|    {
 1830|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   347k|{
 2038|   347k|    const auto beg = handler.get_ctx().begin();
 2039|   347k|    detail::parse_format_string<false>(format, handler);
 2040|   347k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 219k]
  |  |  ------------------
  ------------------
 2041|   128k|        return unexpected(handler.error);
 2042|   128k|    }
 2043|   219k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   347k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.17M|    {
 2022|  2.17M|        return ctx.get();
 2023|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.17M|    {
 1834|  2.17M|        return ctx;
 1835|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   566k|    {
 1907|   566k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 566k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   566k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   347k|{
 1681|   347k|    auto arg = ctx.arg(id);
 1682|   347k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   347k|    return arg;
 1686|   347k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   347k|    {
 1944|   347k|        return parse_ctx.next_arg_id();
 1945|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   347k|    {
 1985|   347k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   347k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   347k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 347k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   347k|        auto specs = detail::format_specs{};
 1998|   347k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   347k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   347k|            arg.type()};
 2001|       |
 2002|   347k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   347k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 347k]
  |  Branch (2003:29): [True: 0, False: 347k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   347k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   347k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   347k|        on_visit_scan_arg(
 2014|   347k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   347k|                                           get_ctx().locale()},
 2016|   347k|            arg);
 2017|   347k|        return parse_ctx.begin();
 2018|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   347k|    {
 1701|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   347k|    {
 1956|   347k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 347k]
  |  Branch (1956:23): [True: 0, False: 347k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   347k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   347k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 219k]
  |  |  ------------------
  ------------------
 1963|   128k|            on_error(r.error());
 1964|   128k|        }
 1965|   219k|        else {
 1966|   219k|            get_ctx().advance_to(*r);
 1967|   219k|        }
 1968|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  99.0k|{
 2099|  99.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  99.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   108k|{
 2099|   108k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   108k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  40.4k|{
 2099|  40.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  40.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  40.4k|{
 2099|  40.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  40.4k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.13k|{
 1363|  2.13k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.13k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.13k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.13k|            std::u32string tmp;
 1368|  2.13k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.13k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.13k|                std::u32string_view{tmp}, dest);
 1371|  2.13k|        }
 1372|  2.13k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.13k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.13k|        }
 1375|  2.13k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.13k|{
 1256|  2.13k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.13k|    auto it = src.begin();
 1259|   579k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 577k, False: 2.13k]
  ------------------
 1260|   577k|        auto res = get_next_code_point(
 1261|   577k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   577k|                                                                 src.end()));
 1263|   577k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.75k, False: 575k]
  |  |  ------------------
  ------------------
 1264|  1.75k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.75k|        }
 1266|   575k|        else {
 1267|   575k|            dest.push_back(res.value);
 1268|   575k|        }
 1269|   577k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   577k|    }
 1271|  2.13k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   873k|{
 1169|   873k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   873k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   873k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   873k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   873k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 850k]
  |  |  ------------------
  ------------------
 1173|  23.3k|        return {get_start_for_next_code_point(input),
 1174|  23.3k|                detail::invalid_code_point};
 1175|  23.3k|    }
 1176|   850k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   850k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.61k, False: 846k]
  |  |  ------------------
  ------------------
 1177|  3.61k|        return {input.end(), detail::invalid_code_point};
 1178|  3.61k|    }
 1179|       |
 1180|   846k|    return {input.begin() + len,
 1181|   846k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   850k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  23.3k|{
 1155|  23.3k|    auto it = input.begin();
 1156|   154k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 148k, False: 6.37k]
  ------------------
 1157|   148k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.9k, False: 131k]
  ------------------
 1158|  16.9k|            break;
 1159|  16.9k|        }
 1160|   148k|    }
 1161|  23.3k|    return it;
 1162|  23.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  24.2M|    {
  809|  24.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  24.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  24.2M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.12M|    {
  823|  9.12M|        return a.m_code == b.m_code;
  824|  9.12M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.24M|    {
 1728|  1.24M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.24M|        std::strcpy(m_locbuf, loc);
 1730|  1.24M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.24M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.24M|        std::setlocale(m_category, m_locbuf);
 1735|  1.24M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.24M|    {
 1757|  1.24M|        std::setlocale(cat, "C");
 1758|  1.24M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.23M|    {
 2936|  2.23M|        return m_msg == nullptr;
 2937|  2.23M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.20M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  16.3M|{
  458|  16.3M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.3M|        static_cast<unsigned char>(ch))];
  460|  16.3M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  41.7k|{
  469|  41.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  41.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.73M|{
  539|  3.73M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.73M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.3M|{
  784|  10.3M|    return e != eof_error::good;
  785|  10.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  41.0k|{
  798|  41.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  41.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  41.0k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   197k|{
  845|   197k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   197k|    return parse_error::eof;
  847|   197k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.23M|{
  854|  3.23M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.23M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.23M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 72.8k, False: 3.16M]
  ------------------
  859|  72.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  72.8k|    }
  861|       |
  862|  3.16M|    return scan_error{code, msg};
  863|  3.23M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.23M|{
  868|  3.23M|    return [code, msg](parse_error err) {
  869|  3.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.23M|    };
  871|  3.23M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  4.26M|{
 1200|       |    // Pattern_White_Space property
 1201|  4.26M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.06M, False: 192k]
  |  Branch (1201:27): [True: 886k, False: 3.18M]
  ------------------
 1202|  4.26M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 54.5k, False: 3.32M]
  ------------------
 1203|  4.26M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 48.2k, False: 3.27M]
  ------------------
 1204|  4.26M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.87k, False: 3.26M]
  ------------------
 1205|  4.26M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 20.6k, False: 3.24M]
  ------------------
 1206|  4.26M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 701k, False: 2.54M]
  ------------------
 1207|  4.26M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 2.54M]
  ------------------
 1208|  4.26M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.60M|{
 2220|  2.60M|    unsigned char running_diff{0};
 2221|  9.77M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.17M, False: 2.60M]
  ------------------
 2222|  7.17M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.17M|    }
 2224|  2.60M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 81.2k, False: 2.51M]
  |  Branch (2224:33): [True: 15.5k, False: 2.50M]
  ------------------
 2225|  2.60M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  18.2M|{
 3123|  18.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  18.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  2.38M|{
 3127|  2.38M|#if WCHAR_MIN < 0
 3128|  2.38M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 2.37M, False: 12.7k]
  |  Branch (3128:20): [True: 1.45M, False: 920k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.45M|        return char_to_int(static_cast<char>(ch));
 3133|  1.45M|    }
 3134|   932k|    return 255;
 3135|  2.38M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.84M|{
 6008|  1.84M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.84M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.84M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.84M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.84M|    return {};
 6023|  1.84M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.91M|    {
  304|  2.91M|        ranges::advance(x, n);
  305|  2.91M|        return x;
  306|  2.91M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.91M|    {
  268|  2.91M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.91M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.91M|    {
  151|  2.91M|        i += n;
  152|  2.91M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.45M|    {
  108|  3.45M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.45M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.45M|    {
   87|  3.45M|        return s - i;
   88|  3.45M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.46M|    {
  304|  1.46M|        ranges::advance(x, n);
  305|  1.46M|        return x;
  306|  1.46M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.46M|    {
  268|  1.46M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.46M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.46M|    {
  151|  1.46M|        i += n;
  152|  1.46M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   410k|    {
  108|   410k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   410k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   410k|    {
   87|   410k|        return s - i;
   88|   410k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.15M|{
  981|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.15M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.15M|        return true;
  984|  1.15M|    }
  985|  1.15M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.15M|                           ranges::const_iterator_t<Range>,
  987|  1.15M|                           typename detail::basic_scan_buffer<
  988|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.15M|        auto beg = r.begin();
  990|  1.15M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.15M, False: 0]
  ------------------
  991|  1.15M|            return false;
  992|  1.15M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.15M|    else {
 1006|  1.15M|        return false;
 1007|  1.15M|    }
 1008|  1.15M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  29.1M|    {
  763|  29.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  29.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.1M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.02M|{
 1857|  3.02M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.02M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.02M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.02M|        if (sz < count) {
 1862|  3.02M|            return unexpected(eof_error::eof);
 1863|  3.02M|        }
 1864|       |
 1865|  3.02M|        return ranges::next(range.begin(), count);
 1866|  3.02M|    }
 1867|  3.02M|    else {
 1868|  3.02M|        auto it = range.begin();
 1869|  3.02M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.85M, False: 1.16M]
  ------------------
 1870|  1.85M|            return ranges::next(it, count);
 1871|  1.85M|        }
 1872|       |
 1873|  4.61M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.48M, False: 1.12M]
  ------------------
 1874|  3.48M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.7k, False: 3.45M]
  ------------------
 1875|  35.7k|                return unexpected(eof_error::eof);
 1876|  35.7k|            }
 1877|  3.48M|        }
 1878|       |
 1879|  1.12M|        return it;
 1880|  1.16M|    }
 1881|  3.02M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.02M|{
 1095|  3.02M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.02M|        return r.size();
 1097|  3.02M|    }
 1098|  3.02M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.02M|                           ranges::const_iterator_t<Range>,
 1100|  3.02M|                           typename detail::basic_scan_buffer<
 1101|  3.02M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.02M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.02M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.02M|        }
 1105|  3.02M|        else {
 1106|  3.02M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.02M, False: 0]
  ------------------
 1107|  3.02M|                return static_cast<size_t>(
 1108|  3.02M|                    r.begin().parent()->chars_available() -
 1109|  3.02M|                    r.begin().position());
 1110|  3.02M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.02M|        }
 1113|  3.02M|    }
 1114|  3.02M|    else {
 1115|  3.02M|        return 0;
 1116|  3.02M|    }
 1117|  3.02M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.77M|    {
  754|  2.77M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  14.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.5M|              cvref<T> obj = *get<T>(fn);
  745|  14.5M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.5M|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.5M|              }
  748|  14.5M|              else {
  749|  14.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.5M|              }
  751|  14.5M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.5M|    {
  684|  14.5M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.5M|            return static_cast<T*>(s.m_cp);
  686|  14.5M|        }
  687|  14.5M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.5M|            return static_cast<T*>(s.m_p);
  689|  14.5M|        }
  690|  14.5M|        else {
  691|  14.5M|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.5M|        }
  693|  14.5M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  2.77M|        {
  662|  2.77M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  7.40M|    {
  763|  7.40M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.40M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.94M|    {
  754|  1.94M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.44M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.44M|              cvref<T> obj = *get<T>(fn);
  745|  3.44M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.44M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.44M|              }
  748|  3.44M|              else {
  749|  3.44M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.44M|              }
  751|  3.44M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.44M|    {
  684|  3.44M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.44M|            return static_cast<T*>(s.m_cp);
  686|  3.44M|        }
  687|  3.44M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.44M|            return static_cast<T*>(s.m_p);
  689|  3.44M|        }
  690|  3.44M|        else {
  691|  3.44M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.44M|        }
  693|  3.44M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  1.94M|        {
  662|  1.94M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   826k|    {
 6037|   826k|        const bool need_skipped_width =
 6038|   826k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 826k]
  |  Branch (6038:33): [True: 0, False: 826k]
  ------------------
 6039|   826k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   826k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 826k]
  ------------------
 6043|   826k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 826k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   826k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 826k, False: 0]
  |  Branch (6047:56): [True: 826k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   826k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 826k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.63M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   826k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   826k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   826k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 812k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.0k|    }                                                  \
  |  |  |  | 3671|   826k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   812k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.63M|                            make_eof_scan_error));
 6058|       |
 6059|  1.63M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 812k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   812k|            return result_type{it, 0};
 6067|  1.63M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   826k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.21M|{
 1976|  2.21M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.21M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.21M|{
 1957|  2.21M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.21M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.21M|    }
 1960|  2.21M|    else {
 1961|  2.21M|        auto first = range.begin();
 1962|  11.7M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 11.6M, False: 25.8k]
  ------------------
 1963|  11.6M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.19M, False: 9.50M]
  ------------------
 1964|  2.19M|                return first;
 1965|  2.19M|            }
 1966|  11.6M|        }
 1967|  25.8k|        return first;
 1968|  2.21M|    }
 1969|  2.21M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.96M|    {
  108|  1.96M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.96M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.96M|    {
   94|  1.96M|        iter_difference_t<I> counter{0};
   95|  18.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.9M, False: 1.96M]
  ------------------
   96|  16.9M|            ++i;
   97|  16.9M|            ++counter;
   98|  16.9M|        }
   99|  1.96M|        return counter;
  100|  1.96M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.23M|    return [code, msg](parse_error err) {
  869|  3.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.23M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   427k|    {
 1780|   427k|        auto stdloc = loc.get<std::locale>();
 1781|   427k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   427k|        grouping = numpunct.grouping();
 1783|   427k|        thousands_sep =
 1784|   427k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 427k]
  ------------------
 1785|   427k|        decimal_point = numpunct.decimal_point();
 1786|   427k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   427k|{
 1717|   427k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 427k, False: 0]
  ------------------
 1718|   427k|        return std::use_facet<Facet>(stdloc);
 1719|   427k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   427k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.24M|{
 1846|  3.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.7k, False: 3.22M]
  |  |  ------------------
  ------------------
 1847|  18.7k|        return unexpected(e);
 1848|  18.7k|    }
 1849|       |
 1850|  3.22M|    return ranges::next(range.begin());
 1851|  3.24M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.71M|{
  950|  4.71M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 4.68M]
  |  |  ------------------
  ------------------
  951|  37.3k|        return eof_error::eof;
  952|  37.3k|    }
  953|  4.68M|    return eof_error::good;
  954|  4.71M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.61M|{
  944|  6.61M|    return is_range_eof(r.begin(), r.end());
  945|  6.61M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.61M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.61M|    {
  937|  6.61M|        return begin == end;
  938|  6.61M|    }
  939|  6.61M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.22M|    {
  296|  3.22M|        ++x;
  297|  3.22M|        return x;
  298|  3.22M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.24M|{
 3141|  1.24M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.24M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 946k, False: 302k]
  ------------------
 3143|   946k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 946k, False: 309]
  ------------------
 3144|   946k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   946k|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|   946k|    }
 3148|       |
 3149|   302k|    auto& it = *r;
 3150|   302k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 126k, False: 176k]
  ------------------
 3151|   126k|        return std::pair{it, sign_type::minus_sign};
 3152|   126k|    }
 3153|   176k|    return std::pair{it, sign_type::plus_sign};
 3154|   302k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.17M|{
 2272|  2.17M|    auto it = read_code_unit(range);
 2273|  2.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 2.16M]
  |  |  ------------------
  ------------------
 2274|  10.8k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  10.8k|    }
 2276|       |
 2277|  4.07M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.07M, False: 1.74M]
  ------------------
 2278|  4.07M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 420k, False: 3.65M]
  ------------------
 2279|   420k|            return *it;
 2280|   420k|        }
 2281|  4.07M|    }
 2282|       |
 2283|  1.74M|    return unexpected(parse_error::error);
 2284|  2.16M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.02M|{
 2231|  3.02M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.02M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.02M|        if (range.size() < str.size()) {
 2236|  3.02M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.02M|        }
 2238|  3.02M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.02M|            return unexpected(parse_error::error);
 2240|  3.02M|        }
 2241|  3.02M|        return ranges::next(range.begin(), str.size());
 2242|  3.02M|    }
 2243|  3.02M|    else {
 2244|  3.02M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.02M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.02M|                return ch;
 2247|  3.02M|            }
 2248|  3.02M|            return static_cast<char_type>(ch +
 2249|  3.02M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.02M|        };
 2251|       |
 2252|  3.02M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.7k, False: 2.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.7k|    }                                                  \
  |  |  |  | 3671|  3.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.98M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.98M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.98M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88M, False: 98.8k]
  |  |  ------------------
  ------------------
 2257|  2.98M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.98M|                    return ascii_tolower(a) ==
 2259|  2.98M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.98M|                }))) {
 2261|  2.88M|            return unexpected(parse_error::error);
 2262|  2.88M|        }
 2263|       |
 2264|  98.8k|        return it;
 2265|  2.98M|    }
 2266|  3.02M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.43M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.43M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.10M, False: 334k]
  |  Branch (2245:29): [True: 279k, False: 54.4k]
  ------------------
 2246|  3.38M|                return ch;
 2247|  3.38M|            }
 2248|  54.4k|            return static_cast<char_type>(ch +
 2249|  54.4k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.43M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.07M|{
 2146|  1.07M|    auto it = read_code_unit(range);
 2147|  1.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.87k, False: 1.06M]
  |  |  ------------------
  ------------------
 2148|  7.87k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  7.87k|    }
 2150|       |
 2151|  1.06M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 874k, False: 192k]
  |  |  ------------------
  ------------------
 2152|  1.06M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   874k|        return unexpected(parse_error::error);
 2154|   874k|    }
 2155|       |
 2156|   192k|    return *it;
 2157|  1.06M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.21M|{
 1996|  2.21M|    auto it = read_while_code_unit(range, pred);
 1997|  2.21M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 901k, False: 1.31M]
  ------------------
 1998|   901k|        return unexpected(parse_error::error);
 1999|   901k|    }
 2000|  1.31M|    return it;
 2001|  2.21M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.01M|    {
 1621|  1.01M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.01M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.01M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.01M|            m_storage.reset();
 1627|  1.01M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.01M|        }
 1629|  1.01M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.01M|                                          std::basic_string<CharT>>) {
 1631|  1.01M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.01M|            m_view = string_view_type{*m_storage};
 1633|  1.01M|        }
 1634|  1.01M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.01M|                                          typename detail::basic_scan_buffer<
 1636|  1.01M|                                              value_t>::forward_iterator> &&
 1637|  1.01M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.01M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.01M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.01M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 865k]
  |  |  ------------------
  ------------------
 1641|  1.01M|                             detail::to_address(end_seg.end()))) {
 1642|   150k|                auto& str = m_storage.emplace();
 1643|   150k|                str.reserve(range.end().position() - range.begin().position());
 1644|   150k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   150k|                m_view = string_view_type{str};
 1646|   150k|                return;
 1647|   150k|            }
 1648|       |
 1649|   865k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   865k|                                                            end_seg.data());
 1651|   865k|            m_storage.reset();
 1652|   865k|        }
 1653|  1.01M|        else {
 1654|  1.01M|            auto& str = m_storage.emplace();
 1655|  1.01M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.01M|                str.reserve(range.size());
 1657|  1.01M|            }
 1658|  1.01M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.01M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.01M|                          std::back_inserter(str));
 1661|  1.01M|            }
 1662|  1.01M|            else {
 1663|  1.01M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.01M|                     ++it) {
 1665|  1.01M|                    str.push_back(*it);
 1666|  1.01M|                }
 1667|  1.01M|            }
 1668|  1.01M|            m_view = string_view_type{str};
 1669|  1.01M|        }
 1670|  1.01M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  6.95M|    {
 1582|  6.95M|        return m_view;
 1583|  6.95M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.24M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   751k|    {
 6079|   751k|        const bool need_skipped_width =
 6080|   751k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 751k]
  |  Branch (6080:33): [True: 0, False: 751k]
  ------------------
 6081|   751k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   751k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 751k]
  ------------------
 6084|   751k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 751k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   751k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 751k, False: 0]
  ------------------
 6093|   751k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 751k]
  ------------------
 6094|   751k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   751k|        return result_type{rng.begin(), 0};
 6118|   751k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.48M|{
 1846|  1.48M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 1.47M]
  |  |  ------------------
  ------------------
 1847|  4.71k|        return unexpected(e);
 1848|  4.71k|    }
 1849|       |
 1850|  1.47M|    return ranges::next(range.begin());
 1851|  1.48M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.78M|{
  950|  2.78M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 2.76M]
  |  |  ------------------
  ------------------
  951|  20.4k|        return eof_error::eof;
  952|  20.4k|    }
  953|  2.76M|    return eof_error::good;
  954|  2.78M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.78M|{
  944|  2.78M|    return is_range_eof(r.begin(), r.end());
  945|  2.78M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.78M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.78M|    {
  937|  2.78M|        return begin == end;
  938|  2.78M|    }
  939|  2.78M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.47M|    {
  296|  1.47M|        ++x;
  297|  1.47M|        return x;
  298|  1.47M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.01M|{
 3141|  1.01M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.01M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 768k, False: 249k]
  ------------------
 3143|   768k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 768k, False: 102]
  ------------------
 3144|   768k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   768k|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|   768k|    }
 3148|       |
 3149|   249k|    auto& it = *r;
 3150|   249k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 116k, False: 133k]
  ------------------
 3151|   116k|        return std::pair{it, sign_type::minus_sign};
 3152|   116k|    }
 3153|   133k|    return std::pair{it, sign_type::plus_sign};
 3154|   249k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.18M|{
 2272|  1.18M|    auto it = read_code_unit(range);
 2273|  1.18M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 1.17M]
  |  |  ------------------
  ------------------
 2274|  1.99k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.99k|    }
 2276|       |
 2277|  2.20M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.20M, False: 901k]
  ------------------
 2278|  2.20M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 277k, False: 1.92M]
  ------------------
 2279|   277k|            return *it;
 2280|   277k|        }
 2281|  2.20M|    }
 2282|       |
 2283|   901k|    return unexpected(parse_error::error);
 2284|  1.17M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.63M|{
 2231|  2.63M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.63M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.63M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.63M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.4k, False: 2.60M]
  ------------------
 2236|  35.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.4k|        }
 2238|  2.60M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.50M, False: 96.7k]
  ------------------
 2239|  2.50M|            return unexpected(parse_error::error);
 2240|  2.50M|        }
 2241|  96.7k|        return ranges::next(range.begin(), str.size());
 2242|  2.60M|    }
 2243|  2.63M|    else {
 2244|  2.63M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.63M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.63M|                return ch;
 2247|  2.63M|            }
 2248|  2.63M|            return static_cast<char_type>(ch +
 2249|  2.63M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.63M|        };
 2251|       |
 2252|  2.63M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.63M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.63M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.63M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.63M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.63M|                    return ascii_tolower(a) ==
 2259|  2.63M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.63M|                }))) {
 2261|  2.63M|            return unexpected(parse_error::error);
 2262|  2.63M|        }
 2263|       |
 2264|  2.63M|        return it;
 2265|  2.63M|    }
 2266|  2.63M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   302k|{
 2146|   302k|    auto it = read_code_unit(range);
 2147|   302k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 300k]
  |  |  ------------------
  ------------------
 2148|  2.72k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.72k|    }
 2150|       |
 2151|   300k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250k, False: 49.5k]
  |  |  ------------------
  ------------------
 2152|   300k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   250k|        return unexpected(parse_error::error);
 2154|   250k|    }
 2155|       |
 2156|  49.5k|    return *it;
 2157|   300k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  3.79M|    {
 1503|  3.79M|        return sv;
 1504|  3.79M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   559k|{
 1976|   559k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   559k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   559k|{
 1957|   559k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   559k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   559k|    }
 1960|   559k|    else {
 1961|   559k|        auto first = range.begin();
 1962|   559k|        for (; first != range.end(); ++first) {
 1963|   559k|            if (pred(*first)) {
 1964|   559k|                return first;
 1965|   559k|            }
 1966|   559k|        }
 1967|   559k|        return first;
 1968|   559k|    }
 1969|   559k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.00M|{
 2951|  1.00M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.00M, False: 0]
  ------------------
 2952|  1.00M|        auto it = read_while_classic_space(range);
 2953|  1.00M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 989k]
  |  |  ------------------
  ------------------
 2955|  11.8k|            return unexpected(e);
 2956|  11.8k|        }
 2957|       |
 2958|   989k|        return it;
 2959|  1.00M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.00M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.00M|{
 2117|  1.00M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.00M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.00M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.00M|        auto buf = make_contiguous_buffer(range);
 2121|  1.00M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.00M|        return ranges::next(range.begin(),
 2123|  1.00M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.00M|    }
 2125|  1.00M|    else {
 2126|  1.00M|        auto it = range.begin();
 2127|       |
 2128|  1.00M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.00M|            auto seg = get_contiguous_beginning(range);
 2130|  1.00M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.00M|                seg_it != seg.end()) {
 2132|  1.00M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.00M|            }
 2134|  1.00M|            ranges::advance(it, seg.size());
 2135|  1.00M|        }
 2136|       |
 2137|  1.00M|        return read_while_code_point(
 2138|  1.00M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.00M|    }
 2140|  1.00M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.00M|{
 1683|  1.00M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.00M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.00M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.00M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.00M|    }
 1688|  1.00M|    else {
 1689|  1.00M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.00M|    }
 1691|  1.00M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.00M|    {
 1490|  1.00M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.06M|    {
  304|  3.06M|        ranges::advance(x, n);
  305|  3.06M|        return x;
  306|  3.06M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.07M|    {
  268|  4.07M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.07M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.07M|    {
  181|  18.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.8M, False: 4.07M]
  ------------------
  182|  14.8M|            ++i;
  183|  14.8M|        }
  184|  4.07M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   267k|    {
 6193|   267k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   267k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   267k|            auto rd = make_reader<T, char_type>();
 6198|   267k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   267k|                return unexpected(e);
 6200|   267k|            }
 6201|       |
 6202|   267k|            return impl(rd, range, value);
 6203|   267k|        }
 6204|   267k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   267k|            auto rd = make_reader<T, char_type>();
 6206|   267k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 267k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   267k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 267k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   267k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   267k|                return impl(rd, range, value);
 6213|   267k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   267k|        else {
 6221|   267k|            SCN_EXPECT(false);
 6222|   267k|            SCN_UNREACHABLE;
 6223|   267k|        }
 6224|   267k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.53M|    {
 3040|  1.53M|        reader_error_handler eh{};
 3041|  1.53M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.53M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.53M|        return {};
 3046|  1.53M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.53M|    {
 3051|  1.53M|        return static_cast<Derived&>(*this);
 3052|  1.53M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.53M|    {
 4145|  1.53M|        detail::check_float_type_specs(specs, eh);
 4146|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   267k|    {
 6124|   267k|        const bool need_skipped_width =
 6125|   267k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 267k]
  |  Branch (6125:33): [True: 0, False: 267k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   267k|        auto it = rng.begin();
 6129|   267k|        std::ptrdiff_t prefix_width = 0;
 6130|   267k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 267k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   267k|        else {
 6138|   267k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.22k, False: 263k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.22k|    }                                                  \
  |  |  |  | 3671|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   263k|            std::tie(it, prefix_width) = prefix_result;
 6140|   263k|        }
 6141|   263k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   263k|        std::ptrdiff_t value_width = 0;
 6145|   263k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 263k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   263k|        else {
 6161|   263k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.1k, False: 246k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.1k|    }                                                  \
  |  | 3671|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   246k|                                             specs, value, loc));
 6163|       |
 6164|   246k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 246k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   246k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   246k|        std::ptrdiff_t postfix_width = 0;
 6173|   246k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 242k, False: 3.40k]
  ------------------
 6174|   242k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   242k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   242k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   242k|                                 value_width));
 6178|   242k|            std::tie(it, postfix_width) = postfix_result;
 6179|   242k|        }
 6180|       |
 6181|   246k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   246k|                                                 value_width, postfix_width);
 6183|   246k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 246k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   246k|        return it;
 6188|   246k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.54M|    {
 3035|  3.54M|        return true;
 3036|  3.54M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.50M|    {
 4217|  1.50M|        unsigned options{};
 4218|  1.50M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 427k, False: 1.08M]
  ------------------
 4219|   427k|            options |= float_reader_base::allow_thsep;
 4220|   427k|        }
 4221|       |
 4222|  1.50M|        SCN_GCC_COMPAT_PUSH
 4223|  1.50M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.50M|        switch (specs.type) {
 4226|   220k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 220k, False: 1.28M]
  ------------------
 4227|   220k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  39.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 39.3k, False: 1.47M]
  ------------------
 4230|  39.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   460k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 460k, False: 1.04M]
  ------------------
 4233|   460k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   362k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 362k, False: 1.14M]
  ------------------
 4236|   362k|                return options | float_reader_base::allow_scientific |
 4237|   362k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   427k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 427k, False: 1.08M]
  ------------------
 4240|   427k|                return options | float_reader_base::allow_scientific |
 4241|   427k|                       float_reader_base::allow_fixed |
 4242|   427k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.50M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.50M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.50M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.50M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.50M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.12M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.24M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   657k|    {
 3691|   657k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   657k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   657k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   657k|        const std::ptrdiff_t sign_len =
 3694|   657k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 163k, False: 493k]
  ------------------
 3695|       |
 3696|   657k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   657k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   657k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   657k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.0k, False: 642k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  15.0k|    }                                                  \
  |  |  |  | 3671|   657k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   642k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   657k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.02M|    {
 4057|  2.02M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.02M, False: 0]
  ------------------
 4058|  2.02M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.02M, False: 0]
  ------------------
 4059|  2.02M|            return;
 4060|  2.02M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.30M|    {
 1587|  2.30M|        return m_storage.has_value();
 1588|  2.30M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.35M|    {
 1592|  1.35M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.35M|        return *m_storage;
 1594|  1.35M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   263k|    {
 4170|   263k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   263k|#if !SCN_DISABLE_LOCALE
 4173|   263k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 74.3k, False: 189k]
  ------------------
 4174|  74.3k|            return read_impl<Range>(
 4175|  74.3k|                range, rd,
 4176|  74.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  74.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  74.3k|                },
 4179|  74.3k|                value, loc);
 4180|  74.3k|        }
 4181|   189k|#endif
 4182|       |
 4183|   189k|        return read_impl<Range>(
 4184|   189k|            range, rd,
 4185|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   189k|                return r.read_source(SCN_FWD(args)...);
 4187|   189k|            },
 4188|   189k|            value);
 4189|   263k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   366k|    {
 4206|   366k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   366k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 347k]
  |  |  ------------------
  ------------------
 4208|  19.1k|            return unexpected(r.error());
 4209|  19.1k|        }
 4210|       |
 4211|   347k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.06k|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   344k|        return ranges::next(range.begin(), n);
 4213|   347k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.13M|    {
  763|  1.13M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.13M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  74.3k|    {
  754|  74.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  74.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.3k|              cvref<T> obj = *get<T>(fn);
  745|  74.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  74.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.3k|              }
  748|  74.3k|              else {
  749|  74.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.3k|              }
  751|  74.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.3k|    {
  684|  74.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  74.3k|            return static_cast<T*>(s.m_cp);
  686|  74.3k|        }
  687|  74.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  74.3k|            return static_cast<T*>(s.m_p);
  689|  74.3k|        }
  690|  74.3k|        else {
  691|  74.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  74.3k|        }
  693|  74.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  74.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  74.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  74.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  74.3k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   231k|    {
 3679|   231k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   231k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   231k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   231k|        return read_source_impl(range);
 3685|   231k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.13M|    {
 3705|  1.13M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.13M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.13M|        auto it = sign_result.first;
 3708|  1.13M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.13M|        auto digits_begin = it;
 3711|  1.13M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.13M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.13M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.13M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.13M|                SCN_TRY_ASSIGN(
 3717|  1.13M|                    it,
 3718|  1.13M|                    do_read_source_impl(
 3719|  1.13M|                        r,
 3720|  1.13M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.13M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.13M|            }
 3723|  1.13M|            else {
 3724|  1.13M|                auto cb = [&](const auto& rr)
 3725|  1.13M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.13M|                    auto res = read_all(rr);
 3727|  1.13M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.13M|                        return unexpected_scan_error(
 3729|  1.13M|                            scan_error::invalid_scanned_value,
 3730|  1.13M|                            "Invalid float value");
 3731|  1.13M|                    }
 3732|  1.13M|                    return res;
 3733|  1.13M|                };
 3734|  1.13M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.13M|            }
 3736|  1.13M|        }
 3737|  1.13M|        else {
 3738|  1.13M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.9k, False: 1.07M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  59.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  59.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  59.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  59.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  59.9k|    }                                                  \
  |  | 3671|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.07M|                it,
 3740|  1.07M|                do_read_source_impl(
 3741|  1.07M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.07M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.07M|        }
 3744|       |
 3745|  1.07M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.07M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.06M, False: 6.63k]
  |  Branch (3747:48): [True: 1.06M, False: 5.50k]
  ------------------
 3748|  1.07M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.01M, False: 45.0k]
  ------------------
 3749|  1.07M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.01M, False: 1.36k]
  ------------------
 3750|  1.01M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.01M|        }
 3752|       |
 3753|  1.07M|        handle_separators();
 3754|       |
 3755|  1.07M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.07M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.07M|        return it;
 3768|  1.07M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.13M|    {
 4000|  1.13M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.13M|        const bool allowed_nonhex =
 4002|  1.13M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.13M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.13M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.12M, False: 12.1k]
  |  Branch (4005:45): [True: 0, False: 1.12M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.13M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.1k, False: 1.12M]
  ------------------
 4011|  12.1k|            return *r;
 4012|  12.1k|        }
 4013|       |
 4014|  1.12M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.07M, False: 46.3k]
  |  Branch (4014:45): [True: 1.11k, False: 1.07M]
  ------------------
 4015|  1.11k|            return unexpected(r.error());
 4016|  1.11k|        }
 4017|  1.11M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 46.3k, False: 1.07M]
  ------------------
 4018|  46.3k|            return *r;
 4019|  46.3k|        }
 4020|       |
 4021|  1.07M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 757k, False: 315k]
  |  Branch (4021:28): [True: 235k, False: 521k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   235k|            auto it = range.begin();
 4025|       |
 4026|   235k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 10.4k, False: 225k]
  ------------------
 4027|  10.4k|                m_kind = float_kind::hex_with_prefix;
 4028|  10.4k|                it = *r;
 4029|  10.4k|            }
 4030|   225k|            else {
 4031|   225k|                m_kind = float_kind::hex_without_prefix;
 4032|   225k|            }
 4033|       |
 4034|   235k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   235k|        }
 4036|   836k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 315k, False: 521k]
  |  Branch (4036:29): [True: 315k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   315k|            m_kind = float_kind::generic;
 4040|   315k|            return read_regular_float(range);
 4041|   315k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   521k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.2k, False: 497k]
  |  |  ------------------
  ------------------
 4047|  23.2k|            m_kind = float_kind::hex_with_prefix;
 4048|  23.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  23.2k|        }
 4050|       |
 4051|   497k|        m_kind = float_kind::generic;
 4052|   497k|        return read_regular(range);
 4053|   521k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.13M|    {
 3811|  1.13M|        auto it = range.begin();
 3812|  1.13M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.12M, False: 12.1k]
  ------------------
 3813|  1.12M|            return unexpected(r.error());
 3814|  1.12M|        }
 3815|  12.1k|        else {
 3816|  12.1k|            it = *r;
 3817|  12.1k|        }
 3818|       |
 3819|  12.1k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.1k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.1k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.63k, False: 5.50k]
  ------------------
 3822|  6.63k|            m_kind = float_kind::inf_short;
 3823|  6.63k|            return it;
 3824|  6.63k|        }
 3825|  5.50k|        else {
 3826|  5.50k|            m_kind = float_kind::inf_long;
 3827|  5.50k|            return *r;
 3828|  5.50k|        }
 3829|  12.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.12M|    {
 3834|  1.12M|        auto it = range.begin();
 3835|  1.12M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.07M, False: 47.5k]
  ------------------
 3836|  1.07M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.07M|                scan_error::invalid_scanned_value,
 3838|  1.07M|                "Invalid floating-point NaN value"));
 3839|  1.07M|        }
 3840|  47.5k|        else {
 3841|  47.5k|            it = *r;
 3842|  47.5k|        }
 3843|       |
 3844|  47.5k|        if (auto r =
 3845|  47.5k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  47.5k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 45.0k, False: 2.47k]
  ------------------
 3847|  45.0k|            m_kind = float_kind::nan_simple;
 3848|  45.0k|            return it;
 3849|  45.0k|        }
 3850|  2.47k|        else {
 3851|  2.47k|            it = *r;
 3852|  2.47k|        }
 3853|       |
 3854|  2.47k|        auto payload_beg_it = it;
 3855|  2.47k|        it = read_while_code_unit(
 3856|  2.47k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.47k|                return is_ascii_char(ch) &&
 3858|  2.47k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.47k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.47k|            });
 3861|  2.47k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.47k|        m_kind = float_kind::nan_with_payload;
 3864|  2.47k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.36k, False: 1.11k]
  ------------------
 3865|  2.47k|                                             ')')) {
 3866|  1.36k|            return *r;
 3867|  1.36k|        }
 3868|  1.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.11k|                                     "Invalid floating-point NaN payload");
 3870|  2.47k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.47k|    {
  754|  2.47k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  20.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.8k|              cvref<T> obj = *get<T>(fn);
  745|  20.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.8k|              }
  748|  20.8k|              else {
  749|  20.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.8k|              }
  751|  20.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  20.8k|    {
  684|  20.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.8k|            return static_cast<T*>(s.m_cp);
  686|  20.8k|        }
  687|  20.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.8k|            return static_cast<T*>(s.m_p);
  689|  20.8k|        }
  690|  20.8k|        else {
  691|  20.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.8k|        }
  693|  20.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  20.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.8k, False: 89]
  ------------------
 3858|  20.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.42k]
  |  Branch (3858:39): [True: 11.5k, False: 7.78k]
  |  Branch (3858:54): [True: 2.53k, False: 6.67k]
  |  Branch (3858:67): [True: 2.45k, False: 83]
  ------------------
 3859|  20.8k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.42k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.50k]
  ------------------
 3860|  20.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.47k|        {
  662|  2.47k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   757k|    {
 3804|   757k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   757k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   259k|    {
 3904|   259k|        auto it = range.begin();
 3905|       |
 3906|   259k|        std::ptrdiff_t digits_count = 0;
 3907|   259k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   259k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.34k, False: 251k]
  |  |  ------------------
  ------------------
 3909|  7.34k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  7.34k|                scan_error::invalid_scanned_value,
 3911|  7.34k|                "Invalid hexadecimal floating-point value"));
 3912|  7.34k|        }
 3913|   251k|        else {
 3914|   251k|            digits_count += ranges::distance(it, *r);
 3915|   251k|            it = *r;
 3916|   251k|        }
 3917|       |
 3918|   251k|        m_integral_part_length = digits_count;
 3919|   251k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 39.4k, False: 212k]
  ------------------
 3920|   251k|                                             m_locale_options.decimal_point)) {
 3921|  39.4k|            it = *r;
 3922|  39.4k|        }
 3923|       |
 3924|   251k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 35.6k, False: 216k]
  ------------------
 3925|   251k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  35.6k|            digits_count += ranges::distance(it, *r);
 3927|  35.6k|            it = *r;
 3928|  35.6k|        }
 3929|       |
 3930|   251k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 251k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   251k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   251k|        return it;
 3938|   251k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   511k|    {
 3789|   511k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   511k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 511k]
  |  |  |  Branch (859:45): [True: 0, False: 511k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   511k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   511k|        return read_while1_code_unit(
 3798|   511k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   511k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   511k|    {
  754|   511k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.62M|              cvref<T> obj = *get<T>(fn);
  745|  2.62M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.62M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.62M|              }
  748|  2.62M|              else {
  749|  2.62M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.62M|              }
  751|  2.62M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.62M|    {
  684|  2.62M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.62M|            return static_cast<T*>(s.m_cp);
  686|  2.62M|        }
  687|  2.62M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.62M|            return static_cast<T*>(s.m_p);
  689|  2.62M|        }
  690|  2.62M|        else {
  691|  2.62M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.62M|        }
  693|  2.62M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.62M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   511k|        {
  662|   511k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   923k|    {
 3876|   923k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 117k, False: 806k]
  ------------------
 3877|   117k|            auto beg_exp_it = range.begin();
 3878|   117k|            auto it = *r;
 3879|       |
 3880|   117k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 116k, False: 309]
  ------------------
 3881|   117k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   116k|                it = r_sign->first;
 3883|   116k|            }
 3884|       |
 3885|   117k|            if (auto r_exp = read_while1_code_unit(
 3886|   117k|                    ranges::subrange{it, range.end()},
 3887|   117k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   117k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82k, False: 115k]
  |  |  ------------------
  ------------------
 3889|  1.82k|                it = beg_exp_it;
 3890|  1.82k|            }
 3891|   115k|            else {
 3892|   115k|                it = *r_exp;
 3893|   115k|            }
 3894|       |
 3895|   117k|            return it;
 3896|   117k|        }
 3897|   806k|        return range.begin();
 3898|   923k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   368k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   368k|              cvref<T> obj = *get<T>(fn);
  745|   368k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   368k|                  obj(static_cast<decltype(args)>(args)...);
  747|   368k|              }
  748|   368k|              else {
  749|   368k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   368k|              }
  751|   368k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   368k|    {
  684|   368k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   368k|            return static_cast<T*>(s.m_cp);
  686|   368k|        }
  687|   368k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   368k|            return static_cast<T*>(s.m_p);
  689|   368k|        }
  690|   368k|        else {
  691|   368k|            return reinterpret_cast<T*>(s.m_fp);
  692|   368k|        }
  693|   368k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   368k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   813k|    {
 3944|   813k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   813k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 701k, False: 112k]
  |  Branch (3945:50): [True: 19.5k, False: 681k]
  ------------------
 3946|       |
 3947|   813k|        auto it = ranges::begin(range);
 3948|   813k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   813k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   813k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.6k, False: 772k]
  |  |  ------------------
  ------------------
 3952|  40.6k|            return r.transform_error(
 3953|  40.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  40.6k|                                              "Invalid floating-point value"));
 3955|  40.6k|        }
 3956|   772k|        else {
 3957|   772k|            digits_count += ranges::distance(it, *r);
 3958|   772k|            it = *r;
 3959|   772k|        }
 3960|       |
 3961|   772k|        m_integral_part_length = digits_count;
 3962|   772k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 149k, False: 623k]
  ------------------
 3963|   772k|                                             m_locale_options.decimal_point)) {
 3964|   149k|            it = *r;
 3965|   149k|        }
 3966|       |
 3967|   772k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 137k, False: 634k]
  ------------------
 3968|   772k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   137k|            digits_count += ranges::distance(it, *r);
 3970|   137k|            it = *r;
 3971|   137k|        }
 3972|       |
 3973|   772k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 772k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   772k|        auto beg_exp_it = it;
 3979|   772k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 671k, False: 101k]
  ------------------
 3980|   671k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   671k|        }
 3982|   772k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 18.8k, False: 754k]
  |  Branch (3982:29): [True: 10.7k, False: 8.08k]
  ------------------
 3983|  10.7k|            return unexpected_scan_error(
 3984|  10.7k|                scan_error::invalid_scanned_value,
 3985|  10.7k|                "No exponent given to scientific float");
 3986|  10.7k|        }
 3987|       |
 3988|   762k|        m_kind =
 3989|   762k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 647k, False: 114k]
  ------------------
 3990|       |
 3991|   762k|        return it;
 3992|   772k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.58M|    {
 3774|  1.58M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 1.58M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.58M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.58M|        return read_while1_code_unit(
 3783|  1.58M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.58M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.58M|    {
  754|  1.58M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  8.68M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.68M|              cvref<T> obj = *get<T>(fn);
  745|  8.68M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.68M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.68M|              }
  748|  8.68M|              else {
  749|  8.68M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.68M|              }
  751|  8.68M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.68M|    {
  684|  8.68M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.68M|            return static_cast<T*>(s.m_cp);
  686|  8.68M|        }
  687|  8.68M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.68M|            return static_cast<T*>(s.m_p);
  689|  8.68M|        }
  690|  8.68M|        else {
  691|  8.68M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.68M|        }
  693|  8.68M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  8.68M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.58M|        {
  662|  1.58M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.01M|    {
 1577|  1.01M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.01M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  74.3k|        {
  662|  74.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   189k|    {
  684|   189k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   189k|            return static_cast<T*>(s.m_cp);
  686|   189k|        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   189k|            return static_cast<T*>(s.m_p);
  689|   189k|        }
  690|   189k|        else {
  691|   189k|            return reinterpret_cast<T*>(s.m_fp);
  692|   189k|        }
  693|   189k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   189k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   189k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   900k|    {
 3665|   900k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   900k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 900k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   900k|        return read_source_impl(range);
 3671|   900k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   226k|    {
 4170|   226k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   226k|#if !SCN_DISABLE_LOCALE
 4173|   226k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 62.7k, False: 164k]
  ------------------
 4174|  62.7k|            return read_impl<Range>(
 4175|  62.7k|                range, rd,
 4176|  62.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  62.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  62.7k|                },
 4179|  62.7k|                value, loc);
 4180|  62.7k|        }
 4181|   164k|#endif
 4182|       |
 4183|   164k|        return read_impl<Range>(
 4184|   164k|            range, rd,
 4185|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   164k|                return r.read_source(SCN_FWD(args)...);
 4187|   164k|            },
 4188|   164k|            value);
 4189|   226k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   321k|    {
 4206|   321k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   321k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 309k]
  |  |  ------------------
  ------------------
 4208|  11.0k|            return unexpected(r.error());
 4209|  11.0k|        }
 4210|       |
 4211|   309k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.9k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.9k|    }                                                  \
  |  |  |  | 3671|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   297k|        return ranges::next(range.begin(), n);
 4213|   309k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   989k|    {
  763|   989k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   989k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  62.7k|    {
  754|  62.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  62.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.7k|              cvref<T> obj = *get<T>(fn);
  745|  62.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  62.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.7k|              }
  748|  62.7k|              else {
  749|  62.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.7k|              }
  751|  62.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  62.7k|    {
  684|  62.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  62.7k|            return static_cast<T*>(s.m_cp);
  686|  62.7k|        }
  687|  62.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  62.7k|            return static_cast<T*>(s.m_p);
  689|  62.7k|        }
  690|  62.7k|        else {
  691|  62.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  62.7k|        }
  693|  62.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  62.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  62.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  62.7k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   195k|    {
 3679|   195k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   195k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   195k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 195k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   195k|        return read_source_impl(range);
 3685|   195k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   989k|    {
 3705|   989k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   989k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   989k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   989k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   989k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 989k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   989k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   989k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   989k|        auto it = sign_result.first;
 3708|   989k|        m_sign = sign_result.second;
 3709|       |
 3710|   989k|        auto digits_begin = it;
 3711|   989k|        auto r = ranges::subrange{it, range.end()};
 3712|   989k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   989k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   989k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 989k]
  |  |  |  Branch (859:45): [True: 0, False: 989k]
  |  |  |  Branch (859:45): [True: 0, False: 989k]
  |  |  ------------------
  ------------------
 3715|   989k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   989k|            else {
 3724|   989k|                auto cb = [&](const auto& rr)
 3725|   989k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   989k|                    auto res = read_all(rr);
 3727|   989k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   989k|                        return unexpected_scan_error(
 3729|   989k|                            scan_error::invalid_scanned_value,
 3730|   989k|                            "Invalid float value");
 3731|   989k|                    }
 3732|   989k|                    return res;
 3733|   989k|                };
 3734|   989k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   989k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   989k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   989k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34.1k, False: 955k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  34.1k|    }                                                  \
  |  | 3671|   989k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   955k|            }
 3736|   989k|        }
 3737|   955k|        else {
 3738|   955k|            SCN_TRY_ASSIGN(
 3739|   955k|                it,
 3740|   955k|                do_read_source_impl(
 3741|   955k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   955k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   955k|        }
 3744|       |
 3745|   955k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   955k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   955k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   955k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 949k, False: 6.47k]
  |  Branch (3747:48): [True: 944k, False: 5.23k]
  ------------------
 3748|   955k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 899k, False: 44.2k]
  ------------------
 3749|   955k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 898k, False: 1.34k]
  ------------------
 3750|   898k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   898k|        }
 3752|       |
 3753|   955k|        handle_separators();
 3754|       |
 3755|   955k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 955k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   955k|        return it;
 3768|   955k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   989k|    {
 3811|   989k|        auto it = range.begin();
 3812|   989k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 978k, False: 11.7k]
  ------------------
 3813|   978k|            return unexpected(r.error());
 3814|   978k|        }
 3815|  11.7k|        else {
 3816|  11.7k|            it = *r;
 3817|  11.7k|        }
 3818|       |
 3819|  11.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  11.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  11.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.47k, False: 5.23k]
  ------------------
 3822|  6.47k|            m_kind = float_kind::inf_short;
 3823|  6.47k|            return it;
 3824|  6.47k|        }
 3825|  5.23k|        else {
 3826|  5.23k|            m_kind = float_kind::inf_long;
 3827|  5.23k|            return *r;
 3828|  5.23k|        }
 3829|  11.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   978k|    {
 3834|   978k|        auto it = range.begin();
 3835|   978k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 931k, False: 46.7k]
  ------------------
 3836|   931k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   931k|                scan_error::invalid_scanned_value,
 3838|   931k|                "Invalid floating-point NaN value"));
 3839|   931k|        }
 3840|  46.7k|        else {
 3841|  46.7k|            it = *r;
 3842|  46.7k|        }
 3843|       |
 3844|  46.7k|        if (auto r =
 3845|  46.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  46.7k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 44.2k, False: 2.45k]
  ------------------
 3847|  44.2k|            m_kind = float_kind::nan_simple;
 3848|  44.2k|            return it;
 3849|  44.2k|        }
 3850|  2.45k|        else {
 3851|  2.45k|            it = *r;
 3852|  2.45k|        }
 3853|       |
 3854|  2.45k|        auto payload_beg_it = it;
 3855|  2.45k|        it = read_while_code_unit(
 3856|  2.45k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.45k|                return is_ascii_char(ch) &&
 3858|  2.45k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.45k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.45k|            });
 3861|  2.45k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.45k|        m_kind = float_kind::nan_with_payload;
 3864|  2.45k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.34k, False: 1.10k]
  ------------------
 3865|  2.45k|                                             ')')) {
 3866|  1.34k|            return *r;
 3867|  1.34k|        }
 3868|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.10k|                                     "Invalid floating-point NaN payload");
 3870|  2.45k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.45k|    {
  754|  2.45k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  20.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.8k|              cvref<T> obj = *get<T>(fn);
  745|  20.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.8k|              }
  748|  20.8k|              else {
  749|  20.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.8k|              }
  751|  20.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  20.8k|    {
  684|  20.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.8k|            return static_cast<T*>(s.m_cp);
  686|  20.8k|        }
  687|  20.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.8k|            return static_cast<T*>(s.m_p);
  689|  20.8k|        }
  690|  20.8k|        else {
  691|  20.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.8k|        }
  693|  20.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  20.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.7k, False: 83]
  ------------------
 3858|  20.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.40k]
  |  Branch (3858:39): [True: 11.5k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 6.65k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  20.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.40k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.48k]
  ------------------
 3860|  20.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.45k|        {
  662|  2.45k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   656k|    {
 3804|   656k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   656k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   556k|{
 1996|   556k|    auto it = read_while_code_unit(range, pred);
 1997|   556k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 234k, False: 322k]
  ------------------
 1998|   234k|        return unexpected(parse_error::error);
 1999|   234k|    }
 2000|   322k|    return it;
 2001|   556k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   162k|    {
 3876|   162k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 28.2k, False: 134k]
  ------------------
 3877|  28.2k|            auto beg_exp_it = range.begin();
 3878|  28.2k|            auto it = *r;
 3879|       |
 3880|  28.2k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 28.1k, False: 102]
  ------------------
 3881|  28.2k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  28.1k|                it = r_sign->first;
 3883|  28.1k|            }
 3884|       |
 3885|  28.2k|            if (auto r_exp = read_while1_code_unit(
 3886|  28.2k|                    ranges::subrange{it, range.end()},
 3887|  28.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  28.2k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 654, False: 27.5k]
  |  |  ------------------
  ------------------
 3889|    654|                it = beg_exp_it;
 3890|    654|            }
 3891|  27.5k|            else {
 3892|  27.5k|                it = *r_exp;
 3893|  27.5k|            }
 3894|       |
 3895|  28.2k|            return it;
 3896|  28.2k|        }
 3897|   134k|        return range.begin();
 3898|   162k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  28.2k|    {
  754|  28.2k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.9k|              cvref<T> obj = *get<T>(fn);
  745|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.9k|              }
  748|  80.9k|              else {
  749|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.9k|              }
  751|  80.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  80.9k|    {
  684|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  80.9k|            return static_cast<T*>(s.m_cp);
  686|  80.9k|        }
  687|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  80.9k|            return static_cast<T*>(s.m_p);
  689|  80.9k|        }
  690|  80.9k|        else {
  691|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  80.9k|        }
  693|  80.9k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  80.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  28.2k|        {
  662|  28.2k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   275k|    {
 3944|   275k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   275k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 173k, False: 102k]
  |  Branch (3945:50): [True: 17.7k, False: 155k]
  ------------------
 3946|       |
 3947|   275k|        auto it = ranges::begin(range);
 3948|   275k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   275k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   275k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.5k, False: 253k]
  |  |  ------------------
  ------------------
 3952|  21.5k|            return r.transform_error(
 3953|  21.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  21.5k|                                              "Invalid floating-point value"));
 3955|  21.5k|        }
 3956|   253k|        else {
 3957|   253k|            digits_count += ranges::distance(it, *r);
 3958|   253k|            it = *r;
 3959|   253k|        }
 3960|       |
 3961|   253k|        m_integral_part_length = digits_count;
 3962|   253k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 45.7k, False: 207k]
  ------------------
 3963|   253k|                                             m_locale_options.decimal_point)) {
 3964|  45.7k|            it = *r;
 3965|  45.7k|        }
 3966|       |
 3967|   253k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 41.6k, False: 211k]
  ------------------
 3968|   253k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  41.6k|            digits_count += ranges::distance(it, *r);
 3970|  41.6k|            it = *r;
 3971|  41.6k|        }
 3972|       |
 3973|   253k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 253k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   253k|        auto beg_exp_it = it;
 3979|   253k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 162k, False: 90.7k]
  ------------------
 3980|   162k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   162k|        }
 3982|   253k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 16.6k, False: 236k]
  |  Branch (3982:29): [True: 10.5k, False: 6.12k]
  ------------------
 3983|  10.5k|            return unexpected_scan_error(
 3984|  10.5k|                scan_error::invalid_scanned_value,
 3985|  10.5k|                "No exponent given to scientific float");
 3986|  10.5k|        }
 3987|       |
 3988|   243k|        m_kind =
 3989|   243k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 215k, False: 27.5k]
  ------------------
 3990|       |
 3991|   243k|        return it;
 3992|   253k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   528k|    {
 3774|   528k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 528k]
  |  |  |  Branch (859:45): [True: 0, False: 528k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   528k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   528k|        return read_while1_code_unit(
 3783|   528k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   528k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   528k|    {
  754|   528k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  2.77M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.77M|              cvref<T> obj = *get<T>(fn);
  745|  2.77M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.77M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.77M|              }
  748|  2.77M|              else {
  749|  2.77M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.77M|              }
  751|  2.77M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.77M|    {
  684|  2.77M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.77M|            return static_cast<T*>(s.m_cp);
  686|  2.77M|        }
  687|  2.77M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.77M|            return static_cast<T*>(s.m_p);
  689|  2.77M|        }
  690|  2.77M|        else {
  691|  2.77M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.77M|        }
  693|  2.77M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  2.77M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   528k|        {
  662|   528k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   989k|    {
 4000|   989k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   989k|        const bool allowed_nonhex =
 4002|   989k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   989k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   989k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 978k, False: 11.7k]
  |  Branch (4005:45): [True: 0, False: 978k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   989k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 11.7k, False: 978k]
  ------------------
 4011|  11.7k|            return *r;
 4012|  11.7k|        }
 4013|       |
 4014|   978k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 932k, False: 45.6k]
  |  Branch (4014:45): [True: 1.10k, False: 931k]
  ------------------
 4015|  1.10k|            return unexpected(r.error());
 4016|  1.10k|        }
 4017|   977k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 45.6k, False: 931k]
  ------------------
 4018|  45.6k|            return *r;
 4019|  45.6k|        }
 4020|       |
 4021|   931k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 656k, False: 275k]
  |  Branch (4021:28): [True: 198k, False: 457k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   198k|            auto it = range.begin();
 4025|       |
 4026|   198k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 9.62k, False: 188k]
  ------------------
 4027|  9.62k|                m_kind = float_kind::hex_with_prefix;
 4028|  9.62k|                it = *r;
 4029|  9.62k|            }
 4030|   188k|            else {
 4031|   188k|                m_kind = float_kind::hex_without_prefix;
 4032|   188k|            }
 4033|       |
 4034|   198k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   198k|        }
 4036|   732k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 275k, False: 457k]
  |  Branch (4036:29): [True: 275k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   275k|            m_kind = float_kind::generic;
 4040|   275k|            return read_regular_float(range);
 4041|   275k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   457k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 434k]
  |  |  ------------------
  ------------------
 4047|  23.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  23.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  23.4k|        }
 4050|       |
 4051|   434k|        m_kind = float_kind::generic;
 4052|   434k|        return read_regular(range);
 4053|   457k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   656k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   656k|                    auto res = read_all(rr);
 3727|   656k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 853, False: 655k]
  |  |  ------------------
  ------------------
 3728|    853|                        return unexpected_scan_error(
 3729|    853|                            scan_error::invalid_scanned_value,
 3730|    853|                            "Invalid float value");
 3731|    853|                    }
 3732|   655k|                    return res;
 3733|   656k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   656k|{
 1839|   656k|    return ranges::next(range.begin(), range.end());
 1840|   656k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   656k|    {
  313|   656k|        ranges::advance(x, bound);
  314|   656k|        return x;
  315|   656k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   656k|    {
  275|   656k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   656k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   656k|    {
  190|   656k|        i = std::move(bound);
  191|   656k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   900k|    {
 1577|   900k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   900k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   900k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   900k|    {
 1621|   900k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   900k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   900k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   900k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   900k|            m_storage.reset();
 1627|   900k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   900k|        }
 1629|   900k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   900k|                                          std::basic_string<CharT>>) {
 1631|   900k|            m_storage.emplace(SCN_FWD(range));
 1632|   900k|            m_view = string_view_type{*m_storage};
 1633|   900k|        }
 1634|   900k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   900k|                                          typename detail::basic_scan_buffer<
 1636|   900k|                                              value_t>::forward_iterator> &&
 1637|   900k|                           ranges::common_range<Range>) {
 1638|   900k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   900k|            auto end_seg = range.end().contiguous_segment();
 1640|   900k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   900k|                             detail::to_address(end_seg.end()))) {
 1642|   900k|                auto& str = m_storage.emplace();
 1643|   900k|                str.reserve(range.end().position() - range.begin().position());
 1644|   900k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   900k|                m_view = string_view_type{str};
 1646|   900k|                return;
 1647|   900k|            }
 1648|       |
 1649|   900k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   900k|                                                            end_seg.data());
 1651|   900k|            m_storage.reset();
 1652|   900k|        }
 1653|   900k|        else {
 1654|   900k|            auto& str = m_storage.emplace();
 1655|   900k|            if constexpr (ranges::sized_range<Range>) {
 1656|   900k|                str.reserve(range.size());
 1657|   900k|            }
 1658|   900k|            if constexpr (ranges::common_range<Range>) {
 1659|   900k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   900k|                          std::back_inserter(str));
 1661|   900k|            }
 1662|   900k|            else {
 1663|   900k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   900k|                     ++it) {
 1665|   900k|                    str.push_back(*it);
 1666|   900k|                }
 1667|   900k|            }
 1668|   900k|            m_view = string_view_type{str};
 1669|   900k|        }
 1670|   900k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  62.7k|        {
  662|  62.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   164k|    {
  684|   164k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   164k|            return static_cast<T*>(s.m_cp);
  686|   164k|        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   164k|            return static_cast<T*>(s.m_p);
  689|   164k|        }
  690|   164k|        else {
  691|   164k|            return reinterpret_cast<T*>(s.m_fp);
  692|   164k|        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   164k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   794k|    {
 3665|   794k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   794k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 794k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   794k|        return read_source_impl(range);
 3671|   794k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   278k|    {
 6193|   278k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   278k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   278k|            auto rd = make_reader<T, char_type>();
 6198|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   278k|                return unexpected(e);
 6200|   278k|            }
 6201|       |
 6202|   278k|            return impl(rd, range, value);
 6203|   278k|        }
 6204|   278k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   278k|            auto rd = make_reader<T, char_type>();
 6206|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   278k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 278k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   278k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   278k|                return impl(rd, range, value);
 6213|   278k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   278k|        else {
 6221|   278k|            SCN_EXPECT(false);
 6222|   278k|            SCN_UNREACHABLE;
 6223|   278k|        }
 6224|   278k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   278k|    {
 6124|   278k|        const bool need_skipped_width =
 6125|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 278k]
  |  Branch (6125:33): [True: 0, False: 278k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   278k|        auto it = rng.begin();
 6129|   278k|        std::ptrdiff_t prefix_width = 0;
 6130|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 278k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   278k|        else {
 6138|   278k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.74k, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.74k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   273k|            std::tie(it, prefix_width) = prefix_result;
 6140|   273k|        }
 6141|   273k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   273k|        std::ptrdiff_t value_width = 0;
 6145|   273k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 273k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   273k|        else {
 6161|   273k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 256k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.6k|    }                                                  \
  |  | 3671|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   256k|                                             specs, value, loc));
 6163|       |
 6164|   256k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 256k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   256k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   256k|        std::ptrdiff_t postfix_width = 0;
 6173|   256k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 252k, False: 3.82k]
  ------------------
 6174|   252k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   252k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   252k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   252k|                                 value_width));
 6178|   252k|            std::tie(it, postfix_width) = postfix_result;
 6179|   252k|        }
 6180|       |
 6181|   256k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   256k|                                                 value_width, postfix_width);
 6183|   256k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 256k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   256k|        return it;
 6188|   256k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   682k|    {
 3691|   682k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   682k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   682k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   682k|        const std::ptrdiff_t sign_len =
 3694|   682k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 170k, False: 511k]
  ------------------
 3695|       |
 3696|   682k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   682k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   682k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   682k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   682k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 669k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.5k|    }                                                  \
  |  |  |  | 3671|   682k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   669k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   682k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   273k|    {
 4170|   273k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   273k|#if !SCN_DISABLE_LOCALE
 4173|   273k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 78.2k, False: 195k]
  ------------------
 4174|  78.2k|            return read_impl<Range>(
 4175|  78.2k|                range, rd,
 4176|  78.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  78.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  78.2k|                },
 4179|  78.2k|                value, loc);
 4180|  78.2k|        }
 4181|   195k|#endif
 4182|       |
 4183|   195k|        return read_impl<Range>(
 4184|   195k|            range, rd,
 4185|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   195k|                return r.read_source(SCN_FWD(args)...);
 4187|   195k|            },
 4188|   195k|            value);
 4189|   273k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   381k|    {
 4206|   381k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   381k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 361k]
  |  |  ------------------
  ------------------
 4208|  20.0k|            return unexpected(r.error());
 4209|  20.0k|        }
 4210|       |
 4211|   361k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.44k, False: 359k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.44k|    }                                                  \
  |  |  |  | 3671|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   359k|        return ranges::next(range.begin(), n);
 4213|   361k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  78.2k|    {
  754|  78.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  78.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.2k|              cvref<T> obj = *get<T>(fn);
  745|  78.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  78.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.2k|              }
  748|  78.2k|              else {
  749|  78.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.2k|              }
  751|  78.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  78.2k|    {
  684|  78.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  78.2k|            return static_cast<T*>(s.m_cp);
  686|  78.2k|        }
  687|  78.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  78.2k|            return static_cast<T*>(s.m_p);
  689|  78.2k|        }
  690|  78.2k|        else {
  691|  78.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  78.2k|        }
  693|  78.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  78.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  78.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  78.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  78.2k|        {
  662|  78.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   195k|    {
  754|   195k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|   195k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   195k|                  obj(static_cast<decltype(args)>(args)...);
  747|   195k|              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   195k|    {
  684|   195k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   195k|            return static_cast<T*>(s.m_cp);
  686|   195k|        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   195k|            return static_cast<T*>(s.m_p);
  689|   195k|        }
  690|   195k|        else {
  691|   195k|            return reinterpret_cast<T*>(s.m_fp);
  692|   195k|        }
  693|   195k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   195k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   195k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   195k|        {
  662|   195k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   234k|    {
 4170|   234k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   234k|#if !SCN_DISABLE_LOCALE
 4173|   234k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 65.6k, False: 168k]
  ------------------
 4174|  65.6k|            return read_impl<Range>(
 4175|  65.6k|                range, rd,
 4176|  65.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  65.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  65.6k|                },
 4179|  65.6k|                value, loc);
 4180|  65.6k|        }
 4181|   168k|#endif
 4182|       |
 4183|   168k|        return read_impl<Range>(
 4184|   168k|            range, rd,
 4185|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   168k|                return r.read_source(SCN_FWD(args)...);
 4187|   168k|            },
 4188|   168k|            value);
 4189|   234k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   332k|    {
 4206|   332k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   332k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 321k]
  |  |  ------------------
  ------------------
 4208|  11.3k|            return unexpected(r.error());
 4209|  11.3k|        }
 4210|       |
 4211|   321k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.1k, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.1k|    }                                                  \
  |  |  |  | 3671|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   310k|        return ranges::next(range.begin(), n);
 4213|   321k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  65.6k|    {
  754|  65.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  65.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.6k|              cvref<T> obj = *get<T>(fn);
  745|  65.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.6k|              }
  748|  65.6k|              else {
  749|  65.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.6k|              }
  751|  65.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  65.6k|    {
  684|  65.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.6k|            return static_cast<T*>(s.m_cp);
  686|  65.6k|        }
  687|  65.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.6k|            return static_cast<T*>(s.m_p);
  689|  65.6k|        }
  690|  65.6k|        else {
  691|  65.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.6k|        }
  693|  65.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  65.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  65.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  65.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  65.6k|        {
  662|  65.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   168k|    {
  754|   168k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   168k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   168k|              cvref<T> obj = *get<T>(fn);
  745|   168k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   168k|                  obj(static_cast<decltype(args)>(args)...);
  747|   168k|              }
  748|   168k|              else {
  749|   168k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   168k|              }
  751|   168k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   168k|    {
  684|   168k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   168k|            return static_cast<T*>(s.m_cp);
  686|   168k|        }
  687|   168k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   168k|            return static_cast<T*>(s.m_p);
  689|   168k|        }
  690|   168k|        else {
  691|   168k|            return reinterpret_cast<T*>(s.m_fp);
  692|   168k|        }
  693|   168k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   168k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   168k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   168k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   168k|        {
  662|   168k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   280k|    {
 6193|   280k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   280k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   280k|            auto rd = make_reader<T, char_type>();
 6198|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   280k|                return unexpected(e);
 6200|   280k|            }
 6201|       |
 6202|   280k|            return impl(rd, range, value);
 6203|   280k|        }
 6204|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   280k|            auto rd = make_reader<T, char_type>();
 6206|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   280k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 280k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   280k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   280k|                return impl(rd, range, value);
 6213|   280k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   280k|        else {
 6221|   280k|            SCN_EXPECT(false);
 6222|   280k|            SCN_UNREACHABLE;
 6223|   280k|        }
 6224|   280k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   280k|    {
 6124|   280k|        const bool need_skipped_width =
 6125|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 280k]
  |  Branch (6125:33): [True: 0, False: 280k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   280k|        auto it = rng.begin();
 6129|   280k|        std::ptrdiff_t prefix_width = 0;
 6130|   280k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 280k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   280k|        else {
 6138|   280k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.04k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.04k|    }                                                  \
  |  |  |  | 3671|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   275k|            std::tie(it, prefix_width) = prefix_result;
 6140|   275k|        }
 6141|   275k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   275k|        std::ptrdiff_t value_width = 0;
 6145|   275k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 275k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   275k|        else {
 6161|   275k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.3k, False: 259k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.3k|    }                                                  \
  |  | 3671|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   259k|                                             specs, value, loc));
 6163|       |
 6164|   259k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 259k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   259k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   259k|        std::ptrdiff_t postfix_width = 0;
 6173|   259k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 255k, False: 4.08k]
  ------------------
 6174|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   255k|                                 value_width));
 6178|   255k|            std::tie(it, postfix_width) = postfix_result;
 6179|   255k|        }
 6180|       |
 6181|   259k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   259k|                                                 value_width, postfix_width);
 6183|   259k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 259k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   259k|        return it;
 6188|   259k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   688k|    {
 3691|   688k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   688k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   688k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   688k|        const std::ptrdiff_t sign_len =
 3694|   688k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 174k, False: 514k]
  ------------------
 3695|       |
 3696|   688k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   688k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   688k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   688k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 677k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.8k|    }                                                  \
  |  |  |  | 3671|   688k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   677k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   688k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   275k|    {
 4170|   275k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   275k|#if !SCN_DISABLE_LOCALE
 4173|   275k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 79.3k, False: 196k]
  ------------------
 4174|  79.3k|            return read_impl<Range>(
 4175|  79.3k|                range, rd,
 4176|  79.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  79.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  79.3k|                },
 4179|  79.3k|                value, loc);
 4180|  79.3k|        }
 4181|   196k|#endif
 4182|       |
 4183|   196k|        return read_impl<Range>(
 4184|   196k|            range, rd,
 4185|   196k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   196k|                return r.read_source(SCN_FWD(args)...);
 4187|   196k|            },
 4188|   196k|            value);
 4189|   275k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   384k|    {
 4206|   384k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   384k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 364k]
  |  |  ------------------
  ------------------
 4208|  20.7k|            return unexpected(r.error());
 4209|  20.7k|        }
 4210|       |
 4211|   364k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   364k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   364k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   364k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 360, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    360|    }                                                  \
  |  |  |  | 3671|   364k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   363k|        return ranges::next(range.begin(), n);
 4213|   364k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  79.3k|    {
  754|  79.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  79.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.3k|              cvref<T> obj = *get<T>(fn);
  745|  79.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  79.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  79.3k|              }
  748|  79.3k|              else {
  749|  79.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.3k|              }
  751|  79.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  79.3k|    {
  684|  79.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  79.3k|            return static_cast<T*>(s.m_cp);
  686|  79.3k|        }
  687|  79.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  79.3k|            return static_cast<T*>(s.m_p);
  689|  79.3k|        }
  690|  79.3k|        else {
  691|  79.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  79.3k|        }
  693|  79.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  79.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  79.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  79.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  79.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  79.3k|        {
  662|  79.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   196k|    {
  754|   196k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   196k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   196k|              cvref<T> obj = *get<T>(fn);
  745|   196k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   196k|                  obj(static_cast<decltype(args)>(args)...);
  747|   196k|              }
  748|   196k|              else {
  749|   196k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   196k|              }
  751|   196k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   196k|    {
  684|   196k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   196k|            return static_cast<T*>(s.m_cp);
  686|   196k|        }
  687|   196k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   196k|            return static_cast<T*>(s.m_p);
  689|   196k|        }
  690|   196k|        else {
  691|   196k|            return reinterpret_cast<T*>(s.m_fp);
  692|   196k|        }
  693|   196k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   196k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   196k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   196k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   196k|        {
  662|   196k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   236k|    {
 4170|   236k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   236k|#if !SCN_DISABLE_LOCALE
 4173|   236k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 66.7k, False: 169k]
  ------------------
 4174|  66.7k|            return read_impl<Range>(
 4175|  66.7k|                range, rd,
 4176|  66.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  66.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  66.7k|                },
 4179|  66.7k|                value, loc);
 4180|  66.7k|        }
 4181|   169k|#endif
 4182|       |
 4183|   169k|        return read_impl<Range>(
 4184|   169k|            range, rd,
 4185|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   169k|                return r.read_source(SCN_FWD(args)...);
 4187|   169k|            },
 4188|   169k|            value);
 4189|   236k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   336k|    {
 4206|   336k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   336k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 324k]
  |  |  ------------------
  ------------------
 4208|  11.6k|            return unexpected(r.error());
 4209|  11.6k|        }
 4210|       |
 4211|   324k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.4k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.4k|    }                                                  \
  |  |  |  | 3671|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   314k|        return ranges::next(range.begin(), n);
 4213|   324k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  66.7k|    {
  754|  66.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  66.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.7k|              cvref<T> obj = *get<T>(fn);
  745|  66.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  66.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  66.7k|              }
  748|  66.7k|              else {
  749|  66.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.7k|              }
  751|  66.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  66.7k|    {
  684|  66.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  66.7k|            return static_cast<T*>(s.m_cp);
  686|  66.7k|        }
  687|  66.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  66.7k|            return static_cast<T*>(s.m_p);
  689|  66.7k|        }
  690|  66.7k|        else {
  691|  66.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  66.7k|        }
  693|  66.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  66.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  66.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  66.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  66.7k|        {
  662|  66.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   169k|    {
  754|   169k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|   169k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   169k|                  obj(static_cast<decltype(args)>(args)...);
  747|   169k|              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   169k|    {
  684|   169k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   169k|            return static_cast<T*>(s.m_cp);
  686|   169k|        }
  687|   169k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   169k|            return static_cast<T*>(s.m_p);
  689|   169k|        }
  690|   169k|        else {
  691|   169k|            return reinterpret_cast<T*>(s.m_fp);
  692|   169k|        }
  693|   169k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   169k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   169k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   169k|        {
  662|   169k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.14M|{
 1039|  1.14M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.14M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.14M|        return r;
 1042|  1.14M|    }
 1043|  1.14M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.14M|                           ranges::const_iterator_t<Range>,
 1045|  1.14M|                           typename detail::basic_scan_buffer<
 1046|  1.14M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.14M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.14M|            auto seg = r.begin().contiguous_segment();
 1049|  1.14M|            auto dist =
 1050|  1.14M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.14M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.14M|        }
 1053|  1.14M|        else {
 1054|  1.14M|            return r.begin().contiguous_segment();
 1055|  1.14M|        }
 1056|  1.14M|    }
 1057|  1.14M|    else {
 1058|  1.14M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.14M|    }
 1060|  1.14M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.01M|{
 2061|  1.01M|    auto it = range.begin();
 2062|  1.91M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.89M, False: 14.5k]
  ------------------
 2063|  1.89M|        const auto val =
 2064|  1.89M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.89M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.89M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.88M, False: 10.8k]
  |  |  ------------------
  ------------------
 2066|  1.88M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.88M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.88M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 996k, False: 888k]
  ------------------
 2069|   996k|                return it;
 2070|   996k|            }
 2071|  1.88M|        }
 2072|   899k|        it = val.iterator;
 2073|   899k|    }
 2074|       |
 2075|  14.5k|    return it;
 2076|  1.01M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.89M|{
 1899|  1.89M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.89M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.89M|    auto it = range.begin();
 1903|  1.89M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.89M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 1.88M]
  |  |  ------------------
  ------------------
 1906|  10.8k|        ++it;
 1907|  10.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.8k|        return {it, {}};
 1909|  10.8k|    }
 1910|       |
 1911|  1.88M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.86M, False: 18.8k]
  ------------------
 1912|  1.86M|        ++it;
 1913|  1.86M|        return {it, string_type(1, *range.begin())};
 1914|  1.86M|    }
 1915|       |
 1916|  18.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  18.8k|    return {it, string_type{range.begin(), it}};
 1918|  1.88M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.8k|{
 1155|  10.8k|    auto it = input.begin();
 1156|  98.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 97.3k, False: 1.21k]
  ------------------
 1157|  97.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.63k, False: 87.7k]
  ------------------
 1158|  9.63k|            break;
 1159|  9.63k|        }
 1160|  97.3k|    }
 1161|  10.8k|    return it;
 1162|  10.8k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.8k|    {
  283|  18.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.8k|    {
  252|  18.8k|        constexpr iter_difference_t<I> zero{0};
  253|  18.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|  57.0k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 39.1k, False: 17.9k]
  |  Branch (255:30): [True: 38.2k, False: 949]
  ------------------
  256|  38.2k|            ++i;
  257|  38.2k|            ++counter;
  258|  38.2k|        }
  259|       |
  260|  18.8k|        return counter;
  261|  18.8k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.89M|    {
 1890|  1.89M|        return !codepoint.empty();
 1891|  1.89M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.01M|{
 2082|  1.01M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.01M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.14M|{
 2951|  1.14M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.14M, False: 0]
  ------------------
 2952|  1.14M|        auto it = read_while_classic_space(range);
 2953|  1.14M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.14M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.5k, False: 1.13M]
  |  |  ------------------
  ------------------
 2955|  14.5k|            return unexpected(e);
 2956|  14.5k|        }
 2957|       |
 2958|  1.13M|        return it;
 2959|  1.14M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.14M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.14M|{
 2117|  1.14M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.14M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.14M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.14M|        auto buf = make_contiguous_buffer(range);
 2121|  1.14M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.14M|        return ranges::next(range.begin(),
 2123|  1.14M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.14M|    }
 2125|  1.14M|    else {
 2126|  1.14M|        auto it = range.begin();
 2127|       |
 2128|  1.14M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.14M|            auto seg = get_contiguous_beginning(range);
 2130|  1.14M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.14M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 135k, False: 1.01M]
  ------------------
 2132|   135k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   135k|            }
 2134|  1.01M|            ranges::advance(it, seg.size());
 2135|  1.01M|        }
 2136|       |
 2137|  1.01M|        return read_while_code_point(
 2138|  1.01M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.14M|    }
 2140|  1.14M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.01M|    {
  754|  1.01M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.88M|              cvref<T> obj = *get<T>(fn);
  745|  1.88M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.88M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.88M|              }
  748|  1.88M|              else {
  749|  1.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.88M|              }
  751|  1.88M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.88M|    {
  684|  1.88M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.88M|            return static_cast<T*>(s.m_cp);
  686|  1.88M|        }
  687|  1.88M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.88M|            return static_cast<T*>(s.m_p);
  689|  1.88M|        }
  690|  1.88M|        else {
  691|  1.88M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.88M|        }
  693|  1.88M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.88M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.01M|        {
  662|  1.01M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   468k|{
  981|   468k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   468k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   468k|        return true;
  984|   468k|    }
  985|   468k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   468k|                           ranges::const_iterator_t<Range>,
  987|   468k|                           typename detail::basic_scan_buffer<
  988|   468k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   468k|        auto beg = r.begin();
  990|   468k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 468k, False: 0]
  ------------------
  991|   468k|            return false;
  992|   468k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   468k|    else {
 1006|   468k|        return false;
 1007|   468k|    }
 1008|   468k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.14M|    {
  763|  3.14M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.14M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.21M|{
 1857|  1.21M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.21M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.21M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.21M|        if (sz < count) {
 1862|  1.21M|            return unexpected(eof_error::eof);
 1863|  1.21M|        }
 1864|       |
 1865|  1.21M|        return ranges::next(range.begin(), count);
 1866|  1.21M|    }
 1867|  1.21M|    else {
 1868|  1.21M|        auto it = range.begin();
 1869|  1.21M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 722k, False: 494k]
  ------------------
 1870|   722k|            return ranges::next(it, count);
 1871|   722k|        }
 1872|       |
 1873|  1.89M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.45M, False: 443k]
  ------------------
 1874|  1.45M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 50.1k, False: 1.40M]
  ------------------
 1875|  50.1k|                return unexpected(eof_error::eof);
 1876|  50.1k|            }
 1877|  1.45M|        }
 1878|       |
 1879|   443k|        return it;
 1880|   494k|    }
 1881|  1.21M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.21M|{
 1095|  1.21M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.21M|        return r.size();
 1097|  1.21M|    }
 1098|  1.21M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.21M|                           ranges::const_iterator_t<Range>,
 1100|  1.21M|                           typename detail::basic_scan_buffer<
 1101|  1.21M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.21M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.21M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.21M|        }
 1105|  1.21M|        else {
 1106|  1.21M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.21M, False: 0]
  ------------------
 1107|  1.21M|                return static_cast<size_t>(
 1108|  1.21M|                    r.begin().parent()->chars_available() -
 1109|  1.21M|                    r.begin().position());
 1110|  1.21M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.21M|        }
 1113|  1.21M|    }
 1114|  1.21M|    else {
 1115|  1.21M|        return 0;
 1116|  1.21M|    }
 1117|  1.21M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.07M|    {
  754|  1.07M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.57M|              cvref<T> obj = *get<T>(fn);
  745|  1.57M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.57M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.57M|              }
  748|  1.57M|              else {
  749|  1.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.57M|              }
  751|  1.57M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.57M|    {
  684|  1.57M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.57M|            return static_cast<T*>(s.m_cp);
  686|  1.57M|        }
  687|  1.57M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.57M|            return static_cast<T*>(s.m_p);
  689|  1.57M|        }
  690|  1.57M|        else {
  691|  1.57M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.57M|        }
  693|  1.57M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.07M|        {
  662|  1.07M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   347k|    {
 6037|   347k|        const bool need_skipped_width =
 6038|   347k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 347k]
  |  Branch (6038:33): [True: 0, False: 347k]
  ------------------
 6039|   347k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   347k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 347k]
  ------------------
 6043|   347k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 347k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   347k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 347k, False: 0]
  |  Branch (6047:56): [True: 347k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   347k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 347k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   692k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 345k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.48k|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   692k|                            make_eof_scan_error));
 6058|       |
 6059|   692k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 345k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   345k|            return result_type{it, 0};
 6067|   692k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   347k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   781k|{
 1976|   781k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   781k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   781k|{
 1957|   781k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   781k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   781k|    }
 1960|   781k|    else {
 1961|   781k|        auto first = range.begin();
 1962|  1.15M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.15M, False: 2.69k]
  ------------------
 1963|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 778k, False: 374k]
  ------------------
 1964|   778k|                return first;
 1965|   778k|            }
 1966|  1.15M|        }
 1967|  2.69k|        return first;
 1968|   781k|    }
 1969|   781k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   527k|    {
  108|   527k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   527k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   527k|    {
   94|   527k|        iter_difference_t<I> counter{0};
   95|  1.37M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 843k, False: 527k]
  ------------------
   96|   843k|            ++i;
   97|   843k|            ++counter;
   98|   843k|        }
   99|   527k|        return counter;
  100|   527k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   160k|    {
 1780|   160k|        auto stdloc = loc.get<std::locale>();
 1781|   160k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   160k|        grouping = numpunct.grouping();
 1783|   160k|        thousands_sep =
 1784|   160k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 160k]
  ------------------
 1785|   160k|        decimal_point = numpunct.decimal_point();
 1786|   160k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   160k|{
 1717|   160k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 160k, False: 0]
  ------------------
 1718|   160k|        return std::use_facet<Facet>(stdloc);
 1719|   160k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   160k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  1.03M|{
 1846|  1.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.74k, False: 1.03M]
  |  |  ------------------
  ------------------
 1847|  1.74k|        return unexpected(e);
 1848|  1.74k|    }
 1849|       |
 1850|  1.03M|    return ranges::next(range.begin());
 1851|  1.03M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.62M|{
  950|  1.62M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.07k, False: 1.62M]
  |  |  ------------------
  ------------------
  951|  5.07k|        return eof_error::eof;
  952|  5.07k|    }
  953|  1.62M|    return eof_error::good;
  954|  1.62M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.40M|{
  944|  2.40M|    return is_range_eof(r.begin(), r.end());
  945|  2.40M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.40M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.40M|    {
  937|  2.40M|        return begin == end;
  938|  2.40M|    }
  939|  2.40M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.03M|    {
  296|  1.03M|        ++x;
  297|  1.03M|        return x;
  298|  1.03M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   474k|{
 3141|   474k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   474k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 470k, False: 3.47k]
  ------------------
 3143|   470k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 470k, False: 70]
  ------------------
 3144|   470k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   470k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   470k|    }
 3148|       |
 3149|  3.47k|    auto& it = *r;
 3150|  3.47k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.82k, False: 650]
  ------------------
 3151|  2.82k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.82k|    }
 3153|    650|    return std::pair{it, sign_type::plus_sign};
 3154|  3.47k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   732k|{
 2272|   732k|    auto it = read_code_unit(range);
 2273|   732k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 933, False: 731k]
  |  |  ------------------
  ------------------
 2274|    933|        return unexpected(make_eof_parse_error(it.error()));
 2275|    933|    }
 2276|       |
 2277|  1.46M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.46M, False: 719k]
  ------------------
 2278|  1.46M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 11.9k, False: 1.44M]
  ------------------
 2279|  11.9k|            return *it;
 2280|  11.9k|        }
 2281|  1.46M|    }
 2282|       |
 2283|   719k|    return unexpected(parse_error::error);
 2284|   731k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.21M|{
 2231|  1.21M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.21M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.21M|        if (range.size() < str.size()) {
 2236|  1.21M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.21M|        }
 2238|  1.21M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.21M|            return unexpected(parse_error::error);
 2240|  1.21M|        }
 2241|  1.21M|        return ranges::next(range.begin(), str.size());
 2242|  1.21M|    }
 2243|  1.21M|    else {
 2244|  1.21M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.21M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.21M|                return ch;
 2247|  1.21M|            }
 2248|  1.21M|            return static_cast<char_type>(ch +
 2249|  1.21M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.21M|        };
 2251|       |
 2252|  1.21M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50.1k, False: 1.16M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  50.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  50.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  50.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  50.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  50.1k|    }                                                  \
  |  |  |  | 3671|  1.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.16M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.16M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.16M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.16M, False: 473]
  |  |  ------------------
  ------------------
 2257|  1.16M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.16M|                    return ascii_tolower(a) ==
 2259|  1.16M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.16M|                }))) {
 2261|  1.16M|            return unexpected(parse_error::error);
 2262|  1.16M|        }
 2263|       |
 2264|    473|        return it;
 2265|  1.16M|    }
 2266|  1.21M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.04M, False: 302k]
  |  Branch (2245:29): [True: 292k, False: 9.45k]
  ------------------
 2246|  1.33M|                return ch;
 2247|  1.33M|            }
 2248|  9.45k|            return static_cast<char_type>(ch +
 2249|  9.45k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   307k|{
 2146|   307k|    auto it = read_code_unit(range);
 2147|   307k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 815, False: 306k]
  |  |  ------------------
  ------------------
 2148|    815|        return unexpected(make_eof_parse_error(it.error()));
 2149|    815|    }
 2150|       |
 2151|   306k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 305k, False: 1.17k]
  |  |  ------------------
  ------------------
 2152|   306k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   305k|        return unexpected(parse_error::error);
 2154|   305k|    }
 2155|       |
 2156|  1.17k|    return *it;
 2157|   306k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   781k|{
 1996|   781k|    auto it = read_while_code_unit(range, pred);
 1997|   781k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 465k, False: 315k]
  ------------------
 1998|   465k|        return unexpected(parse_error::error);
 1999|   465k|    }
 2000|   315k|    return it;
 2001|   781k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   304k|    {
 1621|   304k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   304k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   304k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   304k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   304k|            m_storage.reset();
 1627|   304k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   304k|        }
 1629|   304k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   304k|                                          std::basic_string<CharT>>) {
 1631|   304k|            m_storage.emplace(SCN_FWD(range));
 1632|   304k|            m_view = string_view_type{*m_storage};
 1633|   304k|        }
 1634|   304k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   304k|                                          typename detail::basic_scan_buffer<
 1636|   304k|                                              value_t>::forward_iterator> &&
 1637|   304k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   304k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   304k|            auto end_seg = range.end().contiguous_segment();
 1640|   304k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 293k]
  |  |  ------------------
  ------------------
 1641|   304k|                             detail::to_address(end_seg.end()))) {
 1642|  10.3k|                auto& str = m_storage.emplace();
 1643|  10.3k|                str.reserve(range.end().position() - range.begin().position());
 1644|  10.3k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  10.3k|                m_view = string_view_type{str};
 1646|  10.3k|                return;
 1647|  10.3k|            }
 1648|       |
 1649|   293k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   293k|                                                            end_seg.data());
 1651|   293k|            m_storage.reset();
 1652|   293k|        }
 1653|   304k|        else {
 1654|   304k|            auto& str = m_storage.emplace();
 1655|   304k|            if constexpr (ranges::sized_range<Range>) {
 1656|   304k|                str.reserve(range.size());
 1657|   304k|            }
 1658|   304k|            if constexpr (ranges::common_range<Range>) {
 1659|   304k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   304k|                          std::back_inserter(str));
 1661|   304k|            }
 1662|   304k|            else {
 1663|   304k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   304k|                     ++it) {
 1665|   304k|                    str.push_back(*it);
 1666|   304k|                }
 1667|   304k|            }
 1668|   304k|            m_view = string_view_type{str};
 1669|   304k|        }
 1670|   304k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.72M|    {
 1582|  2.72M|        return m_view;
 1583|  2.72M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.86M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   218k|    {
 6079|   218k|        const bool need_skipped_width =
 6080|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 218k]
  |  Branch (6080:33): [True: 0, False: 218k]
  ------------------
 6081|   218k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   218k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 218k]
  ------------------
 6084|   218k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 218k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   218k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 218k, False: 0]
  ------------------
 6093|   218k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 218k]
  ------------------
 6094|   218k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   218k|        return result_type{rng.begin(), 0};
 6118|   218k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.21M|{
 1857|  1.21M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.21M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.21M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.21M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 50.2k, False: 1.16M]
  ------------------
 1862|  50.2k|            return unexpected(eof_error::eof);
 1863|  50.2k|        }
 1864|       |
 1865|  1.16M|        return ranges::next(range.begin(), count);
 1866|  1.21M|    }
 1867|  1.21M|    else {
 1868|  1.21M|        auto it = range.begin();
 1869|  1.21M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.21M|            return ranges::next(it, count);
 1871|  1.21M|        }
 1872|       |
 1873|  1.21M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.21M|            if (it == range.end()) {
 1875|  1.21M|                return unexpected(eof_error::eof);
 1876|  1.21M|            }
 1877|  1.21M|        }
 1878|       |
 1879|  1.21M|        return it;
 1880|  1.21M|    }
 1881|  1.21M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.30M|{
 1899|  1.30M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.30M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.30M|    auto it = range.begin();
 1903|  1.30M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.30M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.30M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.30M, False: 0]
  ------------------
 1912|  1.30M|        ++it;
 1913|  1.30M|        return {it, string_type(1, *range.begin())};
 1914|  1.30M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.30M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.52M|{
  944|  2.52M|    return is_range_eof(r.begin(), r.end());
  945|  2.52M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.52M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.52M|    {
  937|  2.52M|        return begin == end;
  938|  2.52M|    }
  939|  2.52M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   285k|    {
  190|   285k|        i = std::move(bound);
  191|   285k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.30M|    {
 1890|  1.30M|        return !codepoint.empty();
 1891|  1.30M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.22M|{
  950|  1.22M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.76k, False: 1.22M]
  |  |  ------------------
  ------------------
  951|  3.76k|        return eof_error::eof;
  952|  3.76k|    }
  953|  1.22M|    return eof_error::good;
  954|  1.22M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   635k|{
 1846|   635k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 440, False: 634k]
  |  |  ------------------
  ------------------
 1847|    440|        return unexpected(e);
 1848|    440|    }
 1849|       |
 1850|   634k|    return ranges::next(range.begin());
 1851|   635k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   634k|    {
  296|   634k|        ++x;
  297|   634k|        return x;
  298|   634k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   468k|{
 3141|   468k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   468k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 466k, False: 2.07k]
  ------------------
 3143|   466k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 466k, False: 24]
  ------------------
 3144|   466k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   466k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   466k|    }
 3148|       |
 3149|  2.07k|    auto& it = *r;
 3150|  2.07k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.56k, False: 514]
  ------------------
 3151|  1.56k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.56k|    }
 3153|    514|    return std::pair{it, sign_type::plus_sign};
 3154|  2.07k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   527k|{
 2272|   527k|    auto it = read_code_unit(range);
 2273|   527k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 208, False: 527k]
  |  |  ------------------
  ------------------
 2274|    208|        return unexpected(make_eof_parse_error(it.error()));
 2275|    208|    }
 2276|       |
 2277|  1.05M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.05M, False: 522k]
  ------------------
 2278|  1.05M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 5.03k, False: 1.04M]
  ------------------
 2279|  5.03k|            return *it;
 2280|  5.03k|        }
 2281|  1.05M|    }
 2282|       |
 2283|   522k|    return unexpected(parse_error::error);
 2284|   527k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.21M|{
 2231|  1.21M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.21M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.21M|        if (range.size() < str.size()) {
 2236|  1.21M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.21M|        }
 2238|  1.21M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.21M|            return unexpected(parse_error::error);
 2240|  1.21M|        }
 2241|  1.21M|        return ranges::next(range.begin(), str.size());
 2242|  1.21M|    }
 2243|  1.21M|    else {
 2244|  1.21M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.21M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.21M|                return ch;
 2247|  1.21M|            }
 2248|  1.21M|            return static_cast<char_type>(ch +
 2249|  1.21M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.21M|        };
 2251|       |
 2252|  1.21M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50.2k, False: 1.16M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  50.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  50.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  50.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  50.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  50.2k|    }                                                  \
  |  |  |  | 3671|  1.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.16M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.16M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.16M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.16M, False: 473]
  |  |  ------------------
  ------------------
 2257|  1.16M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.16M|                    return ascii_tolower(a) ==
 2259|  1.16M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.16M|                }))) {
 2261|  1.16M|            return unexpected(parse_error::error);
 2262|  1.16M|        }
 2263|       |
 2264|    473|        return it;
 2265|  1.16M|    }
 2266|  1.21M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.04M, False: 303k]
  |  Branch (2245:29): [True: 293k, False: 9.53k]
  ------------------
 2246|  1.33M|                return ch;
 2247|  1.33M|            }
 2248|  9.53k|            return static_cast<char_type>(ch +
 2249|  9.53k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   107k|{
 2146|   107k|    auto it = read_code_unit(range);
 2147|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232, False: 107k]
  |  |  ------------------
  ------------------
 2148|    232|        return unexpected(make_eof_parse_error(it.error()));
 2149|    232|    }
 2150|       |
 2151|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 462]
  |  |  ------------------
  ------------------
 2152|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   107k|        return unexpected(parse_error::error);
 2154|   107k|    }
 2155|       |
 2156|    462|    return *it;
 2157|   107k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   291k|{
 1976|   291k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   291k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   291k|{
 1957|   291k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   291k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   291k|    }
 1960|   291k|    else {
 1961|   291k|        auto first = range.begin();
 1962|   291k|        for (; first != range.end(); ++first) {
 1963|   291k|            if (pred(*first)) {
 1964|   291k|                return first;
 1965|   291k|            }
 1966|   291k|        }
 1967|   291k|        return first;
 1968|   291k|    }
 1969|   291k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   468k|{
 2951|   468k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 468k, False: 0]
  ------------------
 2952|   468k|        auto it = read_while_classic_space(range);
 2953|   468k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   468k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 465k]
  |  |  ------------------
  ------------------
 2955|  2.95k|            return unexpected(e);
 2956|  2.95k|        }
 2957|       |
 2958|   465k|        return it;
 2959|   468k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   468k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   468k|{
 2117|   468k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   468k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   468k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   468k|        auto buf = make_contiguous_buffer(range);
 2121|   468k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   468k|        return ranges::next(range.begin(),
 2123|   468k|                            ranges::distance(buf.view().begin(), it));
 2124|   468k|    }
 2125|   468k|    else {
 2126|   468k|        auto it = range.begin();
 2127|       |
 2128|   468k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   468k|            auto seg = get_contiguous_beginning(range);
 2130|   468k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   468k|                seg_it != seg.end()) {
 2132|   468k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   468k|            }
 2134|   468k|            ranges::advance(it, seg.size());
 2135|   468k|        }
 2136|       |
 2137|   468k|        return read_while_code_point(
 2138|   468k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   468k|    }
 2140|   468k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   468k|{
 2082|   468k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   468k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   755k|{
 2061|   755k|    auto it = range.begin();
 2062|  1.48M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.30M, False: 183k]
  ------------------
 2063|  1.30M|        const auto val =
 2064|  1.30M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.30M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.30M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.30M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.30M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.30M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 571k, False: 730k]
  ------------------
 2069|   571k|                return it;
 2070|   571k|            }
 2071|  1.30M|        }
 2072|   730k|        it = val.iterator;
 2073|   730k|    }
 2074|       |
 2075|   183k|    return it;
 2076|   755k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   468k|    {
  754|   468k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   778k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   778k|              cvref<T> obj = *get<T>(fn);
  745|   778k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   778k|                  obj(static_cast<decltype(args)>(args)...);
  747|   778k|              }
  748|   778k|              else {
  749|   778k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   778k|              }
  751|   778k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   778k|    {
  684|   778k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   778k|            return static_cast<T*>(s.m_cp);
  686|   778k|        }
  687|   778k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   778k|            return static_cast<T*>(s.m_p);
  689|   778k|        }
  690|   778k|        else {
  691|   778k|            return reinterpret_cast<T*>(s.m_fp);
  692|   778k|        }
  693|   778k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   778k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   468k|        {
  662|   468k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.02M|    {
  304|  1.02M|        ranges::advance(x, n);
  305|  1.02M|        return x;
  306|  1.02M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.02M|    {
  268|  1.02M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.02M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.02M|    {
  181|  3.28M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.25M, False: 1.02M]
  ------------------
  182|  2.25M|            ++i;
  183|  2.25M|        }
  184|  1.02M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   113k|    {
 6193|   113k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   113k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   113k|            auto rd = make_reader<T, char_type>();
 6198|   113k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   113k|                return unexpected(e);
 6200|   113k|            }
 6201|       |
 6202|   113k|            return impl(rd, range, value);
 6203|   113k|        }
 6204|   113k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   113k|            auto rd = make_reader<T, char_type>();
 6206|   113k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   113k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 113k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   113k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   113k|                return impl(rd, range, value);
 6213|   113k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   113k|        else {
 6221|   113k|            SCN_EXPECT(false);
 6222|   113k|            SCN_UNREACHABLE;
 6223|   113k|        }
 6224|   113k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   695k|    {
 3040|   695k|        reader_error_handler eh{};
 3041|   695k|        get_derived().check_specs_impl(specs, eh);
 3042|   695k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   695k|        return {};
 3046|   695k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   695k|    {
 3051|   695k|        return static_cast<Derived&>(*this);
 3052|   695k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   695k|    {
 4145|   695k|        detail::check_float_type_specs(specs, eh);
 4146|   695k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   113k|    {
 6124|   113k|        const bool need_skipped_width =
 6125|   113k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 113k]
  |  Branch (6125:33): [True: 0, False: 113k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   113k|        auto it = rng.begin();
 6129|   113k|        std::ptrdiff_t prefix_width = 0;
 6130|   113k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 113k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   113k|        else {
 6138|   113k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 784, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    784|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    784|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    784|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    784|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    784|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   112k|            std::tie(it, prefix_width) = prefix_result;
 6140|   112k|        }
 6141|   112k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   112k|        std::ptrdiff_t value_width = 0;
 6145|   112k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 112k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   112k|        else {
 6161|   112k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 70.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  70.5k|                                             specs, value, loc));
 6163|       |
 6164|  70.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 70.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  70.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  70.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  70.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 70.2k, False: 322]
  ------------------
 6174|  70.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  70.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 70.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  70.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  70.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  70.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  70.2k|                                 value_width));
 6178|  70.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  70.2k|        }
 6180|       |
 6181|  70.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  70.5k|                                                 value_width, postfix_width);
 6183|  70.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 70.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  70.5k|        return it;
 6188|  70.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.37M|    {
 3035|  1.37M|        return true;
 3036|  1.37M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   690k|    {
 4217|   690k|        unsigned options{};
 4218|   690k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 160k, False: 529k]
  ------------------
 4219|   160k|            options |= float_reader_base::allow_thsep;
 4220|   160k|        }
 4221|       |
 4222|   690k|        SCN_GCC_COMPAT_PUSH
 4223|   690k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   690k|        switch (specs.type) {
 4226|   148k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 148k, False: 541k]
  ------------------
 4227|   148k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  52.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 52.0k, False: 638k]
  ------------------
 4230|  52.0k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   169k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 169k, False: 521k]
  ------------------
 4233|   169k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   159k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 159k, False: 530k]
  ------------------
 4236|   159k|                return options | float_reader_base::allow_scientific |
 4237|   159k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   160k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 160k, False: 529k]
  ------------------
 4240|   160k|                return options | float_reader_base::allow_scientific |
 4241|   160k|                       float_reader_base::allow_fixed |
 4242|   160k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 690k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   690k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   690k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   690k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   690k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   931k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.86M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   223k|    {
 3691|   223k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   223k|        const std::ptrdiff_t sign_len =
 3694|   223k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 724, False: 222k]
  ------------------
 3695|       |
 3696|   223k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.9k, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.9k|    }                                                  \
  |  |  |  | 3671|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   192k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   223k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   694k|    {
 4057|   694k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 694k, False: 0]
  ------------------
 4058|   694k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 694k, False: 0]
  ------------------
 4059|   694k|            return;
 4060|   694k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   705k|    {
 1587|   705k|        return m_storage.has_value();
 1588|   705k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   412k|    {
 1592|   412k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   412k|        return *m_storage;
 1594|   412k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   112k|    {
 4170|   112k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   112k|#if !SCN_DISABLE_LOCALE
 4173|   112k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 25.5k, False: 87.0k]
  ------------------
 4174|  25.5k|            return read_impl<Range>(
 4175|  25.5k|                range, rd,
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  25.5k|                },
 4179|  25.5k|                value, loc);
 4180|  25.5k|        }
 4181|  87.0k|#endif
 4182|       |
 4183|  87.0k|        return read_impl<Range>(
 4184|  87.0k|            range, rd,
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  87.0k|            },
 4188|  87.0k|            value);
 4189|   112k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   150k|    {
 4206|   150k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   150k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 97.6k]
  |  |  ------------------
  ------------------
 4208|  53.2k|            return unexpected(r.error());
 4209|  53.2k|        }
 4210|       |
 4211|  97.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  97.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 96.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.34k|    }                                                  \
  |  |  |  | 3671|  97.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  96.2k|        return ranges::next(range.begin(), n);
 4213|  97.6k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   465k|    {
  763|   465k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   465k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  25.5k|    {
  754|  25.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  25.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.5k|              cvref<T> obj = *get<T>(fn);
  745|  25.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.5k|              }
  748|  25.5k|              else {
  749|  25.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.5k|              }
  751|  25.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.5k|    {
  684|  25.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.5k|            return static_cast<T*>(s.m_cp);
  686|  25.5k|        }
  687|  25.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.5k|            return static_cast<T*>(s.m_p);
  689|  25.5k|        }
  690|  25.5k|        else {
  691|  25.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.5k|        }
  693|  25.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  25.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  80.3k|    {
 3679|  80.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  80.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  80.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 80.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  80.3k|        return read_source_impl(range);
 3685|  80.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   465k|    {
 3705|   465k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   465k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   465k|        auto it = sign_result.first;
 3708|   465k|        m_sign = sign_result.second;
 3709|       |
 3710|   465k|        auto digits_begin = it;
 3711|   465k|        auto r = ranges::subrange{it, range.end()};
 3712|   465k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   465k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   465k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   465k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   465k|                SCN_TRY_ASSIGN(
 3717|   465k|                    it,
 3718|   465k|                    do_read_source_impl(
 3719|   465k|                        r,
 3720|   465k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   465k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   465k|            }
 3723|   465k|            else {
 3724|   465k|                auto cb = [&](const auto& rr)
 3725|   465k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   465k|                    auto res = read_all(rr);
 3727|   465k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   465k|                        return unexpected_scan_error(
 3729|   465k|                            scan_error::invalid_scanned_value,
 3730|   465k|                            "Invalid float value");
 3731|   465k|                    }
 3732|   465k|                    return res;
 3733|   465k|                };
 3734|   465k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   465k|            }
 3736|   465k|        }
 3737|   465k|        else {
 3738|   465k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 161k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   161k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   161k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   161k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   161k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   161k|    }                                                  \
  |  | 3671|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   304k|                it,
 3740|   304k|                do_read_source_impl(
 3741|   304k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   304k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   304k|        }
 3744|       |
 3745|   304k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   304k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 304k, False: 0]
  |  Branch (3747:48): [True: 304k, False: 0]
  ------------------
 3748|   304k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 304k, False: 0]
  ------------------
 3749|   304k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 304k, False: 0]
  ------------------
 3750|   304k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   304k|        }
 3752|       |
 3753|   304k|        handle_separators();
 3754|       |
 3755|   304k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 304k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   304k|        return it;
 3768|   304k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   465k|    {
 4000|   465k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   465k|        const bool allowed_nonhex =
 4002|   465k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   465k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   465k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 465k, False: 0]
  |  Branch (4005:45): [True: 0, False: 465k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   465k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 465k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   465k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 465k, False: 0]
  |  Branch (4014:45): [True: 0, False: 465k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   465k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 465k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   465k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 285k, False: 180k]
  |  Branch (4021:28): [True: 84.6k, False: 200k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  84.6k|            auto it = range.begin();
 4025|       |
 4026|  84.6k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 138, False: 84.5k]
  ------------------
 4027|    138|                m_kind = float_kind::hex_with_prefix;
 4028|    138|                it = *r;
 4029|    138|            }
 4030|  84.5k|            else {
 4031|  84.5k|                m_kind = float_kind::hex_without_prefix;
 4032|  84.5k|            }
 4033|       |
 4034|  84.6k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  84.6k|        }
 4036|   380k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 180k, False: 200k]
  |  Branch (4036:29): [True: 180k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   180k|            m_kind = float_kind::generic;
 4040|   180k|            return read_regular_float(range);
 4041|   180k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   200k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 335, False: 200k]
  |  |  ------------------
  ------------------
 4047|    335|            m_kind = float_kind::hex_with_prefix;
 4048|    335|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    335|        }
 4050|       |
 4051|   200k|        m_kind = float_kind::generic;
 4052|   200k|        return read_regular(range);
 4053|   200k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   465k|    {
 3811|   465k|        auto it = range.begin();
 3812|   465k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 465k, False: 0]
  ------------------
 3813|   465k|            return unexpected(r.error());
 3814|   465k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   465k|    {
 3834|   465k|        auto it = range.begin();
 3835|   465k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 465k, False: 0]
  ------------------
 3836|   465k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   465k|                scan_error::invalid_scanned_value,
 3838|   465k|                "Invalid floating-point NaN value"));
 3839|   465k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   285k|    {
 3804|   285k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   285k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  84.9k|    {
 3904|  84.9k|        auto it = range.begin();
 3905|       |
 3906|  84.9k|        std::ptrdiff_t digits_count = 0;
 3907|  84.9k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  84.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  84.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 60.0k]
  |  |  ------------------
  ------------------
 3909|  24.9k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  24.9k|                scan_error::invalid_scanned_value,
 3911|  24.9k|                "Invalid hexadecimal floating-point value"));
 3912|  24.9k|        }
 3913|  60.0k|        else {
 3914|  60.0k|            digits_count += ranges::distance(it, *r);
 3915|  60.0k|            it = *r;
 3916|  60.0k|        }
 3917|       |
 3918|  60.0k|        m_integral_part_length = digits_count;
 3919|  60.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 222, False: 59.7k]
  ------------------
 3920|  60.0k|                                             m_locale_options.decimal_point)) {
 3921|    222|            it = *r;
 3922|    222|        }
 3923|       |
 3924|  60.0k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 162, False: 59.8k]
  ------------------
 3925|  60.0k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    162|            digits_count += ranges::distance(it, *r);
 3927|    162|            it = *r;
 3928|    162|        }
 3929|       |
 3930|  60.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.0k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  60.0k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  60.0k|        return it;
 3938|  60.0k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   144k|    {
 3789|   144k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  |  Branch (859:45): [True: 0, False: 144k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   144k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   144k|        return read_while1_code_unit(
 3798|   144k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   144k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   219k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   219k|              cvref<T> obj = *get<T>(fn);
  745|   219k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   219k|                  obj(static_cast<decltype(args)>(args)...);
  747|   219k|              }
  748|   219k|              else {
  749|   219k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   219k|              }
  751|   219k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   219k|    {
  684|   219k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   219k|            return static_cast<T*>(s.m_cp);
  686|   219k|        }
  687|   219k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   219k|            return static_cast<T*>(s.m_p);
  689|   219k|        }
  690|   219k|        else {
  691|   219k|            return reinterpret_cast<T*>(s.m_fp);
  692|   219k|        }
  693|   219k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   219k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   257k|    {
 3876|   257k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 8.48k, False: 249k]
  ------------------
 3877|  8.48k|            auto beg_exp_it = range.begin();
 3878|  8.48k|            auto it = *r;
 3879|       |
 3880|  8.48k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 8.41k, False: 70]
  ------------------
 3881|  8.48k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  8.41k|                it = r_sign->first;
 3883|  8.41k|            }
 3884|       |
 3885|  8.48k|            if (auto r_exp = read_while1_code_unit(
 3886|  8.48k|                    ranges::subrange{it, range.end()},
 3887|  8.48k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  8.48k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.13k, False: 7.34k]
  |  |  ------------------
  ------------------
 3889|  1.13k|                it = beg_exp_it;
 3890|  1.13k|            }
 3891|  7.34k|            else {
 3892|  7.34k|                it = *r_exp;
 3893|  7.34k|            }
 3894|       |
 3895|  8.48k|            return it;
 3896|  8.48k|        }
 3897|   249k|        return range.begin();
 3898|   257k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  8.48k|    {
  754|  8.48k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  27.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  8.48k|        {
  662|  8.48k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   380k|    {
 3944|   380k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   380k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 306k, False: 74.4k]
  |  Branch (3945:50): [True: 26.0k, False: 280k]
  ------------------
 3946|       |
 3947|   380k|        auto it = ranges::begin(range);
 3948|   380k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   380k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   380k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 247k]
  |  |  ------------------
  ------------------
 3952|   133k|            return r.transform_error(
 3953|   133k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   133k|                                              "Invalid floating-point value"));
 3955|   133k|        }
 3956|   247k|        else {
 3957|   247k|            digits_count += ranges::distance(it, *r);
 3958|   247k|            it = *r;
 3959|   247k|        }
 3960|       |
 3961|   247k|        m_integral_part_length = digits_count;
 3962|   247k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 957, False: 246k]
  ------------------
 3963|   247k|                                             m_locale_options.decimal_point)) {
 3964|    957|            it = *r;
 3965|    957|        }
 3966|       |
 3967|   247k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 672, False: 246k]
  ------------------
 3968|   247k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    672|            digits_count += ranges::distance(it, *r);
 3970|    672|            it = *r;
 3971|    672|        }
 3972|       |
 3973|   247k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   247k|        auto beg_exp_it = it;
 3979|   247k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 197k, False: 49.1k]
  ------------------
 3980|   197k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   197k|        }
 3982|   247k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.48k, False: 243k]
  |  Branch (3982:29): [True: 2.87k, False: 612]
  ------------------
 3983|  2.87k|            return unexpected_scan_error(
 3984|  2.87k|                scan_error::invalid_scanned_value,
 3985|  2.87k|                "No exponent given to scientific float");
 3986|  2.87k|        }
 3987|       |
 3988|   244k|        m_kind =
 3989|   244k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 236k, False: 7.24k]
  ------------------
 3990|       |
 3991|   244k|        return it;
 3992|   247k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   627k|    {
 3774|   627k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   627k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 627k]
  |  |  |  Branch (859:45): [True: 0, False: 627k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   627k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   627k|        return read_while1_code_unit(
 3783|   627k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   627k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   627k|    {
  754|   627k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   906k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   906k|              cvref<T> obj = *get<T>(fn);
  745|   906k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   906k|                  obj(static_cast<decltype(args)>(args)...);
  747|   906k|              }
  748|   906k|              else {
  749|   906k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   906k|              }
  751|   906k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   906k|    {
  684|   906k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   906k|            return static_cast<T*>(s.m_cp);
  686|   906k|        }
  687|   906k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   906k|            return static_cast<T*>(s.m_p);
  689|   906k|        }
  690|   906k|        else {
  691|   906k|            return reinterpret_cast<T*>(s.m_fp);
  692|   906k|        }
  693|   906k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   906k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   627k|        {
  662|   627k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   304k|    {
 1577|   304k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   304k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  25.5k|        {
  662|  25.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  87.0k|    {
  754|  87.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  87.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.0k|              cvref<T> obj = *get<T>(fn);
  745|  87.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  87.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.0k|              }
  748|  87.0k|              else {
  749|  87.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.0k|              }
  751|  87.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  87.0k|    {
  684|  87.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  87.0k|            return static_cast<T*>(s.m_cp);
  686|  87.0k|        }
  687|  87.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  87.0k|            return static_cast<T*>(s.m_p);
  689|  87.0k|        }
  690|  87.0k|        else {
  691|  87.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  87.0k|        }
  693|  87.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  87.0k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   385k|    {
 3665|   385k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   385k|        return read_source_impl(range);
 3671|   385k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  87.0k|        {
  662|  87.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   112k|    {
 4170|   112k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   112k|#if !SCN_DISABLE_LOCALE
 4173|   112k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 25.5k, False: 87.0k]
  ------------------
 4174|  25.5k|            return read_impl<Range>(
 4175|  25.5k|                range, rd,
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  25.5k|                },
 4179|  25.5k|                value, loc);
 4180|  25.5k|        }
 4181|  87.0k|#endif
 4182|       |
 4183|  87.0k|        return read_impl<Range>(
 4184|  87.0k|            range, rd,
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  87.0k|            },
 4188|  87.0k|            value);
 4189|   112k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   150k|    {
 4206|   150k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   150k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 126k]
  |  |  ------------------
  ------------------
 4208|  24.9k|            return unexpected(r.error());
 4209|  24.9k|        }
 4210|       |
 4211|   126k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.6k, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.6k|    }                                                  \
  |  |  |  | 3671|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  96.3k|        return ranges::next(range.begin(), n);
 4213|   126k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   465k|    {
  763|   465k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   465k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  25.5k|    {
  754|  25.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  25.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.5k|              cvref<T> obj = *get<T>(fn);
  745|  25.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.5k|              }
  748|  25.5k|              else {
  749|  25.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.5k|              }
  751|  25.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  25.5k|    {
  684|  25.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.5k|            return static_cast<T*>(s.m_cp);
  686|  25.5k|        }
  687|  25.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.5k|            return static_cast<T*>(s.m_p);
  689|  25.5k|        }
  690|  25.5k|        else {
  691|  25.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.5k|        }
  693|  25.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  25.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  25.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  25.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  80.3k|    {
 3679|  80.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  80.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  80.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 80.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  80.3k|        return read_source_impl(range);
 3685|  80.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   465k|    {
 3705|   465k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   465k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   465k|        auto it = sign_result.first;
 3708|   465k|        m_sign = sign_result.second;
 3709|       |
 3710|   465k|        auto digits_begin = it;
 3711|   465k|        auto r = ranges::subrange{it, range.end()};
 3712|   465k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   465k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   465k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   931k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  |  Branch (859:45): [True: 0, False: 465k]
  |  |  |  Branch (859:45): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 3715|   465k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   465k|            else {
 3724|   465k|                auto cb = [&](const auto& rr)
 3725|   465k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   465k|                    auto res = read_all(rr);
 3727|   465k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   465k|                        return unexpected_scan_error(
 3729|   465k|                            scan_error::invalid_scanned_value,
 3730|   465k|                            "Invalid float value");
 3731|   465k|                    }
 3732|   465k|                    return res;
 3733|   465k|                };
 3734|   465k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 75.3k, False: 390k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  75.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  75.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  75.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  75.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  75.3k|    }                                                  \
  |  | 3671|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   390k|            }
 3736|   465k|        }
 3737|   390k|        else {
 3738|   390k|            SCN_TRY_ASSIGN(
 3739|   390k|                it,
 3740|   390k|                do_read_source_impl(
 3741|   390k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   390k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   390k|        }
 3744|       |
 3745|   390k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   390k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 390k, False: 0]
  |  Branch (3747:48): [True: 390k, False: 0]
  ------------------
 3748|   390k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 390k, False: 0]
  ------------------
 3749|   390k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 390k, False: 0]
  ------------------
 3750|   390k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   390k|        }
 3752|       |
 3753|   390k|        handle_separators();
 3754|       |
 3755|   390k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 390k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   390k|        return it;
 3768|   390k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   465k|    {
 3811|   465k|        auto it = range.begin();
 3812|   465k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 465k, False: 0]
  ------------------
 3813|   465k|            return unexpected(r.error());
 3814|   465k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   465k|    {
 3834|   465k|        auto it = range.begin();
 3835|   465k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 465k, False: 0]
  ------------------
 3836|   465k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   465k|                scan_error::invalid_scanned_value,
 3838|   465k|                "Invalid floating-point NaN value"));
 3839|   465k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   285k|    {
 3804|   285k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   285k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   291k|{
 1996|   291k|    auto it = read_while_code_unit(range, pred);
 1997|   291k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 180k, False: 110k]
  ------------------
 1998|   180k|        return unexpected(parse_error::error);
 1999|   180k|    }
 2000|   110k|    return it;
 2001|   291k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  58.6k|    {
 3876|  58.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.95k, False: 55.7k]
  ------------------
 3877|  2.95k|            auto beg_exp_it = range.begin();
 3878|  2.95k|            auto it = *r;
 3879|       |
 3880|  2.95k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.93k, False: 24]
  ------------------
 3881|  2.95k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.93k|                it = r_sign->first;
 3883|  2.93k|            }
 3884|       |
 3885|  2.95k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.95k|                    ranges::subrange{it, range.end()},
 3887|  2.95k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.95k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 450, False: 2.50k]
  |  |  ------------------
  ------------------
 3889|    450|                it = beg_exp_it;
 3890|    450|            }
 3891|  2.50k|            else {
 3892|  2.50k|                it = *r_exp;
 3893|  2.50k|            }
 3894|       |
 3895|  2.95k|            return it;
 3896|  2.95k|        }
 3897|  55.7k|        return range.begin();
 3898|  58.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.95k|    {
  754|  2.95k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  9.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.47k|              cvref<T> obj = *get<T>(fn);
  745|  9.47k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.47k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.47k|              }
  748|  9.47k|              else {
  749|  9.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.47k|              }
  751|  9.47k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  9.47k|    {
  684|  9.47k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.47k|            return static_cast<T*>(s.m_cp);
  686|  9.47k|        }
  687|  9.47k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.47k|            return static_cast<T*>(s.m_p);
  689|  9.47k|        }
  690|  9.47k|        else {
  691|  9.47k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.47k|        }
  693|  9.47k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  9.47k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.95k|        {
  662|  2.95k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   180k|    {
 3944|   180k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   180k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 105k, False: 74.4k]
  |  Branch (3945:50): [True: 26.0k, False: 79.7k]
  ------------------
 3946|       |
 3947|   180k|        auto it = ranges::begin(range);
 3948|   180k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   180k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   180k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.3k, False: 107k]
  |  |  ------------------
  ------------------
 3952|  72.3k|            return r.transform_error(
 3953|  72.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  72.3k|                                              "Invalid floating-point value"));
 3955|  72.3k|        }
 3956|   107k|        else {
 3957|   107k|            digits_count += ranges::distance(it, *r);
 3958|   107k|            it = *r;
 3959|   107k|        }
 3960|       |
 3961|   107k|        m_integral_part_length = digits_count;
 3962|   107k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 462, False: 107k]
  ------------------
 3963|   107k|                                             m_locale_options.decimal_point)) {
 3964|    462|            it = *r;
 3965|    462|        }
 3966|       |
 3967|   107k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 312, False: 107k]
  ------------------
 3968|   107k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    312|            digits_count += ranges::distance(it, *r);
 3970|    312|            it = *r;
 3971|    312|        }
 3972|       |
 3973|   107k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   107k|        auto beg_exp_it = it;
 3979|   107k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 58.6k, False: 49.1k]
  ------------------
 3980|  58.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  58.6k|        }
 3982|   107k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.48k, False: 104k]
  |  Branch (3982:29): [True: 2.87k, False: 612]
  ------------------
 3983|  2.87k|            return unexpected_scan_error(
 3984|  2.87k|                scan_error::invalid_scanned_value,
 3985|  2.87k|                "No exponent given to scientific float");
 3986|  2.87k|        }
 3987|       |
 3988|   104k|        m_kind =
 3989|   104k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 102k, False: 2.50k]
  ------------------
 3990|       |
 3991|   104k|        return it;
 3992|   107k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   288k|    {
 3774|   288k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288k]
  |  |  |  Branch (859:45): [True: 0, False: 288k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   288k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   288k|        return read_while1_code_unit(
 3783|   288k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   288k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   288k|    {
  754|   288k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   410k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   410k|              cvref<T> obj = *get<T>(fn);
  745|   410k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   410k|                  obj(static_cast<decltype(args)>(args)...);
  747|   410k|              }
  748|   410k|              else {
  749|   410k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   410k|              }
  751|   410k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   410k|    {
  684|   410k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   410k|            return static_cast<T*>(s.m_cp);
  686|   410k|        }
  687|   410k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   410k|            return static_cast<T*>(s.m_p);
  689|   410k|        }
  690|   410k|        else {
  691|   410k|            return reinterpret_cast<T*>(s.m_fp);
  692|   410k|        }
  693|   410k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   410k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   288k|        {
  662|   288k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   465k|    {
 4000|   465k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   465k|        const bool allowed_nonhex =
 4002|   465k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   465k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   465k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 465k, False: 0]
  |  Branch (4005:45): [True: 0, False: 465k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   465k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 465k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   465k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 465k, False: 0]
  |  Branch (4014:45): [True: 0, False: 465k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   465k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 465k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   465k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 285k, False: 180k]
  |  Branch (4021:28): [True: 84.7k, False: 200k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  84.7k|            auto it = range.begin();
 4025|       |
 4026|  84.7k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 138, False: 84.5k]
  ------------------
 4027|    138|                m_kind = float_kind::hex_with_prefix;
 4028|    138|                it = *r;
 4029|    138|            }
 4030|  84.5k|            else {
 4031|  84.5k|                m_kind = float_kind::hex_without_prefix;
 4032|  84.5k|            }
 4033|       |
 4034|  84.7k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  84.7k|        }
 4036|   381k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 180k, False: 200k]
  |  Branch (4036:29): [True: 180k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   180k|            m_kind = float_kind::generic;
 4040|   180k|            return read_regular_float(range);
 4041|   180k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   200k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 335, False: 200k]
  |  |  ------------------
  ------------------
 4047|    335|            m_kind = float_kind::hex_with_prefix;
 4048|    335|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    335|        }
 4050|       |
 4051|   200k|        m_kind = float_kind::generic;
 4052|   200k|        return read_regular(range);
 4053|   200k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   285k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   285k|                    auto res = read_all(rr);
 3727|   285k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 109, False: 285k]
  |  |  ------------------
  ------------------
 3728|    109|                        return unexpected_scan_error(
 3729|    109|                            scan_error::invalid_scanned_value,
 3730|    109|                            "Invalid float value");
 3731|    109|                    }
 3732|   285k|                    return res;
 3733|   285k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   285k|{
 1839|   285k|    return ranges::next(range.begin(), range.end());
 1840|   285k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   285k|    {
  313|   285k|        ranges::advance(x, bound);
  314|   285k|        return x;
  315|   285k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   285k|    {
  275|   285k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   285k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   390k|    {
 1577|   390k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   390k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   390k|    {
 1621|   390k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   390k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   390k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   390k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   390k|            m_storage.reset();
 1627|   390k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   390k|        }
 1629|   390k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   390k|                                          std::basic_string<CharT>>) {
 1631|   390k|            m_storage.emplace(SCN_FWD(range));
 1632|   390k|            m_view = string_view_type{*m_storage};
 1633|   390k|        }
 1634|   390k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   390k|                                          typename detail::basic_scan_buffer<
 1636|   390k|                                              value_t>::forward_iterator> &&
 1637|   390k|                           ranges::common_range<Range>) {
 1638|   390k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   390k|            auto end_seg = range.end().contiguous_segment();
 1640|   390k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   390k|                             detail::to_address(end_seg.end()))) {
 1642|   390k|                auto& str = m_storage.emplace();
 1643|   390k|                str.reserve(range.end().position() - range.begin().position());
 1644|   390k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   390k|                m_view = string_view_type{str};
 1646|   390k|                return;
 1647|   390k|            }
 1648|       |
 1649|   390k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   390k|                                                            end_seg.data());
 1651|   390k|            m_storage.reset();
 1652|   390k|        }
 1653|   390k|        else {
 1654|   390k|            auto& str = m_storage.emplace();
 1655|   390k|            if constexpr (ranges::sized_range<Range>) {
 1656|   390k|                str.reserve(range.size());
 1657|   390k|            }
 1658|   390k|            if constexpr (ranges::common_range<Range>) {
 1659|   390k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   390k|                          std::back_inserter(str));
 1661|   390k|            }
 1662|   390k|            else {
 1663|   390k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   390k|                     ++it) {
 1665|   390k|                    str.push_back(*it);
 1666|   390k|                }
 1667|   390k|            }
 1668|   390k|            m_view = string_view_type{str};
 1669|   390k|        }
 1670|   390k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  25.5k|        {
  662|  25.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  87.0k|    {
  754|  87.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  87.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.0k|              cvref<T> obj = *get<T>(fn);
  745|  87.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  87.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.0k|              }
  748|  87.0k|              else {
  749|  87.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.0k|              }
  751|  87.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  87.0k|    {
  684|  87.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  87.0k|            return static_cast<T*>(s.m_cp);
  686|  87.0k|        }
  687|  87.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  87.0k|            return static_cast<T*>(s.m_p);
  689|  87.0k|        }
  690|  87.0k|        else {
  691|  87.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  87.0k|        }
  693|  87.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  87.0k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   385k|    {
 3665|   385k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   385k|        return read_source_impl(range);
 3671|   385k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  87.0k|        {
  662|  87.0k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   116k|    {
 6193|   116k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   116k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   116k|            auto rd = make_reader<T, char_type>();
 6198|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   116k|                return unexpected(e);
 6200|   116k|            }
 6201|       |
 6202|   116k|            return impl(rd, range, value);
 6203|   116k|        }
 6204|   116k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   116k|            auto rd = make_reader<T, char_type>();
 6206|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   116k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 116k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   116k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   116k|                return impl(rd, range, value);
 6213|   116k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   116k|        else {
 6221|   116k|            SCN_EXPECT(false);
 6222|   116k|            SCN_UNREACHABLE;
 6223|   116k|        }
 6224|   116k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   116k|    {
 6124|   116k|        const bool need_skipped_width =
 6125|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 116k]
  |  Branch (6125:33): [True: 0, False: 116k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   116k|        auto it = rng.begin();
 6129|   116k|        std::ptrdiff_t prefix_width = 0;
 6130|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 116k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   116k|        else {
 6138|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 836, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    836|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    836|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    836|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    836|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    836|    }                                                  \
  |  |  |  | 3671|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   115k|            std::tie(it, prefix_width) = prefix_result;
 6140|   115k|        }
 6141|   115k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   115k|        std::ptrdiff_t value_width = 0;
 6145|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 115k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   115k|        else {
 6161|   115k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 73.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  73.5k|                                             specs, value, loc));
 6163|       |
 6164|  73.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 73.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  73.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  73.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  73.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 73.2k, False: 354]
  ------------------
 6174|  73.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  73.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  73.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  73.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 73.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  73.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  73.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  73.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  73.2k|                                 value_width));
 6178|  73.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  73.2k|        }
 6180|       |
 6181|  73.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  73.5k|                                                 value_width, postfix_width);
 6183|  73.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 73.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  73.5k|        return it;
 6188|  73.5k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   233k|    {
 3691|   233k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   233k|        const std::ptrdiff_t sign_len =
 3694|   233k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 757, False: 232k]
  ------------------
 3695|       |
 3696|   233k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.0k, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.0k|    }                                                  \
  |  |  |  | 3671|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   203k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   233k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   115k|    {
 4170|   115k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   115k|#if !SCN_DISABLE_LOCALE
 4173|   115k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 26.9k, False: 88.5k]
  ------------------
 4174|  26.9k|            return read_impl<Range>(
 4175|  26.9k|                range, rd,
 4176|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  26.9k|                },
 4179|  26.9k|                value, loc);
 4180|  26.9k|        }
 4181|  88.5k|#endif
 4182|       |
 4183|  88.5k|        return read_impl<Range>(
 4184|  88.5k|            range, rd,
 4185|  88.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  88.5k|                return r.read_source(SCN_FWD(args)...);
 4187|  88.5k|            },
 4188|  88.5k|            value);
 4189|   115k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   155k|    {
 4206|   155k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   155k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.7k, False: 102k]
  |  |  ------------------
  ------------------
 4208|  53.7k|            return unexpected(r.error());
 4209|  53.7k|        }
 4210|       |
 4211|   102k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 693, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    693|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    693|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    693|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    693|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    693|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   101k|        return ranges::next(range.begin(), n);
 4213|   102k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|  26.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.9k|              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.9k|    {
  684|  26.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.9k|            return static_cast<T*>(s.m_cp);
  686|  26.9k|        }
  687|  26.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.9k|            return static_cast<T*>(s.m_p);
  689|  26.9k|        }
  690|  26.9k|        else {
  691|  26.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.9k|        }
  693|  26.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  26.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  88.5k|    {
  754|  88.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  88.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.5k|              cvref<T> obj = *get<T>(fn);
  745|  88.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  88.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.5k|              }
  748|  88.5k|              else {
  749|  88.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.5k|              }
  751|  88.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  88.5k|    {
  684|  88.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  88.5k|            return static_cast<T*>(s.m_cp);
  686|  88.5k|        }
  687|  88.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  88.5k|            return static_cast<T*>(s.m_p);
  689|  88.5k|        }
  690|  88.5k|        else {
  691|  88.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  88.5k|        }
  693|  88.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  88.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  88.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  88.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  88.5k|        {
  662|  88.5k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   115k|    {
 4170|   115k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   115k|#if !SCN_DISABLE_LOCALE
 4173|   115k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.0k, False: 88.5k]
  ------------------
 4174|  27.0k|            return read_impl<Range>(
 4175|  27.0k|                range, rd,
 4176|  27.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.0k|                },
 4179|  27.0k|                value, loc);
 4180|  27.0k|        }
 4181|  88.5k|#endif
 4182|       |
 4183|  88.5k|        return read_impl<Range>(
 4184|  88.5k|            range, rd,
 4185|  88.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  88.5k|                return r.read_source(SCN_FWD(args)...);
 4187|  88.5k|            },
 4188|  88.5k|            value);
 4189|   115k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   156k|    {
 4206|   156k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1k, False: 130k]
  |  |  ------------------
  ------------------
 4208|  25.1k|            return unexpected(r.error());
 4209|  25.1k|        }
 4210|       |
 4211|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.3k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.3k|    }                                                  \
  |  |  |  | 3671|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   101k|        return ranges::next(range.begin(), n);
 4213|   130k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  27.0k|    {
  754|  27.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.0k|              cvref<T> obj = *get<T>(fn);
  745|  27.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.0k|              }
  748|  27.0k|              else {
  749|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.0k|              }
  751|  27.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.0k|    {
  684|  27.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.0k|            return static_cast<T*>(s.m_cp);
  686|  27.0k|        }
  687|  27.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.0k|            return static_cast<T*>(s.m_p);
  689|  27.0k|        }
  690|  27.0k|        else {
  691|  27.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.0k|        }
  693|  27.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  27.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  27.0k|        {
  662|  27.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  88.5k|    {
  754|  88.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  88.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.5k|              cvref<T> obj = *get<T>(fn);
  745|  88.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  88.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.5k|              }
  748|  88.5k|              else {
  749|  88.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.5k|              }
  751|  88.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  88.5k|    {
  684|  88.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  88.5k|            return static_cast<T*>(s.m_cp);
  686|  88.5k|        }
  687|  88.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  88.5k|            return static_cast<T*>(s.m_p);
  689|  88.5k|        }
  690|  88.5k|        else {
  691|  88.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  88.5k|        }
  693|  88.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  88.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  88.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  88.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  88.5k|        {
  662|  88.5k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   117k|    {
 6193|   117k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   117k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   117k|            auto rd = make_reader<T, char_type>();
 6198|   117k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   117k|                return unexpected(e);
 6200|   117k|            }
 6201|       |
 6202|   117k|            return impl(rd, range, value);
 6203|   117k|        }
 6204|   117k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   117k|            auto rd = make_reader<T, char_type>();
 6206|   117k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   117k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 117k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   117k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   117k|                return impl(rd, range, value);
 6213|   117k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   117k|        else {
 6221|   117k|            SCN_EXPECT(false);
 6222|   117k|            SCN_UNREACHABLE;
 6223|   117k|        }
 6224|   117k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   117k|    {
 6124|   117k|        const bool need_skipped_width =
 6125|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 117k]
  |  Branch (6125:33): [True: 0, False: 117k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   117k|        auto it = rng.begin();
 6129|   117k|        std::ptrdiff_t prefix_width = 0;
 6130|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 117k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   117k|        else {
 6138|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    860|    }                                                  \
  |  |  |  | 3671|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   117k|            std::tie(it, prefix_width) = prefix_result;
 6140|   117k|        }
 6141|   117k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   117k|        std::ptrdiff_t value_width = 0;
 6145|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 117k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   117k|        else {
 6161|   117k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 75.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  75.1k|                                             specs, value, loc));
 6163|       |
 6164|  75.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 75.1k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  75.1k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  75.1k|        std::ptrdiff_t postfix_width = 0;
 6173|  75.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 74.8k, False: 368]
  ------------------
 6174|  74.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  74.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  74.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  74.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  74.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  74.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  74.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  74.8k|                                 value_width));
 6178|  74.8k|            std::tie(it, postfix_width) = postfix_result;
 6179|  74.8k|        }
 6180|       |
 6181|  75.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  75.1k|                                                 value_width, postfix_width);
 6183|  75.1k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 75.1k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  75.1k|        return it;
 6188|  75.1k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   237k|    {
 3691|   237k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   237k|        const std::ptrdiff_t sign_len =
 3694|   237k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 757, False: 237k]
  ------------------
 3695|       |
 3696|   237k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.2k, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.2k|    }                                                  \
  |  |  |  | 3671|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   208k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   237k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   117k|    {
 4170|   117k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   117k|#if !SCN_DISABLE_LOCALE
 4173|   117k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.7k, False: 89.3k]
  ------------------
 4174|  27.7k|            return read_impl<Range>(
 4175|  27.7k|                range, rd,
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.7k|                },
 4179|  27.7k|                value, loc);
 4180|  27.7k|        }
 4181|  89.3k|#endif
 4182|       |
 4183|  89.3k|        return read_impl<Range>(
 4184|  89.3k|            range, rd,
 4185|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  89.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  89.3k|            },
 4188|  89.3k|            value);
 4189|   117k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   158k|    {
 4206|   158k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   158k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 104k]
  |  |  ------------------
  ------------------
 4208|  54.3k|            return unexpected(r.error());
 4209|  54.3k|        }
 4210|       |
 4211|   104k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 85, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     85|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     85|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     85|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     85|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     85|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   104k|        return ranges::next(range.begin(), n);
 4213|   104k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  27.7k|    {
  754|  27.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  27.7k|        {
  662|  27.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  89.3k|    {
  754|  89.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.3k|              cvref<T> obj = *get<T>(fn);
  745|  89.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  89.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.3k|              }
  748|  89.3k|              else {
  749|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.3k|              }
  751|  89.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.3k|    {
  684|  89.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  89.3k|            return static_cast<T*>(s.m_cp);
  686|  89.3k|        }
  687|  89.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  89.3k|            return static_cast<T*>(s.m_p);
  689|  89.3k|        }
  690|  89.3k|        else {
  691|  89.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  89.3k|        }
  693|  89.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  89.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  89.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  89.3k|        {
  662|  89.3k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   117k|    {
 4170|   117k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   117k|#if !SCN_DISABLE_LOCALE
 4173|   117k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 27.7k, False: 89.3k]
  ------------------
 4174|  27.7k|            return read_impl<Range>(
 4175|  27.7k|                range, rd,
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  27.7k|                },
 4179|  27.7k|                value, loc);
 4180|  27.7k|        }
 4181|  89.3k|#endif
 4182|       |
 4183|  89.3k|        return read_impl<Range>(
 4184|  89.3k|            range, rd,
 4185|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  89.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  89.3k|            },
 4188|  89.3k|            value);
 4189|   117k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   158k|    {
 4206|   158k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   158k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 133k]
  |  |  ------------------
  ------------------
 4208|  25.2k|            return unexpected(r.error());
 4209|  25.2k|        }
 4210|       |
 4211|   133k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.1k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.1k|    }                                                  \
  |  |  |  | 3671|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   104k|        return ranges::next(range.begin(), n);
 4213|   133k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  27.7k|    {
  754|  27.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  27.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  27.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  27.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  27.7k|        {
  662|  27.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  89.3k|    {
  754|  89.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.3k|              cvref<T> obj = *get<T>(fn);
  745|  89.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  89.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.3k|              }
  748|  89.3k|              else {
  749|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.3k|              }
  751|  89.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.3k|    {
  684|  89.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  89.3k|            return static_cast<T*>(s.m_cp);
  686|  89.3k|        }
  687|  89.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  89.3k|            return static_cast<T*>(s.m_p);
  689|  89.3k|        }
  690|  89.3k|        else {
  691|  89.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  89.3k|        }
  693|  89.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  89.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  89.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  89.3k|        {
  662|  89.3k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   468k|{
 2061|   468k|    auto it = range.begin();
 2062|   781k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 778k, False: 2.95k]
  ------------------
 2063|   778k|        const auto val =
 2064|   778k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   778k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   778k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 778k, False: 0]
  |  |  ------------------
  ------------------
 2066|   778k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   778k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   778k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 465k, False: 312k]
  ------------------
 2069|   465k|                return it;
 2070|   465k|            }
 2071|   778k|        }
 2072|   312k|        it = val.iterator;
 2073|   312k|    }
 2074|       |
 2075|  2.95k|    return it;
 2076|   468k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   778k|{
 1899|   778k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   778k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   778k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   778k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   778k|    auto it = range.begin();
 1903|   778k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   778k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   778k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 778k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   778k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 778k, False: 0]
  ------------------
 1912|   778k|        ++it;
 1913|   778k|        return {it, string_type(1, *range.begin())};
 1914|   778k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   778k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   778k|    {
 1890|   778k|        return !codepoint.empty();
 1891|   778k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   468k|{
 2082|   468k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   468k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   468k|{
 2951|   468k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 468k, False: 0]
  ------------------
 2952|   468k|        auto it = read_while_classic_space(range);
 2953|   468k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   468k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 465k]
  |  |  ------------------
  ------------------
 2955|  2.95k|            return unexpected(e);
 2956|  2.95k|        }
 2957|       |
 2958|   465k|        return it;
 2959|   468k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   468k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   468k|{
 2117|   468k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   468k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   468k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   468k|        auto buf = make_contiguous_buffer(range);
 2121|   468k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   468k|        return ranges::next(range.begin(),
 2123|   468k|                            ranges::distance(buf.view().begin(), it));
 2124|   468k|    }
 2125|   468k|    else {
 2126|   468k|        auto it = range.begin();
 2127|       |
 2128|   468k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   468k|            auto seg = get_contiguous_beginning(range);
 2130|   468k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   468k|                seg_it != seg.end()) {
 2132|   468k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   468k|            }
 2134|   468k|            ranges::advance(it, seg.size());
 2135|   468k|        }
 2136|       |
 2137|   468k|        return read_while_code_point(
 2138|   468k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   468k|    }
 2140|   468k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   468k|    {
  754|   468k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   778k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   778k|              cvref<T> obj = *get<T>(fn);
  745|   778k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   778k|                  obj(static_cast<decltype(args)>(args)...);
  747|   778k|              }
  748|   778k|              else {
  749|   778k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   778k|              }
  751|   778k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   778k|    {
  684|   778k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   778k|            return static_cast<T*>(s.m_cp);
  686|   778k|        }
  687|   778k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   778k|            return static_cast<T*>(s.m_p);
  689|   778k|        }
  690|   778k|        else {
  691|   778k|            return reinterpret_cast<T*>(s.m_fp);
  692|   778k|        }
  693|   778k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   778k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   468k|        {
  662|   468k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   896k|{
 2088|   896k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   896k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   896k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   896k|        auto buf = make_contiguous_buffer(range);
 2092|   896k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   896k|        return ranges::next(range.begin(),
 2094|   896k|                            ranges::distance(buf.view().begin(), it));
 2095|   896k|    }
 2096|   896k|    else {
 2097|   896k|        auto it = range.begin();
 2098|       |
 2099|   896k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   896k|            auto seg = get_contiguous_beginning(range);
 2101|   896k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   896k|                seg_it != seg.end()) {
 2103|   896k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   896k|            }
 2105|   896k|            ranges::advance(it, seg.size());
 2106|   896k|        }
 2107|       |
 2108|   896k|        return read_until_code_point(
 2109|   896k|            ranges::subrange{it, range.end()},
 2110|   896k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   896k|    }
 2112|   896k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   896k|{
 1683|   896k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   896k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   896k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   896k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   896k|    }
 1688|   896k|    else {
 1689|   896k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   896k|    }
 1691|   896k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   896k|    {
 1490|   896k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   896k|    {
 1577|   896k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   896k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   896k|    {
 1621|   896k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   896k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   896k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   896k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   896k|            m_storage.reset();
 1627|   896k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   896k|        }
 1629|   896k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   896k|                                          std::basic_string<CharT>>) {
 1631|   896k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   896k|            m_view = string_view_type{*m_storage};
 1633|   896k|        }
 1634|   896k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   896k|                                          typename detail::basic_scan_buffer<
 1636|   896k|                                              value_t>::forward_iterator> &&
 1637|   896k|                           ranges::common_range<Range>) {
 1638|   896k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   896k|            auto end_seg = range.end().contiguous_segment();
 1640|   896k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   896k|                             detail::to_address(end_seg.end()))) {
 1642|   896k|                auto& str = m_storage.emplace();
 1643|   896k|                str.reserve(range.end().position() - range.begin().position());
 1644|   896k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   896k|                m_view = string_view_type{str};
 1646|   896k|                return;
 1647|   896k|            }
 1648|       |
 1649|   896k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   896k|                                                            end_seg.data());
 1651|   896k|            m_storage.reset();
 1652|   896k|        }
 1653|   896k|        else {
 1654|   896k|            auto& str = m_storage.emplace();
 1655|   896k|            if constexpr (ranges::sized_range<Range>) {
 1656|   896k|                str.reserve(range.size());
 1657|   896k|            }
 1658|   896k|            if constexpr (ranges::common_range<Range>) {
 1659|   896k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   896k|                          std::back_inserter(str));
 1661|   896k|            }
 1662|   896k|            else {
 1663|   896k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   896k|                     ++it) {
 1665|   896k|                    str.push_back(*it);
 1666|   896k|                }
 1667|   896k|            }
 1668|   896k|            m_view = string_view_type{str};
 1669|   896k|        }
 1670|   896k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   657k|    {
 4100|   657k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 74.9k, False: 582k]
  ------------------
 4101|  74.9k|            return std::copysign(value, T{-1.0});
 4102|  74.9k|        }
 4103|   582k|        return std::copysign(value, T{1.0});
 4104|   657k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   286k|{
 2088|   286k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   286k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   286k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   286k|        auto buf = make_contiguous_buffer(range);
 2092|   286k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   286k|        return ranges::next(range.begin(),
 2094|   286k|                            ranges::distance(buf.view().begin(), it));
 2095|   286k|    }
 2096|   286k|    else {
 2097|   286k|        auto it = range.begin();
 2098|       |
 2099|   286k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   286k|            auto seg = get_contiguous_beginning(range);
 2101|   286k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   286k|                seg_it != seg.end()) {
 2103|   286k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   286k|            }
 2105|   286k|            ranges::advance(it, seg.size());
 2106|   286k|        }
 2107|       |
 2108|   286k|        return read_until_code_point(
 2109|   286k|            ranges::subrange{it, range.end()},
 2110|   286k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   286k|    }
 2112|   286k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   286k|    {
  754|   286k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   523k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   523k|              cvref<T> obj = *get<T>(fn);
  745|   523k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   523k|                  obj(static_cast<decltype(args)>(args)...);
  747|   523k|              }
  748|   523k|              else {
  749|   523k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   523k|              }
  751|   523k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   523k|    {
  684|   523k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   523k|            return static_cast<T*>(s.m_cp);
  686|   523k|        }
  687|   523k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   523k|            return static_cast<T*>(s.m_p);
  689|   523k|        }
  690|   523k|        else {
  691|   523k|            return reinterpret_cast<T*>(s.m_fp);
  692|   523k|        }
  693|   523k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   523k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   286k|        {
  662|   286k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   286k|    {
 1577|   286k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   286k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   286k|    {
 1621|   286k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   286k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   286k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   286k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   286k|            m_storage.reset();
 1627|   286k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   286k|        }
 1629|   286k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   286k|                                          std::basic_string<CharT>>) {
 1631|   286k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   286k|            m_view = string_view_type{*m_storage};
 1633|   286k|        }
 1634|   286k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   286k|                                          typename detail::basic_scan_buffer<
 1636|   286k|                                              value_t>::forward_iterator> &&
 1637|   286k|                           ranges::common_range<Range>) {
 1638|   286k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   286k|            auto end_seg = range.end().contiguous_segment();
 1640|   286k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   286k|                             detail::to_address(end_seg.end()))) {
 1642|   286k|                auto& str = m_storage.emplace();
 1643|   286k|                str.reserve(range.end().position() - range.begin().position());
 1644|   286k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   286k|                m_view = string_view_type{str};
 1646|   286k|                return;
 1647|   286k|            }
 1648|       |
 1649|   286k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   286k|                                                            end_seg.data());
 1651|   286k|            m_storage.reset();
 1652|   286k|        }
 1653|   286k|        else {
 1654|   286k|            auto& str = m_storage.emplace();
 1655|   286k|            if constexpr (ranges::sized_range<Range>) {
 1656|   286k|                str.reserve(range.size());
 1657|   286k|            }
 1658|   286k|            if constexpr (ranges::common_range<Range>) {
 1659|   286k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   286k|                          std::back_inserter(str));
 1661|   286k|            }
 1662|   286k|            else {
 1663|   286k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   286k|                     ++it) {
 1665|   286k|                    str.push_back(*it);
 1666|   286k|                }
 1667|   286k|            }
 1668|   286k|            m_view = string_view_type{str};
 1669|   286k|        }
 1670|   286k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   223k|    {
 4100|   223k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 533, False: 223k]
  ------------------
 4101|    533|            return std::copysign(value, T{-1.0});
 4102|    533|        }
 4103|   223k|        return std::copysign(value, T{1.0});
 4104|   223k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   682k|    {
 4100|   682k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 77.5k, False: 604k]
  ------------------
 4101|  77.5k|            return std::copysign(value, T{-1.0});
 4102|  77.5k|        }
 4103|   604k|        return std::copysign(value, T{1.0});
 4104|   682k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   233k|    {
 4100|   233k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 533, False: 232k]
  ------------------
 4101|    533|            return std::copysign(value, T{-1.0});
 4102|    533|        }
 4103|   232k|        return std::copysign(value, T{1.0});
 4104|   233k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   688k|    {
 4100|   688k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 79.6k, False: 609k]
  ------------------
 4101|  79.6k|            return std::copysign(value, T{-1.0});
 4102|  79.6k|        }
 4103|   609k|        return std::copysign(value, T{1.0});
 4104|   688k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   237k|    {
 4100|   237k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 533, False: 237k]
  ------------------
 4101|    533|            return std::copysign(value, T{-1.0});
 4102|    533|        }
 4103|   237k|        return std::copysign(value, T{1.0});
 4104|   237k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   297k|{
 5795|   297k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.94k, False: 293k]
  |  |  ------------------
  ------------------
 5796|  3.94k|        return unexpected(e);
 5797|  3.94k|    }
 5798|       |
 5799|   293k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 293k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   293k|    return skip_classic_whitespace(range);
 5804|   293k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|  95.4k|    {
 5871|  95.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  95.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  95.4k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  95.4k|            auto rd = make_reader<T, char_type>();
 5876|  95.4k|            return impl(rd, range, value);
 5877|  95.4k|        }
 5878|  95.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  95.4k|            auto rd = make_reader<T, char_type>();
 5880|  95.4k|            if (!is_segment_contiguous(range)) {
 5881|  95.4k|                return impl(rd, range, value);
 5882|  95.4k|            }
 5883|  95.4k|            auto crange = get_as_contiguous(range);
 5884|  95.4k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  95.4k|            return ranges::next(range.begin(),
 5886|  95.4k|                                ranges::distance(crange.begin(), it));
 5887|  95.4k|        }
 5888|  95.4k|        else {
 5889|  95.4k|            SCN_EXPECT(false);
 5890|  95.4k|            SCN_UNREACHABLE;
 5891|  95.4k|        }
 5892|  95.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  95.4k|    {
 5863|  95.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.30k, False: 94.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.30k|    }                                                  \
  |  |  |  | 3671|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  94.1k|                        .transform_error(make_eof_scan_error));
 5865|  94.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  95.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  94.1k|    {
 4152|  94.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  94.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  94.1k|        float_reader<CharT> rd{};
 4155|  94.1k|        return read_impl<Range>(
 4156|  94.1k|            range, rd,
 4157|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  94.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  94.1k|            },
 4160|  94.1k|            value);
 4161|  94.1k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   612k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   853k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  94.1k|    {
  754|  94.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  94.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.1k|              cvref<T> obj = *get<T>(fn);
  745|  94.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  94.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.1k|              }
  748|  94.1k|              else {
  749|  94.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.1k|              }
  751|  94.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.1k|    {
  684|  94.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  94.1k|            return static_cast<T*>(s.m_cp);
  686|  94.1k|        }
  687|  94.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  94.1k|            return static_cast<T*>(s.m_p);
  689|  94.1k|        }
  690|  94.1k|        else {
  691|  94.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  94.1k|        }
  693|  94.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  94.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  94.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  94.1k|        {
  662|  94.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|  99.9k|    {
 5871|  99.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  99.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  99.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  99.9k|            auto rd = make_reader<T, char_type>();
 5876|  99.9k|            return impl(rd, range, value);
 5877|  99.9k|        }
 5878|  99.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  99.9k|            auto rd = make_reader<T, char_type>();
 5880|  99.9k|            if (!is_segment_contiguous(range)) {
 5881|  99.9k|                return impl(rd, range, value);
 5882|  99.9k|            }
 5883|  99.9k|            auto crange = get_as_contiguous(range);
 5884|  99.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  99.9k|            return ranges::next(range.begin(),
 5886|  99.9k|                                ranges::distance(crange.begin(), it));
 5887|  99.9k|        }
 5888|  99.9k|        else {
 5889|  99.9k|            SCN_EXPECT(false);
 5890|  99.9k|            SCN_UNREACHABLE;
 5891|  99.9k|        }
 5892|  99.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  99.9k|    {
 5863|  99.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  99.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|  99.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  98.4k|                        .transform_error(make_eof_scan_error));
 5865|  98.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  99.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  98.4k|    {
 4152|  98.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  98.4k|        float_reader<CharT> rd{};
 4155|  98.4k|        return read_impl<Range>(
 4156|  98.4k|            range, rd,
 4157|  98.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  98.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  98.4k|            },
 4160|  98.4k|            value);
 4161|  98.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  98.4k|    {
  754|  98.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  98.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.4k|              cvref<T> obj = *get<T>(fn);
  745|  98.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  98.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.4k|              }
  748|  98.4k|              else {
  749|  98.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.4k|              }
  751|  98.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.4k|    {
  684|  98.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  98.4k|            return static_cast<T*>(s.m_cp);
  686|  98.4k|        }
  687|  98.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  98.4k|            return static_cast<T*>(s.m_p);
  689|  98.4k|        }
  690|  98.4k|        else {
  691|  98.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  98.4k|        }
  693|  98.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  98.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  98.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  98.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  98.4k|        {
  662|  98.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   101k|    {
 5871|   101k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   101k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   101k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   101k|            auto rd = make_reader<T, char_type>();
 5876|   101k|            return impl(rd, range, value);
 5877|   101k|        }
 5878|   101k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   101k|            auto rd = make_reader<T, char_type>();
 5880|   101k|            if (!is_segment_contiguous(range)) {
 5881|   101k|                return impl(rd, range, value);
 5882|   101k|            }
 5883|   101k|            auto crange = get_as_contiguous(range);
 5884|   101k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   101k|            return ranges::next(range.begin(),
 5886|   101k|                                ranges::distance(crange.begin(), it));
 5887|   101k|        }
 5888|   101k|        else {
 5889|   101k|            SCN_EXPECT(false);
 5890|   101k|            SCN_UNREACHABLE;
 5891|   101k|        }
 5892|   101k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   101k|    {
 5863|   101k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.62k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.62k|    }                                                  \
  |  |  |  | 3671|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   100k|                        .transform_error(make_eof_scan_error));
 5865|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   101k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   100k|    {
 4152|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   100k|        float_reader<CharT> rd{};
 4155|   100k|        return read_impl<Range>(
 4156|   100k|            range, rd,
 4157|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   100k|                return r.read_source(SCN_FWD(args)...);
 4159|   100k|            },
 4160|   100k|            value);
 4161|   100k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   324k|{
 5795|   324k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 320k]
  |  |  ------------------
  ------------------
 5796|  4.07k|        return unexpected(e);
 5797|  4.07k|    }
 5798|       |
 5799|   320k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 320k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   320k|    return skip_classic_whitespace(range);
 5804|   320k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   104k|    {
 5871|   104k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   104k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   104k|            auto rd = make_reader<T, char_type>();
 5876|   104k|            return impl(rd, range, value);
 5877|   104k|        }
 5878|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   104k|            auto rd = make_reader<T, char_type>();
 5880|   104k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 104k, False: 0]
  ------------------
 5881|   104k|                return impl(rd, range, value);
 5882|   104k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   104k|        else {
 5889|   104k|            SCN_EXPECT(false);
 5890|   104k|            SCN_UNREACHABLE;
 5891|   104k|        }
 5892|   104k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   104k|    {
 5863|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.36k|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   103k|                        .transform_error(make_eof_scan_error));
 5865|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   104k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   103k|    {
 4152|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   103k|        float_reader<CharT> rd{};
 4155|   103k|        return read_impl<Range>(
 4156|   103k|            range, rd,
 4157|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   103k|                return r.read_source(SCN_FWD(args)...);
 4159|   103k|            },
 4160|   103k|            value);
 4161|   103k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   109k|    {
 5871|   109k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   109k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   109k|            auto rd = make_reader<T, char_type>();
 5876|   109k|            return impl(rd, range, value);
 5877|   109k|        }
 5878|   109k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   109k|            auto rd = make_reader<T, char_type>();
 5880|   109k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 109k, False: 0]
  ------------------
 5881|   109k|                return impl(rd, range, value);
 5882|   109k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   109k|        else {
 5889|   109k|            SCN_EXPECT(false);
 5890|   109k|            SCN_UNREACHABLE;
 5891|   109k|        }
 5892|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   109k|    {
 5863|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.55k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.55k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   107k|                        .transform_error(make_eof_scan_error));
 5865|   107k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   107k|    {
 4152|   107k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   107k|        float_reader<CharT> rd{};
 4155|   107k|        return read_impl<Range>(
 4156|   107k|            range, rd,
 4157|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   107k|                return r.read_source(SCN_FWD(args)...);
 4159|   107k|            },
 4160|   107k|            value);
 4161|   107k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   107k|    {
  684|   107k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   107k|            return static_cast<T*>(s.m_cp);
  686|   107k|        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   107k|            return static_cast<T*>(s.m_p);
  689|   107k|        }
  690|   107k|        else {
  691|   107k|            return reinterpret_cast<T*>(s.m_fp);
  692|   107k|        }
  693|   107k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   107k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   110k|    {
 5871|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   110k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   110k|            auto rd = make_reader<T, char_type>();
 5876|   110k|            return impl(rd, range, value);
 5877|   110k|        }
 5878|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   110k|            auto rd = make_reader<T, char_type>();
 5880|   110k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 110k, False: 0]
  ------------------
 5881|   110k|                return impl(rd, range, value);
 5882|   110k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   110k|        else {
 5889|   110k|            SCN_EXPECT(false);
 5890|   110k|            SCN_UNREACHABLE;
 5891|   110k|        }
 5892|   110k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   110k|    {
 5863|   110k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.67k|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   108k|                        .transform_error(make_eof_scan_error));
 5865|   108k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   108k|    {
 4152|   108k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   108k|        float_reader<CharT> rd{};
 4155|   108k|        return read_impl<Range>(
 4156|   108k|            range, rd,
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
 4159|   108k|            },
 4160|   108k|            value);
 4161|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   108k|    {
  684|   108k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   108k|            return static_cast<T*>(s.m_cp);
  686|   108k|        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   108k|            return static_cast<T*>(s.m_p);
  689|   108k|        }
  690|   108k|        else {
  691|   108k|            return reinterpret_cast<T*>(s.m_fp);
  692|   108k|        }
  693|   108k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   108k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   708k|    {
 2879|   708k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.06M|    {
 2883|  2.06M|        return m_current;
 2884|  2.06M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.35M|    {
 2888|  1.35M|        return m_range.end();
 2889|  1.35M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   644k|    {
 2903|   644k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   644k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   644k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 644k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   644k|        }
 2909|   644k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   644k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   708k|    {
 2893|   708k|        return ranges::subrange{begin(), end()};
 2894|   708k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   708k|    {
 6037|   708k|        const bool need_skipped_width =
 6038|   708k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 708k]
  |  Branch (6038:33): [True: 0, False: 708k]
  ------------------
 6039|   708k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   708k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 708k]
  ------------------
 6043|   708k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 708k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   708k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 708k, False: 0]
  |  Branch (6047:56): [True: 708k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   708k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 708k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.40M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   708k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   708k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   708k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.3k, False: 697k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.3k|    }                                                  \
  |  |  |  | 3671|   708k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.40M|                            make_eof_scan_error));
 6058|       |
 6059|  1.40M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 697k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   697k|            return result_type{it, 0};
 6067|  1.40M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   708k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   634k|    {
 6079|   634k|        const bool need_skipped_width =
 6080|   634k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 634k]
  |  Branch (6080:33): [True: 0, False: 634k]
  ------------------
 6081|   634k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   634k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 634k]
  ------------------
 6084|   634k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 634k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   634k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 634k, False: 0]
  ------------------
 6093|   634k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 634k]
  ------------------
 6094|   634k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   634k|        return result_type{rng.begin(), 0};
 6118|   634k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   230k|    {
 6193|   230k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   230k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   230k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   230k|            auto rd = make_reader<T, char_type>();
 6198|   230k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   230k|            return impl(rd, range, value);
 6203|   230k|        }
 6204|   230k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   230k|            auto rd = make_reader<T, char_type>();
 6206|   230k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   230k|                return unexpected(e);
 6208|   230k|            }
 6209|       |
 6210|   230k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   230k|                specs.width != 0) {
 6212|   230k|                return impl(rd, range, value);
 6213|   230k|            }
 6214|       |
 6215|   230k|            auto crange = get_as_contiguous(range);
 6216|   230k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   230k|            return ranges::next(range.begin(),
 6218|   230k|                                ranges::distance(crange.begin(), it));
 6219|   230k|        }
 6220|   230k|        else {
 6221|   230k|            SCN_EXPECT(false);
 6222|   230k|            SCN_UNREACHABLE;
 6223|   230k|        }
 6224|   230k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   230k|    {
 6124|   230k|        const bool need_skipped_width =
 6125|   230k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 230k]
  |  Branch (6125:33): [True: 0, False: 230k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   230k|        auto it = rng.begin();
 6129|   230k|        std::ptrdiff_t prefix_width = 0;
 6130|   230k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 230k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   230k|        else {
 6138|   230k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.45k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.45k|    }                                                  \
  |  |  |  | 3671|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   226k|            std::tie(it, prefix_width) = prefix_result;
 6140|   226k|        }
 6141|   226k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   226k|        std::ptrdiff_t value_width = 0;
 6145|   226k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 226k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   226k|        else {
 6161|   226k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.9k, False: 208k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.9k|    }                                                  \
  |  | 3671|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   208k|                                             specs, value, loc));
 6163|       |
 6164|   208k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 208k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   208k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   208k|        std::ptrdiff_t postfix_width = 0;
 6173|   208k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 205k, False: 3.03k]
  ------------------
 6174|   205k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   205k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   205k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   205k|                                 value_width));
 6178|   205k|            std::tie(it, postfix_width) = postfix_result;
 6179|   205k|        }
 6180|       |
 6181|   208k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   208k|                                                 value_width, postfix_width);
 6183|   208k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 208k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   208k|        return it;
 6188|   208k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   237k|    {
 6193|   237k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   237k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   237k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   237k|            auto rd = make_reader<T, char_type>();
 6198|   237k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   237k|            return impl(rd, range, value);
 6203|   237k|        }
 6204|   237k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   237k|            auto rd = make_reader<T, char_type>();
 6206|   237k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   237k|                return unexpected(e);
 6208|   237k|            }
 6209|       |
 6210|   237k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   237k|                specs.width != 0) {
 6212|   237k|                return impl(rd, range, value);
 6213|   237k|            }
 6214|       |
 6215|   237k|            auto crange = get_as_contiguous(range);
 6216|   237k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   237k|            return ranges::next(range.begin(),
 6218|   237k|                                ranges::distance(crange.begin(), it));
 6219|   237k|        }
 6220|   237k|        else {
 6221|   237k|            SCN_EXPECT(false);
 6222|   237k|            SCN_UNREACHABLE;
 6223|   237k|        }
 6224|   237k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   237k|    {
 6124|   237k|        const bool need_skipped_width =
 6125|   237k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 237k]
  |  Branch (6125:33): [True: 0, False: 237k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   237k|        auto it = rng.begin();
 6129|   237k|        std::ptrdiff_t prefix_width = 0;
 6130|   237k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 237k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   237k|        else {
 6138|   237k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.82k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.82k|    }                                                  \
  |  |  |  | 3671|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   234k|            std::tie(it, prefix_width) = prefix_result;
 6140|   234k|        }
 6141|   234k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   234k|        std::ptrdiff_t value_width = 0;
 6145|   234k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 234k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   234k|        else {
 6161|   234k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.5k, False: 216k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.5k|    }                                                  \
  |  | 3671|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   216k|                                             specs, value, loc));
 6163|       |
 6164|   216k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 216k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   216k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   216k|        std::ptrdiff_t postfix_width = 0;
 6173|   216k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 213k, False: 3.36k]
  ------------------
 6174|   213k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   213k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   213k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   213k|                                 value_width));
 6178|   213k|            std::tie(it, postfix_width) = postfix_result;
 6179|   213k|        }
 6180|       |
 6181|   216k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   216k|                                                 value_width, postfix_width);
 6183|   216k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 216k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   216k|        return it;
 6188|   216k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   240k|    {
 6193|   240k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   240k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   240k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   240k|            auto rd = make_reader<T, char_type>();
 6198|   240k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   240k|            return impl(rd, range, value);
 6203|   240k|        }
 6204|   240k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   240k|            auto rd = make_reader<T, char_type>();
 6206|   240k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   240k|                return unexpected(e);
 6208|   240k|            }
 6209|       |
 6210|   240k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   240k|                specs.width != 0) {
 6212|   240k|                return impl(rd, range, value);
 6213|   240k|            }
 6214|       |
 6215|   240k|            auto crange = get_as_contiguous(range);
 6216|   240k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   240k|            return ranges::next(range.begin(),
 6218|   240k|                                ranges::distance(crange.begin(), it));
 6219|   240k|        }
 6220|   240k|        else {
 6221|   240k|            SCN_EXPECT(false);
 6222|   240k|            SCN_UNREACHABLE;
 6223|   240k|        }
 6224|   240k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   240k|    {
 6124|   240k|        const bool need_skipped_width =
 6125|   240k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 240k]
  |  Branch (6125:33): [True: 0, False: 240k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   240k|        auto it = rng.begin();
 6129|   240k|        std::ptrdiff_t prefix_width = 0;
 6130|   240k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 240k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   240k|        else {
 6138|   240k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.08k, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.08k|    }                                                  \
  |  |  |  | 3671|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   236k|            std::tie(it, prefix_width) = prefix_result;
 6140|   236k|        }
 6141|   236k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   236k|        std::ptrdiff_t value_width = 0;
 6145|   236k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 236k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   236k|        else {
 6161|   236k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.3k|    }                                                  \
  |  | 3671|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   219k|                                             specs, value, loc));
 6163|       |
 6164|   219k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 219k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   219k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   219k|        std::ptrdiff_t postfix_width = 0;
 6173|   219k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 215k, False: 3.59k]
  ------------------
 6174|   215k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   215k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   215k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   215k|                                 value_width));
 6178|   215k|            std::tie(it, postfix_width) = postfix_result;
 6179|   215k|        }
 6180|       |
 6181|   219k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   219k|                                                 value_width, postfix_width);
 6183|   219k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 219k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   219k|        return it;
 6188|   219k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   121k|{
 5795|   121k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 121k]
  |  |  ------------------
  ------------------
 5796|    378|        return unexpected(e);
 5797|    378|    }
 5798|       |
 5799|   121k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 121k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   121k|    return skip_classic_whitespace(range);
 5804|   121k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  38.5k|    {
 5871|  38.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  38.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  38.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  38.5k|            auto rd = make_reader<T, char_type>();
 5876|  38.5k|            return impl(rd, range, value);
 5877|  38.5k|        }
 5878|  38.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  38.5k|            auto rd = make_reader<T, char_type>();
 5880|  38.5k|            if (!is_segment_contiguous(range)) {
 5881|  38.5k|                return impl(rd, range, value);
 5882|  38.5k|            }
 5883|  38.5k|            auto crange = get_as_contiguous(range);
 5884|  38.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  38.5k|            return ranges::next(range.begin(),
 5886|  38.5k|                                ranges::distance(crange.begin(), it));
 5887|  38.5k|        }
 5888|  38.5k|        else {
 5889|  38.5k|            SCN_EXPECT(false);
 5890|  38.5k|            SCN_UNREACHABLE;
 5891|  38.5k|        }
 5892|  38.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  38.5k|    {
 5863|  38.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 258, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    258|    }                                                  \
  |  |  |  | 3671|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  38.3k|                        .transform_error(make_eof_scan_error));
 5865|  38.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  38.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  38.3k|    {
 4152|  38.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  38.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  38.3k|        float_reader<CharT> rd{};
 4155|  38.3k|        return read_impl<Range>(
 4156|  38.3k|            range, rd,
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  38.3k|            },
 4160|  38.3k|            value);
 4161|  38.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   241k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|  38.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.3k|            return static_cast<T*>(s.m_cp);
  686|  38.3k|        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|  38.3k|        }
  690|  38.3k|        else {
  691|  38.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.3k|        }
  693|  38.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  38.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  40.8k|    {
 5871|  40.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  40.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  40.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  40.8k|            auto rd = make_reader<T, char_type>();
 5876|  40.8k|            return impl(rd, range, value);
 5877|  40.8k|        }
 5878|  40.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  40.8k|            auto rd = make_reader<T, char_type>();
 5880|  40.8k|            if (!is_segment_contiguous(range)) {
 5881|  40.8k|                return impl(rd, range, value);
 5882|  40.8k|            }
 5883|  40.8k|            auto crange = get_as_contiguous(range);
 5884|  40.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  40.8k|            return ranges::next(range.begin(),
 5886|  40.8k|                                ranges::distance(crange.begin(), it));
 5887|  40.8k|        }
 5888|  40.8k|        else {
 5889|  40.8k|            SCN_EXPECT(false);
 5890|  40.8k|            SCN_UNREACHABLE;
 5891|  40.8k|        }
 5892|  40.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  40.8k|    {
 5863|  40.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 288, False: 40.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    288|    }                                                  \
  |  |  |  | 3671|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  40.5k|                        .transform_error(make_eof_scan_error));
 5865|  40.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  40.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  40.5k|    {
 4152|  40.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  40.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  40.5k|        float_reader<CharT> rd{};
 4155|  40.5k|        return read_impl<Range>(
 4156|  40.5k|            range, rd,
 4157|  40.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  40.5k|            },
 4160|  40.5k|            value);
 4161|  40.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  40.5k|    {
  754|  40.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  40.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.5k|              cvref<T> obj = *get<T>(fn);
  745|  40.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  40.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.5k|              }
  748|  40.5k|              else {
  749|  40.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.5k|              }
  751|  40.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.5k|    {
  684|  40.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  40.5k|            return static_cast<T*>(s.m_cp);
  686|  40.5k|        }
  687|  40.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  40.5k|            return static_cast<T*>(s.m_p);
  689|  40.5k|        }
  690|  40.5k|        else {
  691|  40.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  40.5k|        }
  693|  40.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  40.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  40.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  40.5k|        {
  662|  40.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  41.9k|    {
 5871|  41.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  41.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.9k|            auto rd = make_reader<T, char_type>();
 5876|  41.9k|            return impl(rd, range, value);
 5877|  41.9k|        }
 5878|  41.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  41.9k|            auto rd = make_reader<T, char_type>();
 5880|  41.9k|            if (!is_segment_contiguous(range)) {
 5881|  41.9k|                return impl(rd, range, value);
 5882|  41.9k|            }
 5883|  41.9k|            auto crange = get_as_contiguous(range);
 5884|  41.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  41.9k|            return ranges::next(range.begin(),
 5886|  41.9k|                                ranges::distance(crange.begin(), it));
 5887|  41.9k|        }
 5888|  41.9k|        else {
 5889|  41.9k|            SCN_EXPECT(false);
 5890|  41.9k|            SCN_UNREACHABLE;
 5891|  41.9k|        }
 5892|  41.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  41.9k|    {
 5863|  41.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 303, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    303|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    303|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    303|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    303|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    303|    }                                                  \
  |  |  |  | 3671|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.6k|                        .transform_error(make_eof_scan_error));
 5865|  41.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  41.6k|    {
 4152|  41.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.6k|        float_reader<CharT> rd{};
 4155|  41.6k|        return read_impl<Range>(
 4156|  41.6k|            range, rd,
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.6k|            },
 4160|  41.6k|            value);
 4161|  41.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  41.6k|    {
  754|  41.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  41.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.6k|              cvref<T> obj = *get<T>(fn);
  745|  41.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.6k|              }
  748|  41.6k|              else {
  749|  41.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.6k|              }
  751|  41.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.6k|    {
  684|  41.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.6k|            return static_cast<T*>(s.m_cp);
  686|  41.6k|        }
  687|  41.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.6k|            return static_cast<T*>(s.m_p);
  689|  41.6k|        }
  690|  41.6k|        else {
  691|  41.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.6k|        }
  693|  41.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  41.6k|        {
  662|  41.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   347k|    {
 2879|   347k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   915k|    {
 2883|   915k|        return m_current;
 2884|   915k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   567k|    {
 2888|   567k|        return m_range.end();
 2889|   567k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   219k|    {
 2903|   219k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   219k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   219k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 219k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   219k|        }
 2909|   219k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   219k|    static_cast<    \
  |  |  929|   219k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   219k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   347k|    {
 2893|   347k|        return ranges::subrange{begin(), end()};
 2894|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   347k|    {
 6037|   347k|        const bool need_skipped_width =
 6038|   347k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 347k]
  |  Branch (6038:33): [True: 0, False: 347k]
  ------------------
 6039|   347k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   347k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 347k]
  ------------------
 6043|   347k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 347k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   347k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 347k, False: 0]
  |  Branch (6047:56): [True: 347k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   347k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 347k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   693k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 345k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.48k|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   693k|                            make_eof_scan_error));
 6058|       |
 6059|   693k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 345k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   345k|            return result_type{it, 0};
 6067|   693k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   218k|    {
 6079|   218k|        const bool need_skipped_width =
 6080|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 218k]
  |  Branch (6080:33): [True: 0, False: 218k]
  ------------------
 6081|   218k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   218k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 218k]
  ------------------
 6084|   218k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 218k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   218k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 218k, False: 0]
  ------------------
 6093|   218k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 218k]
  ------------------
 6094|   218k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   218k|        return result_type{rng.begin(), 0};
 6118|   218k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   113k|    {
 6193|   113k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   113k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   113k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   113k|            auto rd = make_reader<T, char_type>();
 6198|   113k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   113k|            return impl(rd, range, value);
 6203|   113k|        }
 6204|   113k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   113k|            auto rd = make_reader<T, char_type>();
 6206|   113k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   113k|                return unexpected(e);
 6208|   113k|            }
 6209|       |
 6210|   113k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   113k|                specs.width != 0) {
 6212|   113k|                return impl(rd, range, value);
 6213|   113k|            }
 6214|       |
 6215|   113k|            auto crange = get_as_contiguous(range);
 6216|   113k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   113k|            return ranges::next(range.begin(),
 6218|   113k|                                ranges::distance(crange.begin(), it));
 6219|   113k|        }
 6220|   113k|        else {
 6221|   113k|            SCN_EXPECT(false);
 6222|   113k|            SCN_UNREACHABLE;
 6223|   113k|        }
 6224|   113k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   113k|    {
 6124|   113k|        const bool need_skipped_width =
 6125|   113k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 113k]
  |  Branch (6125:33): [True: 0, False: 113k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   113k|        auto it = rng.begin();
 6129|   113k|        std::ptrdiff_t prefix_width = 0;
 6130|   113k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 113k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   113k|        else {
 6138|   113k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 784, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    784|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    784|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    784|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    784|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    784|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   112k|            std::tie(it, prefix_width) = prefix_result;
 6140|   112k|        }
 6141|   112k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   112k|        std::ptrdiff_t value_width = 0;
 6145|   112k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 112k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   112k|        else {
 6161|   112k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 70.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  70.6k|                                             specs, value, loc));
 6163|       |
 6164|  70.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 70.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  70.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  70.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  70.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 70.2k, False: 322]
  ------------------
 6174|  70.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  70.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 70.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  70.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  70.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  70.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  70.2k|                                 value_width));
 6178|  70.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  70.2k|        }
 6180|       |
 6181|  70.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  70.6k|                                                 value_width, postfix_width);
 6183|  70.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 70.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  70.6k|        return it;
 6188|  70.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   116k|    {
 6193|   116k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   116k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   116k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   116k|            auto rd = make_reader<T, char_type>();
 6198|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   116k|            return impl(rd, range, value);
 6203|   116k|        }
 6204|   116k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   116k|            auto rd = make_reader<T, char_type>();
 6206|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   116k|                return unexpected(e);
 6208|   116k|            }
 6209|       |
 6210|   116k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   116k|                specs.width != 0) {
 6212|   116k|                return impl(rd, range, value);
 6213|   116k|            }
 6214|       |
 6215|   116k|            auto crange = get_as_contiguous(range);
 6216|   116k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   116k|            return ranges::next(range.begin(),
 6218|   116k|                                ranges::distance(crange.begin(), it));
 6219|   116k|        }
 6220|   116k|        else {
 6221|   116k|            SCN_EXPECT(false);
 6222|   116k|            SCN_UNREACHABLE;
 6223|   116k|        }
 6224|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   116k|    {
 6124|   116k|        const bool need_skipped_width =
 6125|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 116k]
  |  Branch (6125:33): [True: 0, False: 116k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   116k|        auto it = rng.begin();
 6129|   116k|        std::ptrdiff_t prefix_width = 0;
 6130|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 116k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   116k|        else {
 6138|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 836, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    836|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    836|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    836|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    836|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    836|    }                                                  \
  |  |  |  | 3671|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   115k|            std::tie(it, prefix_width) = prefix_result;
 6140|   115k|        }
 6141|   115k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   115k|        std::ptrdiff_t value_width = 0;
 6145|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 115k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   115k|        else {
 6161|   115k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 73.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  73.6k|                                             specs, value, loc));
 6163|       |
 6164|  73.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 73.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  73.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  73.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  73.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 73.2k, False: 354]
  ------------------
 6174|  73.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  73.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  73.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  73.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 73.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  73.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  73.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  73.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  73.2k|                                 value_width));
 6178|  73.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  73.2k|        }
 6180|       |
 6181|  73.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  73.6k|                                                 value_width, postfix_width);
 6183|  73.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 73.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  73.6k|        return it;
 6188|  73.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   118k|    {
 6193|   118k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   118k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   118k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   118k|            auto rd = make_reader<T, char_type>();
 6198|   118k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   118k|            return impl(rd, range, value);
 6203|   118k|        }
 6204|   118k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   118k|            auto rd = make_reader<T, char_type>();
 6206|   118k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   118k|                return unexpected(e);
 6208|   118k|            }
 6209|       |
 6210|   118k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   118k|                specs.width != 0) {
 6212|   118k|                return impl(rd, range, value);
 6213|   118k|            }
 6214|       |
 6215|   118k|            auto crange = get_as_contiguous(range);
 6216|   118k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   118k|            return ranges::next(range.begin(),
 6218|   118k|                                ranges::distance(crange.begin(), it));
 6219|   118k|        }
 6220|   118k|        else {
 6221|   118k|            SCN_EXPECT(false);
 6222|   118k|            SCN_UNREACHABLE;
 6223|   118k|        }
 6224|   118k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   118k|    {
 6124|   118k|        const bool need_skipped_width =
 6125|   118k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 118k]
  |  Branch (6125:33): [True: 0, False: 118k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   118k|        auto it = rng.begin();
 6129|   118k|        std::ptrdiff_t prefix_width = 0;
 6130|   118k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 118k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   118k|        else {
 6138|   118k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    860|    }                                                  \
  |  |  |  | 3671|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   117k|            std::tie(it, prefix_width) = prefix_result;
 6140|   117k|        }
 6141|   117k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   117k|        std::ptrdiff_t value_width = 0;
 6145|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 117k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   117k|        else {
 6161|   117k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 75.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.9k|    }                                                  \
  |  | 3671|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  75.2k|                                             specs, value, loc));
 6163|       |
 6164|  75.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 75.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  75.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  75.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  75.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 74.8k, False: 368]
  ------------------
 6174|  74.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  74.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  74.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  74.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  74.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  74.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  74.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  74.8k|                                 value_width));
 6178|  74.8k|            std::tie(it, postfix_width) = postfix_result;
 6179|  74.8k|        }
 6180|       |
 6181|  75.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  75.2k|                                                 value_width, postfix_width);
 6183|  75.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 75.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  75.2k|        return it;
 6188|  75.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   121k|{
 5795|   121k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 120k]
  |  |  ------------------
  ------------------
 5796|    378|        return unexpected(e);
 5797|    378|    }
 5798|       |
 5799|   120k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 120k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   120k|    return skip_classic_whitespace(range);
 5804|   120k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  38.5k|    {
 5871|  38.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  38.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  38.5k|            auto rd = make_reader<T, char_type>();
 5876|  38.5k|            return impl(rd, range, value);
 5877|  38.5k|        }
 5878|  38.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  38.5k|            auto rd = make_reader<T, char_type>();
 5880|  38.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 38.5k, False: 0]
  ------------------
 5881|  38.5k|                return impl(rd, range, value);
 5882|  38.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  38.5k|        else {
 5889|  38.5k|            SCN_EXPECT(false);
 5890|  38.5k|            SCN_UNREACHABLE;
 5891|  38.5k|        }
 5892|  38.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  38.5k|    {
 5863|  38.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 258, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    258|    }                                                  \
  |  |  |  | 3671|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  38.3k|                        .transform_error(make_eof_scan_error));
 5865|  38.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  38.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  38.3k|    {
 4152|  38.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  38.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  38.3k|        float_reader<CharT> rd{};
 4155|  38.3k|        return read_impl<Range>(
 4156|  38.3k|            range, rd,
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  38.3k|            },
 4160|  38.3k|            value);
 4161|  38.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|  38.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.3k|            return static_cast<T*>(s.m_cp);
  686|  38.3k|        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|  38.3k|        }
  690|  38.3k|        else {
  691|  38.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.3k|        }
  693|  38.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  38.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  38.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  38.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  40.7k|    {
 5871|  40.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  40.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  40.7k|            auto rd = make_reader<T, char_type>();
 5876|  40.7k|            return impl(rd, range, value);
 5877|  40.7k|        }
 5878|  40.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  40.7k|            auto rd = make_reader<T, char_type>();
 5880|  40.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 40.7k, False: 0]
  ------------------
 5881|  40.7k|                return impl(rd, range, value);
 5882|  40.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  40.7k|        else {
 5889|  40.7k|            SCN_EXPECT(false);
 5890|  40.7k|            SCN_UNREACHABLE;
 5891|  40.7k|        }
 5892|  40.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  40.7k|    {
 5863|  40.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 288, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    288|    }                                                  \
  |  |  |  | 3671|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  40.4k|                        .transform_error(make_eof_scan_error));
 5865|  40.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  40.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  40.4k|    {
 4152|  40.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  40.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  40.4k|        float_reader<CharT> rd{};
 4155|  40.4k|        return read_impl<Range>(
 4156|  40.4k|            range, rd,
 4157|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  40.4k|            },
 4160|  40.4k|            value);
 4161|  40.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  40.4k|    {
  754|  40.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|  40.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  40.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.4k|              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.4k|    {
  684|  40.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  40.4k|            return static_cast<T*>(s.m_cp);
  686|  40.4k|        }
  687|  40.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  40.4k|            return static_cast<T*>(s.m_p);
  689|  40.4k|        }
  690|  40.4k|        else {
  691|  40.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  40.4k|        }
  693|  40.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  40.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  40.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  40.4k|        {
  662|  40.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  41.9k|    {
 5871|  41.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  41.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  41.9k|            auto rd = make_reader<T, char_type>();
 5876|  41.9k|            return impl(rd, range, value);
 5877|  41.9k|        }
 5878|  41.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  41.9k|            auto rd = make_reader<T, char_type>();
 5880|  41.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 41.9k, False: 0]
  ------------------
 5881|  41.9k|                return impl(rd, range, value);
 5882|  41.9k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  41.9k|        else {
 5889|  41.9k|            SCN_EXPECT(false);
 5890|  41.9k|            SCN_UNREACHABLE;
 5891|  41.9k|        }
 5892|  41.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  41.9k|    {
 5863|  41.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 303, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    303|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    303|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    303|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    303|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    303|    }                                                  \
  |  |  |  | 3671|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  41.6k|                        .transform_error(make_eof_scan_error));
 5865|  41.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  41.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  41.6k|    {
 4152|  41.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  41.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  41.6k|        float_reader<CharT> rd{};
 4155|  41.6k|        return read_impl<Range>(
 4156|  41.6k|            range, rd,
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  41.6k|            },
 4160|  41.6k|            value);
 4161|  41.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  41.6k|    {
  754|  41.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  41.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.6k|              cvref<T> obj = *get<T>(fn);
  745|  41.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.6k|              }
  748|  41.6k|              else {
  749|  41.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.6k|              }
  751|  41.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.6k|    {
  684|  41.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.6k|            return static_cast<T*>(s.m_cp);
  686|  41.6k|        }
  687|  41.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.6k|            return static_cast<T*>(s.m_p);
  689|  41.6k|        }
  690|  41.6k|        else {
  691|  41.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.6k|        }
  693|  41.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  41.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  41.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  41.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  41.6k|        {
  662|  41.6k|        }

LLVMFuzzerTestOneInput:
   54|  2.13k|{
   55|  2.13k|    scn::fuzz::run(data, size);
   56|  2.13k|    return 0;
   57|  2.13k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.13k|{
   33|  2.13k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.13k]
  |  Branch (33:35): [True: 0, False: 2.13k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.13k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.13k|    const auto& f =
   40|  2.13k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.13k|    do_basic_run(sv, f);
   42|       |
   43|  2.13k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.13k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.13k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.13k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.13k, False: 0]
  ------------------
   47|  2.13k|        do_basic_run(wsv_transcode, wf);
   48|  2.13k|    }
   49|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.13k|{
   25|  2.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.13k|{
   25|  2.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.27k|{
   25|  4.27k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.27k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.27k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.27k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.27k|{
   25|  4.27k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.27k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.27k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.27k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.13k|{
   52|  2.13k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.13k|    string_buffer.resize(size);
   56|  2.13k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.13k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.13k|    const auto wsv_reinterpret_size =
   61|  2.13k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 66, False: 2.07k]
  ------------------
   62|  2.13k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.13k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.13k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.13k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.13k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.13k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.13k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.13k|{
  122|  2.13k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.13k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.13k|    buf.resize(sizeof...(Args));
  125|  2.13k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.13k|    return buf;
  127|  2.13k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.13k|{
  108|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.13k|        return format_string_view_buffer;
  110|  2.13k|    }
  111|  2.13k|    else {
  112|  2.13k|        return wformat_string_view_buffer;
  113|  2.13k|    }
  114|  2.13k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.13k|{
  185|  2.13k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.13k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.13k|                                   format_strings);
  188|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 134k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   134k|            it = result->begin();
  145|   134k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 134k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   134k|            it = result->begin();
  161|   134k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  31.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.8k|            auto result = scn::scan_value<T>(
  170|  31.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 29.6k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  29.6k|            it = result->begin();
  175|  29.6k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 139k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   139k|            it = result->begin();
  145|   139k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 139k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   139k|            it = result->begin();
  161|   139k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  33.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.3k|            auto result = scn::scan_value<T>(
  170|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 31.1k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  31.1k|            it = result->begin();
  175|  31.1k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   154k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   154k|            auto result = scn::scan<T>(
  139|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   154k|                scn::runtime_format(f));
  141|   154k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 141k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   141k|            it = result->begin();
  145|   141k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   154k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   154k|            auto result = scn::scan<T>(
  154|   154k|                global_locale,
  155|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   154k|                scn::runtime_format(f));
  157|   154k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 141k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   141k|            it = result->begin();
  161|   141k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  33.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.8k|            auto result = scn::scan_value<T>(
  170|  33.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 31.7k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  31.7k|            it = result->begin();
  175|  31.7k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   168k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   168k|            auto result = scn::scan<T>(
  139|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   168k|                scn::runtime_format(f));
  141|   168k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 155k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   155k|            it = result->begin();
  145|   155k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   168k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   168k|            auto result = scn::scan<T>(
  154|   168k|                global_locale,
  155|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   168k|                scn::runtime_format(f));
  157|   168k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 155k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   155k|            it = result->begin();
  161|   155k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  34.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.8k|            auto result = scn::scan_value<T>(
  170|  34.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 32.7k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  32.7k|            it = result->begin();
  175|  32.7k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   175k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   175k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   175k|            auto result = scn::scan<T>(
  139|   175k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   175k|                scn::runtime_format(f));
  141|   175k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 162k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   162k|            it = result->begin();
  145|   162k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   175k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   175k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   175k|            auto result = scn::scan<T>(
  154|   175k|                global_locale,
  155|   175k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   175k|                scn::runtime_format(f));
  157|   175k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 162k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   162k|            it = result->begin();
  161|   162k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  36.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.4k|            auto result = scn::scan_value<T>(
  170|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 34.3k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  34.3k|            it = result->begin();
  175|  34.3k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.13k|{
  133|       |    // Regular scan
  134|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.8k, False: 2.13k]
  ------------------
  135|  12.8k|        auto it = scn::ranges::begin(source);
  136|   177k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   177k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   177k|            auto result = scn::scan<T>(
  139|   177k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   177k|                scn::runtime_format(f));
  141|   177k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.8k, False: 164k]
  ------------------
  142|  12.8k|                break;
  143|  12.8k|            }
  144|   164k|            it = result->begin();
  145|   164k|        }
  146|  12.8k|    }
  147|       |
  148|       |    // scan localized
  149|  12.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.8k, False: 2.13k]
  ------------------
  150|  12.8k|        auto it = scn::ranges::begin(source);
  151|   177k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   177k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   177k|            auto result = scn::scan<T>(
  154|   177k|                global_locale,
  155|   177k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   177k|                scn::runtime_format(f));
  157|   177k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.8k, False: 164k]
  ------------------
  158|  12.8k|                break;
  159|  12.8k|            }
  160|   164k|            it = result->begin();
  161|   164k|        }
  162|  12.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.13k|    {
  166|  2.13k|        auto it = scn::ranges::begin(source);
  167|  36.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.8k|            auto result = scn::scan_value<T>(
  170|  36.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.13k, False: 34.7k]
  ------------------
  172|  2.13k|                break;
  173|  2.13k|            }
  174|  34.7k|            it = result->begin();
  175|  34.7k|        }
  176|  2.13k|    }
  177|  2.13k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.13k|{
   90|  2.13k|    using char_type = ranges::range_value_t<Source>;
   91|  2.13k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.13k|    deque.clear();
   93|  2.13k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.13k|              std::back_inserter(deque));
   95|  2.13k|    return deque;
   96|  2.13k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.13k|{
   79|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.13k|        return noncontiguous_buffer;
   81|  2.13k|    }
   82|  2.13k|    else {
   83|  2.13k|        return wnoncontiguous_buffer;
   84|  2.13k|    }
   85|  2.13k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.13k|{
  122|  2.13k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.13k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.13k|    buf.resize(sizeof...(Args));
  125|  2.13k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.13k|    return buf;
  127|  2.13k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.13k|{
  108|  2.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.13k|        return format_string_view_buffer;
  110|  2.13k|    }
  111|  2.13k|    else {
  112|  2.13k|        return wformat_string_view_buffer;
  113|  2.13k|    }
  114|  2.13k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.27k|{
  185|  4.27k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.27k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.27k|                                   format_strings);
  188|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  69.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  69.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  69.5k|            auto result = scn::scan<T>(
  139|  69.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  69.5k|                scn::runtime_format(f));
  141|  69.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 43.8k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  43.8k|            it = result->begin();
  145|  43.8k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  69.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  69.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  69.5k|            auto result = scn::scan<T>(
  154|  69.5k|                global_locale,
  155|  69.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  69.5k|                scn::runtime_format(f));
  157|  69.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 43.8k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  43.8k|            it = result->begin();
  161|  43.8k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  12.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.8k|            auto result = scn::scan_value<T>(
  170|  12.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 8.58k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  8.58k|            it = result->begin();
  175|  8.58k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  71.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  71.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  71.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  71.7k|            auto result = scn::scan<T>(
  139|  71.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  71.7k|                scn::runtime_format(f));
  141|  71.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 46.1k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  46.1k|            it = result->begin();
  145|  46.1k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  71.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  71.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  71.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  71.7k|            auto result = scn::scan<T>(
  154|  71.7k|                global_locale,
  155|  71.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  71.7k|                scn::runtime_format(f));
  157|  71.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 46.1k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  46.1k|            it = result->begin();
  161|  46.1k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  13.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.6k|            auto result = scn::scan_value<T>(
  170|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 9.32k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  9.32k|            it = result->begin();
  175|  9.32k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  73.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  73.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  73.0k|            auto result = scn::scan<T>(
  139|  73.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  73.0k|                scn::runtime_format(f));
  141|  73.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 47.3k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  47.3k|            it = result->begin();
  145|  47.3k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  73.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  73.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  73.0k|            auto result = scn::scan<T>(
  154|  73.0k|                global_locale,
  155|  73.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  73.0k|                scn::runtime_format(f));
  157|  73.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 47.3k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  47.3k|            it = result->begin();
  161|  47.3k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  13.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.9k|            auto result = scn::scan_value<T>(
  170|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 9.72k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  9.72k|            it = result->begin();
  175|  9.72k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  69.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  69.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  69.5k|            auto result = scn::scan<T>(
  139|  69.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  69.5k|                scn::runtime_format(f));
  141|  69.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 43.8k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  43.8k|            it = result->begin();
  145|  43.8k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  69.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  69.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  69.5k|            auto result = scn::scan<T>(
  154|  69.5k|                global_locale,
  155|  69.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  69.5k|                scn::runtime_format(f));
  157|  69.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 43.8k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  43.8k|            it = result->begin();
  161|  43.8k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  12.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  12.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  12.8k|            auto result = scn::scan_value<T>(
  170|  12.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  12.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 8.57k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  8.57k|            it = result->begin();
  175|  8.57k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  71.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  71.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  71.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  71.7k|            auto result = scn::scan<T>(
  139|  71.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  71.7k|                scn::runtime_format(f));
  141|  71.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 46.0k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  46.0k|            it = result->begin();
  145|  46.0k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  71.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  71.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  71.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  71.7k|            auto result = scn::scan<T>(
  154|  71.7k|                global_locale,
  155|  71.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  71.7k|                scn::runtime_format(f));
  157|  71.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 46.0k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  46.0k|            it = result->begin();
  161|  46.0k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  13.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.5k|            auto result = scn::scan_value<T>(
  170|  13.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 9.31k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  9.31k|            it = result->begin();
  175|  9.31k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.27k|{
  133|       |    // Regular scan
  134|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.6k, False: 4.27k]
  ------------------
  135|  25.6k|        auto it = scn::ranges::begin(source);
  136|  72.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  72.9k|            auto result = scn::scan<T>(
  139|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  72.9k|                scn::runtime_format(f));
  141|  72.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.6k, False: 47.3k]
  ------------------
  142|  25.6k|                break;
  143|  25.6k|            }
  144|  47.3k|            it = result->begin();
  145|  47.3k|        }
  146|  25.6k|    }
  147|       |
  148|       |    // scan localized
  149|  25.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.6k, False: 4.27k]
  ------------------
  150|  25.6k|        auto it = scn::ranges::begin(source);
  151|  72.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  72.9k|            auto result = scn::scan<T>(
  154|  72.9k|                global_locale,
  155|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  72.9k|                scn::runtime_format(f));
  157|  72.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.6k, False: 47.3k]
  ------------------
  158|  25.6k|                break;
  159|  25.6k|            }
  160|  47.3k|            it = result->begin();
  161|  47.3k|        }
  162|  25.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.27k|    {
  166|  4.27k|        auto it = scn::ranges::begin(source);
  167|  13.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  13.9k|            auto result = scn::scan_value<T>(
  170|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  13.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.27k, False: 9.70k]
  ------------------
  172|  4.27k|                break;
  173|  4.27k|            }
  174|  9.70k|            it = result->begin();
  175|  9.70k|        }
  176|  4.27k|    }
  177|  4.27k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.27k|{
   90|  4.27k|    using char_type = ranges::range_value_t<Source>;
   91|  4.27k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.27k|    deque.clear();
   93|  4.27k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.27k|              std::back_inserter(deque));
   95|  4.27k|    return deque;
   96|  4.27k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.27k|{
   79|  4.27k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.27k|        return noncontiguous_buffer;
   81|  4.27k|    }
   82|  4.27k|    else {
   83|  4.27k|        return wnoncontiguous_buffer;
   84|  4.27k|    }
   85|  4.27k|}

