_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.21M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.21M|  chars_format const fmt = options.format;
  277|  1.21M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.21M|  parsed_number_string_t<UC> answer;
  280|  1.21M|  answer.valid = false;
  281|  1.21M|  answer.too_many_digits = false;
  282|  1.21M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.21M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.21M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.21M|  UC const * const start_digits = p;
  303|       |
  304|  1.21M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  6.74M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.36M, False: 379k]
  |  Branch (306:25): [True: 5.53M, False: 833k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.53M|    i = 10 * i +
  310|  5.53M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.53M|    ++p;
  312|  5.53M|  }
  313|  1.21M|  UC const * const end_of_integer_part = p;
  314|  1.21M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.21M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.21M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.21M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.21M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.21M|  int64_t exponent = 0;
  324|  1.21M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 833k, False: 379k]
  |  Branch (324:49): [True: 165k, False: 667k]
  ------------------
  325|  1.21M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 165k, False: 1.04M]
  ------------------
  326|   165k|    ++p;
  327|   165k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   165k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   663k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 609k, False: 53.7k]
  |  Branch (332:27): [True: 498k, False: 111k]
  ------------------
  333|   498k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   498k|      ++p;
  335|   498k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   498k|    }
  337|   165k|    exponent = before - p;
  338|   165k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   165k|    digit_count -= exponent;
  340|   165k|  }
  341|  1.21M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.21M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.21M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.21M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.21M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.21M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.21M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.06M, False: 145k]
  ------------------
  352|  1.21M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 779k, False: 288k]
  ------------------
  353|  1.21M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 122k, False: 656k]
  |  Branch (353:29): [True: 37.0k, False: 619k]
  ------------------
  354|  1.21M|       ||
  355|  1.21M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.05M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.05M]
  ------------------
  356|  1.05M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.05M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   159k|    UC const * location_of_e = p;
  359|   159k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 122k, False: 37.0k]
  |  Branch (359:28): [True: 37.0k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   159k|      ++p;
  361|   159k|    }
  362|   159k|    bool neg_exp = false;
  363|   159k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 159k, False: 215]
  |  Branch (363:24): [True: 10.9k, False: 148k]
  ------------------
  364|  10.9k|      neg_exp = true;
  365|  10.9k|      ++p;
  366|   148k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 148k, False: 215]
  |  Branch (366:31): [True: 26.9k, False: 121k]
  ------------------
  367|  26.9k|      ++p;
  368|  26.9k|    }
  369|   159k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 159k]
  |  Branch (369:24): [True: 825, False: 158k]
  ------------------
  370|  1.08k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.08k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.08k|      p = location_of_e;
  376|   158k|    } else {
  377|   530k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 478k, False: 52.5k]
  |  Branch (377:29): [True: 371k, False: 106k]
  ------------------
  378|   371k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   371k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 346k, False: 25.5k]
  ------------------
  380|   346k|          exp_number = 10 * exp_number + digit;
  381|   346k|        }
  382|   371k|        ++p;
  383|   371k|      }
  384|   158k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 10.9k, False: 147k]
  ------------------
  385|   158k|      exponent += exp_number;
  386|   158k|    }
  387|  1.05M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.05M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 907k, False: 145k]
  |  Branch (389:44): [True: 0, False: 907k]
  ------------------
  390|  1.05M|  }
  391|  1.21M|  answer.lastmatch = p;
  392|  1.21M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.21M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 155k, False: 1.05M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   155k|    UC const * start = start_digits;
  405|  1.35M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.34M, False: 2.53k]
  |  Branch (405:32): [True: 1.17M, False: 179k]
  |  Branch (405:53): [True: 27.0k, False: 152k]
  ------------------
  406|  1.19M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 1.17M, False: 27.0k]
  ------------------
  407|  1.19M|      start++;
  408|  1.19M|    }
  409|       |
  410|   155k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 137k, False: 17.0k]
  ------------------
  411|   137k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   137k|      i = 0;
  416|   137k|      p = answer.integer.ptr;
  417|   137k|      UC const* int_end = p + answer.integer.len();
  418|   137k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.97M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.92M, False: 52.8k]
  |  Branch (419:54): [True: 1.83M, False: 85.1k]
  ------------------
  420|  1.83M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.83M|        ++p;
  422|  1.83M|      }
  423|   137k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 52.8k, False: 85.1k]
  ------------------
  424|  52.8k|        exponent = end_of_integer_part - p + exp_number;
  425|  52.8k|      }
  426|  85.1k|      else { // We have a value with a fractional component.
  427|  85.1k|        p = answer.fraction.ptr;
  428|  85.1k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.66M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.58M, False: 85.1k]
  |  Branch (429:56): [True: 1.58M, False: 0]
  ------------------
  430|  1.58M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.58M|          ++p;
  432|  1.58M|        }
  433|  85.1k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  85.1k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   137k|    }
  437|   155k|  }
  438|  1.21M|  answer.exponent = exponent;
  439|  1.21M|  answer.mantissa = i;
  440|  1.21M|  return answer;
  441|  1.21M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.61M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.61M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 200k, False: 7.41M]
  |  Branch (36:27): [True: 851k, False: 6.56M]
  ------------------
   37|  7.61M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   165k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   685k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 624k, False: 60.3k]
  |  Branch (249:43): [True: 519k, False: 104k]
  ------------------
  250|   519k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   519k|    p += 8;
  252|   519k|  }
  253|   165k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   624k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   624k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   624k|     0x8080808080808080));
  172|   624k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.35M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.35M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.35M|  uint64_t val;
   63|  1.35M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.35M|  return val;
   69|  1.35M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   865k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   865k|  const uint64_t mask = 0x000000FF000000FF;
  148|   865k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   865k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   865k|  val -= 0x3030303030303030;
  151|   865k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   865k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   865k|  return uint32_t(val);
  154|   865k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   207k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   207k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   207k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   207k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   207k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.11M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.11M|  chars_format const fmt = options.format;
  277|  1.11M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.11M|  parsed_number_string_t<UC> answer;
  280|  1.11M|  answer.valid = false;
  281|  1.11M|  answer.too_many_digits = false;
  282|  1.11M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.11M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.11M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.11M|  UC const * const start_digits = p;
  303|       |
  304|  1.11M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  6.07M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 5.66M, False: 413k]
  |  Branch (306:25): [True: 4.96M, False: 697k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.96M|    i = 10 * i +
  310|  4.96M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.96M|    ++p;
  312|  4.96M|  }
  313|  1.11M|  UC const * const end_of_integer_part = p;
  314|  1.11M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.11M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.11M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.11M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.11M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.11M|  int64_t exponent = 0;
  324|  1.11M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 697k, False: 413k]
  |  Branch (324:49): [True: 125k, False: 571k]
  ------------------
  325|  1.11M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 125k, False: 984k]
  ------------------
  326|   125k|    ++p;
  327|   125k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   125k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  3.23M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 3.19M, False: 41.3k]
  |  Branch (332:27): [True: 3.10M, False: 84.6k]
  ------------------
  333|  3.10M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  3.10M|      ++p;
  335|  3.10M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  3.10M|    }
  337|   125k|    exponent = before - p;
  338|   125k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   125k|    digit_count -= exponent;
  340|   125k|  }
  341|  1.11M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.11M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.11M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.11M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.11M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.11M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.11M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 966k, False: 143k]
  ------------------
  352|  1.11M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 655k, False: 310k]
  ------------------
  353|  1.11M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 106k, False: 549k]
  |  Branch (353:29): [True: 34.6k, False: 515k]
  ------------------
  354|  1.11M|       ||
  355|  1.11M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   969k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 969k]
  ------------------
  356|   969k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   969k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   140k|    UC const * location_of_e = p;
  359|   140k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 106k, False: 34.6k]
  |  Branch (359:28): [True: 34.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   140k|      ++p;
  361|   140k|    }
  362|   140k|    bool neg_exp = false;
  363|   140k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 140k, False: 215]
  |  Branch (363:24): [True: 10.2k, False: 130k]
  ------------------
  364|  10.2k|      neg_exp = true;
  365|  10.2k|      ++p;
  366|   130k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 130k, False: 215]
  |  Branch (366:31): [True: 25.9k, False: 104k]
  ------------------
  367|  25.9k|      ++p;
  368|  25.9k|    }
  369|   140k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 140k]
  |  Branch (369:24): [True: 765, False: 139k]
  ------------------
  370|  1.02k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.02k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.02k|      p = location_of_e;
  376|   139k|    } else {
  377|   454k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 407k, False: 46.5k]
  |  Branch (377:29): [True: 314k, False: 93.0k]
  ------------------
  378|   314k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   314k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 293k, False: 21.3k]
  ------------------
  380|   293k|          exp_number = 10 * exp_number + digit;
  381|   293k|        }
  382|   314k|        ++p;
  383|   314k|      }
  384|   139k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 10.1k, False: 129k]
  ------------------
  385|   139k|      exponent += exp_number;
  386|   139k|    }
  387|   969k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   969k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 825k, False: 143k]
  |  Branch (389:44): [True: 0, False: 825k]
  ------------------
  390|   969k|  }
  391|  1.11M|  answer.lastmatch = p;
  392|  1.11M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.11M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 119k, False: 991k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   119k|    UC const * start = start_digits;
  405|   969k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 967k, False: 2.29k]
  |  Branch (405:32): [True: 830k, False: 136k]
  |  Branch (405:53): [True: 19.9k, False: 116k]
  ------------------
  406|   850k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 830k, False: 19.9k]
  ------------------
  407|   850k|      start++;
  408|   850k|    }
  409|       |
  410|   119k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 103k, False: 15.8k]
  ------------------
  411|   103k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   103k|      i = 0;
  416|   103k|      p = answer.integer.ptr;
  417|   103k|      UC const* int_end = p + answer.integer.len();
  418|   103k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.58M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.53M, False: 45.3k]
  |  Branch (419:54): [True: 1.48M, False: 57.8k]
  ------------------
  420|  1.48M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.48M|        ++p;
  422|  1.48M|      }
  423|   103k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 45.3k, False: 57.8k]
  ------------------
  424|  45.3k|        exponent = end_of_integer_part - p + exp_number;
  425|  45.3k|      }
  426|  57.8k|      else { // We have a value with a fractional component.
  427|  57.8k|        p = answer.fraction.ptr;
  428|  57.8k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.02M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 968k, False: 57.8k]
  |  Branch (429:56): [True: 968k, False: 0]
  ------------------
  430|   968k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   968k|          ++p;
  432|   968k|        }
  433|  57.8k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  57.8k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   103k|    }
  437|   119k|  }
  438|  1.11M|  answer.exponent = exponent;
  439|  1.11M|  answer.mantissa = i;
  440|  1.11M|  return answer;
  441|  1.11M|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  9.40M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  9.40M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 193k, False: 9.21M]
  |  Branch (36:27): [True: 682k, False: 8.53M]
  ------------------
   37|  9.40M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|   125k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|   125k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|   125k|    return;
  240|   125k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|   138k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   138k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   138k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   138k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   138k|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|   138k|uint64_t read8_to_u64(const UC *chars) {
   54|   138k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|   138k|    uint64_t val = 0;
   56|  1.24M|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 1.10M, False: 138k]
  ------------------
   57|  1.10M|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|  1.10M|      ++chars;
   59|  1.10M|    }
   60|   138k|    return val;
   61|   138k|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|   138k|}

_ZN10fast_float6bigintC2Ev:
  412|  72.5k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   155k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   264k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   264k|    return small_mul(vec, y);
  565|   264k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   401k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   401k|  limb carry = 0;
  284|  1.99M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.59M, False: 401k]
  ------------------
  285|  1.59M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.59M|  }
  287|   401k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 262k, False: 138k]
  ------------------
  288|   262k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   262k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  289|   262k|  }
  290|   401k|  return true;
  291|   401k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  3.46M|  constexpr size_t len() const noexcept {
   77|  3.46M|    return length;
   78|  3.46M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.59M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.59M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.59M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.59M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.59M|  carry = limb(z >> limb_bits);
  235|  1.59M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.59M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  4.17M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  4.17M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  4.17M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  4.17M|    return data[index];
   60|  4.17M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   350k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   350k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 350k, False: 0]
  ------------------
   93|   350k|      push_unchecked(value);
   94|   350k|      return true;
   95|   350k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   350k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   424k|  constexpr size_t capacity() const noexcept {
   83|   424k|    return size;
   84|   424k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   408k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   408k|    data[length] = value;
   88|   408k|    length++;
   89|   408k|  }
_ZN10fast_float6bigint3addEm:
  567|   264k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   264k|    return small_add(vec, y);
  569|   264k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   264k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   264k|  return small_add_from(vec, y, 0);
  277|   264k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   264k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   264k|  size_t index = start;
  259|   264k|  limb carry = y;
  260|   264k|  bool overflow;
  261|   384k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 192k, False: 191k]
  |  Branch (261:24): [True: 120k, False: 72.5k]
  ------------------
  262|   120k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   120k|    carry = limb(overflow);
  264|   120k|    index += 1;
  265|   120k|  }
  266|   264k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 72.5k, False: 191k]
  ------------------
  267|  72.5k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  72.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  268|  72.5k|  }
  269|   264k|  return true;
  270|   264k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   411k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   411k|  limb z;
  211|       |// gcc and clang
  212|   411k|#if defined(__has_builtin)
  213|   411k|  #if __has_builtin(__builtin_add_overflow)
  214|   411k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   411k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   411k|      return z;
  217|   411k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   411k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.2k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.2k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
  611|  14.2k|    return pow2(exp);
  612|  14.2k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  72.5k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  72.5k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  72.5k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  78.7k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 6.23k, False: 72.5k]
  ------------------
  582|  6.23k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  6.23k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.23k]
  |  |  ------------------
  ------------------
  583|  6.23k|      exp -= large_step;
  584|  6.23k|    }
  585|  72.5k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  72.5k|    uint32_t small_step = 27;
  587|  72.5k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   123k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 50.6k, False: 72.5k]
  ------------------
  593|  50.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  50.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
  594|  50.6k|      exp -= small_step;
  595|  50.6k|    }
  596|  72.5k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 55.1k, False: 17.4k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  55.1k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  55.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 55.1k]
  |  |  ------------------
  ------------------
  601|  55.1k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  55.1k|      );
  603|  55.1k|    }
  604|       |
  605|  72.5k|    return true;
  606|  72.5k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  6.23k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  6.23k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 6.23k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  6.23k|  } else {
  368|  6.23k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  6.23k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.23k]
  |  |  ------------------
  ------------------
  369|  6.23k|  }
  370|  6.23k|  return true;
  371|  6.23k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  6.23k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  6.23k|  limb_span xs = limb_span(x.data, x.len());
  337|  6.23k|  stackvec<size> z(xs);
  338|  6.23k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  6.23k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 6.23k, False: 0]
  ------------------
  341|  6.23k|    limb y0 = y[0];
  342|  6.23k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  6.23k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.23k]
  |  |  ------------------
  ------------------
  343|  31.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 24.9k, False: 6.23k]
  ------------------
  344|  24.9k|      limb yi = y[index];
  345|  24.9k|      stackvec<size> zi;
  346|  24.9k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 24.9k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  24.9k|        zi.set_len(0);
  349|  24.9k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  24.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  350|  24.9k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  24.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  351|  24.9k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  24.9k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  24.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
  353|  24.9k|      }
  354|  24.9k|    }
  355|  6.23k|  }
  356|       |
  357|  6.23k|  x.normalize();
  358|  6.23k|  return true;
  359|  6.23k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  6.23k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  6.23k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  6.23k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  6.23k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  99.1k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  99.1k|    length = uint16_t(len);
   75|  99.1k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  31.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  31.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 31.1k, False: 0]
  ------------------
  108|  31.1k|      extend_unchecked(s);
  109|  31.1k|      return true;
  110|  31.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  31.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  31.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  31.1k|    limb* ptr = data + length;
  102|  31.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  31.1k|    set_len(len() + s.len());
  104|  31.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  24.9k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  24.9k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 24.9k]
  |  Branch (300:26): [True: 24.7k, False: 193]
  ------------------
  301|  24.7k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  24.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.7k]
  |  |  ------------------
  ------------------
  302|  24.7k|  }
  303|       |
  304|  24.9k|  bool carry = false;
  305|   235k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 210k, False: 24.9k]
  ------------------
  306|   210k|    limb xi = x[index + start];
  307|   210k|    limb yi = y[index];
  308|   210k|    bool c1 = false;
  309|   210k|    bool c2 = false;
  310|   210k|    xi = scalar_add(xi, yi, c1);
  311|   210k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 81.1k, False: 129k]
  ------------------
  312|  81.1k|      xi = scalar_add(xi, 1, c2);
  313|  81.1k|    }
  314|   210k|    x[index + start] = xi;
  315|   210k|    carry = c1 | c2;
  316|   210k|  }
  317|       |
  318|       |  // handle overflow
  319|  24.9k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 24.9k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  24.9k|  return true;
  323|  24.9k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  24.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  24.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 24.7k]
  ------------------
  132|      0|      return false;
  133|  24.7k|    } else {
  134|  24.7k|      resize_unchecked(new_len, value);
  135|  24.7k|      return true;
  136|  24.7k|    }
  137|  24.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  24.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  24.7k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 24.7k, False: 0]
  ------------------
  120|  24.7k|      size_t count = new_len - len();
  121|  24.7k|      limb* first = data + len();
  122|  24.7k|      limb* last = first + count;
  123|  24.7k|      ::std::fill(first, last, value);
  124|  24.7k|      set_len(new_len);
  125|  24.7k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  24.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  64.5k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  64.5k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 64.5k, False: 0]
  |  Branch (152:25): [True: 0, False: 64.5k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  64.5k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   106k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   106k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   106k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   106k|    size_t rindex = length - index - 1;
   69|   106k|    return data[rindex];
   70|   106k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  72.4k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  72.4k|    return shl(exp);
  574|  72.4k|  }
_ZN10fast_float6bigint3shlEm:
  530|  72.4k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  72.4k|    size_t rem = n % limb_bits;
  532|  72.4k|    size_t div = n / limb_bits;
  533|  72.4k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 58.1k, False: 14.3k]
  ------------------
  534|  58.1k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  58.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 58.1k]
  |  |  ------------------
  ------------------
  535|  58.1k|    }
  536|  72.4k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 18.2k, False: 54.2k]
  ------------------
  537|  18.2k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  18.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 18.2k]
  |  |  ------------------
  ------------------
  538|  18.2k|    }
  539|  72.4k|    return true;
  540|  72.4k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  58.1k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  58.1k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  58.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  58.1k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  58.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  58.1k|    size_t shl = n;
  493|  58.1k|    size_t shr = limb_bits - shl;
  494|  58.1k|    limb prev = 0;
  495|   217k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 159k, False: 58.1k]
  ------------------
  496|   159k|      limb xi = vec[index];
  497|   159k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   159k|      prev = xi;
  499|   159k|    }
  500|       |
  501|  58.1k|    limb carry = prev >> shr;
  502|  58.1k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 14.6k, False: 43.4k]
  ------------------
  503|  14.6k|      return vec.try_push(carry);
  504|  14.6k|    }
  505|  43.4k|    return true;
  506|  58.1k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  18.2k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  18.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  18.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  18.2k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 18.2k]
  ------------------
  512|      0|      return false;
  513|  18.2k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 18.2k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  18.2k|      limb* dst = vec.data + n;
  516|  18.2k|      const limb* src = vec.data;
  517|  18.2k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  18.2k|      limb* first = vec.data;
  520|  18.2k|      limb* last = first + n;
  521|  18.2k|      ::std::fill(first, last, 0);
  522|  18.2k|      vec.set_len(n + vec.len());
  523|  18.2k|      return true;
  524|  18.2k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  18.2k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  32.5k|  constexpr bool is_empty() const noexcept {
   80|  32.5k|    return length == 0;
   81|  32.5k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.2k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.2k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.2k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.2k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.2k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.66k, False: 12.5k]
  ------------------
  435|  1.66k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  12.5k|    } else {
  437|  12.5k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  12.5k|      truncated |= vec.nonzero(2);
  439|  12.5k|      return result;
  440|  12.5k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.2k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.66k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.66k|  truncated = false;
  167|  1.66k|  int shl = leading_zeroes(r0);
  168|  1.66k|  return r0 << shl;
  169|  1.66k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  12.5k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  12.5k|  int shl = leading_zeroes(r0);
  174|  12.5k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 12.5k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  12.5k|  } else {
  178|  12.5k|    int shr = 64 - shl;
  179|  12.5k|    truncated = (r1 << shl) != 0;
  180|  12.5k|    return (r0 << shl) | (r1 >> shr);
  181|  12.5k|  }
  182|  12.5k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  12.5k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  12.6k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 566, False: 12.0k]
  ------------------
  143|    566|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 530, False: 36]
  ------------------
  144|    530|        return true;
  145|    530|      }
  146|     36|      index++;
  147|     36|    }
  148|  12.0k|    return false;
  149|  12.5k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.2k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.2k|    int lz = ctlz();
  560|  14.2k|    return int(limb_bits * vec.len()) - lz;
  561|  14.2k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.2k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.2k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.2k]
  ------------------
  545|      0|      return 0;
  546|  14.2k|    } else {
  547|  14.2k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.2k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.2k|    }
  555|  14.2k|  }
_ZN10fast_float6bigintC2Em:
  418|  58.2k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  58.2k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  58.2k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  58.2k|    vec.normalize();
  426|  58.2k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  58.2k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  58.2k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 58.2k]
  ------------------
  464|      0|      return 1;
  465|  58.2k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 58.2k]
  ------------------
  466|      0|      return -1;
  467|  58.2k|    } else {
  468|   115k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 107k, False: 8.48k]
  ------------------
  469|   107k|        limb xi = vec[index - 1];
  470|   107k|        limb yi = other.vec[index - 1];
  471|   107k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 8.12k, False: 98.9k]
  ------------------
  472|  8.12k|          return 1;
  473|  98.9k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 41.6k, False: 57.3k]
  ------------------
  474|  41.6k|          return -1;
  475|  41.6k|        }
  476|   107k|      }
  477|  8.48k|      return 0;
  478|  58.2k|    }
  479|  58.2k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   214k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   214k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   214k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   214k|    return data[index];
   64|   214k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   380k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   380k|  adjusted_mantissa answer;
   96|   380k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 10.0k, False: 370k]
  |  Branch (96:19): [True: 1.67k, False: 368k]
  ------------------
   97|  11.7k|    answer.power2 = 0;
   98|  11.7k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  11.7k|    return answer;
  101|  11.7k|  }
  102|   368k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.16k, False: 360k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.16k|    answer.power2 = binary::infinite_power();
  105|  8.16k|    answer.mantissa = 0;
  106|  8.16k|    return answer;
  107|  8.16k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   360k|  int lz = leading_zeroes(w);
  112|   360k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   360k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   360k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   360k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   360k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   360k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 749, False: 360k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    749|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 713]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    713|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    713|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    713|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    713|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 713, False: 0]
  ------------------
  156|    713|    return answer;
  157|    749|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   360k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 146k, False: 213k]
  |  Branch (162:30): [True: 145k, False: 528]
  |  Branch (162:77): [True: 129k, False: 16.4k]
  ------------------
  163|   360k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 24.2k, False: 105k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  24.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.6k, False: 12.6k]
  ------------------
  168|  11.6k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.6k|    }
  170|  24.2k|  }
  171|       |
  172|   360k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   360k|  answer.mantissa >>= 1;
  174|   360k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 23.8k, False: 336k]
  ------------------
  175|  23.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  23.8k|    answer.power2++; // undo previous addition
  177|  23.8k|  }
  178|       |
  179|   360k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   360k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.07k, False: 357k]
  ------------------
  181|  2.07k|    answer.power2 = binary::infinite_power();
  182|  2.07k|    answer.mantissa = 0;
  183|  2.07k|  }
  184|   360k|  return answer;
  185|   360k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   392k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   392k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   392k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   392k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   392k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   392k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   392k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 56.0k, False: 336k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  56.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  56.0k|    firstproduct.low += secondproduct.high;
   35|  56.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.4k, False: 7.65k]
  ------------------
   36|  48.4k|      firstproduct.high++;
   37|  48.4k|    }
   38|  56.0k|  }
   39|   392k|  return firstproduct;
   40|   392k|}
_ZN10fast_float6detail5powerEi:
   58|   773k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   773k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   773k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  31.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  31.6k|  int lz = leading_zeroes(w);
   82|  31.6k|  w <<= lz;
   83|  31.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  31.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  31.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  31.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  31.6k|  int hilz = int(w >> 63) ^ 1;
   69|  31.6k|  adjusted_mantissa answer;
   70|  31.6k|  answer.mantissa = w << hilz;
   71|  31.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  31.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  31.6k|  return answer;
   74|  31.6k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   352k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   352k|  adjusted_mantissa answer;
   96|   352k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 7.25k, False: 345k]
  |  Branch (96:19): [True: 348, False: 344k]
  ------------------
   97|  7.60k|    answer.power2 = 0;
   98|  7.60k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.60k|    return answer;
  101|  7.60k|  }
  102|   344k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.40k, False: 340k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.40k|    answer.power2 = binary::infinite_power();
  105|  4.40k|    answer.mantissa = 0;
  106|  4.40k|    return answer;
  107|  4.40k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   340k|  int lz = leading_zeroes(w);
  112|   340k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   340k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   340k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   340k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   340k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   340k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.3k, False: 326k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.3k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 108, False: 13.2k]
  ------------------
  137|    108|      answer.power2 = 0;
  138|    108|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    108|      return answer;
  141|    108|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.2k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.2k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.2k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.2k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.2k, False: 0]
  ------------------
  156|  13.2k|    return answer;
  157|  13.3k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   326k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 109k, False: 217k]
  |  Branch (162:30): [True: 72.1k, False: 37.3k]
  |  Branch (162:77): [True: 59.6k, False: 12.5k]
  ------------------
  163|   326k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 17.1k, False: 42.4k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  17.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.5k, False: 5.64k]
  ------------------
  168|  11.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.5k|    }
  170|  17.1k|  }
  171|       |
  172|   326k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   326k|  answer.mantissa >>= 1;
  174|   326k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 22.1k, False: 304k]
  ------------------
  175|  22.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  22.1k|    answer.power2++; // undo previous addition
  177|  22.1k|  }
  178|       |
  179|   326k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   326k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 247, False: 326k]
  ------------------
  181|    247|    answer.power2 = binary::infinite_power();
  182|    247|    answer.mantissa = 0;
  183|    247|  }
  184|   326k|  return answer;
  185|   340k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   381k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   381k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   381k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   381k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   381k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   381k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   381k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 83.9k, False: 297k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  83.9k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  83.9k|    firstproduct.low += secondproduct.high;
   35|  83.9k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 42.0k, False: 41.9k]
  ------------------
   36|  42.0k|      firstproduct.high++;
   37|  42.0k|    }
   38|  83.9k|  }
   39|   381k|  return firstproduct;
   40|   381k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  40.9k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  40.9k|  int lz = leading_zeroes(w);
   82|  40.9k|  w <<= lz;
   83|  40.9k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  40.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  40.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  40.9k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  40.9k|  int hilz = int(w >> 63) ^ 1;
   69|  40.9k|  adjusted_mantissa answer;
   70|  40.9k|  answer.mantissa = w << hilz;
   71|  40.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  40.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  40.9k|  return answer;
   74|  40.9k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  17.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  17.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  17.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  17.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  17.3k|  size_t digits = 0;
  413|  17.3k|  bigint bigmant;
  414|  17.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  17.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  17.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 439, False: 16.9k]
  ------------------
  418|    439|    return positive_digit_comp<T>(bigmant, exponent);
  419|  16.9k|  } else {
  420|  16.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  16.9k|  }
  422|  17.3k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  43.8k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  43.8k|  uint64_t mantissa = num.mantissa;
   30|  43.8k|  int32_t exponent = int32_t(num.exponent);
   31|   219k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 175k, False: 43.8k]
  ------------------
   32|   175k|    mantissa /= 10000;
   33|   175k|    exponent += 4;
   34|   175k|  }
   35|  87.6k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 43.8k, False: 43.8k]
  ------------------
   36|  43.8k|    mantissa /= 100;
   37|  43.8k|    exponent += 2;
   38|  43.8k|  }
   39|  43.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 43.8k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  43.8k|  return exponent;
   44|  43.8k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  43.8k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  43.8k|  size_t counter = 0;
  245|  43.8k|  digits = 0;
  246|  43.8k|  limb value = 0;
  247|  43.8k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  43.8k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  43.8k|  UC const * p = num.integer.ptr;
  255|  43.8k|  UC const * pend = p + num.integer.len();
  256|  43.8k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  97.4k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 53.8k, False: 43.5k]
  ------------------
  259|   102k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 62.7k, False: 39.5k]
  |  Branch (259:45): [True: 48.6k, False: 14.0k]
  |  Branch (259:70): [True: 48.4k, False: 225]
  ------------------
  260|  48.4k|      parse_eight_digits(p, value, counter, digits);
  261|  48.4k|    }
  262|   202k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 185k, False: 17.7k]
  |  Branch (262:30): [True: 149k, False: 35.9k]
  |  Branch (262:43): [True: 149k, False: 225]
  ------------------
  263|   149k|      parse_one_digit(p, value, counter, digits);
  264|   149k|    }
  265|  53.8k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 225, False: 53.6k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    225|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    225|      bool truncated = is_truncated(p, pend);
  269|    225|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 209, False: 16]
  ------------------
  270|    209|        truncated |= is_truncated(num.fraction);
  271|    209|      }
  272|    225|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 119, False: 106]
  ------------------
  273|    119|        round_up_bigint(result, digits);
  274|    119|      }
  275|    225|      return;
  276|  53.6k|    } else {
  277|  53.6k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  53.6k|      counter = 0;
  279|  53.6k|      value = 0;
  280|  53.6k|    }
  281|  53.8k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  43.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 35.9k, False: 7.66k]
  ------------------
  285|  35.9k|    p = num.fraction.ptr;
  286|  35.9k|    pend = p + num.fraction.len();
  287|  35.9k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 7.67k, False: 28.2k]
  ------------------
  288|  7.67k|      skip_zeros(p, pend);
  289|  7.67k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   135k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 103k, False: 31.9k]
  ------------------
  292|   262k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 218k, False: 43.2k]
  |  Branch (292:47): [True: 159k, False: 58.9k]
  |  Branch (292:72): [True: 158k, False: 1.17k]
  ------------------
  293|   158k|        parse_eight_digits(p, value, counter, digits);
  294|   158k|      }
  295|   427k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 358k, False: 68.7k]
  |  Branch (295:32): [True: 326k, False: 31.9k]
  |  Branch (295:45): [True: 323k, False: 2.69k]
  ------------------
  296|   323k|        parse_one_digit(p, value, counter, digits);
  297|   323k|      }
  298|   103k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.95k, False: 99.3k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.95k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.95k|        bool truncated = is_truncated(p, pend);
  302|  3.95k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.14k, False: 1.80k]
  ------------------
  303|  2.14k|          round_up_bigint(result, digits);
  304|  2.14k|        }
  305|  3.95k|        return;
  306|  99.3k|      } else {
  307|  99.3k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  99.3k|        counter = 0;
  309|  99.3k|        value = 0;
  310|  99.3k|      }
  311|   103k|    }
  312|  35.9k|  }
  313|       |
  314|  39.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 39.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  39.6k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  51.4k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  51.4k|  uint64_t val;
  161|  87.6k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 63.8k, False: 23.7k]
  ------------------
  162|  63.8k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  63.8k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 27.6k, False: 36.1k]
  ------------------
  164|  27.6k|      break;
  165|  27.6k|    }
  166|  36.1k|    first += int_cmp_len<UC>();
  167|  36.1k|  }
  168|   123k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 115k, False: 7.67k]
  ------------------
  169|   115k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 43.8k, False: 71.5k]
  ------------------
  170|  43.8k|      break;
  171|  43.8k|    }
  172|  71.5k|    first++;
  173|  71.5k|  }
  174|  51.4k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   207k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   207k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   207k|  p += 8;
  210|   207k|  counter += 8;
  211|   207k|  count += 8;
  212|   207k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   472k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   472k|  value = value * 10 + limb(*p - UC('0'));
  218|   472k|  p++;
  219|   472k|  counter++;
  220|   472k|  count++;
  221|   472k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   264k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   264k|  big.mul(power);
  226|   264k|  big.add(value);
  227|   264k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  4.38k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  4.38k|  uint64_t val;
  183|  10.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.58k, False: 3.58k]
  ------------------
  184|  6.58k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.58k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 801, False: 5.78k]
  ------------------
  186|    801|      return true;
  187|    801|    }
  188|  5.78k|    first += int_cmp_len<UC>();
  189|  5.78k|  }
  190|  5.69k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.61k, False: 2.07k]
  ------------------
  191|  3.61k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.51k, False: 2.10k]
  ------------------
  192|  1.51k|      return true;
  193|  1.51k|    }
  194|  2.10k|    ++first;
  195|  2.10k|  }
  196|  2.07k|  return false;
  197|  3.58k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    209|bool is_truncated(span<const UC> s) noexcept {
  201|    209|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    209|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  4.38k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  4.38k|  add_native(big, 10, 1);
  234|  4.38k|  count++;
  235|  4.38k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    824|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    824|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    824|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    824|  adjusted_mantissa answer;
  324|    824|  bool truncated;
  325|    824|  answer.mantissa = bigmant.hi64(truncated);
  326|    824|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    824|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    824|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    824|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    824|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    824|    });
  333|    824|  });
  334|       |
  335|    824|  return answer;
  336|    824|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    824|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    824|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    824|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 824]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    824|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    824|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 824]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    824|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    824|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 824]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    824|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    824|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    824|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    824|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    824|    });
  333|    824|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    824|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    824|  const uint64_t mask
  125|    824|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 824]
  ------------------
  126|    824|    ? UINT64_MAX
  127|    824|    : (uint64_t(1) << shift) - 1;
  128|    824|  const uint64_t halfway
  129|    824|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 824]
  ------------------
  130|    824|    ? 0
  131|    824|    : uint64_t(1) << (shift - 1);
  132|    824|  uint64_t truncated_bits = am.mantissa & mask;
  133|    824|  bool is_above = truncated_bits > halfway;
  134|    824|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    824|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 824]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    824|  } else {
  140|    824|    am.mantissa >>= shift;
  141|    824|  }
  142|    824|  am.power2 += shift;
  143|       |
  144|    824|  bool is_odd = (am.mantissa & 1) == 1;
  145|    824|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    824|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    824|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    824|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 77, False: 747]
  |  Branch (331:27): [True: 617, False: 130]
  |  Branch (331:41): [True: 59, False: 558]
  |  Branch (331:56): [True: 76, False: 612]
  |  Branch (331:66): [True: 25, False: 51]
  ------------------
  332|    824|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  30.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  30.7k|  bigint& real_digits = bigmant;
  347|  30.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  30.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  30.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  30.7k|  T b;
  354|  30.7k|  to_float(false, am_b, b);
  355|  30.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  30.7k|  bigint theor_digits(theor.mantissa);
  357|  30.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  30.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  30.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  30.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 30.7k, False: 0]
  ------------------
  363|  30.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  30.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  30.7k|  }
  365|  30.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 30.7k, False: 0]
  ------------------
  366|  30.7k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  30.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  30.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  30.7k|  int ord = real_digits.compare(theor_digits);
  373|  30.7k|  adjusted_mantissa answer = am;
  374|  30.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  379|  30.7k|        return true;
  380|  30.7k|      } else if (ord < 0) {
  381|  30.7k|        return false;
  382|  30.7k|      } else {
  383|  30.7k|        return is_odd;
  384|  30.7k|      }
  385|  30.7k|    });
  386|  30.7k|  });
  387|       |
  388|  30.7k|  return answer;
  389|  30.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  30.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  30.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  30.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 30.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  30.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  30.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 30.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  30.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  30.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 30.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  30.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  30.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  58.2k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  58.2k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 58.2k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  58.2k|  } else {
  153|  58.2k|    am.mantissa >>= shift;
  154|  58.2k|  }
  155|  58.2k|  am.power2 += shift;
  156|  58.2k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  30.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  30.7k|  adjusted_mantissa am = to_extended(value);
   84|  30.7k|  am.mantissa <<= 1;
   85|  30.7k|  am.mantissa += 1;
   86|  30.7k|  am.power2 -= 1;
   87|  30.7k|  return am;
   88|  30.7k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  30.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  30.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  30.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  30.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  30.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  30.7k|  adjusted_mantissa am;
   56|  30.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  30.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  30.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  30.7k|#endif
   63|  30.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 30.7k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  30.7k|  } else {
   68|       |    // normal
   69|  30.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  30.7k|    am.power2 -= bias;
   71|  30.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  30.7k|  }
   73|       |
   74|  30.7k|  return am;
   75|  30.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  30.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  30.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  30.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 30.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  30.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  30.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 30.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  30.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  30.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 30.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  30.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  30.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  379|  30.7k|        return true;
  380|  30.7k|      } else if (ord < 0) {
  381|  30.7k|        return false;
  382|  30.7k|      } else {
  383|  30.7k|        return is_odd;
  384|  30.7k|      }
  385|  30.7k|    });
  386|  30.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  30.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  30.7k|  const uint64_t mask
  125|  30.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 30.7k]
  ------------------
  126|  30.7k|    ? UINT64_MAX
  127|  30.7k|    : (uint64_t(1) << shift) - 1;
  128|  30.7k|  const uint64_t halfway
  129|  30.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 30.7k]
  ------------------
  130|  30.7k|    ? 0
  131|  30.7k|    : uint64_t(1) << (shift - 1);
  132|  30.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  30.7k|  bool is_above = truncated_bits > halfway;
  134|  30.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  30.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 30.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  30.7k|  } else {
  140|  30.7k|    am.mantissa >>= shift;
  141|  30.7k|  }
  142|  30.7k|  am.power2 += shift;
  143|       |
  144|  30.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  30.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  30.7k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 513, False: 30.2k]
  ------------------
  379|    513|        return true;
  380|  30.2k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 22.3k, False: 7.93k]
  ------------------
  381|  22.3k|        return false;
  382|  22.3k|      } else {
  383|  7.93k|        return is_odd;
  384|  7.93k|      }
  385|  30.7k|    });
_ZN10fast_float10digit_compIfDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.2k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.2k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.2k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.2k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.2k|  size_t digits = 0;
  413|  14.2k|  bigint bigmant;
  414|  14.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 385, False: 13.8k]
  ------------------
  418|    385|    return positive_digit_comp<T>(bigmant, exponent);
  419|  13.8k|  } else {
  420|  13.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  13.8k|  }
  422|  14.2k|}
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|  28.7k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  28.7k|  uint64_t mantissa = num.mantissa;
   30|  28.7k|  int32_t exponent = int32_t(num.exponent);
   31|   143k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 114k, False: 28.7k]
  ------------------
   32|   114k|    mantissa /= 10000;
   33|   114k|    exponent += 4;
   34|   114k|  }
   35|  57.4k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 28.7k, False: 28.7k]
  ------------------
   36|  28.7k|    mantissa /= 100;
   37|  28.7k|    exponent += 2;
   38|  28.7k|  }
   39|  28.7k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 28.7k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  28.7k|  return exponent;
   44|  28.7k|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  28.7k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  28.7k|  size_t counter = 0;
  245|  28.7k|  digits = 0;
  246|  28.7k|  limb value = 0;
  247|  28.7k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  28.7k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  28.7k|  UC const * p = num.integer.ptr;
  255|  28.7k|  UC const * pend = p + num.integer.len();
  256|  28.7k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  68.8k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 40.3k, False: 28.5k]
  ------------------
  259|  81.9k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 55.1k, False: 26.7k]
  |  Branch (259:45): [True: 41.8k, False: 13.3k]
  |  Branch (259:70): [True: 41.6k, False: 225]
  ------------------
  260|  41.6k|      parse_eight_digits(p, value, counter, digits);
  261|  41.6k|    }
  262|   160k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 144k, False: 15.8k]
  |  Branch (262:30): [True: 120k, False: 24.2k]
  |  Branch (262:43): [True: 119k, False: 225]
  ------------------
  263|   119k|      parse_one_digit(p, value, counter, digits);
  264|   119k|    }
  265|  40.3k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 225, False: 40.1k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    225|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    225|      bool truncated = is_truncated(p, pend);
  269|    225|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 209, False: 16]
  ------------------
  270|    209|        truncated |= is_truncated(num.fraction);
  271|    209|      }
  272|    225|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 119, False: 106]
  ------------------
  273|    119|        round_up_bigint(result, digits);
  274|    119|      }
  275|    225|      return;
  276|  40.1k|    } else {
  277|  40.1k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  40.1k|      counter = 0;
  279|  40.1k|      value = 0;
  280|  40.1k|    }
  281|  40.3k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  28.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 22.7k, False: 5.80k]
  ------------------
  285|  22.7k|    p = num.fraction.ptr;
  286|  22.7k|    pend = p + num.fraction.len();
  287|  22.7k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 4.23k, False: 18.4k]
  ------------------
  288|  4.23k|      skip_zeros(p, pend);
  289|  4.23k|    }
  290|       |    // process all digits, in increments of step per loop
  291|  81.2k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 62.1k, False: 19.0k]
  ------------------
  292|   158k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 132k, False: 25.6k]
  |  Branch (292:47): [True: 97.5k, False: 35.4k]
  |  Branch (292:72): [True: 96.4k, False: 1.08k]
  ------------------
  293|  96.4k|        parse_eight_digits(p, value, counter, digits);
  294|  96.4k|      }
  295|   254k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 214k, False: 40.5k]
  |  Branch (295:32): [True: 195k, False: 19.1k]
  |  Branch (295:45): [True: 192k, False: 2.53k]
  ------------------
  296|   192k|        parse_one_digit(p, value, counter, digits);
  297|   192k|      }
  298|  62.1k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.67k, False: 58.5k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.67k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.67k|        bool truncated = is_truncated(p, pend);
  302|  3.67k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.00k, False: 1.66k]
  ------------------
  303|  2.00k|          round_up_bigint(result, digits);
  304|  2.00k|        }
  305|  3.67k|        return;
  306|  58.5k|      } else {
  307|  58.5k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  58.5k|        counter = 0;
  309|  58.5k|        value = 0;
  310|  58.5k|      }
  311|  62.1k|    }
  312|  22.7k|  }
  313|       |
  314|  24.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 24.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  24.8k|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|  32.9k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  32.9k|  uint64_t val;
  161|   133k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 126k, False: 7.31k]
  ------------------
  162|   126k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   126k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 25.6k, False: 100k]
  ------------------
  164|  25.6k|      break;
  165|  25.6k|    }
  166|   100k|    first += int_cmp_len<UC>();
  167|   100k|  }
  168|  41.9k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 37.7k, False: 4.23k]
  ------------------
  169|  37.7k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 28.7k, False: 8.99k]
  ------------------
  170|  28.7k|      break;
  171|  28.7k|    }
  172|  8.99k|    first++;
  173|  8.99k|  }
  174|  32.9k|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|   138k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   138k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   138k|  p += 8;
  210|   138k|  counter += 8;
  211|   138k|  count += 8;
  212|   138k|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|   312k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   312k|  value = value * 10 + limb(*p - UC('0'));
  218|   312k|  p++;
  219|   312k|  counter++;
  220|   312k|  count++;
  221|   312k|}
_ZN10fast_float12is_truncatedIDiEEbPKT_S3_:
  180|  4.10k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  4.10k|  uint64_t val;
  183|  26.5k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 24.1k, False: 2.43k]
  ------------------
  184|  24.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  24.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.67k, False: 22.4k]
  ------------------
  186|  1.67k|      return true;
  187|  1.67k|    }
  188|  22.4k|    first += int_cmp_len<UC>();
  189|  22.4k|  }
  190|  2.75k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 821, False: 1.93k]
  ------------------
  191|    821|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 497, False: 324]
  ------------------
  192|    497|      return true;
  193|    497|    }
  194|    324|    ++first;
  195|    324|  }
  196|  1.93k|  return false;
  197|  2.43k|}
_ZN10fast_float12is_truncatedIDiEEbNS_4spanIKT_EE:
  200|    209|bool is_truncated(span<const UC> s) noexcept {
  201|    209|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    209|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  26.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  26.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  26.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  26.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  26.4k|  size_t digits = 0;
  413|  26.4k|  bigint bigmant;
  414|  26.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  26.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  26.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 7.62k, False: 18.8k]
  ------------------
  418|  7.62k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  18.8k|  } else {
  420|  18.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  18.8k|  }
  422|  26.4k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  13.4k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  13.4k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  13.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  13.4k|  adjusted_mantissa answer;
  324|  13.4k|  bool truncated;
  325|  13.4k|  answer.mantissa = bigmant.hi64(truncated);
  326|  13.4k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  13.4k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  13.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.4k|    });
  333|  13.4k|  });
  334|       |
  335|  13.4k|  return answer;
  336|  13.4k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  13.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 825, False: 12.6k]
  ------------------
  109|    825|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    825|    am.power2++;
  111|    825|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.4k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  13.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.4k|    });
  333|  13.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  13.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  13.4k|  const uint64_t mask
  125|  13.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 13.4k]
  ------------------
  126|  13.4k|    ? UINT64_MAX
  127|  13.4k|    : (uint64_t(1) << shift) - 1;
  128|  13.4k|  const uint64_t halfway
  129|  13.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 13.4k]
  ------------------
  130|  13.4k|    ? 0
  131|  13.4k|    : uint64_t(1) << (shift - 1);
  132|  13.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  13.4k|  bool is_above = truncated_bits > halfway;
  134|  13.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  13.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 13.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  13.4k|  } else {
  140|  13.4k|    am.mantissa >>= shift;
  141|  13.4k|  }
  142|  13.4k|  am.power2 += shift;
  143|       |
  144|  13.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  13.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  13.4k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 951, False: 12.4k]
  |  Branch (331:27): [True: 11.8k, False: 664]
  |  Branch (331:41): [True: 4.24k, False: 7.57k]
  |  Branch (331:56): [True: 295, False: 7.94k]
  |  Branch (331:66): [True: 71, False: 224]
  ------------------
  332|  13.4k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  27.4k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  27.4k|  bigint& real_digits = bigmant;
  347|  27.4k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  27.4k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  27.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  27.4k|  T b;
  354|  27.4k|  to_float(false, am_b, b);
  355|  27.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  27.4k|  bigint theor_digits(theor.mantissa);
  357|  27.4k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  27.4k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  27.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  27.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 27.4k, False: 0]
  ------------------
  363|  27.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  27.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  27.4k|  }
  365|  27.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 3.35k, False: 24.1k]
  ------------------
  366|  3.35k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  3.35k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  24.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 24.0k, False: 78]
  ------------------
  368|  24.0k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  24.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  24.0k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  27.4k|  int ord = real_digits.compare(theor_digits);
  373|  27.4k|  adjusted_mantissa answer = am;
  374|  27.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  27.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.4k|      (void)_;  // not needed, since we've done our comparison
  377|  27.4k|      (void)__; // not needed, since we've done our comparison
  378|  27.4k|      if (ord > 0) {
  379|  27.4k|        return true;
  380|  27.4k|      } else if (ord < 0) {
  381|  27.4k|        return false;
  382|  27.4k|      } else {
  383|  27.4k|        return is_odd;
  384|  27.4k|      }
  385|  27.4k|    });
  386|  27.4k|  });
  387|       |
  388|  27.4k|  return answer;
  389|  27.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  27.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  27.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  27.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 111, False: 27.3k]
  ------------------
   96|       |    // have a denormal float
   97|    111|    int32_t shift = -am.power2 + 1;
   98|    111|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    111|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 111, False: 0]
  ------------------
  101|    111|    return;
  102|    111|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  27.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  27.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 27.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  27.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  27.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 27.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  27.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  27.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  27.4k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  27.4k|  adjusted_mantissa am = to_extended(value);
   84|  27.4k|  am.mantissa <<= 1;
   85|  27.4k|  am.mantissa += 1;
   86|  27.4k|  am.power2 -= 1;
   87|  27.4k|  return am;
   88|  27.4k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  27.4k|adjusted_mantissa to_extended(T value) noexcept {
   50|  27.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  27.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  27.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  27.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  27.4k|  adjusted_mantissa am;
   56|  27.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  27.4k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  27.4k|  ::memcpy(&bits, &value, sizeof(T));
   62|  27.4k|#endif
   63|  27.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 111, False: 27.3k]
  ------------------
   64|       |    // denormal
   65|    111|    am.power2 = 1 - bias;
   66|    111|    am.mantissa = bits & mantissa_mask;
   67|  27.3k|  } else {
   68|       |    // normal
   69|  27.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  27.3k|    am.power2 -= bias;
   71|  27.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  27.3k|  }
   73|       |
   74|  27.4k|  return am;
   75|  27.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  27.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  27.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  27.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 111, False: 27.3k]
  ------------------
   96|       |    // have a denormal float
   97|    111|    int32_t shift = -am.power2 + 1;
   98|    111|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    111|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 111, False: 0]
  ------------------
  101|    111|    return;
  102|    111|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  27.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  27.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 72, False: 27.3k]
  ------------------
  109|     72|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     72|    am.power2++;
  111|     72|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  27.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  27.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 27.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  27.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  27.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  27.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.4k|      (void)_;  // not needed, since we've done our comparison
  377|  27.4k|      (void)__; // not needed, since we've done our comparison
  378|  27.4k|      if (ord > 0) {
  379|  27.4k|        return true;
  380|  27.4k|      } else if (ord < 0) {
  381|  27.4k|        return false;
  382|  27.4k|      } else {
  383|  27.4k|        return is_odd;
  384|  27.4k|      }
  385|  27.4k|    });
  386|  27.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  27.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  27.4k|  const uint64_t mask
  125|  27.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 27.4k]
  ------------------
  126|  27.4k|    ? UINT64_MAX
  127|  27.4k|    : (uint64_t(1) << shift) - 1;
  128|  27.4k|  const uint64_t halfway
  129|  27.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 27.4k]
  ------------------
  130|  27.4k|    ? 0
  131|  27.4k|    : uint64_t(1) << (shift - 1);
  132|  27.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  27.4k|  bool is_above = truncated_bits > halfway;
  134|  27.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  27.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 27.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  27.4k|  } else {
  140|  27.4k|    am.mantissa >>= shift;
  141|  27.4k|  }
  142|  27.4k|  am.power2 += shift;
  143|       |
  144|  27.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  27.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  27.4k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  27.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.4k|      (void)_;  // not needed, since we've done our comparison
  377|  27.4k|      (void)__; // not needed, since we've done our comparison
  378|  27.4k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 7.60k, False: 19.8k]
  ------------------
  379|  7.60k|        return true;
  380|  19.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 19.3k, False: 545]
  ------------------
  381|  19.3k|        return false;
  382|  19.3k|      } else {
  383|    545|        return is_odd;
  384|    545|      }
  385|  27.4k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.4k|  size_t digits = 0;
  413|  14.4k|  bigint bigmant;
  414|  14.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 5.81k, False: 8.66k]
  ------------------
  418|  5.81k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  8.66k|  } else {
  420|  8.66k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  8.66k|  }
  422|  14.4k|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.42M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.37M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   303k|  constexpr size_t len() const noexcept {
  238|   303k|    return length;
  239|   303k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.11M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.11M|  return -10;
  469|  1.11M|#endif
  470|  1.11M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.06M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.06M|  return 10;
  517|  1.06M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   916k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   916k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   916k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.62M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.62M|  return 23;
  477|  2.62M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   849k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   849k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   849k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   878k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   370k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   370k|  return -65;
  568|   370k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   368k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   368k|  return 38;
  559|   368k|}
_ZN10fast_float14leading_zeroesEm:
  268|   802k|int leading_zeroes(uint64_t input_num) {
  269|   802k|  assert(input_num > 0);
  270|   802k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   802k|  return __builtin_clzll(input_num);
  285|   802k|#endif
  286|   802k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   913k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   913k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   913k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   913k|  answer.low = uint64_t(r);
  337|   913k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   913k|  return answer;
  342|   913k|}
_ZN10fast_float8value128C2Ev:
  251|   913k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   423k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   423k|  return -127;
  500|   423k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   146k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   146k|  return -17;
  493|   146k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   145k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   145k|  return 10;
  485|   145k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   241k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   241k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 72.5k, False: 168k]
  |  Branch (352:38): [True: 0, False: 168k]
  ------------------
  353|   241k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  31.6k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  31.6k|  return 114;
  575|  31.6k|}
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   139k|{
  650|   139k|    return sizeof(uint64_t) / sizeof(UC);
  651|   139k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  70.4k|{
  644|  70.4k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  70.4k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  70.4k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   109k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   422k|  constexpr size_t len() const noexcept {
  238|   422k|    return length;
  239|   422k|  }
_ZNK10fast_float4spanImEixEm:
  241|   241k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   241k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   241k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   241k|    return ptr[index];
  244|   241k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   296k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   296k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   296k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   296k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   296k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   296k|  ::memcpy(&value, &word, sizeof(T));
  615|   296k|#endif
  616|   296k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   296k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   696k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   696k|  return 0xFF;
  507|   696k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.21M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  2.22M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  1.23M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|   212k|  constexpr size_t len() const noexcept {
  238|   212k|    return length;
  239|   212k|  }
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|   282k|{
  650|   282k|    return sizeof(uint64_t) / sizeof(UC);
  651|   282k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|   150k|{
  644|   150k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   150k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   150k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  1.11M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.20M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.20M|  return -22;
  461|  1.20M|#endif
  462|  1.20M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.17M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.17M|  return 22;
  514|  1.17M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   997k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   997k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   997k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.61M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.61M|  return 52;
  474|  2.61M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   981k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   981k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   981k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   345k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   345k|  return -342;
  564|   345k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   344k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   344k|  return 308;
  555|   344k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   422k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   422k|  return -1023;
  497|   422k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   109k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   109k|  return -4;
  489|   109k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  72.1k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  72.1k|  return 23;
  481|  72.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  40.9k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  40.9k|  return 769;
  572|  40.9k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   253k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   253k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   253k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   253k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   253k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   253k|  ::memcpy(&value, &word, sizeof(T));
  615|   253k|#endif
  616|   253k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   253k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   625k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   625k|  return 0x7FF;
  504|   625k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   580k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   580k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   580k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   580k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   580k|    return from_chars_advanced(first, last, value, options);
  143|   580k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   580k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   580k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   580k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   580k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   580k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 580k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   580k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   580k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 580k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   580k|  answer.ec = std::errc(); // be optimistic
  221|   580k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   580k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 552k, False: 28.6k]
  |  Branch (227:69): [True: 513k, False: 38.2k]
  |  Branch (227:131): [True: 469k, False: 44.1k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   469k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 469k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   469k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 434k, False: 35.3k]
  ------------------
  239|   434k|        value = T(pns.mantissa);
  240|   434k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 4.90k, False: 429k]
  ------------------
  241|   429k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   434k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 434k]
  ------------------
  243|   434k|        return answer;
  244|   434k|      }
  245|   469k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   469k|  }
  262|   146k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   146k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 65.5k, False: 80.9k]
  |  Branch (263:29): [True: 65.5k, False: 0]
  ------------------
  264|  65.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 17.3k, False: 48.1k]
  ------------------
  265|  17.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  17.3k|    }
  267|  65.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   146k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 17.3k, False: 129k]
  ------------------
  271|   146k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   146k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 141k, False: 5.38k]
  |  Branch (273:29): [True: 12.4k, False: 128k]
  |  Branch (273:49): [True: 763, False: 11.6k]
  |  Branch (273:68): [True: 4.18k, False: 141k]
  ------------------
  274|  4.94k|    answer.ec = std::errc::result_out_of_range;
  275|  4.94k|  }
  276|   146k|  return answer;
  277|   580k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.91M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.91M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.91M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.91M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.91M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.91M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   534k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   534k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   534k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   534k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   534k|    return from_chars_advanced(first, last, value, options);
  143|   534k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   534k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   534k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   534k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   534k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   534k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 534k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   534k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   534k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 534k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   534k|  answer.ec = std::errc(); // be optimistic
  221|   534k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   534k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 515k, False: 18.8k]
  |  Branch (227:69): [True: 483k, False: 32.1k]
  |  Branch (227:131): [True: 446k, False: 37.3k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   446k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 446k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   446k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 415k, False: 30.8k]
  ------------------
  239|   415k|        value = T(pns.mantissa);
  240|   415k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 4.28k, False: 411k]
  ------------------
  241|   411k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   415k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 415k]
  ------------------
  243|   415k|        return answer;
  244|   415k|      }
  245|   446k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   446k|  }
  262|   119k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   119k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 49.5k, False: 69.7k]
  |  Branch (263:29): [True: 49.5k, False: 0]
  ------------------
  264|  49.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 14.2k, False: 35.2k]
  ------------------
  265|  14.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  14.2k|    }
  267|  49.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   119k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 14.2k, False: 104k]
  ------------------
  271|   119k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   119k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 114k, False: 4.68k]
  |  Branch (273:29): [True: 11.4k, False: 103k]
  |  Branch (273:49): [True: 697, False: 10.8k]
  |  Branch (273:68): [True: 3.35k, False: 115k]
  ------------------
  274|  4.05k|    answer.ec = std::errc::result_out_of_range;
  275|  4.05k|  }
  276|   119k|  return answer;
  277|   534k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   632k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   632k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   632k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   632k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   632k|    return from_chars_advanced(first, last, value, options);
  143|   632k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   632k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   632k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   632k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   632k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   632k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 632k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   632k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   632k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 632k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   632k|  answer.ec = std::errc(); // be optimistic
  221|   632k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   632k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 615k, False: 16.7k]
  |  Branch (227:69): [True: 575k, False: 40.0k]
  |  Branch (227:131): [True: 514k, False: 60.9k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   514k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 514k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   514k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 505k, False: 8.48k]
  ------------------
  239|   505k|        value = T(pns.mantissa);
  240|   505k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 21.0k, False: 484k]
  ------------------
  241|   484k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   505k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 505k]
  ------------------
  243|   505k|        return answer;
  244|   505k|      }
  245|   514k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   514k|  }
  262|   126k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   126k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 72.4k, False: 53.6k]
  |  Branch (263:29): [True: 72.4k, False: 0]
  ------------------
  264|  72.4k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 26.4k, False: 46.0k]
  ------------------
  265|  26.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  26.4k|    }
  267|  72.4k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   126k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 26.4k, False: 99.7k]
  ------------------
  271|   126k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   126k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 122k, False: 4.06k]
  |  Branch (273:29): [True: 8.16k, False: 113k]
  |  Branch (273:49): [True: 216, False: 7.94k]
  |  Branch (273:68): [True: 2.10k, False: 123k]
  ------------------
  274|  2.31k|    answer.ec = std::errc::result_out_of_range;
  275|  2.31k|  }
  276|   126k|  return answer;
  277|   632k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   575k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   575k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   575k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   575k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   575k|    return from_chars_advanced(first, last, value, options);
  143|   575k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   575k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   575k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   575k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   575k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   575k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 575k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   575k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   575k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 575k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   575k|  answer.ec = std::errc(); // be optimistic
  221|   575k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   575k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 562k, False: 12.8k]
  |  Branch (227:69): [True: 528k, False: 33.6k]
  |  Branch (227:131): [True: 482k, False: 46.1k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   482k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 482k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   482k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 475k, False: 7.35k]
  ------------------
  239|   475k|        value = T(pns.mantissa);
  240|   475k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18.1k, False: 457k]
  ------------------
  241|   457k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   475k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 475k]
  ------------------
  243|   475k|        return answer;
  244|   475k|      }
  245|   482k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   482k|  }
  262|   100k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   100k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 53.7k, False: 46.3k]
  |  Branch (263:29): [True: 53.7k, False: 0]
  ------------------
  264|  53.7k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 14.4k, False: 39.2k]
  ------------------
  265|  14.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  14.4k|    }
  267|  53.7k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   100k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 14.4k, False: 85.5k]
  ------------------
  271|   100k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   100k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 96.8k, False: 3.19k]
  |  Branch (273:29): [True: 7.86k, False: 88.9k]
  |  Branch (273:49): [True: 200, False: 7.66k]
  |  Branch (273:68): [True: 1.85k, False: 97.9k]
  ------------------
  274|  2.05k|    answer.ec = std::errc::result_out_of_range;
  275|  2.05k|  }
  276|   100k|  return answer;
  277|   575k|}

_ZN7simdutf6resultC2ENS_10error_codeEm:
   29|   177k|  simdutf_really_inline result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  1.49M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   180k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   195k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   195k|  return idx < lenminusstep;
   70|   195k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  15.1k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  15.1k|  return &buf[idx];
   75|  15.1k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   195k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   195k|  idx += STEP_SIZE;
   88|   195k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   180k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   180k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 180k]
  ------------------
   80|   180k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   180k|  std::memcpy(dst, buf + idx, len - idx);
   82|   180k|  return len - idx;
   83|   180k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   179k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   179k|    size_t pos = 0;
   12|   179k|    size_t count = 0;
   13|   191k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 11.8k, False: 179k]
  ------------------
   14|  11.8k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  11.8k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  11.8k|      count += count_ones(utf8_continuation_mask);
   17|  11.8k|    }
   18|   179k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   179k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  1.13M|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  1.04M|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  1.04M|      size_t pos = 0;
  131|  1.04M|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|  1.04M|      size_t leading_byte = 0;
  139|  1.04M|      size_t margin = size;
  140|  2.38M|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 1.34M, False: 1.04M]
  |  Branch (140:27): [True: 1.34M, False: 0]
  ------------------
  141|  1.34M|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  1.34M|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  1.04M|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  1.04M|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 1.04M]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  1.04M|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 1.04M]
  ------------------
  195|  1.04M|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 1.04M, False: 0]
  ------------------
  196|  1.04M|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  1.04M|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 113k, False: 931k]
  ------------------
  198|   931k|        utf32_output += howmany;
  199|   931k|      }
  200|   931k|      return utf32_output - start;
  201|  1.04M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  1.13M|    simdutf_really_inline bool errors() const {
  291|  1.13M|      return this->error.any_bits_set_anywhere();
  292|  1.13M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  88.8k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  88.8k|      size_t pos = 0;
  205|  88.8k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  211|       |      // to give us a good margin.
  212|  88.8k|      size_t leading_byte = 0;
  213|  88.8k|      size_t margin = size;
  214|   177k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (214:13): [True: 88.8k, False: 88.8k]
  |  Branch (214:27): [True: 88.8k, False: 0]
  ------------------
  215|  88.8k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|  88.8k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  88.8k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  88.8k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 88.8k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|  88.8k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 88.8k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  88.8k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 88.8k, False: 0]
  ------------------
  279|  88.8k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  88.8k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 88.8k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|  88.8k|        } else {    // In case of success, we want the number of word written
  284|  88.8k|          utf32_output += res.count;
  285|  88.8k|        }
  286|  88.8k|      }
  287|  88.8k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  88.8k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  2.13k|    char32_t* utf32_output) noexcept {
   13|  2.13k|  size_t pos = 0;
   14|  2.13k|  char32_t* start{utf32_output};
   15|  2.13k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  13.7k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 11.6k, False: 2.13k]
  ------------------
   17|  11.6k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  11.6k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 10.4k, False: 1.23k]
  ------------------
   19|  10.4k|      in.store_ascii_as_utf32(utf32_output);
   20|  10.4k|      utf32_output += 64;
   21|  10.4k|      pos += 64;
   22|  10.4k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.23k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.23k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.23k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.23k|    size_t max_starting_point = (pos + 64) - 12;
   28|  9.38k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 8.15k, False: 1.23k]
  ------------------
   29|  8.15k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  8.15k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  8.15k|      pos += consumed;
   32|  8.15k|      utf8_end_of_code_point_mask >>= consumed;
   33|  8.15k|      }
   34|  1.23k|    }
   35|  11.6k|  }
   36|  2.13k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  2.13k|  return utf32_output - start;
   38|  2.13k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   195k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   195k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   195k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 193k, False: 2.07k]
  |  |  ------------------
  ------------------
  154|   193k|        this->error |= this->prev_incomplete;
  155|   193k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  2.07k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  2.07k|            "We support either two or four chunks per 64-byte block.");
  159|  2.07k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  2.07k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  2.07k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  2.07k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  2.07k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  2.07k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  2.07k|      }
  172|   195k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  4.14k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  4.14k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  4.14k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  4.14k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  4.14k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  4.14k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  4.14k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  4.14k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  4.14k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  4.14k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  4.14k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  4.14k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  4.14k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  4.14k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  4.14k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  4.14k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  4.14k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  4.14k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  4.14k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  4.14k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  4.14k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  4.14k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  4.14k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  4.14k|    );
   51|  4.14k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  4.14k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  4.14k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  4.14k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  4.14k|      CARRY,
   59|  4.14k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  4.14k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  4.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  4.14k|    );
   80|  4.14k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  4.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  4.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  4.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  4.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  4.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  4.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  4.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  4.14k|    );
   96|  4.14k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  4.14k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  4.14k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  4.14k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  4.14k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  4.14k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  4.14k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  4.14k|    return must23_80 ^ sc;
  105|  4.14k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  2.07k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  2.07k|    static const uint8_t max_array[32] = {
  115|  2.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  2.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  2.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  2.07k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  2.07k|    };
  120|  2.07k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  2.07k|    return input.gt_bits(max_value);
  122|  2.07k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   180k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   180k|      this->error |= this->prev_incomplete;
  150|   180k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   180k|    simdutf_really_inline bool errors() const {
  176|   180k|      return this->error.any_bits_set_anywhere();
  177|   180k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   180k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   180k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   180k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   180k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   180k|    checker c{};
   12|   180k|    buf_block_reader<64> reader(input, length);
   13|   195k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 15.1k, False: 180k]
  ------------------
   14|  15.1k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  15.1k|      c.check_next_input(in);
   16|  15.1k|      reader.advance();
   17|  15.1k|    }
   18|   180k|    uint8_t block[64]{};
   19|   180k|    reader.get_remainder(block);
   20|   180k|    simd::simd8x64<uint8_t> in(block);
   21|   180k|    c.check_next_input(in);
   22|   180k|    reader.advance();
   23|   180k|    c.check_eof();
   24|   180k|    return !c.errors();
   25|   180k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  8.15k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  8.15k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  8.15k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  8.15k|      utf8_end_of_code_point_mask & 0xfff;
   24|  8.15k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.53k, False: 6.62k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.53k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.53k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.53k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.53k|    return 16; // We consumed 16 bytes.
   30|  1.53k|  }
   31|  6.62k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 6.55k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  6.55k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 73, False: 6.48k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     73|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     73|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     73|    const __m128i ascii =
   49|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     73|    const __m128i middlebyte =
   51|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     73|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     73|    const __m128i highbyte =
   54|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     73|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     73|    const __m128i composed =
   57|     73|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     73|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     73|    utf32_output += 4;
   60|     73|    return 12;
   61|     73|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  6.48k|  const uint8_t idx =
   65|  6.48k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  6.48k|  const uint8_t consumed =
   67|  6.48k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  6.48k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 4.97k, False: 1.51k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  4.97k|    const __m128i sh =
   75|  4.97k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  4.97k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  4.97k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  4.97k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  4.97k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  4.97k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  4.97k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  4.97k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 580, False: 931]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    580|    const __m128i sh =
   86|    580|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    580|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    580|    const __m128i ascii =
   89|    580|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    580|    const __m128i middlebyte =
   91|    580|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    580|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    580|    const __m128i highbyte =
   94|    580|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    580|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    580|    const __m128i composed =
   97|    580|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    580|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    580|    utf32_output += 4;
  100|    931|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 931, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    931|    const __m128i sh =
  103|    931|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    931|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    931|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    931|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    931|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    931|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    931|    const __m128i correct =
  111|    931|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    931|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    931|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    931|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    931|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    931|    const __m128i composed =
  117|    931|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    931|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    931|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    931|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    931|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  6.48k|  return consumed;
  125|  6.55k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|   180k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|   180k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|   180k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|  1.04M|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|  1.04M|  utf8_to_utf32::validating_transcoder converter;
  277|  1.04M|  return converter.convert(buf, len, utf32_output);
  278|  1.04M|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  280|  88.8k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  281|  88.8k|  utf8_to_utf32::validating_transcoder converter;
  282|  88.8k|  return converter.convert_with_errors(buf, len, utf32_output);
  283|  88.8k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  2.13k|    char32_t* utf32_output) const noexcept {
  287|  2.13k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  2.13k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|   179k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|   179k|  return utf8::count_code_points(input, length);
  779|   179k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   195k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   195k|  return input.reduce_or().is_ascii();
   25|   195k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  4.14k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  4.14k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  4.14k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  4.14k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  4.14k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  1.49M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  1.49M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  1.49M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  1.49M|    return active_implementation;
  913|  1.49M|#endif
  914|  1.49M|}
_ZN7simdutf26get_default_implementationEv:
  922|  1.49M|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  1.49M|  return get_active_implementation();
  924|  1.49M|}
_ZN7simdutf13validate_utf8EPKcm:
  928|   180k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|   180k|  return get_default_implementation()->validate_utf8(buf, len);
  930|   180k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|  1.04M|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|  1.04M|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|  1.04M|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  990|  88.8k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  991|  88.8k|  return get_default_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  992|  88.8k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  2.13k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  2.13k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  2.13k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|   179k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|   179k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|   179k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   179k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   179k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   179k|    size_t counter{0};
  171|   411k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 232k, False: 179k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   232k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 231k, False: 670]
  ------------------
  174|   232k|    }
  175|   179k|    return counter;
  176|   179k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  1.04M|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.04M| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.04M|  size_t pos = 0;
   12|  1.04M|  char32_t* start{utf32_output};
   13|  1.97M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 1.04M, False: 931k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  1.04M|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 1.04M]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  1.04M|    uint8_t leading_byte = data[pos]; // leading byte
   31|  1.04M|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 799k, False: 245k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   799k|      *utf32_output++ = char32_t(leading_byte);
   34|   799k|      pos++;
   35|   799k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 211k, False: 34.3k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|   211k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 211k]
  ------------------
   38|   211k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 82.9k, False: 128k]
  ------------------
   39|       |      // range check
   40|   128k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|   128k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 1.63k, False: 126k]
  |  Branch (41:32): [True: 0, False: 126k]
  ------------------
   42|   126k|      *utf32_output++ = char32_t(code_point);
   43|   126k|      pos += 2;
   44|   126k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 17.8k, False: 16.4k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  17.8k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 17.8k]
  ------------------
   47|       |
   48|  17.8k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 10.6k, False: 7.23k]
  ------------------
   49|  7.23k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.01k, False: 6.22k]
  ------------------
   50|       |      // range check
   51|  6.22k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  6.22k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  6.22k|                   (data[pos + 2] & 0b00111111);
   54|  6.22k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 1.21k, False: 5.01k]
  |  Branch (54:33): [True: 0, False: 5.01k]
  ------------------
   55|  6.22k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 4.04k, False: 972]
  |  Branch (55:35): [True: 2.40k, False: 1.64k]
  ------------------
   56|  3.61k|        return 0;
   57|  3.61k|      }
   58|  2.61k|      *utf32_output++ = char32_t(code_point);
   59|  2.61k|      pos += 3;
   60|  16.4k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 16.4k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  16.4k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 16.4k]
  ------------------
   63|  16.4k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 4.44k, False: 11.9k]
  ------------------
   64|  11.9k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 954, False: 11.0k]
  ------------------
   65|  11.0k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 6.49k, False: 4.54k]
  ------------------
   66|       |
   67|       |      // range check
   68|  4.54k|      uint32_t code_point =
   69|  4.54k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  4.54k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  4.54k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 1.00k, False: 3.54k]
  |  Branch (71:35): [True: 995, False: 2.54k]
  ------------------
   72|  2.54k|      *utf32_output++ = char32_t(code_point);
   73|  2.54k|      pos += 4;
   74|  2.54k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  1.04M|  }
   78|   931k|  return utf32_output - start;
   79|  1.04M|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  88.8k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  88.8k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  88.8k|  size_t pos = 0;
   84|  88.8k|  char32_t* start{utf32_output};
   85|   177k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 88.8k, False: 88.8k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|  88.8k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 88.8k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|  88.8k|    uint8_t leading_byte = data[pos]; // leading byte
  103|  88.8k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 88.8k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|  88.8k|      *utf32_output++ = char32_t(leading_byte);
  106|  88.8k|      pos++;
  107|  88.8k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|  88.8k|  }
  151|  88.8k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  88.8k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  88.8k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  88.8k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  88.8k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  88.8k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 88.8k, False: 0]
  ------------------
  172|  88.8k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  88.8k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 88.8k, False: 0]
  ------------------
  175|  88.8k|    unsigned char byte = buf[0-i];
  176|  88.8k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  88.8k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 88.8k, False: 0]
  ------------------
  178|  88.8k|      buf -= i;
  179|  88.8k|      extra_len = i;
  180|  88.8k|      break;
  181|  88.8k|    }
  182|  88.8k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  88.8k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 88.8k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|  88.8k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  88.8k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 88.8k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|  88.8k|  return res;
  202|  88.8k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  2.13k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  2.13k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  2.13k|  size_t pos = 0;
   12|  2.13k|  char32_t* start{utf32_output};
   13|  19.4k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 17.2k, False: 2.13k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  17.2k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 9.90k, False: 7.37k]
  ------------------
   16|  9.90k|      uint64_t v;
   17|  9.90k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  9.90k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 8.05k, False: 1.85k]
  ------------------
   19|  8.05k|        size_t final_pos = pos + 8;
   20|  72.5k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 64.4k, False: 8.05k]
  ------------------
   21|  64.4k|          *utf32_output++ = char32_t(buf[pos]);
   22|  64.4k|          pos++;
   23|  64.4k|        }
   24|  8.05k|        continue;
   25|  8.05k|      }
   26|  9.90k|    }
   27|  9.23k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  9.23k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 8.51k, False: 716]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  8.51k|      *utf32_output++ = char32_t(leading_byte);
   31|  8.51k|      pos++;
   32|  8.51k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 558, False: 158]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    558|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 558]
  ------------------
   35|    558|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    558|      pos += 2;
   37|    558|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 103, False: 55]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    103|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 103]
  ------------------
   40|    103|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    103|      pos += 3;
   42|    103|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 55, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     55|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 55]
  ------------------
   45|     55|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     55|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     55|      *utf32_output++ = char32_t(code_word);
   48|     55|      pos += 4;
   49|     55|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  9.23k|  }
   54|  2.13k|  return utf32_output - start;
   55|  2.13k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  11.8k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  11.8k|  return _popcnt64(input_num);
   16|  11.8k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   540k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   540k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   540k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   540k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   195k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   392k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   392k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   392k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  2.21M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  2.21M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  2.21M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  2.21M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   195k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   195k|      return this->chunks[0] | this->chunks[1];
  297|   195k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|   577k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  4.11M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   195k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   377k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  4.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  8.29k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  12.4k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  12.4k|      return lookup_16(simd8<L>::repeat_16(
  140|  12.4k|        replace0,  replace1,  replace2,  replace3,
  141|  12.4k|        replace4,  replace5,  replace6,  replace7,
  142|  12.4k|        replace8,  replace9,  replace10, replace11,
  143|  12.4k|        replace12, replace13, replace14, replace15
  144|  12.4k|      ));
  145|  12.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  12.4k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  12.4k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  12.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  16.5k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  12.4k|    ) {
  218|  12.4k|      return simd8<uint8_t>(
  219|  12.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  12.4k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  12.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  12.4k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  12.4k|      );
  224|  12.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  12.4k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  24.8k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  1.15M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  1.15M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  4.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  4.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  10.3k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  30.2k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  30.2k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  30.2k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  4.14k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  4.14k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  2.07k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  2.07k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  1.31M|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  1.31M|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  23.4k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  46.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  46.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  46.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  71.6k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  71.6k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  71.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  71.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  11.6k|    simdutf_really_inline bool is_ascii() const {
  300|  11.6k|      return this->reduce_or().is_ascii();
  301|  11.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  11.6k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  11.6k|      return this->chunks[0] | this->chunks[1];
  297|  11.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  11.6k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   170k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  11.6k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.23k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.23k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.23k|      return  simd8x64<bool>(
  365|  1.23k|        this->chunks[0] < mask,
  366|  1.23k|        this->chunks[1] < mask
  367|  1.23k|      ).to_bitmask();
  368|  1.23k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  13.0k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.46k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  13.0k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  13.0k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  13.0k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  13.0k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  13.0k|      return r_lo | (r_hi << 32);
  287|  13.0k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  26.0k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  26.0k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  10.4k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  10.4k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  10.4k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  10.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  20.8k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  20.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  20.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  20.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  20.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  20.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  11.8k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  11.8k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  11.8k|      return  simd8x64<bool>(
  373|  11.8k|        this->chunks[0] > mask,
  374|  11.8k|        this->chunks[1] > mask
  375|  11.8k|      ).to_bitmask();
  376|  11.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  23.6k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   796k|{
  627|   796k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   796k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   796k|    static_cast<    \
  |  |  251|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   796k|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  394|  1.75M|{
  395|  1.75M|    static_assert(
  396|  1.75M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|  1.75M|        "Scan argument types must be default constructible");
  398|  1.75M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|  1.75M|                  "Scan argument types must be Destructible");
  400|  1.75M|    static_assert(
  401|  1.75M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|  1.75M|        "Scan argument types must not be references");
  403|  1.75M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  571|   796k|    {
  572|   796k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   796k|    {
  582|   796k|        return {
  583|   796k|            detail::make_arg<base::is_packed, Context,
  584|   796k|                             detail::mapped_type_constant<
  585|   796k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   796k|                args)...};
  587|   796k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  422|   796k|{
  423|   796k|    return make_value<Context>(value);
  424|   796k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  379|   883k|{
  380|   883k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   883k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   883k|                                  needs_context_tag>) {
  384|   883k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   883k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   883k|    }
  386|   883k|    else {
  387|   883k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   883k|            value, context_tag<Context>{}));
  389|   883k|    }
  390|   883k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  219|   883k|    {                                                                        \
  220|   883k|        return val;                                                          \
  221|   883k|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  348|  1.75M|{
  349|  1.75M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|  1.75M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|  1.75M|    constexpr bool scannable_char =
  353|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|  1.75M|    static_assert(scannable_char,
  355|  1.75M|                  "Cannot scan an argument of an unsupported character "
  356|  1.75M|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|  1.75M|    constexpr bool scannable_const =
  359|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|  1.75M|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|  1.75M|    constexpr bool scannable_disabled =
  363|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|  1.75M|    static_assert(scannable_disabled,
  365|  1.75M|                  "Cannot scan an argument that has been disabled by "
  366|  1.75M|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|  1.75M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|  1.75M|    static_assert(
  370|  1.75M|        scannable,
  371|  1.75M|        "Cannot scan an argument. To make a type T scannable, provide "
  372|  1.75M|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|  1.75M|    return arg_value{arg};
  375|  1.75M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  1.75M|    {
  160|  1.75M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   796k|    {
  655|   796k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  701|  2.52M|    {
  702|  2.52M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  561|   731k|    {
  562|   731k|        return m_args;
  563|   731k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  407|  87.3k|{
  408|  87.3k|    check_scan_arg_types<T>();
  409|       |
  410|  87.3k|    basic_scan_arg<Context> arg;
  411|  87.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  87.3k|    arg.m_value = make_value<Context>(value);
  413|  87.3k|    return arg;
  414|  87.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  484|  2.80M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  5.55M|    arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   859k|{
  627|   859k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   859k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   859k|    static_cast<    \
  |  |  251|   859k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   859k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  394|  1.88M|{
  395|  1.88M|    static_assert(
  396|  1.88M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|  1.88M|        "Scan argument types must be default constructible");
  398|  1.88M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|  1.88M|                  "Scan argument types must be Destructible");
  400|  1.88M|    static_assert(
  401|  1.88M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|  1.88M|        "Scan argument types must not be references");
  403|  1.88M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  571|   859k|    {
  572|   859k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   859k|    {
  582|   859k|        return {
  583|   859k|            detail::make_arg<base::is_packed, Context,
  584|   859k|                             detail::mapped_type_constant<
  585|   859k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   859k|                args)...};
  587|   859k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  422|   859k|{
  423|   859k|    return make_value<Context>(value);
  424|   859k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  379|   956k|{
  380|   956k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   956k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   956k|                                  needs_context_tag>) {
  384|   956k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   956k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   956k|    }
  386|   956k|    else {
  387|   956k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   956k|            value, context_tag<Context>{}));
  389|   956k|    }
  390|   956k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  219|   956k|    {                                                                        \
  220|   956k|        return val;                                                          \
  221|   956k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  348|  1.88M|{
  349|  1.88M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|  1.88M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|  1.88M|    constexpr bool scannable_char =
  353|  1.88M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|  1.88M|    static_assert(scannable_char,
  355|  1.88M|                  "Cannot scan an argument of an unsupported character "
  356|  1.88M|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|  1.88M|    constexpr bool scannable_const =
  359|  1.88M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|  1.88M|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|  1.88M|    constexpr bool scannable_disabled =
  363|  1.88M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|  1.88M|    static_assert(scannable_disabled,
  365|  1.88M|                  "Cannot scan an argument that has been disabled by "
  366|  1.88M|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|  1.88M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|  1.88M|    static_assert(
  370|  1.88M|        scannable,
  371|  1.88M|        "Cannot scan an argument. To make a type T scannable, provide "
  372|  1.88M|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|  1.88M|    return arg_value{arg};
  375|  1.88M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  1.88M|    {
  160|  1.88M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   859k|    {
  655|   859k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  561|   795k|    {
  562|   795k|        return m_args;
  563|   795k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  407|  96.4k|{
  408|  96.4k|    check_scan_arg_types<T>();
  409|       |
  410|  96.4k|    basic_scan_arg<Context> arg;
  411|  96.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  96.4k|    arg.m_value = make_value<Context>(value);
  413|  96.4k|    return arg;
  414|  96.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   870k|{
  627|   870k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   870k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   870k|    static_cast<    \
  |  |  251|   870k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   870k|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  394|  1.91M|{
  395|  1.91M|    static_assert(
  396|  1.91M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|  1.91M|        "Scan argument types must be default constructible");
  398|  1.91M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|  1.91M|                  "Scan argument types must be Destructible");
  400|  1.91M|    static_assert(
  401|  1.91M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|  1.91M|        "Scan argument types must not be references");
  403|  1.91M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  571|   870k|    {
  572|   870k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   870k|    {
  582|   870k|        return {
  583|   870k|            detail::make_arg<base::is_packed, Context,
  584|   870k|                             detail::mapped_type_constant<
  585|   870k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   870k|                args)...};
  587|   870k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  422|   870k|{
  423|   870k|    return make_value<Context>(value);
  424|   870k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  379|   968k|{
  380|   968k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   968k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   968k|                                  needs_context_tag>) {
  384|   968k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   968k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   968k|    }
  386|   968k|    else {
  387|   968k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   968k|            value, context_tag<Context>{}));
  389|   968k|    }
  390|   968k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  219|   968k|    {                                                                        \
  220|   968k|        return val;                                                          \
  221|   968k|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  348|  1.91M|{
  349|  1.91M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|  1.91M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|  1.91M|    constexpr bool scannable_char =
  353|  1.91M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|  1.91M|    static_assert(scannable_char,
  355|  1.91M|                  "Cannot scan an argument of an unsupported character "
  356|  1.91M|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|  1.91M|    constexpr bool scannable_const =
  359|  1.91M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|  1.91M|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|  1.91M|    constexpr bool scannable_disabled =
  363|  1.91M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|  1.91M|    static_assert(scannable_disabled,
  365|  1.91M|                  "Cannot scan an argument that has been disabled by "
  366|  1.91M|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|  1.91M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|  1.91M|    static_assert(
  370|  1.91M|        scannable,
  371|  1.91M|        "Cannot scan an argument. To make a type T scannable, provide "
  372|  1.91M|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|  1.91M|    return arg_value{arg};
  375|  1.91M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  1.91M|    {
  160|  1.91M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   870k|    {
  655|   870k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  561|   805k|    {
  562|   805k|        return m_args;
  563|   805k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  407|  98.1k|{
  408|  98.1k|    check_scan_arg_types<T>();
  409|       |
  410|  98.1k|    basic_scan_arg<Context> arg;
  411|  98.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  98.1k|    arg.m_value = make_value<Context>(value);
  413|  98.1k|    return arg;
  414|  98.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   788k|{
  627|   788k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   788k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   788k|    static_cast<    \
  |  |  251|   788k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   788k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  571|   788k|    {
  572|   788k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   788k|    {
  582|   788k|        return {
  583|   788k|            detail::make_arg<base::is_packed, Context,
  584|   788k|                             detail::mapped_type_constant<
  585|   788k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   788k|                args)...};
  587|   788k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  422|   788k|{
  423|   788k|    return make_value<Context>(value);
  424|   788k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  379|   872k|{
  380|   872k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   872k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   872k|                                  needs_context_tag>) {
  384|   872k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   872k|    }
  386|   872k|    else {
  387|   872k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   872k|            value, context_tag<Context>{}));
  389|   872k|    }
  390|   872k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  219|   872k|    {                                                                        \
  220|   872k|        return val;                                                          \
  221|   872k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   788k|    {
  655|   788k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  701|  2.47M|    {
  702|  2.47M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  561|   672k|    {
  562|   672k|        return m_args;
  563|   672k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  407|  84.4k|{
  408|  84.4k|    check_scan_arg_types<T>();
  409|       |
  410|  84.4k|    basic_scan_arg<Context> arg;
  411|  84.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  84.4k|    arg.m_value = make_value<Context>(value);
  413|  84.4k|    return arg;
  414|  84.4k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  484|  2.74M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   839k|{
  627|   839k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   839k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   839k|    static_cast<    \
  |  |  251|   839k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   839k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  571|   839k|    {
  572|   839k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   839k|    {
  582|   839k|        return {
  583|   839k|            detail::make_arg<base::is_packed, Context,
  584|   839k|                             detail::mapped_type_constant<
  585|   839k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   839k|                args)...};
  587|   839k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  422|   839k|{
  423|   839k|    return make_value<Context>(value);
  424|   839k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  379|   931k|{
  380|   931k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   931k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   931k|                                  needs_context_tag>) {
  384|   931k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   931k|    }
  386|   931k|    else {
  387|   931k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   931k|            value, context_tag<Context>{}));
  389|   931k|    }
  390|   931k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  219|   931k|    {                                                                        \
  220|   931k|        return val;                                                          \
  221|   931k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   839k|    {
  655|   839k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  561|   723k|    {
  562|   723k|        return m_args;
  563|   723k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  407|  91.8k|{
  408|  91.8k|    check_scan_arg_types<T>();
  409|       |
  410|  91.8k|    basic_scan_arg<Context> arg;
  411|  91.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  91.8k|    arg.m_value = make_value<Context>(value);
  413|  91.8k|    return arg;
  414|  91.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   849k|{
  627|   849k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   849k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   849k|    static_cast<    \
  |  |  251|   849k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   849k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  571|   849k|    {
  572|   849k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   849k|    {
  582|   849k|        return {
  583|   849k|            detail::make_arg<base::is_packed, Context,
  584|   849k|                             detail::mapped_type_constant<
  585|   849k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   849k|                args)...};
  587|   849k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  422|   849k|{
  423|   849k|    return make_value<Context>(value);
  424|   849k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  379|   942k|{
  380|   942k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   942k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   942k|                                  needs_context_tag>) {
  384|   942k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   942k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   942k|    }
  386|   942k|    else {
  387|   942k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   942k|            value, context_tag<Context>{}));
  389|   942k|    }
  390|   942k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  219|   942k|    {                                                                        \
  220|   942k|        return val;                                                          \
  221|   942k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   849k|    {
  655|   849k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  561|   733k|    {
  562|   733k|        return m_args;
  563|   733k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  407|  93.3k|{
  408|  93.3k|    check_scan_arg_types<T>();
  409|       |
  410|  93.3k|    basic_scan_arg<Context> arg;
  411|  93.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  93.3k|    arg.m_value = make_value<Context>(value);
  413|  93.3k|    return arg;
  414|  93.3k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  689|  2.52M|    {
  690|  2.52M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
  691|      0|            return max_size();
  692|      0|        }
  693|       |
  694|  2.52M|        return static_cast<std::size_t>(m_desc &
  695|  2.52M|                                        ((1 << detail::packed_arg_bits) - 1));
  696|  2.52M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  709|  5.05M|    {
  710|  5.05M|        return (m_desc & detail::is_unpacked_bit) == 0;
  711|  5.05M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  662|  2.52M|    {
  663|  2.52M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
  664|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  665|      0|                return m_args[id];
  666|      0|            }
  667|      0|            return {};
  668|      0|        }
  669|       |
  670|  2.52M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.52M|        const auto t = type(id);
  675|  2.52M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
  676|      0|            return {};
  677|      0|        }
  678|       |
  679|  2.52M|        basic_scan_arg<Context> arg;
  680|  2.52M|        arg.m_type = t;
  681|  2.52M|        arg.m_value = m_values[id];
  682|  2.52M|        return arg;
  683|  2.52M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  714|  2.52M|    {
  715|       |        // First (0th) index is size, types start after that
  716|  2.52M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  717|  2.52M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  718|  2.52M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  719|  2.52M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  490|  4.77M|    {
  491|  4.77M|        return m_type != detail::arg_type::none_type;
  492|  4.77M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  495|  3.92M|    {
  496|  3.92M|        return m_type;
  497|  3.92M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  689|  2.47M|    {
  690|  2.47M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  691|      0|            return max_size();
  692|      0|        }
  693|       |
  694|  2.47M|        return static_cast<std::size_t>(m_desc &
  695|  2.47M|                                        ((1 << detail::packed_arg_bits) - 1));
  696|  2.47M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  709|  4.95M|    {
  710|  4.95M|        return (m_desc & detail::is_unpacked_bit) == 0;
  711|  4.95M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  662|  2.47M|    {
  663|  2.47M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  664|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  665|      0|                return m_args[id];
  666|      0|            }
  667|      0|            return {};
  668|      0|        }
  669|       |
  670|  2.47M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.47M|        const auto t = type(id);
  675|  2.47M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  676|      0|            return {};
  677|      0|        }
  678|       |
  679|  2.47M|        basic_scan_arg<Context> arg;
  680|  2.47M|        arg.m_type = t;
  681|  2.47M|        arg.m_value = m_values[id];
  682|  2.47M|        return arg;
  683|  2.47M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  714|  2.47M|    {
  715|       |        // First (0th) index is size, types start after that
  716|  2.47M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  717|  2.47M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  718|  2.47M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  719|  2.47M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  490|  4.68M|    {
  491|  4.68M|        return m_type != detail::arg_type::none_type;
  492|  4.68M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  495|  3.87M|    {
  496|  3.87M|        return m_type;
  497|  3.87M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  642|   281k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  642|   269k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   210k|    {
  109|   210k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  1.96M|    {
   60|  1.96M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   549k|    {
  124|   549k|        return m_current;
  125|   549k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  1.96M|    {
   43|  1.96M|        return m_args.get(id);
   44|  1.96M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.96M|    {
   53|  1.96M|        return m_locale;
   54|  1.96M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   210k|    {
  132|   210k|        return ranges_std::default_sentinel;
  133|   210k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   129k|    {
  146|   129k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|   129k|    static_cast<    \
  |  |  251|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   129k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   210k|    {
  140|   210k|        return ranges::subrange{begin(), end()};
  141|   210k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   376k|    {
  109|   376k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  1.93M|    {
   60|  1.93M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   983k|    {
  124|   983k|        return m_current;
  125|   983k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  1.93M|    {
   43|  1.93M|        return m_args.get(id);
   44|  1.93M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.93M|    {
   53|  1.93M|        return m_locale;
   54|  1.93M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   376k|    {
  132|   376k|        return ranges_std::default_sentinel;
  133|   376k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   231k|    {
  146|   231k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|   231k|    static_cast<    \
  |  |  251|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   231k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   376k|    {
  140|   376k|        return ranges::subrange{begin(), end()};
  141|   376k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  5.83M|    {
   69|  5.83M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  5.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  5.83M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  21.9M|    {
   75|  21.9M|        return m_code == good;
   76|  21.9M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   451k|    {
   86|   451k|        return m_code;
   87|   451k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   451k|{
  111|   451k|    return a.code() == b;
  112|   451k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   451k|{
  116|   451k|    return !(a == b);
  117|   451k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  14.1M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   710k|    {
  675|   710k|        return m_str;
  676|   710k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.52M|{
  385|  2.52M|    return s;
  386|  2.52M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.52M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   710k|    {
  671|   710k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   773k|    {
  675|   773k|        return m_str;
  676|   773k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   773k|    {
  671|   773k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   784k|    {
  675|   784k|        return m_str;
  676|   784k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   784k|    {
  671|   784k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  86.1k|    {
  675|  86.1k|        return m_str;
  676|  86.1k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  86.1k|    {
  671|  86.1k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  86.1k|    {
  675|  86.1k|        return m_str;
  676|  86.1k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  86.1k|    {
  671|  86.1k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  86.1k|    {
  675|  86.1k|        return m_str;
  676|  86.1k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  86.1k|    {
  671|  86.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   633k|    {
  675|   633k|        return m_str;
  676|   633k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.47M|{
  390|  2.47M|    return s;
  391|  2.47M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.47M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   633k|    {
  671|   633k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   685k|    {
  675|   685k|        return m_str;
  676|   685k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   685k|    {
  671|   685k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   695k|    {
  675|   695k|        return m_str;
  676|   695k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   695k|    {
  671|   695k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   154k|    {
  675|   154k|        return m_str;
  676|   154k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   154k|    {
  671|   154k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   154k|    {
  675|   154k|        return m_str;
  676|   154k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   154k|    {
  671|   154k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   154k|    {
  675|   154k|        return m_str;
  676|   154k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   154k|    {
  671|   154k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  3.90M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.10M|    {
  245|  1.10M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.10M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.10M|            m_specs.localized = true;
  247|  1.10M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.10M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  2.79M|    {
  260|  2.79M|        m_specs.type = type;
  261|  2.79M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  3.90M|    {
  333|  3.90M|        return static_cast<bool>(m_error);
  334|  3.90M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.10M|{
  987|  1.10M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.10M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 1.10M]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.10M]
  ------------------
  993|      0|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 1.10M]
  ------------------
  994|      0|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.10M]
  ------------------
  995|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 1.10M]
  ------------------
  996|      0|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 1.10M]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.10M]
  ------------------
 1000|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 0, False: 1.10M]
  ------------------
 1001|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.10M]
  ------------------
 1002|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 1.10M]
  ------------------
 1003|      0|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.10M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.10M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.10M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.10M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.10M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|   343k|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 343k, False: 759k]
  ------------------
 1015|   720k|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 376k, False: 726k]
  ------------------
 1016|  1.10M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 382k, False: 720k]
  ------------------
 1017|  1.10M|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.10M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.10M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.10M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.10M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.10M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.10M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|  1.10M|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.10M|            SCN_CLANG_POP
 1034|  1.10M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.10M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.75M|{
  968|  1.75M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.75M|    handler.check_args_exhausted();
  970|  1.75M|    return handler.get_error();
  971|  1.75M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.75M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.75M|    auto begin = format.data();
  937|  1.75M|    auto it = begin;
  938|  1.75M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.42M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.75M, False: 1.67M]
  ------------------
  941|  1.75M|        const auto ch = *it++;
  942|  1.75M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.75M, False: 0]
  ------------------
  943|  1.75M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.75M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.75M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 80.7k, False: 1.67M]
  ------------------
  947|  80.7k|                return;
  948|  80.7k|            }
  949|  1.75M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.75M|    }
  960|       |
  961|  1.67M|    handler.on_literal_text(begin, end);
  962|  1.67M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.75M|{
  866|  1.75M|    struct id_adapter {
  867|  1.75M|        constexpr void operator()()
  868|  1.75M|        {
  869|  1.75M|            arg_id = handler.on_arg_id();
  870|  1.75M|        }
  871|  1.75M|        constexpr void operator()(std::size_t id)
  872|  1.75M|        {
  873|  1.75M|            arg_id = handler.on_arg_id(id);
  874|  1.75M|        }
  875|       |
  876|  1.75M|        constexpr void on_error(const char* msg)
  877|  1.75M|        {
  878|  1.75M|            SCN_UNLIKELY_ATTR
  879|  1.75M|            handler.on_error(msg);
  880|  1.75M|        }
  881|       |
  882|  1.75M|        Handler& handler;
  883|  1.75M|        std::size_t arg_id;
  884|  1.75M|    };
  885|       |
  886|  1.75M|    ++begin;
  887|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.75M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.75M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.75M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.75M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.75M|    else {
  899|  1.75M|        auto adapter = id_adapter{handler, 0};
  900|  1.75M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.75M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.75M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.75M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.75M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.75M, False: 0]
  ------------------
  911|  1.75M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.75M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.75M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  |  Branch (157:45): [True: 0, False: 1.75M]
  |  |  |  Branch (157:45): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.75M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.75M|    }
  927|  1.75M|    return begin + 1;
  928|  1.75M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.75M|{
  400|  1.75M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.75M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.75M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.75M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.75M|    handler();
  406|  1.75M|    return begin;
  407|  1.75M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.75M|        {
  869|  1.75M|            arg_id = handler.on_arg_id();
  870|  1.75M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.75M|    {
 1046|  1.75M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.75M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.75M|{
  795|  1.75M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.75M|        if (*begin == CharT{'['}) {
  797|  1.75M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.75M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.75M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.75M|                return begin;
  803|  1.75M|            }
  804|  1.75M|            handler.on_character_set_string(set);
  805|  1.75M|            return begin;
  806|  1.75M|        }
  807|  1.75M|        if (*begin == CharT{'/'}) {
  808|  1.75M|            return parse_presentation_regex(begin, end, handler);
  809|  1.75M|        }
  810|  1.75M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.75M|            handler.on_error("Invalid type specifier in format string");
  813|  1.75M|            return begin;
  814|  1.75M|        }
  815|  1.75M|        handler.on_type(type);
  816|  1.75M|        return begin;
  817|  1.75M|    };
  818|       |
  819|  1.75M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.75M, False: 0]
  |  Branch (819:28): [True: 1.75M, False: 0]
  ------------------
  820|  1.75M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.75M, False: 0]
  |  Branch (820:36): [True: 1.23M, False: 515k]
  ------------------
  821|  1.23M|        return do_presentation();
  822|  1.23M|    }
  823|       |
  824|   515k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   515k|    begin = parse_align(begin, end, handler);
  830|   515k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   515k|    begin = parse_width(begin, end, handler);
  836|   515k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   515k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 515k, False: 0]
  ------------------
  842|   515k|        handler.on_localized();
  843|   515k|        ++begin;
  844|   515k|    }
  845|   515k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   515k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 515k, False: 0]
  |  Branch (850:25): [True: 0, False: 515k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   515k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   515k|    return begin;
  859|   515k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  1.96M|{
  464|  1.96M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.39M, False: 563k]
  |  Branch (464:33): [True: 1.39M, False: 0]
  ------------------
  465|  1.96M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 563k, False: 0]
  |  Branch (465:33): [True: 563k, False: 0]
  ------------------
  466|  1.96M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.23M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.23M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.23M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.23M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.23M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.23M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.23M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.23M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.23M|        handler.on_type(type);
  816|  1.23M|        return begin;
  817|  1.23M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.39M|{
  412|  1.39M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.39M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.39M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.39M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.39M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.39M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.39M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.39M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.39M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.39M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.39M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   622k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 622k, False: 775k]
  ------------------
  431|   622k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.39M]
  ------------------
  432|   622k|            return presentation_type::float_hex;
  433|  46.9k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 46.9k, False: 1.35M]
  ------------------
  434|  46.9k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.39M]
  ------------------
  435|  46.9k|            return presentation_type::float_scientific;
  436|   258k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 258k, False: 1.14M]
  ------------------
  437|   258k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.39M]
  ------------------
  438|   258k|            return presentation_type::float_fixed;
  439|   470k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 470k, False: 927k]
  ------------------
  440|   470k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.39M]
  ------------------
  441|   470k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.39M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.39M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.39M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.39M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.39M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.39M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.39M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.39M|    }
  459|  1.39M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   515k|{
  489|   515k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   515k|    auto check_align = [](wchar_t ch) {
  492|   515k|        switch (ch) {
  493|   515k|            case L'<':
  494|   515k|                return align_type::left;
  495|   515k|            case L'>':
  496|   515k|                return align_type::right;
  497|   515k|            case L'^':
  498|   515k|                return align_type::center;
  499|   515k|            default:
  500|   515k|                return align_type::none;
  501|   515k|        }
  502|   515k|    };
  503|       |
  504|   515k|    auto potential_fill_len = code_point_length(begin, end);
  505|   515k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  |  Branch (157:45): [True: 0, False: 515k]
  |  |  |  Branch (157:45): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  506|   515k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   515k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   515k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   515k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   515k|    const auto begin_before_fill = begin;
  516|   515k|    begin += potential_fill_len;
  517|       |
  518|   515k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 515k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   515k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   515k|    const auto begin_after_fill = begin;
  524|   515k|    ++begin;
  525|       |
  526|   515k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 515k, False: 0]
  ------------------
  527|   515k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   515k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 515k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   515k|    }
  535|       |
  536|   515k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 515k, False: 0]
  ------------------
  537|   515k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 515k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   515k|        return begin_before_fill;
  542|   515k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   515k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   563k|{
  471|   563k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   563k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   563k|        return 1;
  474|   563k|    }
  475|   563k|    else {
  476|   563k|        const auto lengths =
  477|   563k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   563k|            "\3\4";
  479|   563k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   563k|        return len;
  481|   563k|    }
  482|   563k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.03M|    auto check_align = [](wchar_t ch) {
  492|  1.03M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.03M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.03M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.03M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.03M|            default:
  ------------------
  |  Branch (499:13): [True: 1.03M, False: 0]
  ------------------
  500|  1.03M|                return align_type::none;
  501|  1.03M|        }
  502|  1.03M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   515k|{
  554|   515k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   515k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 515k, False: 0]
  |  Branch (556:33): [True: 0, False: 515k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   515k|    return begin;
  567|   515k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   515k|    {
 1051|   515k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   515k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 515k, False: 0]
  ------------------
 1053|   515k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 515k, False: 0]
  ------------------
 1054|   515k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 515k]
  ------------------
 1055|   515k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   515k|        Handler::on_localized();
 1063|   515k|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  3.90M|{
 1117|  3.90M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 2.79M, False: 1.10M]
  ------------------
 1118|  3.90M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 0, False: 2.79M]
  ------------------
 1119|  2.79M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 0, False: 2.79M]
  ------------------
 1120|      0|        SCN_UNLIKELY_ATTR
 1121|      0|        return handler.on_error("Invalid type specifier for float type");
 1122|      0|    }
 1123|  3.90M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   210k|{
  968|   210k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   210k|    handler.check_args_exhausted();
  970|   210k|    return handler.get_error();
  971|   210k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   210k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   210k|    auto begin = format.data();
  937|   210k|    auto it = begin;
  938|   210k|    const auto end = format.data() + format.size();
  939|       |
  940|   339k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 210k, False: 129k]
  ------------------
  941|   210k|        const auto ch = *it++;
  942|   210k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 210k, False: 0]
  ------------------
  943|   210k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   210k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   210k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 80.7k, False: 129k]
  ------------------
  947|  80.7k|                return;
  948|  80.7k|            }
  949|   210k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   210k|    }
  960|       |
  961|   129k|    handler.on_literal_text(begin, end);
  962|   129k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   210k|{
  866|   210k|    struct id_adapter {
  867|   210k|        constexpr void operator()()
  868|   210k|        {
  869|   210k|            arg_id = handler.on_arg_id();
  870|   210k|        }
  871|   210k|        constexpr void operator()(std::size_t id)
  872|   210k|        {
  873|   210k|            arg_id = handler.on_arg_id(id);
  874|   210k|        }
  875|       |
  876|   210k|        constexpr void on_error(const char* msg)
  877|   210k|        {
  878|   210k|            SCN_UNLIKELY_ATTR
  879|   210k|            handler.on_error(msg);
  880|   210k|        }
  881|       |
  882|   210k|        Handler& handler;
  883|   210k|        std::size_t arg_id;
  884|   210k|    };
  885|       |
  886|   210k|    ++begin;
  887|   210k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   210k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 210k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   210k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 210k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   210k|    else {
  899|   210k|        auto adapter = id_adapter{handler, 0};
  900|   210k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   210k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   210k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 210k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   210k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 210k, False: 0]
  ------------------
  911|   210k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   210k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   210k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  |  Branch (157:45): [True: 0, False: 210k]
  |  |  |  Branch (157:45): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|   210k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   210k|    }
  927|   210k|    return begin + 1;
  928|   210k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   210k|{
  400|   210k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   210k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 210k, False: 0]
  |  Branch (401:26): [True: 0, False: 210k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   210k|    handler();
  406|   210k|    return begin;
  407|   210k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   210k|        {
  869|   210k|            arg_id = handler.on_arg_id();
  870|   210k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   210k|    {
 1046|   210k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   210k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   210k|{
  795|   210k|    auto do_presentation = [&]() -> const CharT* {
  796|   210k|        if (*begin == CharT{'['}) {
  797|   210k|            auto set = parse_presentation_set(begin, end, handler);
  798|   210k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   210k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   210k|                return begin;
  803|   210k|            }
  804|   210k|            handler.on_character_set_string(set);
  805|   210k|            return begin;
  806|   210k|        }
  807|   210k|        if (*begin == CharT{'/'}) {
  808|   210k|            return parse_presentation_regex(begin, end, handler);
  809|   210k|        }
  810|   210k|        presentation_type type = parse_presentation_type(*begin++);
  811|   210k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   210k|            handler.on_error("Invalid type specifier in format string");
  813|   210k|            return begin;
  814|   210k|        }
  815|   210k|        handler.on_type(type);
  816|   210k|        return begin;
  817|   210k|    };
  818|       |
  819|   210k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 210k, False: 0]
  |  Branch (819:28): [True: 210k, False: 0]
  ------------------
  820|   210k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 210k, False: 0]
  |  Branch (820:36): [True: 161k, False: 48.4k]
  ------------------
  821|   161k|        return do_presentation();
  822|   161k|    }
  823|       |
  824|  48.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  48.4k|    begin = parse_align(begin, end, handler);
  830|  48.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  48.4k|    begin = parse_width(begin, end, handler);
  836|  48.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  48.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 48.4k, False: 0]
  ------------------
  842|  48.4k|        handler.on_localized();
  843|  48.4k|        ++begin;
  844|  48.4k|    }
  845|  48.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  48.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 48.4k, False: 0]
  |  Branch (850:25): [True: 0, False: 48.4k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  48.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  48.4k|    return begin;
  859|  48.4k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   161k|    auto do_presentation = [&]() -> const CharT* {
  796|   161k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 161k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   161k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 161k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   161k|        presentation_type type = parse_presentation_type(*begin++);
  811|   161k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 161k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|   161k|        handler.on_type(type);
  816|   161k|        return begin;
  817|   161k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  48.4k|{
  489|  48.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  48.4k|    auto check_align = [](wchar_t ch) {
  492|  48.4k|        switch (ch) {
  493|  48.4k|            case L'<':
  494|  48.4k|                return align_type::left;
  495|  48.4k|            case L'>':
  496|  48.4k|                return align_type::right;
  497|  48.4k|            case L'^':
  498|  48.4k|                return align_type::center;
  499|  48.4k|            default:
  500|  48.4k|                return align_type::none;
  501|  48.4k|        }
  502|  48.4k|    };
  503|       |
  504|  48.4k|    auto potential_fill_len = code_point_length(begin, end);
  505|  48.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  |  Branch (157:45): [True: 0, False: 48.4k]
  |  |  |  Branch (157:45): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  506|  48.4k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  48.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  48.4k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  48.4k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  48.4k|    const auto begin_before_fill = begin;
  516|  48.4k|    begin += potential_fill_len;
  517|       |
  518|  48.4k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 48.4k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  48.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  48.4k|    const auto begin_after_fill = begin;
  524|  48.4k|    ++begin;
  525|       |
  526|  48.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 48.4k, False: 0]
  ------------------
  527|  48.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  48.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 48.4k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  48.4k|    }
  535|       |
  536|  48.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 48.4k, False: 0]
  ------------------
  537|  48.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 48.4k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  48.4k|        return begin_before_fill;
  542|  48.4k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  48.4k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  96.9k|    auto check_align = [](wchar_t ch) {
  492|  96.9k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 96.9k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 96.9k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 96.9k]
  ------------------
  498|      0|                return align_type::center;
  499|  96.9k|            default:
  ------------------
  |  Branch (499:13): [True: 96.9k, False: 0]
  ------------------
  500|  96.9k|                return align_type::none;
  501|  96.9k|        }
  502|  96.9k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  48.4k|{
  554|  48.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  48.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 48.4k, False: 0]
  |  Branch (556:33): [True: 0, False: 48.4k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  48.4k|    return begin;
  567|  48.4k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  48.4k|    {
 1051|  48.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  48.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 48.4k, False: 0]
  ------------------
 1053|  48.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 48.4k, False: 0]
  ------------------
 1054|  48.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 48.4k]
  ------------------
 1055|  48.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  48.4k|        Handler::on_localized();
 1063|  48.4k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.56M|{
  968|  1.56M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.56M|    handler.check_args_exhausted();
  970|  1.56M|    return handler.get_error();
  971|  1.56M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.56M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.56M|    auto begin = format.data();
  937|  1.56M|    auto it = begin;
  938|  1.56M|    const auto end = format.data() + format.size();
  939|       |
  940|  2.97M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.56M, False: 1.41M]
  ------------------
  941|  1.56M|        const auto ch = *it++;
  942|  1.56M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.56M, False: 0]
  ------------------
  943|  1.56M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.56M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.56M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 144k, False: 1.41M]
  ------------------
  947|   144k|                return;
  948|   144k|            }
  949|  1.56M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.56M|    }
  960|       |
  961|  1.41M|    handler.on_literal_text(begin, end);
  962|  1.41M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.56M|{
  866|  1.56M|    struct id_adapter {
  867|  1.56M|        constexpr void operator()()
  868|  1.56M|        {
  869|  1.56M|            arg_id = handler.on_arg_id();
  870|  1.56M|        }
  871|  1.56M|        constexpr void operator()(std::size_t id)
  872|  1.56M|        {
  873|  1.56M|            arg_id = handler.on_arg_id(id);
  874|  1.56M|        }
  875|       |
  876|  1.56M|        constexpr void on_error(const char* msg)
  877|  1.56M|        {
  878|  1.56M|            SCN_UNLIKELY_ATTR
  879|  1.56M|            handler.on_error(msg);
  880|  1.56M|        }
  881|       |
  882|  1.56M|        Handler& handler;
  883|  1.56M|        std::size_t arg_id;
  884|  1.56M|    };
  885|       |
  886|  1.56M|    ++begin;
  887|  1.56M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.56M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.56M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.56M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.56M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.56M|    else {
  899|  1.56M|        auto adapter = id_adapter{handler, 0};
  900|  1.56M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.56M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.56M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.56M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.56M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.56M, False: 0]
  ------------------
  911|  1.56M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.56M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.56M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  |  Branch (157:45): [True: 0, False: 1.56M]
  |  |  |  Branch (157:45): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.56M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.56M|    }
  927|  1.56M|    return begin + 1;
  928|  1.56M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.56M|{
  400|  1.56M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.56M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.56M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.56M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.56M|    handler();
  406|  1.56M|    return begin;
  407|  1.56M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.56M|        {
  869|  1.56M|            arg_id = handler.on_arg_id();
  870|  1.56M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.56M|    {
 1046|  1.56M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.56M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.56M|{
  795|  1.56M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.56M|        if (*begin == CharT{'['}) {
  797|  1.56M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.56M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.56M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.56M|                return begin;
  803|  1.56M|            }
  804|  1.56M|            handler.on_character_set_string(set);
  805|  1.56M|            return begin;
  806|  1.56M|        }
  807|  1.56M|        if (*begin == CharT{'/'}) {
  808|  1.56M|            return parse_presentation_regex(begin, end, handler);
  809|  1.56M|        }
  810|  1.56M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.56M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.56M|            handler.on_error("Invalid type specifier in format string");
  813|  1.56M|            return begin;
  814|  1.56M|        }
  815|  1.56M|        handler.on_type(type);
  816|  1.56M|        return begin;
  817|  1.56M|    };
  818|       |
  819|  1.56M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.56M, False: 0]
  |  Branch (819:28): [True: 1.56M, False: 0]
  ------------------
  820|  1.56M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.56M, False: 0]
  |  Branch (820:36): [True: 1.10M, False: 452k]
  ------------------
  821|  1.10M|        return do_presentation();
  822|  1.10M|    }
  823|       |
  824|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   452k|    begin = parse_align(begin, end, handler);
  830|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   452k|    begin = parse_width(begin, end, handler);
  836|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   452k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 452k, False: 0]
  ------------------
  842|   452k|        handler.on_localized();
  843|   452k|        ++begin;
  844|   452k|    }
  845|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   452k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 452k, False: 0]
  |  Branch (850:25): [True: 0, False: 452k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   452k|    return begin;
  859|   452k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  1.93M|{
  464|  1.93M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.39M, False: 539k]
  |  Branch (464:33): [True: 1.39M, False: 0]
  ------------------
  465|  1.93M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 539k, False: 0]
  |  Branch (465:33): [True: 539k, False: 0]
  ------------------
  466|  1.93M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.10M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.10M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.10M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.10M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.10M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.10M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.10M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.10M|        handler.on_type(type);
  816|  1.10M|        return begin;
  817|  1.10M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.39M|{
  412|  1.39M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.39M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.39M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.39M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.39M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.39M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.39M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.39M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.39M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.39M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.39M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   591k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 591k, False: 807k]
  ------------------
  431|   591k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.39M]
  ------------------
  432|   591k|            return presentation_type::float_hex;
  433|  71.0k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 71.0k, False: 1.32M]
  ------------------
  434|  71.0k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.39M]
  ------------------
  435|  71.0k|            return presentation_type::float_scientific;
  436|   280k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 280k, False: 1.11M]
  ------------------
  437|   280k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.39M]
  ------------------
  438|   280k|            return presentation_type::float_fixed;
  439|   455k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 455k, False: 943k]
  ------------------
  440|   455k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.39M]
  ------------------
  441|   455k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.39M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.39M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.39M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.39M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.39M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.39M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.39M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.39M|    }
  459|  1.39M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   452k|{
  489|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   452k|    auto check_align = [](wchar_t ch) {
  492|   452k|        switch (ch) {
  493|   452k|            case L'<':
  494|   452k|                return align_type::left;
  495|   452k|            case L'>':
  496|   452k|                return align_type::right;
  497|   452k|            case L'^':
  498|   452k|                return align_type::center;
  499|   452k|            default:
  500|   452k|                return align_type::none;
  501|   452k|        }
  502|   452k|    };
  503|       |
  504|   452k|    auto potential_fill_len = code_point_length(begin, end);
  505|   452k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  |  Branch (157:45): [True: 0, False: 452k]
  |  |  |  Branch (157:45): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  506|   452k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   452k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   452k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   452k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   452k|    const auto begin_before_fill = begin;
  516|   452k|    begin += potential_fill_len;
  517|       |
  518|   452k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 452k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   452k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   452k|    const auto begin_after_fill = begin;
  524|   452k|    ++begin;
  525|       |
  526|   452k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 452k, False: 0]
  ------------------
  527|   452k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   452k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 452k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   452k|    }
  535|       |
  536|   452k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 452k, False: 0]
  ------------------
  537|   452k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 452k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   452k|        return begin_before_fill;
  542|   452k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   452k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   539k|{
  471|   539k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   539k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   539k|        return 1;
  474|   539k|    }
  475|   539k|    else {
  476|   539k|        const auto lengths =
  477|   539k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   539k|            "\3\4";
  479|   539k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   539k|        return len;
  481|   539k|    }
  482|   539k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   904k|    auto check_align = [](wchar_t ch) {
  492|   904k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 904k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 904k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 904k]
  ------------------
  498|      0|                return align_type::center;
  499|   904k|            default:
  ------------------
  |  Branch (499:13): [True: 904k, False: 0]
  ------------------
  500|   904k|                return align_type::none;
  501|   904k|        }
  502|   904k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   452k|{
  554|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   452k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 452k, False: 0]
  |  Branch (556:33): [True: 0, False: 452k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   452k|    return begin;
  567|   452k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   452k|    {
 1051|   452k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   452k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 452k, False: 0]
  ------------------
 1053|   452k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 452k, False: 0]
  ------------------
 1054|   452k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 452k]
  ------------------
 1055|   452k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   452k|        Handler::on_localized();
 1063|   452k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   376k|{
  968|   376k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   376k|    handler.check_args_exhausted();
  970|   376k|    return handler.get_error();
  971|   376k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   376k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   376k|    auto begin = format.data();
  937|   376k|    auto it = begin;
  938|   376k|    const auto end = format.data() + format.size();
  939|       |
  940|   607k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 376k, False: 231k]
  ------------------
  941|   376k|        const auto ch = *it++;
  942|   376k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 376k, False: 0]
  ------------------
  943|   376k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   376k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   376k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 144k, False: 231k]
  ------------------
  947|   144k|                return;
  948|   144k|            }
  949|   376k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   376k|    }
  960|       |
  961|   231k|    handler.on_literal_text(begin, end);
  962|   231k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   376k|{
  866|   376k|    struct id_adapter {
  867|   376k|        constexpr void operator()()
  868|   376k|        {
  869|   376k|            arg_id = handler.on_arg_id();
  870|   376k|        }
  871|   376k|        constexpr void operator()(std::size_t id)
  872|   376k|        {
  873|   376k|            arg_id = handler.on_arg_id(id);
  874|   376k|        }
  875|       |
  876|   376k|        constexpr void on_error(const char* msg)
  877|   376k|        {
  878|   376k|            SCN_UNLIKELY_ATTR
  879|   376k|            handler.on_error(msg);
  880|   376k|        }
  881|       |
  882|   376k|        Handler& handler;
  883|   376k|        std::size_t arg_id;
  884|   376k|    };
  885|       |
  886|   376k|    ++begin;
  887|   376k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   376k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 376k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   376k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 376k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   376k|    else {
  899|   376k|        auto adapter = id_adapter{handler, 0};
  900|   376k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   376k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   376k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 376k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   376k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 376k, False: 0]
  ------------------
  911|   376k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   376k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   376k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  |  Branch (157:45): [True: 0, False: 376k]
  |  |  |  Branch (157:45): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|   376k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   376k|    }
  927|   376k|    return begin + 1;
  928|   376k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   376k|{
  400|   376k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   376k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 376k, False: 0]
  |  Branch (401:26): [True: 0, False: 376k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   376k|    handler();
  406|   376k|    return begin;
  407|   376k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   376k|        {
  869|   376k|            arg_id = handler.on_arg_id();
  870|   376k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   376k|    {
 1046|   376k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   376k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   376k|{
  795|   376k|    auto do_presentation = [&]() -> const CharT* {
  796|   376k|        if (*begin == CharT{'['}) {
  797|   376k|            auto set = parse_presentation_set(begin, end, handler);
  798|   376k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   376k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   376k|                return begin;
  803|   376k|            }
  804|   376k|            handler.on_character_set_string(set);
  805|   376k|            return begin;
  806|   376k|        }
  807|   376k|        if (*begin == CharT{'/'}) {
  808|   376k|            return parse_presentation_regex(begin, end, handler);
  809|   376k|        }
  810|   376k|        presentation_type type = parse_presentation_type(*begin++);
  811|   376k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   376k|            handler.on_error("Invalid type specifier in format string");
  813|   376k|            return begin;
  814|   376k|        }
  815|   376k|        handler.on_type(type);
  816|   376k|        return begin;
  817|   376k|    };
  818|       |
  819|   376k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 376k, False: 0]
  |  Branch (819:28): [True: 376k, False: 0]
  ------------------
  820|   376k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 376k, False: 0]
  |  Branch (820:36): [True: 289k, False: 86.8k]
  ------------------
  821|   289k|        return do_presentation();
  822|   289k|    }
  823|       |
  824|  86.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  86.8k|    begin = parse_align(begin, end, handler);
  830|  86.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  86.8k|    begin = parse_width(begin, end, handler);
  836|  86.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  86.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 86.8k, False: 0]
  ------------------
  842|  86.8k|        handler.on_localized();
  843|  86.8k|        ++begin;
  844|  86.8k|    }
  845|  86.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  86.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 86.8k, False: 0]
  |  Branch (850:25): [True: 0, False: 86.8k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  86.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  86.8k|    return begin;
  859|  86.8k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   289k|    auto do_presentation = [&]() -> const CharT* {
  796|   289k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 289k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   289k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 289k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   289k|        presentation_type type = parse_presentation_type(*begin++);
  811|   289k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 289k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|   289k|        handler.on_type(type);
  816|   289k|        return begin;
  817|   289k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  86.8k|{
  489|  86.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  86.8k|    auto check_align = [](wchar_t ch) {
  492|  86.8k|        switch (ch) {
  493|  86.8k|            case L'<':
  494|  86.8k|                return align_type::left;
  495|  86.8k|            case L'>':
  496|  86.8k|                return align_type::right;
  497|  86.8k|            case L'^':
  498|  86.8k|                return align_type::center;
  499|  86.8k|            default:
  500|  86.8k|                return align_type::none;
  501|  86.8k|        }
  502|  86.8k|    };
  503|       |
  504|  86.8k|    auto potential_fill_len = code_point_length(begin, end);
  505|  86.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  |  Branch (157:45): [True: 0, False: 86.8k]
  |  |  |  Branch (157:45): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  506|  86.8k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  86.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  86.8k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  86.8k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  86.8k|    const auto begin_before_fill = begin;
  516|  86.8k|    begin += potential_fill_len;
  517|       |
  518|  86.8k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 86.8k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  86.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  86.8k|    const auto begin_after_fill = begin;
  524|  86.8k|    ++begin;
  525|       |
  526|  86.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 86.8k, False: 0]
  ------------------
  527|  86.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  86.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 86.8k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  86.8k|    }
  535|       |
  536|  86.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 86.8k, False: 0]
  ------------------
  537|  86.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 86.8k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  86.8k|        return begin_before_fill;
  542|  86.8k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  86.8k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   173k|    auto check_align = [](wchar_t ch) {
  492|   173k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 173k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 173k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 173k]
  ------------------
  498|      0|                return align_type::center;
  499|   173k|            default:
  ------------------
  |  Branch (499:13): [True: 173k, False: 0]
  ------------------
  500|   173k|                return align_type::none;
  501|   173k|        }
  502|   173k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  86.8k|{
  554|  86.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  86.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 86.8k, False: 0]
  |  Branch (556:33): [True: 0, False: 86.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  86.8k|    return begin;
  567|  86.8k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  86.8k|    {
 1051|  86.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  86.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 86.8k, False: 0]
  ------------------
 1053|  86.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 86.8k, False: 0]
  ------------------
 1054|  86.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 86.8k]
  ------------------
 1055|  86.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  86.8k|        Handler::on_localized();
 1063|  86.8k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.52M|{
  226|  2.52M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.52M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.52M|                  "\n"
  230|  2.52M|                  "Unsupported range type given as input to a scanning "
  231|  2.52M|                  "function.\n"
  232|  2.52M|                  "A range needs to have a character type (value type) "
  233|  2.52M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.52M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.52M|                  "to be included.\n"
  236|  2.52M|                  "See the scnlib documentation for more details.");
  237|  2.52M|    static_assert(
  238|  2.52M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.52M|        "\n"
  240|  2.52M|        "Unsupported range type given as input to a scanning "
  241|  2.52M|        "function.\n"
  242|  2.52M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.52M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.52M|        "not supported.");
  245|  2.52M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.52M|                  "\n"
  247|  2.52M|                  "Unsupported range type given as input to a scanning "
  248|  2.52M|                  "function.\n"
  249|  2.52M|                  "file_marker_found cannot be used as an "
  250|  2.52M|                  "source range type to scn::scan.\n"
  251|  2.52M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.52M|                  "and do not provide an explicit source range, "
  253|  2.52M|                  "or use scn::scan with a FILE* directly.");
  254|  2.52M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.52M|                  "\n"
  256|  2.52M|                  "Unsupported range type given as input to a scanning "
  257|  2.52M|                  "function.\n"
  258|  2.52M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.52M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.52M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.52M|                  "\n"
  262|  2.52M|                  "Unsupported range type given as input to a scanning "
  263|  2.52M|                  "function.\n"
  264|  2.52M|                  "A range needs to model forward_range and have a valid "
  265|  2.52M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.52M|                  "Examples of scannable ranges are std::string, "
  267|  2.52M|                  "std::string_view, "
  268|  2.52M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.52M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.52M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.52M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.52M|{
  153|  2.52M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.52M|        return std::basic_string_view{ranges::data(r),
  155|  2.52M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.52M|    }
  162|  2.52M|    else {
  163|  2.52M|        return invalid_char_type{};
  164|  2.52M|    }
  165|  2.52M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   282k|{
  226|   282k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   282k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   282k|                  "\n"
  230|   282k|                  "Unsupported range type given as input to a scanning "
  231|   282k|                  "function.\n"
  232|   282k|                  "A range needs to have a character type (value type) "
  233|   282k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   282k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   282k|                  "to be included.\n"
  236|   282k|                  "See the scnlib documentation for more details.");
  237|   282k|    static_assert(
  238|   282k|        !std::is_same_v<T, custom_char_traits>,
  239|   282k|        "\n"
  240|   282k|        "Unsupported range type given as input to a scanning "
  241|   282k|        "function.\n"
  242|   282k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   282k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   282k|        "not supported.");
  245|   282k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   282k|                  "\n"
  247|   282k|                  "Unsupported range type given as input to a scanning "
  248|   282k|                  "function.\n"
  249|   282k|                  "file_marker_found cannot be used as an "
  250|   282k|                  "source range type to scn::scan.\n"
  251|   282k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   282k|                  "and do not provide an explicit source range, "
  253|   282k|                  "or use scn::scan with a FILE* directly.");
  254|   282k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   282k|                  "\n"
  256|   282k|                  "Unsupported range type given as input to a scanning "
  257|   282k|                  "function.\n"
  258|   282k|                  "In order to be scannable, a range needs to satisfy "
  259|   282k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   282k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   282k|                  "\n"
  262|   282k|                  "Unsupported range type given as input to a scanning "
  263|   282k|                  "function.\n"
  264|   282k|                  "A range needs to model forward_range and have a valid "
  265|   282k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   282k|                  "Examples of scannable ranges are std::string, "
  267|   282k|                  "std::string_view, "
  268|   282k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   282k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   282k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   282k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   282k|{
  196|   282k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   282k|        return file_marker_found{};
  198|   282k|    }
  199|   282k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   282k|        if constexpr (ranges::input_range<Range>) {
  201|   282k|            return insufficient_range{};
  202|   282k|        }
  203|   282k|        else {
  204|   282k|            return invalid_input_range{};
  205|   282k|        }
  206|   282k|    }
  207|   282k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   282k|        return invalid_char_type{};
  209|   282k|    }
  210|   282k|    else {
  211|   282k|        return make_forward_scan_buffer(r);
  212|   282k|    }
  213|   282k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.24M|{
  226|  2.24M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.24M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.24M|                  "\n"
  230|  2.24M|                  "Unsupported range type given as input to a scanning "
  231|  2.24M|                  "function.\n"
  232|  2.24M|                  "A range needs to have a character type (value type) "
  233|  2.24M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.24M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.24M|                  "to be included.\n"
  236|  2.24M|                  "See the scnlib documentation for more details.");
  237|  2.24M|    static_assert(
  238|  2.24M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.24M|        "\n"
  240|  2.24M|        "Unsupported range type given as input to a scanning "
  241|  2.24M|        "function.\n"
  242|  2.24M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.24M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.24M|        "not supported.");
  245|  2.24M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.24M|                  "\n"
  247|  2.24M|                  "Unsupported range type given as input to a scanning "
  248|  2.24M|                  "function.\n"
  249|  2.24M|                  "file_marker_found cannot be used as an "
  250|  2.24M|                  "source range type to scn::scan.\n"
  251|  2.24M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.24M|                  "and do not provide an explicit source range, "
  253|  2.24M|                  "or use scn::scan with a FILE* directly.");
  254|  2.24M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.24M|                  "\n"
  256|  2.24M|                  "Unsupported range type given as input to a scanning "
  257|  2.24M|                  "function.\n"
  258|  2.24M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.24M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.24M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.24M|                  "\n"
  262|  2.24M|                  "Unsupported range type given as input to a scanning "
  263|  2.24M|                  "function.\n"
  264|  2.24M|                  "A range needs to model forward_range and have a valid "
  265|  2.24M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.24M|                  "Examples of scannable ranges are std::string, "
  267|  2.24M|                  "std::string_view, "
  268|  2.24M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.24M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.24M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.24M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.24M|{
  153|  2.24M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.24M|        return std::basic_string_view{ranges::data(r),
  155|  2.24M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.24M|    }
  162|  2.24M|    else {
  163|  2.24M|        return invalid_char_type{};
  164|  2.24M|    }
  165|  2.24M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   506k|{
  226|   506k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   506k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   506k|                  "\n"
  230|   506k|                  "Unsupported range type given as input to a scanning "
  231|   506k|                  "function.\n"
  232|   506k|                  "A range needs to have a character type (value type) "
  233|   506k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   506k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   506k|                  "to be included.\n"
  236|   506k|                  "See the scnlib documentation for more details.");
  237|   506k|    static_assert(
  238|   506k|        !std::is_same_v<T, custom_char_traits>,
  239|   506k|        "\n"
  240|   506k|        "Unsupported range type given as input to a scanning "
  241|   506k|        "function.\n"
  242|   506k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   506k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   506k|        "not supported.");
  245|   506k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   506k|                  "\n"
  247|   506k|                  "Unsupported range type given as input to a scanning "
  248|   506k|                  "function.\n"
  249|   506k|                  "file_marker_found cannot be used as an "
  250|   506k|                  "source range type to scn::scan.\n"
  251|   506k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   506k|                  "and do not provide an explicit source range, "
  253|   506k|                  "or use scn::scan with a FILE* directly.");
  254|   506k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   506k|                  "\n"
  256|   506k|                  "Unsupported range type given as input to a scanning "
  257|   506k|                  "function.\n"
  258|   506k|                  "In order to be scannable, a range needs to satisfy "
  259|   506k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   506k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   506k|                  "\n"
  262|   506k|                  "Unsupported range type given as input to a scanning "
  263|   506k|                  "function.\n"
  264|   506k|                  "A range needs to model forward_range and have a valid "
  265|   506k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   506k|                  "Examples of scannable ranges are std::string, "
  267|   506k|                  "std::string_view, "
  268|   506k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   506k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   506k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   506k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   506k|{
  196|   506k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   506k|        return file_marker_found{};
  198|   506k|    }
  199|   506k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   506k|        if constexpr (ranges::input_range<Range>) {
  201|   506k|            return insufficient_range{};
  202|   506k|        }
  203|   506k|        else {
  204|   506k|            return invalid_input_range{};
  205|   506k|        }
  206|   506k|    }
  207|   506k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   506k|        return invalid_char_type{};
  209|   506k|    }
  210|   506k|    else {
  211|   506k|        return make_forward_scan_buffer(r);
  212|   506k|    }
  213|   506k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  8.56M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  1.96M|    {
   45|  1.96M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  1.96M|    {
   66|  1.96M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.96M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.96M|        do_check_arg_id(id);
   74|  1.96M|        return id;
   75|  1.96M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  1.96M|{
  210|  1.96M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.96M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.96M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.96M|    {
   61|  1.96M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.96M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  3.92M|    {
   50|  3.92M|        return m_format.data();
   51|  3.92M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  1.93M|    {
   45|  1.93M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  1.93M|    {
   66|  1.93M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.93M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.93M|        do_check_arg_id(id);
   74|  1.93M|        return id;
   75|  1.93M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  1.93M|{
  210|  1.93M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.93M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.93M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.93M|    {
   61|  1.93M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.93M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  3.87M|    {
   50|  3.87M|        return m_format.data();
   51|  3.87M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  157|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  157|  6.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  157|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  157|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.02M|    {
  482|  5.02M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  5.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.02M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  5.02M|    {
  473|  5.02M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  5.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.02M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.24M|    {
  482|  2.24M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.24M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  2.24M|    {
  473|  2.24M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.24M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.33M|    {
  482|  2.33M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.33M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  2.33M|    {
  473|  2.33M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.33M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.67M|    {
  549|  1.67M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.67M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.67M|    {
  541|  1.67M|        return ranges::distance(lhs, rhs);
  542|  1.67M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   734k|    {
  513|   734k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   734k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   734k|    {
  498|   734k|        it.batch_advance(n);
  499|   734k|        return it;
  500|   734k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   129k|    {
  549|   129k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   129k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTmicldtfp0_8positionEcldtfp_8positionEEEET_SC_NS5_12priority_tagILm1EEE:
  533|   129k|    {
  534|   129k|        return rhs.position() - lhs.position();
  535|   129k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.01M|    {
  482|  2.01M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.01M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  2.01M|    {
  473|  2.01M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.01M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.41M|    {
  549|  1.41M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.41M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.41M|    {
  541|  1.41M|        return ranges::distance(lhs, rhs);
  542|  1.41M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   997k|    {
  513|   997k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   997k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   997k|    {
  498|   997k|        it.batch_advance(n);
  499|   997k|        return it;
  500|   997k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   231k|    {
  549|   231k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   231k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTmicldtfp0_8positionEcldtfp_8positionEEEET_SC_NS5_12priority_tagILm1EEE:
  533|   231k|    {
  534|   231k|        return rhs.position() - lhs.position();
  535|   231k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.27M|    {
  482|  1.27M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.27M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISO_EE4typeE_EEOSH_:
  472|  1.27M|    {
  473|  1.27M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.27M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.42M|{
  343|  2.42M|    return {ranges::next(ranges::begin(source), n),
  344|  2.42M|            make_vscan_result_range_end(source)};
  345|  2.42M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.42M|{
  330|  2.42M|    return ranges::end(source);
  331|  2.42M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   754k|    {
  253|   754k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.42M|    {
  104|  2.42M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  1.56M|    {
   39|  1.56M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.42M|    {
  121|  2.42M|        return ranges::begin(m_range);
  122|  2.42M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   826k|    {
  253|   826k|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  1.69M|    {
   39|  1.69M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   839k|    {
  253|   839k|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  1.71M|    {
   39|  1.71M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   177k|{
  343|   177k|    return {ranges::next(ranges::begin(source), n),
  344|   177k|            make_vscan_result_range_end(source)};
  345|   177k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   177k|{
  330|   177k|    return ranges::end(source);
  331|   177k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ESF_ONS6_5tupleIJfEEE:
  252|  59.2k|    {
  253|  59.2k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   177k|    {
  104|   177k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   177k|    {
  121|   177k|        return ranges::begin(m_range);
  122|   177k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ESF_ONS6_5tupleIJdEEE:
  252|  59.2k|    {
  253|  59.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ESF_ONS6_5tupleIJeEEE:
  252|  59.2k|    {
  253|  59.2k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.05M|{
  343|  2.05M|    return {ranges::next(ranges::begin(source), n),
  344|  2.05M|            make_vscan_result_range_end(source)};
  345|  2.05M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.05M|{
  330|  2.05M|    return ranges::end(source);
  331|  2.05M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   641k|    {
  253|   641k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.05M|    {
  104|  2.05M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.05M|    {
  121|  2.05M|        return ranges::begin(m_range);
  122|  2.05M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   699k|    {
  253|   699k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   711k|    {
  253|   711k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   318k|{
  343|   318k|    return {ranges::next(ranges::begin(source), n),
  344|   318k|            make_vscan_result_range_end(source)};
  345|   318k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   318k|{
  330|   318k|    return ranges::end(source);
  331|   318k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ESF_ONS6_5tupleIJfEEE:
  252|   106k|    {
  253|   106k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   318k|    {
  104|   318k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   318k|    {
  121|   318k|        return ranges::begin(m_range);
  122|   318k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ESF_ONS6_5tupleIJdEEE:
  252|   106k|    {
  253|   106k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ESF_ONS6_5tupleIJeEEE:
  252|   106k|    {
  253|   106k|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   355k|{
  117|   355k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   355k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   355k|{
   77|   355k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   355k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   355k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   355k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   355k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   710k|{
   55|   710k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 677k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|   677k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   677k|    static_cast<    \
  |  |  251|   677k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   677k|    static_cast<    \
  |  |  251|   677k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   710k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   355k|{
  201|   355k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   355k|                                                      format, {});
  203|   355k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   355k|{
  163|   355k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   355k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   355k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   355k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   355k|    static_cast<    \
  |  |  251|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   355k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  79.2k|{
  248|  79.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  79.2k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  79.2k|{
  229|  79.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  79.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 76.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  76.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  76.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  76.5k|    static_cast<    \
  |  |  251|  76.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  76.5k|    static_cast<    \
  |  |  251|  76.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  79.2k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   386k|{
  117|   386k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   386k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   386k|{
   77|   386k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   386k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   386k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   386k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   386k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   773k|{
   55|   773k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 741k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|   741k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   741k|    static_cast<    \
  |  |  251|   741k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   741k|    static_cast<    \
  |  |  251|   741k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   773k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   386k|{
  201|   386k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   386k|                                                      format, {});
  203|   386k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   386k|{
  163|   386k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   386k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   386k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   386k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   386k|    static_cast<    \
  |  |  251|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   386k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  88.3k|{
  248|  88.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  88.3k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  88.3k|{
  229|  88.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  88.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  88.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  88.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  85.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  85.6k|    static_cast<    \
  |  |  251|  85.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  85.6k|    static_cast<    \
  |  |  251|  85.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  88.3k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   392k|{
  117|   392k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   392k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   392k|{
   77|   392k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   392k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   392k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   392k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   392k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   784k|{
   55|   784k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   784k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 752k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|   752k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   752k|    static_cast<    \
  |  |  251|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   752k|    static_cast<    \
  |  |  251|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   784k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   392k|{
  201|   392k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   392k|                                                      format, {});
  203|   392k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   392k|{
  163|   392k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   392k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   392k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   392k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   392k|    static_cast<    \
  |  |  251|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   392k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  90.0k|{
  248|  90.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  90.0k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  90.0k|{
  229|  90.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  90.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 87.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  87.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  87.3k|    static_cast<    \
  |  |  251|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  87.3k|    static_cast<    \
  |  |  251|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  90.0k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  43.0k|{
  117|  43.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  43.0k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  43.0k|{
   77|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  43.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  43.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  86.1k|{
   55|  86.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  86.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 53.8k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|  53.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  86.1k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  43.0k|{
  201|  43.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  43.0k|                                                      format, {});
  203|  43.0k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  43.0k|{
  163|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  43.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  43.0k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  8.07k|{
  248|  8.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  8.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  8.07k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  8.07k|{
  229|  8.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 5.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  5.38k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.07k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  43.0k|{
  117|  43.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  43.0k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  43.0k|{
   77|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  43.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  43.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  86.1k|{
   55|  86.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  86.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 53.8k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|  53.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  86.1k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  43.0k|{
  201|  43.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  43.0k|                                                      format, {});
  203|  43.0k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  43.0k|{
  163|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  43.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  43.0k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  8.07k|{
  248|  8.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  8.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  8.07k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  8.07k|{
  229|  8.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 5.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  5.38k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.07k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  43.0k|{
  117|  43.0k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  43.0k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  43.0k|{
   77|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  43.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  43.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  86.1k|{
   55|  86.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  86.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 32.3k, False: 53.8k]
  |  |  ------------------
  ------------------
   56|  32.3k|        return unexpected(result.error());
   57|  32.3k|    }
   58|  53.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  53.8k|    static_cast<    \
  |  |  251|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  86.1k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  43.0k|{
  201|  43.0k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  43.0k|                                                      format, {});
  203|  43.0k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  43.0k|{
  163|  43.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  43.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  43.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  43.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  43.0k|    static_cast<    \
  |  |  251|  43.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  43.0k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  8.07k|{
  248|  8.07k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  8.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  8.07k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  8.07k|{
  229|  8.07k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.07k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 5.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  5.38k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  5.38k|    static_cast<    \
  |  |  251|  5.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.07k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   316k|{
   77|   316k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   316k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   316k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   316k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   316k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   633k|{
   55|   633k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 575k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|   575k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   575k|    static_cast<    \
  |  |  251|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   575k|    static_cast<    \
  |  |  251|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   633k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   316k|{
  163|   316k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   316k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   316k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   316k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   316k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  69.9k|{
  229|  69.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  69.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 65.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  65.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  65.1k|    static_cast<    \
  |  |  251|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  65.1k|    static_cast<    \
  |  |  251|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  69.9k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   342k|{
   77|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   342k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   342k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   685k|{
   55|   685k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   685k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 627k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|   627k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   627k|    static_cast<    \
  |  |  251|   627k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   627k|    static_cast<    \
  |  |  251|   627k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   685k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   342k|{
  163|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   342k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   342k|    static_cast<    \
  |  |  251|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   342k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  77.3k|{
  229|  77.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  77.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  77.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  77.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  77.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  72.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  72.5k|    static_cast<    \
  |  |  251|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  72.5k|    static_cast<    \
  |  |  251|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  77.3k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   347k|{
   77|   347k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   347k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   347k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   347k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   695k|{
   55|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 637k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   637k|    static_cast<    \
  |  |  251|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   637k|    static_cast<    \
  |  |  251|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   695k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   347k|{
  163|   347k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   347k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   347k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   347k|    static_cast<    \
  |  |  251|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   347k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  78.8k|{
  229|  78.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  78.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 74.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  74.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  74.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  74.0k|    static_cast<    \
  |  |  251|  74.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  74.0k|    static_cast<    \
  |  |  251|  74.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  78.8k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  77.1k|{
   77|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  77.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  77.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   154k|{
   55|   154k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 96.4k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|  96.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   154k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  77.1k|{
  163|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  77.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  77.1k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  14.4k|{
  229|  14.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 9.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  9.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  9.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  14.4k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  77.1k|{
   77|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  77.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  77.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   154k|{
   55|   154k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 96.4k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|  96.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   154k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  77.1k|{
  163|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  77.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  77.1k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  14.4k|{
  229|  14.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 9.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  9.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  9.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  14.4k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  77.1k|{
   77|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  77.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  77.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   154k|{
   55|   154k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.8k, False: 96.4k]
  |  |  ------------------
  ------------------
   56|  57.8k|        return unexpected(result.error());
   57|  57.8k|    }
   58|  96.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  96.4k|    static_cast<    \
  |  |  251|  96.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   154k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  77.1k|{
  163|  77.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  77.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  77.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  77.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  77.1k|    static_cast<    \
  |  |  251|  77.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  77.1k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  14.4k|{
  229|  14.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.82k, False: 9.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.82k|    }                                                  \
  |  |  |  |   70|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  9.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  9.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  9.64k|    static_cast<    \
  |  |  251|  9.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  14.4k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   282k|{
  486|   282k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   282k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   282k|    {
  378|   282k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   282k|    {
  360|   282k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   282k|    {
  129|   282k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   282k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.22M|    {
  382|  1.22M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.99k, False: 1.21M]
  ------------------
  383|  1.99k|            return false;
  384|  1.99k|        }
  385|  1.21M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 935k, False: 282k]
  ------------------
  386|   935k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   935k|                                          this->m_current_view.begin(),
  388|   935k|                                          this->m_current_view.end());
  389|   935k|        }
  390|  1.21M|        m_latest = *m_cursor;
  391|  1.21M|        ++m_cursor;
  392|  1.21M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.21M|        return true;
  394|  1.22M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   282k|    {
   49|   282k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   282k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   282k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   506k|{
  486|   506k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   506k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   506k|    {
  378|   506k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   506k|    {
  360|   506k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   506k|    {
  129|   506k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   506k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  2.66M|    {
  382|  2.66M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 2.96k, False: 2.66M]
  ------------------
  383|  2.96k|            return false;
  384|  2.96k|        }
  385|  2.66M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 2.15M, False: 506k]
  ------------------
  386|  2.15M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  2.15M|                                          this->m_current_view.begin(),
  388|  2.15M|                                          this->m_current_view.end());
  389|  2.15M|        }
  390|  2.66M|        m_latest = *m_cursor;
  391|  2.66M|        ++m_cursor;
  392|  2.66M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  2.66M|        return true;
  394|  2.66M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   506k|    {
   49|   506k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   506k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   506k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  30.5M|    {
  173|  30.5M|        return m_end == nullptr;
  174|  30.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  1.36M|    {
  189|  1.36M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.36M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.36M|        return parent()->get_segment_starting_at(position());
  195|  1.36M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  16.3M|    {
  183|  16.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  16.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  16.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  16.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  16.3M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  1.36M|    {
   79|  1.36M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 532k, False: 832k]
  |  |  ------------------
  ------------------
   80|  1.36M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   532k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   532k|        }
   83|   832k|        const auto start = pos - m_putback_buffer.size();
   84|   832k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|   832k|        return m_current_view.substr(start);
   86|   832k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   734k|    {
  178|   734k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|   734k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   734k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|   734k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   734k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.76M|    {
  168|  2.76M|        return m_position;
  169|  2.76M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   848k|    {
  101|   848k|        return m_is_contiguous;
  102|   848k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  69.4M|    {
  173|  69.4M|        return m_end == nullptr;
  174|  69.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  3.23M|    {
  189|  3.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 3.23M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  3.23M|        return parent()->get_segment_starting_at(position());
  195|  3.23M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  37.4M|    {
  183|  37.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  37.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  37.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  37.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  37.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  3.23M|    {
   79|  3.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.43M, False: 1.80M]
  |  |  ------------------
  ------------------
   80|  3.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  1.43M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  1.43M|        }
   83|  1.80M|        const auto start = pos - m_putback_buffer.size();
   84|  1.80M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|  1.80M|        return m_current_view.substr(start);
   86|  1.80M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.31M|    {
  178|  1.31M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|  1.31M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.31M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  6.69M|    {
  168|  6.69M|        return m_position;
  169|  6.69M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.51M|    {
  101|  1.51M|        return m_is_contiguous;
  102|  1.51M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   282k|{
  322|   282k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 282k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   282k|    return ranges::subrange{forward_iterator{this, 0},
  327|   282k|                            ranges_std::default_sentinel};
  328|   282k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   282k|    {
  155|   282k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   282k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   282k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.05M|    {
  258|  2.05M|        return x.is_at_end();
  259|  2.05M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  3.07M|    {
  302|  3.07M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 3.07M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  3.07M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 3.07M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  3.07M|        return !read_at_position();
  309|  3.07M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  8.43M|    {
  282|  8.43M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  8.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  8.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 8.43M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  8.43M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  8.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 7.21M, False: 1.22M]
  |  |  ------------------
  ------------------
  289|  7.21M|            return true;
  290|  7.21M|        }
  291|       |
  292|  2.43M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.22M, False: 1.21M]
  ------------------
  293|  1.22M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.99k, False: 1.21M]
  ------------------
  294|  1.99k|                return false;
  295|  1.99k|            }
  296|  1.22M|        }
  297|  1.21M|        return true;
  298|  1.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  11.6M|    {
   59|  11.6M|        return m_putback_buffer.size() + m_current_view.size();
   60|  11.6M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.02M|    {
  269|  1.02M|        return !x.is_at_end();
  270|  1.02M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.89M|    {
  217|  2.89M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.89M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.89M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.89M|        auto res = read_at_position();
  226|  2.89M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  2.89M|        return parent()->get_character_at(m_position);
  228|  2.89M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.89M|    {
   90|  2.89M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  2.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.71M, False: 178k]
  |  |  ------------------
  ------------------
   91|  2.89M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.71M|            return m_putback_buffer[pos];
   93|  2.71M|        }
   94|   178k|        const auto start = pos - m_putback_buffer.size();
   95|   178k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|   178k|        return m_current_view[start];
   97|   178k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  2.46M|    {
  203|  2.46M|        ++m_position;
  204|  2.46M|        std::ignore = read_at_position();
  205|  2.46M|        return *this;
  206|  2.46M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  1.53M|    {
  252|  1.53M|        return !(lhs == rhs);
  253|  1.53M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  2.17M|    {
  247|  2.17M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.17M, False: 0]
  |  Branch (247:46): [True: 815k, False: 1.35M]
  ------------------
  248|  2.17M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   734k|    {
  232|   734k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   734k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   734k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   734k|        m_position += n;
  234|   734k|        return *this;
  235|   734k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   105k|    {
   54|   105k|        sync(0);
   55|   105k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   506k|{
  322|   506k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 506k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   506k|    return ranges::subrange{forward_iterator{this, 0},
  327|   506k|                            ranges_std::default_sentinel};
  328|   506k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   506k|    {
  155|   506k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   506k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   506k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  3.67M|    {
  258|  3.67M|        return x.is_at_end();
  259|  3.67M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  6.81M|    {
  302|  6.81M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 6.81M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  6.81M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 6.81M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  6.81M|        return !read_at_position();
  309|  6.81M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  19.6M|    {
  282|  19.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  19.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  19.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  19.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 19.6M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  19.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  19.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 17.0M, False: 2.66M]
  |  |  ------------------
  ------------------
  289|  17.0M|            return true;
  290|  17.0M|        }
  291|       |
  292|  5.32M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 2.66M, False: 2.66M]
  ------------------
  293|  2.66M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 2.96k, False: 2.66M]
  ------------------
  294|  2.96k|                return false;
  295|  2.96k|            }
  296|  2.66M|        }
  297|  2.66M|        return true;
  298|  2.66M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  26.3M|    {
   59|  26.3M|        return m_putback_buffer.size() + m_current_view.size();
   60|  26.3M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  3.13M|    {
  269|  3.13M|        return !x.is_at_end();
  270|  3.13M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  6.49M|    {
  217|  6.49M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  6.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  6.49M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 6.49M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  6.49M|        auto res = read_at_position();
  226|  6.49M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  6.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  6.49M|        return parent()->get_character_at(m_position);
  228|  6.49M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  6.49M|    {
   90|  6.49M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  6.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.69M, False: 796k]
  |  |  ------------------
  ------------------
   91|  6.49M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  5.69M|            return m_putback_buffer[pos];
   93|  5.69M|        }
   94|   796k|        const auto start = pos - m_putback_buffer.size();
   95|   796k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|   796k|        return m_current_view[start];
   97|   796k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  6.37M|    {
  203|  6.37M|        ++m_position;
  204|  6.37M|        std::ignore = read_at_position();
  205|  6.37M|        return *this;
  206|  6.37M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  4.04M|    {
  252|  4.04M|        return !(lhs == rhs);
  253|  4.04M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  5.19M|    {
  247|  5.19M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 5.19M, False: 0]
  |  Branch (247:46): [True: 1.93M, False: 3.25M]
  ------------------
  248|  5.19M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   997k|    {
  232|   997k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   997k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   997k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   997k|        m_position += n;
  234|   997k|        return *this;
  235|   997k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   188k|    {
   54|   188k|        sync(0);
   55|   188k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  1.79M|{
   72|  1.79M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.79M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.79M|    }
   75|  1.79M|    else if constexpr (sizeof(U) == 2) {
   76|  1.79M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.79M|    }
   78|  1.79M|    else {
   79|       |        // utf-32
   80|  1.79M|        static_assert(sizeof(U) == 4);
   81|  1.79M|        SCN_UNUSED(ch);
   82|  1.79M|        return 1;
   83|  1.79M|    }
   84|  1.79M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  1.79M|{
   36|  1.79M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  1.79M|    SCN_GCC_COMPAT_PUSH
   39|  1.79M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  1.79M|    constexpr char lengths[] =
   41|  1.79M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  1.79M|        "\1\1\1\1\1\1\1\1"
   43|  1.79M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  1.79M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  1.79M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  1.79M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  1.79M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  1.79M|    SCN_GCC_COMPAT_POP
   50|  1.79M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  79.9M|{
   72|  79.9M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  79.9M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  79.9M|    }
   75|  79.9M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  79.9M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  79.9M|    }
   78|  79.9M|    else {
   79|       |        // utf-32
   80|  79.9M|        static_assert(sizeof(U) == 4);
   81|  79.9M|        SCN_UNUSED(ch);
  ------------------
  |  |  231|  79.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  79.9M|        return 1;
   83|  79.9M|    }
   84|  79.9M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   773k|{
   36|   773k|#define SCN_VISIT(Type)                                         \
   37|   773k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   773k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   773k|    }                                                           \
   40|   773k|    else {                                                      \
   41|   773k|        return vis(monostate_val);                              \
   42|   773k|    }
   43|       |
   44|   773k|    monostate monostate_val{};
   45|       |
   46|   773k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 773k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 773k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 773k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 773k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 773k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 773k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 773k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 773k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 773k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 773k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 773k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 773k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 773k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 773k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 773k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   237k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 237k, False: 535k]
  ------------------
   78|   237k|            SCN_VISIT(float);
  ------------------
  |  |   37|   237k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   237k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   237k|    }                                                           \
  |  |   40|   237k|    else {                                                      \
  |  |   41|   237k|        return vis(monostate_val);                              \
  |  |   42|   237k|    }
  ------------------
   79|   265k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 265k, False: 508k]
  ------------------
   80|   265k|            SCN_VISIT(double);
  ------------------
  |  |   37|   265k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   265k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   265k|    }                                                           \
  |  |   40|   265k|    else {                                                      \
  |  |   41|   265k|        return vis(monostate_val);                              \
  |  |   42|   265k|    }
  ------------------
   81|   270k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 270k, False: 503k]
  ------------------
   82|   270k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   270k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   270k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   270k|    }                                                           \
  |  |   40|   270k|    else {                                                      \
  |  |   41|   270k|        return vis(monostate_val);                              \
  |  |   42|   270k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 773k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 773k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 773k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 773k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 773k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 773k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 773k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 773k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 773k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   773k|            SCN_CLANG_POP
  114|   773k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  72.6k|{
   36|  72.6k|#define SCN_VISIT(Type)                                         \
   37|  72.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  72.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  72.6k|    }                                                           \
   40|  72.6k|    else {                                                      \
   41|  72.6k|        return vis(monostate_val);                              \
   42|  72.6k|    }
   43|       |
   44|  72.6k|    monostate monostate_val{};
   45|       |
   46|  72.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 72.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 72.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 72.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 72.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 72.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 72.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 72.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 72.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 72.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 72.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 72.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 72.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 72.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 72.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 72.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  24.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 24.2k, False: 48.4k]
  ------------------
   78|  24.2k|            SCN_VISIT(float);
  ------------------
  |  |   37|  24.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.2k|    }                                                           \
  |  |   40|  24.2k|    else {                                                      \
  |  |   41|  24.2k|        return vis(monostate_val);                              \
  |  |   42|  24.2k|    }
  ------------------
   79|  24.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 24.2k, False: 48.4k]
  ------------------
   80|  24.2k|            SCN_VISIT(double);
  ------------------
  |  |   37|  24.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.2k|    }                                                           \
  |  |   40|  24.2k|    else {                                                      \
  |  |   41|  24.2k|        return vis(monostate_val);                              \
  |  |   42|  24.2k|    }
  ------------------
   81|  24.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 24.2k, False: 48.4k]
  ------------------
   82|  24.2k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  24.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.2k|    }                                                           \
  |  |   40|  24.2k|    else {                                                      \
  |  |   41|  24.2k|        return vis(monostate_val);                              \
  |  |   42|  24.2k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 72.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 72.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 72.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 72.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 72.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 72.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 72.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 72.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 72.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  72.6k|            SCN_CLANG_POP
  114|  72.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.75M|{
   36|  1.75M|#define SCN_VISIT(Type)                                         \
   37|  1.75M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.75M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.75M|    }                                                           \
   40|  1.75M|    else {                                                      \
   41|  1.75M|        return vis(monostate_val);                              \
   42|  1.75M|    }
   43|       |
   44|  1.75M|    monostate monostate_val{};
   45|       |
   46|  1.75M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.75M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.75M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.75M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.75M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.75M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.75M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.75M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.75M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.75M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.75M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.75M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.75M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.75M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.75M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.75M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   551k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 551k, False: 1.20M]
  ------------------
   78|   551k|            SCN_VISIT(float);
  ------------------
  |  |   37|   551k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   551k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   551k|    }                                                           \
  |  |   40|   551k|    else {                                                      \
  |  |   41|   551k|        return vis(monostate_val);                              \
  |  |   42|   551k|    }
  ------------------
   79|   596k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 596k, False: 1.15M]
  ------------------
   80|   596k|            SCN_VISIT(double);
  ------------------
  |  |   37|   596k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   596k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   596k|    }                                                           \
  |  |   40|   596k|    else {                                                      \
  |  |   41|   596k|        return vis(monostate_val);                              \
  |  |   42|   596k|    }
  ------------------
   81|   604k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 604k, False: 1.14M]
  ------------------
   82|   604k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   604k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   604k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   604k|    }                                                           \
  |  |   40|   604k|    else {                                                      \
  |  |   41|   604k|        return vis(monostate_val);                              \
  |  |   42|   604k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.75M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.75M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.75M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.75M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.75M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.75M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.75M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.75M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.75M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.75M|            SCN_CLANG_POP
  114|  1.75M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   210k|{
   36|   210k|#define SCN_VISIT(Type)                                         \
   37|   210k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   210k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   210k|    }                                                           \
   40|   210k|    else {                                                      \
   41|   210k|        return vis(monostate_val);                              \
   42|   210k|    }
   43|       |
   44|   210k|    monostate monostate_val{};
   45|       |
   46|   210k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 210k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 210k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 210k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 210k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 210k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 210k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 210k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 210k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 210k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 210k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 210k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 210k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 210k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 210k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 210k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  70.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 70.0k, False: 140k]
  ------------------
   78|  70.0k|            SCN_VISIT(float);
  ------------------
  |  |   37|  70.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  70.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  70.0k|    }                                                           \
  |  |   40|  70.0k|    else {                                                      \
  |  |   41|  70.0k|        return vis(monostate_val);                              \
  |  |   42|  70.0k|    }
  ------------------
   79|  70.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 70.0k, False: 140k]
  ------------------
   80|  70.0k|            SCN_VISIT(double);
  ------------------
  |  |   37|  70.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  70.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  70.0k|    }                                                           \
  |  |   40|  70.0k|    else {                                                      \
  |  |   41|  70.0k|        return vis(monostate_val);                              \
  |  |   42|  70.0k|    }
  ------------------
   81|  70.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 70.0k, False: 140k]
  ------------------
   82|  70.0k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  70.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  70.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  70.0k|    }                                                           \
  |  |   40|  70.0k|    else {                                                      \
  |  |   41|  70.0k|        return vis(monostate_val);                              \
  |  |   42|  70.0k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 210k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 210k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 210k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 210k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 210k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 210k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 210k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 210k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 210k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   210k|            SCN_CLANG_POP
  114|   210k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   678k|{
   36|   678k|#define SCN_VISIT(Type)                                         \
   37|   678k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   678k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   678k|    }                                                           \
   40|   678k|    else {                                                      \
   41|   678k|        return vis(monostate_val);                              \
   42|   678k|    }
   43|       |
   44|   678k|    monostate monostate_val{};
   45|       |
   46|   678k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 678k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 678k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 678k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 678k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 678k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 678k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 678k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 678k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 678k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 678k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 678k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 678k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 678k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 678k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 678k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   209k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 209k, False: 468k]
  ------------------
   78|   209k|            SCN_VISIT(float);
  ------------------
  |  |   37|   209k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   209k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   209k|    }                                                           \
  |  |   40|   209k|    else {                                                      \
  |  |   41|   209k|        return vis(monostate_val);                              \
  |  |   42|   209k|    }
  ------------------
   79|   232k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 232k, False: 446k]
  ------------------
   80|   232k|            SCN_VISIT(double);
  ------------------
  |  |   37|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   232k|    }                                                           \
  |  |   40|   232k|    else {                                                      \
  |  |   41|   232k|        return vis(monostate_val);                              \
  |  |   42|   232k|    }
  ------------------
   81|   236k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 236k, False: 442k]
  ------------------
   82|   236k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   236k|    }                                                           \
  |  |   40|   236k|    else {                                                      \
  |  |   41|   236k|        return vis(monostate_val);                              \
  |  |   42|   236k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 678k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 678k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 678k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 678k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 678k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 678k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 678k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 678k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 678k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   678k|            SCN_CLANG_POP
  114|   678k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.56M|{
   36|  1.56M|#define SCN_VISIT(Type)                                         \
   37|  1.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.56M|    }                                                           \
   40|  1.56M|    else {                                                      \
   41|  1.56M|        return vis(monostate_val);                              \
   42|  1.56M|    }
   43|       |
   44|  1.56M|    monostate monostate_val{};
   45|       |
   46|  1.56M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.56M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.56M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.56M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.56M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.56M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.56M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.56M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.56M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.56M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.56M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.56M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.56M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.56M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.56M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.56M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   493k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 493k, False: 1.06M]
  ------------------
   78|   493k|            SCN_VISIT(float);
  ------------------
  |  |   37|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   493k|    }                                                           \
  |  |   40|   493k|    else {                                                      \
  |  |   41|   493k|        return vis(monostate_val);                              \
  |  |   42|   493k|    }
  ------------------
   79|   530k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 530k, False: 1.03M]
  ------------------
   80|   530k|            SCN_VISIT(double);
  ------------------
  |  |   37|   530k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   530k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   530k|    }                                                           \
  |  |   40|   530k|    else {                                                      \
  |  |   41|   530k|        return vis(monostate_val);                              \
  |  |   42|   530k|    }
  ------------------
   81|   537k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 537k, False: 1.02M]
  ------------------
   82|   537k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   537k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   537k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   537k|    }                                                           \
  |  |   40|   537k|    else {                                                      \
  |  |   41|   537k|        return vis(monostate_val);                              \
  |  |   42|   537k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.56M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.56M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.56M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.56M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.56M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.56M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.56M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.56M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.56M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.56M|            SCN_CLANG_POP
  114|  1.56M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   130k|{
   36|   130k|#define SCN_VISIT(Type)                                         \
   37|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   130k|    }                                                           \
   40|   130k|    else {                                                      \
   41|   130k|        return vis(monostate_val);                              \
   42|   130k|    }
   43|       |
   44|   130k|    monostate monostate_val{};
   45|       |
   46|   130k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 130k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 130k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 130k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 130k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 130k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 130k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 130k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 130k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 130k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 130k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 130k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 130k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 130k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 130k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 130k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  43.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 43.4k, False: 86.8k]
  ------------------
   78|  43.4k|            SCN_VISIT(float);
  ------------------
  |  |   37|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.4k|    }                                                           \
  |  |   40|  43.4k|    else {                                                      \
  |  |   41|  43.4k|        return vis(monostate_val);                              \
  |  |   42|  43.4k|    }
  ------------------
   79|  43.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 43.4k, False: 86.8k]
  ------------------
   80|  43.4k|            SCN_VISIT(double);
  ------------------
  |  |   37|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.4k|    }                                                           \
  |  |   40|  43.4k|    else {                                                      \
  |  |   41|  43.4k|        return vis(monostate_val);                              \
  |  |   42|  43.4k|    }
  ------------------
   81|  43.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 43.4k, False: 86.8k]
  ------------------
   82|  43.4k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  43.4k|    }                                                           \
  |  |   40|  43.4k|    else {                                                      \
  |  |   41|  43.4k|        return vis(monostate_val);                              \
  |  |   42|  43.4k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 130k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 130k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 130k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 130k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 130k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 130k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 130k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 130k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 130k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   130k|            SCN_CLANG_POP
  114|   130k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   376k|{
   36|   376k|#define SCN_VISIT(Type)                                         \
   37|   376k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   376k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   376k|    }                                                           \
   40|   376k|    else {                                                      \
   41|   376k|        return vis(monostate_val);                              \
   42|   376k|    }
   43|       |
   44|   376k|    monostate monostate_val{};
   45|       |
   46|   376k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 376k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 376k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 376k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 376k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 376k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 376k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 376k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 376k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 376k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 376k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 376k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 376k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 376k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 376k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 376k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   125k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 125k, False: 250k]
  ------------------
   78|   125k|            SCN_VISIT(float);
  ------------------
  |  |   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   125k|    }                                                           \
  |  |   40|   125k|    else {                                                      \
  |  |   41|   125k|        return vis(monostate_val);                              \
  |  |   42|   125k|    }
  ------------------
   79|   125k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 125k, False: 250k]
  ------------------
   80|   125k|            SCN_VISIT(double);
  ------------------
  |  |   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   125k|    }                                                           \
  |  |   40|   125k|    else {                                                      \
  |  |   41|   125k|        return vis(monostate_val);                              \
  |  |   42|   125k|    }
  ------------------
   81|   125k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 125k, False: 250k]
  ------------------
   82|   125k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   125k|    }                                                           \
  |  |   40|   125k|    else {                                                      \
  |  |   41|   125k|        return vis(monostate_val);                              \
  |  |   42|   125k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 376k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 376k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 376k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 376k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 376k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 376k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 376k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 376k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 376k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   376k|            SCN_CLANG_POP
  114|   376k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.13M|{
  174|  1.13M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.13M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.13M|{
  111|  1.13M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.13M|    auto result = vscan_impl(buffer, format, args);
  114|  1.13M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 48.4k, False: 1.08M]
  |  |  ------------------
  ------------------
  115|  48.4k|        return unexpected(result.error());
  116|  48.4k|    }
  117|  1.08M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.13M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.13M|{
  192|  1.13M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.13M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.13M|{
  127|  1.13M|#if !SCN_DISABLE_LOCALE
  128|  1.13M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.13M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.13M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.13M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.13M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 48.4k, False: 1.08M]
  |  |  ------------------
  ------------------
  135|  48.4k|        return unexpected(result.error());
  136|  48.4k|    }
  137|  1.08M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.13M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   257k|{
  205|   257k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   257k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   257k|{
  151|   257k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   257k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   257k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.07k, False: 249k]
  |  |  ------------------
  ------------------
  155|  8.07k|        return unexpected(result.error());
  156|  8.07k|    }
  157|   249k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   257k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   129k|{
  174|   129k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   129k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   129k|{
  111|   129k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   129k|    auto result = vscan_impl(buffer, format, args);
  114|   129k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 48.4k, False: 80.7k]
  |  |  ------------------
  ------------------
  115|  48.4k|        return unexpected(result.error());
  116|  48.4k|    }
  117|  80.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   129k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   129k|{
  192|   129k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   129k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   129k|{
  127|   129k|#if !SCN_DISABLE_LOCALE
  128|   129k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   129k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   129k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   129k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   129k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 48.4k, False: 80.7k]
  |  |  ------------------
  ------------------
  135|  48.4k|        return unexpected(result.error());
  136|  48.4k|    }
  137|  80.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   129k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  24.2k|{
  205|  24.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  24.2k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  24.2k|{
  151|  24.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  24.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  24.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.07k, False: 16.1k]
  |  |  ------------------
  ------------------
  155|  8.07k|        return unexpected(result.error());
  156|  8.07k|    }
  157|  16.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  24.2k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.00M|{
  111|  1.00M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.00M|    auto result = vscan_impl(buffer, format, args);
  114|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.8k, False: 920k]
  |  |  ------------------
  ------------------
  115|  86.8k|        return unexpected(result.error());
  116|  86.8k|    }
  117|   920k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.00M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.00M|{
  127|  1.00M|#if !SCN_DISABLE_LOCALE
  128|  1.00M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.00M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.00M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.00M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.8k, False: 920k]
  |  |  ------------------
  ------------------
  135|  86.8k|        return unexpected(result.error());
  136|  86.8k|    }
  137|   920k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.00M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   226k|{
  151|   226k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   226k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   226k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 14.4k, False: 211k]
  |  |  ------------------
  ------------------
  155|  14.4k|        return unexpected(result.error());
  156|  14.4k|    }
  157|   211k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   226k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   231k|{
  111|   231k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   231k|    auto result = vscan_impl(buffer, format, args);
  114|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.8k, False: 144k]
  |  |  ------------------
  ------------------
  115|  86.8k|        return unexpected(result.error());
  116|  86.8k|    }
  117|   144k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   231k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   231k|{
  127|   231k|#if !SCN_DISABLE_LOCALE
  128|   231k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   231k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   231k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   231k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.8k, False: 144k]
  |  |  ------------------
  ------------------
  135|  86.8k|        return unexpected(result.error());
  136|  86.8k|    }
  137|   144k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   231k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  43.4k|{
  151|  43.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  43.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  43.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 14.4k, False: 28.9k]
  |  |  ------------------
  ------------------
  155|  14.4k|        return unexpected(result.error());
  156|  14.4k|    }
  157|  28.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  43.4k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   316k|{
   90|   316k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   316k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.00M|{
   45|  1.00M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.00M|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   316k|{
  125|   316k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   316k|                                                         format, {});
  127|   316k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.00M|{
   61|  1.00M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.00M|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  69.9k|{
  159|  69.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  69.9k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   226k|{
   73|   226k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   226k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   342k|{
   90|   342k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   342k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   342k|{
  125|   342k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   342k|                                                         format, {});
  127|   342k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  77.3k|{
  159|  77.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  77.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  77.3k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   347k|{
   90|   347k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   347k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   347k|{
  125|   347k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   347k|                                                         format, {});
  127|   347k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  78.8k|{
  159|  78.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  78.8k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  77.1k|{
   90|  77.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   231k|{
   45|   231k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   231k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  77.1k|{
  125|  77.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  77.1k|                                                         format, {});
  127|  77.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   231k|{
   61|   231k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   231k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  14.4k|{
  159|  14.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  14.4k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  43.4k|{
   73|  43.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  43.4k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  77.1k|{
   90|  77.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.1k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  77.1k|{
  125|  77.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  77.1k|                                                         format, {});
  127|  77.1k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  14.4k|{
  159|  14.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  14.4k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  77.1k|{
   90|  77.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.1k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  77.1k|{
  125|  77.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  77.1k|                                                         format, {});
  127|  77.1k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  14.4k|{
  159|  14.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  14.4k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  9.90M|            {
 2693|  9.90M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.90M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  9.90M|            {
 2672|  9.90M|                return decay_copy(t.begin());
 2673|  9.90M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEEu7__decayIT_EOS5_:
 2605|   103M|    {
 2606|   103M|        return std::forward<T>(t);
 2607|   103M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.02M|            {
 3178|  5.02M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.02M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.02M|            {
 3158|  5.02M|                return t.data();
 3159|  5.02M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.02M|    {
 6095|  5.02M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.9k, False: 5.00M]
  ------------------
 6096|  5.02M|                   ? nullptr
 6097|  5.02M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.02M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.02M|            {
 3127|  5.02M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.02M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.02M|            {
 3098|  5.02M|                return bool((std::forward<T>(t).empty()));
 3099|  5.02M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  14.0M|        {
 6454|  14.0M|            return data_.begin_ == data_.end_;
 6455|  14.0M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  10.0M|    {
 6049|  10.0M|        return static_cast<const D&>(*this);
 6050|  10.0M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  18.6M|            {
 2693|  18.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  18.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  18.6M|            {
 2672|  18.6M|                return decay_copy(t.begin());
 2673|  18.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  59.5M|        {
 6444|  59.5M|            return data_.begin_;
 6445|  59.5M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.02M|            {
 3038|  5.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.02M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.02M|            {
 3000|  5.02M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.02M|            }
_ZN4nano6ranges6detail10decay_copyIlEEu7__decayIT_EOS3_:
 2605|  24.3M|    {
 2606|  24.3M|        return std::forward<T>(t);
 2607|  24.3M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  14.1M|        {
 6462|  14.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  14.1M|                return data_.size_;
 6464|  14.1M|            }
 6465|  14.1M|            else {
 6466|  14.1M|                return data_.end_ - data_.begin_;
 6467|  14.1M|            }
 6468|  14.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.85M|            {
 3788|  8.85M|                ranges::advance(x, n);
 3789|  8.85M|                return x;
 3790|  8.85M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.85M|            {
 3678|  8.85M|                fn::impl(i, n);
 3679|  8.85M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.85M|            {
 3562|  8.85M|                r += n;
 3563|  8.85M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  39.1M|            {
 2693|  39.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  39.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  39.1M|            {
 2672|  39.1M|                return decay_copy(t.begin());
 2673|  39.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  11.0M|            {
 2759|  11.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  11.0M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  11.0M|            {
 2739|  11.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  11.0M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  28.2M|        {
 6449|  28.2M|            return data_.end_;
 6450|  28.2M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  11.3M|            {
 2759|  11.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  11.3M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  11.3M|            {
 2739|  11.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  11.3M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  22.1M|        {
 6375|  22.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  22.1M|        {
 6294|  22.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   105k|            {
 2693|   105k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   105k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   105k|            {
 2672|   105k|                return decay_copy(t.begin());
 2673|   105k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEEu7__decayIT_EOSB_:
 2605|  2.42M|    {
 2606|  2.42M|        return std::forward<T>(t);
 2607|  2.42M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   460k|            {
 2693|   460k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   460k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   460k|            {
 2672|   460k|                return decay_copy(t.begin());
 2673|   460k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   638k|        {
 6444|   638k|            return data_.begin_;
 6445|   638k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.39M|            {
 2759|  1.39M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.39M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.39M|            {
 2739|  1.39M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.39M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.39M|        {
 6449|  1.39M|            return data_.end_;
 6450|  1.39M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   177k|            {
 3788|   177k|                ranges::advance(x, n);
 3789|   177k|                return x;
 3790|   177k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   177k|            {
 3678|   177k|                fn::impl(i, n);
 3679|   177k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   177k|            {
 3562|   177k|                r += n;
 3563|   177k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   282k|            {
 2759|   282k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   282k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   282k|            {
 2739|   282k|                return decay_copy(std::forward<T>(t).end());
 2740|   282k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   460k|        {
 6375|   460k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   460k|        {
 6294|   460k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   177k|            {
 2693|   177k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   177k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   177k|            {
 2672|   177k|                return decay_copy(t.begin());
 2673|   177k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.85M|            {
 2693|  1.85M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.85M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.85M|            {
 2672|  1.85M|                return decay_copy(t.begin());
 2673|  1.85M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEEu7__decayIT_EOS5_:
 2605|   170M|    {
 2606|   170M|        return std::forward<T>(t);
 2607|   170M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.24M|            {
 3178|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.24M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.24M|            {
 3158|  2.24M|                return t.data();
 3159|  2.24M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.24M|    {
 6095|  2.24M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 22.3k, False: 2.21M]
  ------------------
 6096|  2.24M|                   ? nullptr
 6097|  2.24M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.24M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.24M|            {
 3127|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.24M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.24M|            {
 3098|  2.24M|                return bool((std::forward<T>(t).empty()));
 3099|  2.24M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  4.25M|        {
 6454|  4.25M|            return data_.begin_ == data_.end_;
 6455|  4.25M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  4.45M|    {
 6049|  4.45M|        return static_cast<const D&>(*this);
 6050|  4.45M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  16.3M|            {
 2693|  16.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  16.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  16.3M|            {
 2672|  16.3M|                return decay_copy(t.begin());
 2673|  16.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  58.9M|        {
 6444|  58.9M|            return data_.begin_;
 6445|  58.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.24M|            {
 3038|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.24M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.24M|            {
 3000|  2.24M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.24M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  10.2M|        {
 6462|  10.2M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  10.2M|                return data_.size_;
 6464|  10.2M|            }
 6465|  10.2M|            else {
 6466|  10.2M|                return data_.end_ - data_.begin_;
 6467|  10.2M|            }
 6468|  10.2M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  9.96M|            {
 3788|  9.96M|                ranges::advance(x, n);
 3789|  9.96M|                return x;
 3790|  9.96M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  9.96M|            {
 3678|  9.96M|                fn::impl(i, n);
 3679|  9.96M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  9.96M|            {
 3562|  9.96M|                r += n;
 3563|  9.96M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  40.9M|            {
 2693|  40.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  40.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  40.9M|            {
 2672|  40.9M|                return decay_copy(t.begin());
 2673|  40.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  57.3M|            {
 2759|  57.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  57.3M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  57.3M|            {
 2739|  57.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  57.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   108M|        {
 6449|   108M|            return data_.end_;
 6450|   108M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  5.23M|            {
 2759|  5.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.23M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  5.23M|            {
 2739|  5.23M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.23M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  20.6M|        {
 6375|  20.6M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  20.6M|        {
 6294|  20.6M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   188k|            {
 2693|   188k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   188k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   188k|            {
 2672|   188k|                return decay_copy(t.begin());
 2673|   188k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEEu7__decayIT_EOSB_:
 2605|  4.81M|    {
 2606|  4.81M|        return std::forward<T>(t);
 2607|  4.81M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   824k|            {
 2693|   824k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   824k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   824k|            {
 2672|   824k|                return decay_copy(t.begin());
 2673|   824k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.14M|        {
 6444|  1.14M|            return data_.begin_;
 6445|  1.14M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.98M|            {
 2759|  2.98M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.98M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.98M|            {
 2739|  2.98M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.98M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  2.98M|        {
 6449|  2.98M|            return data_.end_;
 6450|  2.98M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   318k|            {
 3788|   318k|                ranges::advance(x, n);
 3789|   318k|                return x;
 3790|   318k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   318k|            {
 3678|   318k|                fn::impl(i, n);
 3679|   318k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   318k|            {
 3562|   318k|                r += n;
 3563|   318k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   506k|            {
 2759|   506k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   506k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   506k|            {
 2739|   506k|                return decay_copy(std::forward<T>(t).end());
 2740|   506k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   824k|        {
 6375|   824k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   824k|        {
 6294|   824k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   318k|            {
 2693|   318k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   318k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   318k|            {
 2672|   318k|                return decay_copy(t.begin());
 2673|   318k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  10.8M|        {
 6444|  10.8M|            return data_.begin_;
 6445|  10.8M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  20.8M|        {
 6444|  20.8M|            return data_.begin_;
 6445|  20.8M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  18.0M|    {
 6044|  18.0M|        return static_cast<D&>(*this);
 6045|  18.0M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  9.02M|            {
 3098|  9.02M|                return bool((std::forward<T>(t).empty()));
 3099|  9.02M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  9.02M|            {
 3127|  9.02M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.02M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  9.02M|    {
 6085|  9.02M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 2.79k, False: 9.02M]
  ------------------
 6086|  9.02M|                   ? nullptr
 6087|  9.02M|                   : std::addressof(*ranges::begin(derived()));
 6088|  9.02M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  13.7M|            {
 2739|  13.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  13.7M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  13.7M|            {
 2759|  13.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  13.7M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  4.03M|    {
 6044|  4.03M|        return static_cast<D&>(*this);
 6045|  4.03M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.01M|            {
 3098|  2.01M|                return bool((std::forward<T>(t).empty()));
 3099|  2.01M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.01M|            {
 3127|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.01M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.01M|    {
 6085|  2.01M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 2.73k, False: 2.01M]
  ------------------
 6086|  2.01M|                   ? nullptr
 6087|  2.01M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.01M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  48.5M|            {
 2739|  48.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  48.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  48.5M|            {
 2759|  48.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  48.5M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.67M|            {
 3780|  3.67M|                ++x;
 3781|  3.67M|                return x;
 3782|  3.67M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  9.08M|            {
 3038|  9.08M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.08M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.08M|            {
 3000|  9.08M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.08M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  9.02M|            {
 3178|  9.02M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.02M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.02M|            {
 3158|  9.02M|                return t.data();
 3159|  9.02M|            }
_ZN4nano6ranges6detail10decay_copyImEEu7__decayIT_EOS3_:
 2605|  14.2M|    {
 2606|  14.2M|        return std::forward<T>(t);
 2607|  14.2M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  8.00M|            {
 3077|  8.00M|                return fn::impl(std::forward<T>(t));
 3078|  8.00M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  8.00M|            {
 3067|  8.00M|                return static_cast<ssize_return_t<T>>(
 3068|  8.00M|                    ranges::size(std::forward<T>(t)));
 3069|  8.00M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  9.27M|            {
 3038|  9.27M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.27M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  9.27M|            {
 3000|  9.27M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.27M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.74M|            {
 3597|  1.74M|                i = std::move(bound);
 3598|  1.74M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  4.96M|            {
 3077|  4.96M|                return fn::impl(std::forward<T>(t));
 3078|  4.96M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  4.96M|            {
 3067|  4.96M|                return static_cast<ssize_return_t<T>>(
 3068|  4.96M|                    ranges::size(std::forward<T>(t)));
 3069|  4.96M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.96M|            {
 3038|  4.96M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.96M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  4.96M|            {
 3000|  4.96M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.96M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.30M|        {
 6793|  1.30M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.30M|                                    proj);
 6795|  1.30M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.30M|        {
 6761|  7.60M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.59M, False: 10.9k]
  ------------------
 6762|  7.59M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.28M, False: 6.30M]
  ------------------
 6763|  1.28M|                    return first;
 6764|  1.28M|                }
 6765|  6.30M|                ++first;
 6766|  6.30M|            }
 6767|  10.9k|            return first;
 6768|  1.30M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.59M|            {
 1300|  7.59M|                return fn::impl(std::forward<F>(f),
 1301|  7.59M|                                std::forward<Args>(args)...);
 1302|  7.59M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISG_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSG_DpOSI_:
 1288|  7.59M|            {
 1289|  7.59M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.59M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  53.5M|            {
 1300|  53.5M|                return fn::impl(std::forward<F>(f),
 1301|  53.5M|                                std::forward<Args>(args)...);
 1302|  53.5M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|  53.5M|            {
 1289|  53.5M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  53.5M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  53.5M|    {
 1142|  53.5M|        return std::forward<T>(t);
 1143|  53.5M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.74M|            {
 3798|  1.74M|                ranges::advance(x, bound);
 3799|  1.74M|                return x;
 3800|  1.74M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.74M|            {
 3686|  1.74M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.74M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.72M|            {
 3756|  7.72M|                return fn::impl(std::move(first), std::move(last));
 3757|  7.72M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.72M|            {
 3716|  7.72M|                return s - i;
 3717|  7.72M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.39M|        {
 6375|  2.39M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.39M|        {
 6294|  2.39M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.43M|            {
 2693|  4.43M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.43M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.43M|            {
 2672|  4.43M|                return decay_copy(t.begin());
 2673|  4.43M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  10.6M|    {
 2606|  10.6M|        return std::forward<T>(t);
 2607|  10.6M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.66M|            {
 2759|  2.66M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.66M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.66M|            {
 2739|  2.66M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.66M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEEu7__decayIT_EOS4_:
 2605|  14.7M|    {
 2606|  14.7M|        return std::forward<T>(t);
 2607|  14.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  4.78M|        {
 6449|  4.78M|            return data_.end_;
 6450|  4.78M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   710k|        {
 6444|   710k|            return data_.begin_;
 6445|   710k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   710k|        {
 6449|   710k|            return data_.end_;
 6450|   710k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   355k|        {
 6375|   355k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   355k|        {
 6294|   355k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   637k|            {
 3780|   637k|                ++x;
 3781|   637k|                return x;
 3782|   637k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   476k|        {
 6793|   476k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   476k|                                    proj);
 6795|   476k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   476k|        {
 6761|   670k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 670k, False: 144]
  ------------------
 6762|   670k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 476k, False: 193k]
  ------------------
 6763|   476k|                    return first;
 6764|   476k|                }
 6765|   193k|                ++first;
 6766|   193k|            }
 6767|    144|            return first;
 6768|   476k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   670k|            {
 1300|   670k|                return fn::impl(std::forward<F>(f),
 1301|   670k|                                std::forward<Args>(args)...);
 1302|   670k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|   670k|            {
 1289|   670k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   670k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   670k|            {
 1300|   670k|                return fn::impl(std::forward<F>(f),
 1301|   670k|                                std::forward<Args>(args)...);
 1302|   670k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|   670k|            {
 1289|   670k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   670k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   670k|    {
 1142|   670k|        return std::forward<T>(t);
 1143|   670k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.12M|            {
 2759|  2.12M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.12M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.12M|            {
 2739|  2.12M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.12M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  6.19M|            {
 2693|  6.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.19M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  6.19M|            {
 2672|  6.19M|                return decay_copy(t.begin());
 2673|  6.19M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|   193k|            {
 3756|   193k|                return fn::impl(std::move(first), std::move(last));
 3757|   193k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|   193k|            {
 3724|   193k|                iter_difference_t<I> counter{0};
 3725|   387k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 193k, False: 193k]
  ------------------
 3726|   193k|                    ++i;
 3727|   193k|                    ++counter;
 3728|   193k|                }
 3729|   193k|                return counter;
 3730|   193k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3787|   177k|            {
 3788|   177k|                ranges::advance(x, n);
 3789|   177k|                return x;
 3790|   177k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3677|   177k|            {
 3678|   177k|                fn::impl(i, n);
 3679|   177k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3587|   177k|            {
 3588|   355k|                while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (3588:24): [True: 177k, False: 177k]
  ------------------
 3589|   177k|                    ++i;
 3590|   177k|                }
 3591|   177k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.01M|            {
 3178|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.01M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.01M|            {
 3158|  2.01M|                return t.data();
 3159|  2.01M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.96M|            {
 3038|  7.96M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.96M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.96M|            {
 3000|  7.96M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.96M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.52M|            {
 3597|  1.52M|                i = std::move(bound);
 3598|  1.52M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.20M|            {
 3780|  3.20M|                ++x;
 3781|  3.20M|                return x;
 3782|  3.20M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  5.95M|            {
 3077|  5.95M|                return fn::impl(std::forward<T>(t));
 3078|  5.95M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  5.95M|            {
 3067|  5.95M|                return static_cast<ssize_return_t<T>>(
 3068|  5.95M|                    ranges::size(std::forward<T>(t)));
 3069|  5.95M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.13M|        {
 6793|  1.13M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.13M|                                    proj);
 6795|  1.13M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.13M|        {
 6761|  6.01M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 6.00M, False: 11.3k]
  ------------------
 6762|  6.00M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.12M, False: 4.87M]
  ------------------
 6763|  1.12M|                    return first;
 6764|  1.12M|                }
 6765|  4.87M|                ++first;
 6766|  4.87M|            }
 6767|  11.3k|            return first;
 6768|  1.13M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  6.00M|            {
 1300|  6.00M|                return fn::impl(std::forward<F>(f),
 1301|  6.00M|                                std::forward<Args>(args)...);
 1302|  6.00M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISG_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSG_DpOSI_:
 1288|  6.00M|            {
 1289|  6.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.00M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  6.00M|            {
 1300|  6.00M|                return fn::impl(std::forward<F>(f),
 1301|  6.00M|                                std::forward<Args>(args)...);
 1302|  6.00M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|  6.00M|            {
 1289|  6.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.00M|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  6.00M|    {
 1142|  6.00M|        return std::forward<T>(t);
 1143|  6.00M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.52M|            {
 3798|  1.52M|                ranges::advance(x, bound);
 3799|  1.52M|                return x;
 3800|  1.52M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.52M|            {
 3686|  1.52M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.52M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  2.80M|            {
 3756|  2.80M|                return fn::impl(std::move(first), std::move(last));
 3757|  2.80M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  2.80M|            {
 3716|  2.80M|                return s - i;
 3717|  2.80M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  4.77M|        {
 6375|  4.77M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  4.77M|        {
 6294|  4.77M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  8.12M|            {
 2693|  8.12M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.12M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  8.12M|            {
 2672|  8.12M|                return decay_copy(t.begin());
 2673|  8.12M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  20.4M|    {
 2606|  20.4M|        return std::forward<T>(t);
 2607|  20.4M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  5.25M|            {
 2759|  5.25M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.25M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  5.25M|            {
 2739|  5.25M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.25M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  10.0M|        {
 6449|  10.0M|            return data_.end_;
 6450|  10.0M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  2.70M|        {
 6444|  2.70M|            return data_.begin_;
 6445|  2.70M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  2.70M|        {
 6449|  2.70M|            return data_.end_;
 6450|  2.70M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  1.11M|        {
 6375|  1.11M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  1.11M|        {
 6294|  1.11M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.14M|            {
 3780|  1.14M|                ++x;
 3781|  1.14M|                return x;
 3782|  1.14M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   853k|        {
 6793|   853k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   853k|                                    proj);
 6795|   853k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   853k|        {
 6761|  1.54M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.54M, False: 321]
  ------------------
 6762|  1.54M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 853k, False: 694k]
  ------------------
 6763|   853k|                    return first;
 6764|   853k|                }
 6765|   694k|                ++first;
 6766|   694k|            }
 6767|    321|            return first;
 6768|   853k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.54M|            {
 1300|  1.54M|                return fn::impl(std::forward<F>(f),
 1301|  1.54M|                                std::forward<Args>(args)...);
 1302|  1.54M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|  1.54M|            {
 1289|  1.54M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.54M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.54M|            {
 1300|  1.54M|                return fn::impl(std::forward<F>(f),
 1301|  1.54M|                                std::forward<Args>(args)...);
 1302|  1.54M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|  1.54M|            {
 1289|  1.54M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.54M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.54M|    {
 1142|  1.54M|        return std::forward<T>(t);
 1143|  1.54M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.75M|            {
 2759|  4.75M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.75M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.75M|            {
 2739|  4.75M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.75M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  12.3M|            {
 2693|  12.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  12.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  12.3M|            {
 2672|  12.3M|                return decay_copy(t.begin());
 2673|  12.3M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|   347k|            {
 3756|   347k|                return fn::impl(std::move(first), std::move(last));
 3757|   347k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|   347k|            {
 3724|   347k|                iter_difference_t<I> counter{0};
 3725|  1.04M|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 694k, False: 347k]
  ------------------
 3726|   694k|                    ++i;
 3727|   694k|                    ++counter;
 3728|   694k|                }
 3729|   347k|                return counter;
 3730|   347k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3787|   318k|            {
 3788|   318k|                ranges::advance(x, n);
 3789|   318k|                return x;
 3790|   318k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3677|   318k|            {
 3678|   318k|                fn::impl(i, n);
 3679|   318k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3587|   318k|            {
 3588|   954k|                while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (3588:24): [True: 636k, False: 318k]
  ------------------
 3589|   636k|                    ++i;
 3590|   636k|                }
 3591|   318k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  1.27M|            {
 3178|  1.27M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.27M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.27M|            {
 3158|  1.27M|                return t.data();
 3159|  1.27M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.87M|        {
 6793|  5.87M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.87M|                                    proj);
 6795|  5.87M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.87M|        {
 6761|  46.4M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 41.4M, False: 5.04M]
  ------------------
 6762|  41.4M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 838k, False: 40.5M]
  ------------------
 6763|   838k|                    return first;
 6764|   838k|                }
 6765|  40.5M|                ++first;
 6766|  40.5M|            }
 6767|  5.04M|            return first;
 6768|  5.87M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  41.4M|            {
 1300|  41.4M|                return fn::impl(std::forward<F>(f),
 1301|  41.4M|                                std::forward<Args>(args)...);
 1302|  41.4M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|  41.4M|            {
 1289|  41.4M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  41.4M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.55M|        {
 6793|  2.55M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.55M|                                    proj);
 6795|  2.55M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.55M|        {
 6761|  4.65M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.53M, False: 118k]
  ------------------
 6762|  4.53M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.43M, False: 2.10M]
  ------------------
 6763|  2.43M|                    return first;
 6764|  2.43M|                }
 6765|  2.10M|                ++first;
 6766|  2.10M|            }
 6767|   118k|            return first;
 6768|  2.55M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  4.53M|            {
 1300|  4.53M|                return fn::impl(std::forward<F>(f),
 1301|  4.53M|                                std::forward<Args>(args)...);
 1302|  4.53M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|  4.53M|            {
 1289|  4.53M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.53M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.39M|    {
   44|  2.39M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  2.01k|{
   50|  2.01k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  2.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.01k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  70.1k|{
   50|  70.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  70.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  70.1k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|  2.19k|{
   50|  2.19k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.19k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   371k|    {
   44|   371k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  48.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.15M|    {
   44|  2.15M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   665k|    {
   44|   665k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  86.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   216k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|   103k|{
   50|   103k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   103k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  16.5M|    {
 1191|  16.5M|        return has_value();
 1192|  16.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  32.7M|    {
  189|  32.7M|        return m_has_value;
  190|  32.7M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   827k|    {
 1197|   827k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   827k|        return this->get_unexpected().error();
 1199|   827k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   827k|    {
  172|   827k|        return m_unexpected;
  173|   827k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  5.95M|    {
   72|  5.95M|        return m_unexpected;
   73|  5.95M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  2.89M|    {
   58|  2.89M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  2.89M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  2.89M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   105k|    {
 1078|   105k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   105k|    {
  151|   105k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  8.71M|    {
   67|  8.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  8.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  8.71M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.52M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  5.46M|    {
 1251|  5.46M|        return value();
 1252|  5.46M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  15.4M|    {
 1221|  15.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  15.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  15.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  15.4M|        return this->get_value();
 1223|  15.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  15.4M|    {
  155|  15.4M|        return m_value;
  156|  15.4M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.42M|    {
 1034|  2.42M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.42M|    {
  142|  2.42M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.52M|    {
 1191|  2.52M|        return has_value();
 1192|  2.52M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.05M|    {
  189|  5.05M|        return m_has_value;
  190|  5.05M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   105k|    {
 1197|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   105k|        return this->get_unexpected().error();
 1199|   105k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   105k|    {
  172|   105k|        return m_unexpected;
  173|   105k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   789k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.17M|    {
 1251|  2.17M|        return value();
 1252|  2.17M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.42M|    {
 1221|  2.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.42M|        return this->get_value();
 1223|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.42M|    {
  155|  2.42M|        return m_value;
  156|  2.42M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   754k|    {
 1034|   754k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   754k|    {
  142|   754k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   789k|    {
 1191|   789k|        return has_value();
 1192|   789k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.54M|    {
  189|  1.54M|        return m_has_value;
  190|  1.54M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   754k|    {
 1274|   754k|        return std::addressof(value());
 1275|   754k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   754k|    {
 1221|   754k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   754k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   754k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   754k|        return this->get_value();
 1223|   754k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   754k|    {
  155|   754k|        return m_value;
  156|   754k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   249k|    {
 1263|   249k|        return std::move(value());
 1264|   249k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   861k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   826k|    {
 1034|   826k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   826k|    {
  142|   826k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   861k|    {
 1191|   861k|        return has_value();
 1192|   861k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.68M|    {
  189|  1.68M|        return m_has_value;
  190|  1.68M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   826k|    {
 1274|   826k|        return std::addressof(value());
 1275|   826k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   826k|    {
 1221|   826k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   826k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   826k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   826k|        return this->get_value();
 1223|   826k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   826k|    {
  155|   826k|        return m_value;
  156|   826k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   874k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   839k|    {
 1034|   839k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   839k|    {
  142|   839k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   874k|    {
 1191|   874k|        return has_value();
 1192|   874k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.71M|    {
  189|  1.71M|        return m_has_value;
  190|  1.71M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   839k|    {
 1274|   839k|        return std::addressof(value());
 1275|   839k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   839k|    {
 1221|   839k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   839k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   839k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   839k|        return this->get_value();
 1223|   839k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   839k|    {
  155|   839k|        return m_value;
  156|   839k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   105k|    {
 1078|   105k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   105k|    {
  151|   105k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   282k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   177k|    {
 1034|   177k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   177k|    {
  142|   177k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   282k|    {
 1191|   282k|        return has_value();
 1192|   282k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   565k|    {
  189|   565k|        return m_has_value;
  190|   565k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   105k|    {
 1197|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   105k|        return this->get_unexpected().error();
 1199|   105k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   105k|    {
  172|   105k|        return m_unexpected;
  173|   105k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  94.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   161k|    {
 1251|   161k|        return value();
 1252|   161k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   177k|    {
 1221|   177k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   177k|        return this->get_value();
 1223|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   177k|    {
  155|   177k|        return m_value;
  156|   177k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  59.2k|    {
 1034|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  59.2k|    {
  142|  59.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  94.2k|    {
 1191|  94.2k|        return has_value();
 1192|  94.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   153k|    {
  189|   153k|        return m_has_value;
  190|   153k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  59.2k|    {
 1274|  59.2k|        return std::addressof(value());
 1275|  59.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  59.2k|    {
 1221|  59.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  59.2k|        return this->get_value();
 1223|  59.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  59.2k|    {
  155|  59.2k|        return m_value;
  156|  59.2k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  16.1k|    {
 1263|  16.1k|        return std::move(value());
 1264|  16.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  94.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  59.2k|    {
 1034|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  59.2k|    {
  142|  59.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  94.2k|    {
 1191|  94.2k|        return has_value();
 1192|  94.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   153k|    {
  189|   153k|        return m_has_value;
  190|   153k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  59.2k|    {
 1274|  59.2k|        return std::addressof(value());
 1275|  59.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  59.2k|    {
 1221|  59.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  59.2k|        return this->get_value();
 1223|  59.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  59.2k|    {
  155|  59.2k|        return m_value;
  156|  59.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  35.0k|    {
 1078|  35.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  35.0k|    {
  151|  35.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  94.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  59.2k|    {
 1034|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  59.2k|    {
  142|  59.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  94.2k|    {
 1191|  94.2k|        return has_value();
 1192|  94.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   153k|    {
  189|   153k|        return m_has_value;
  190|   153k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  59.2k|    {
 1274|  59.2k|        return std::addressof(value());
 1275|  59.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  59.2k|    {
 1221|  59.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  59.2k|        return this->get_value();
 1223|  59.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  59.2k|    {
  155|  59.2k|        return m_value;
  156|  59.2k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   188k|    {
 1078|   188k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   188k|    {
  151|   188k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.24M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.05M|    {
 1034|  2.05M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.05M|    {
  142|  2.05M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.24M|    {
 1191|  2.24M|        return has_value();
 1192|  2.24M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.48M|    {
  189|  4.48M|        return m_has_value;
  190|  4.48M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   188k|    {
 1197|   188k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   188k|        return this->get_unexpected().error();
 1199|   188k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   188k|    {
  172|   188k|        return m_unexpected;
  173|   188k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   703k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.84M|    {
 1251|  1.84M|        return value();
 1252|  1.84M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.05M|    {
 1221|  2.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.05M|        return this->get_value();
 1223|  2.05M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.05M|    {
  155|  2.05M|        return m_value;
  156|  2.05M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   641k|    {
 1034|   641k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   641k|    {
  142|   641k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   703k|    {
 1191|   703k|        return has_value();
 1192|   703k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   641k|    {
 1274|   641k|        return std::addressof(value());
 1275|   641k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   641k|    {
 1221|   641k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   641k|        return this->get_value();
 1223|   641k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   641k|    {
  155|   641k|        return m_value;
  156|   641k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   211k|    {
 1263|   211k|        return std::move(value());
 1264|   211k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   762k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   699k|    {
 1034|   699k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   699k|    {
  142|   699k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   762k|    {
 1191|   762k|        return has_value();
 1192|   762k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.46M|    {
  189|  1.46M|        return m_has_value;
  190|  1.46M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   699k|    {
 1274|   699k|        return std::addressof(value());
 1275|   699k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   699k|    {
 1221|   699k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   699k|        return this->get_value();
 1223|   699k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   699k|    {
  155|   699k|        return m_value;
  156|   699k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   774k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   711k|    {
 1034|   711k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   711k|    {
  142|   711k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   774k|    {
 1191|   774k|        return has_value();
 1192|   774k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.48M|    {
  189|  1.48M|        return m_has_value;
  190|  1.48M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   711k|    {
 1274|   711k|        return std::addressof(value());
 1275|   711k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   711k|    {
 1221|   711k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   711k|        return this->get_value();
 1223|   711k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   711k|    {
  155|   711k|        return m_value;
  156|   711k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   188k|    {
 1078|   188k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   188k|    {
  151|   188k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   506k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   318k|    {
 1034|   318k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   318k|    {
  142|   318k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   506k|    {
 1191|   506k|        return has_value();
 1192|   506k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.01M|    {
  189|  1.01M|        return m_has_value;
  190|  1.01M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   188k|    {
 1197|   188k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   188k|        return this->get_unexpected().error();
 1199|   188k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   188k|    {
  172|   188k|        return m_unexpected;
  173|   188k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   168k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   289k|    {
 1251|   289k|        return value();
 1252|   289k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   318k|    {
 1221|   318k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   318k|        return this->get_value();
 1223|   318k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   318k|    {
  155|   318k|        return m_value;
  156|   318k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   106k|    {
 1034|   106k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   106k|    {
  142|   106k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   168k|    {
 1191|   168k|        return has_value();
 1192|   168k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   274k|    {
  189|   274k|        return m_has_value;
  190|   274k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   106k|    {
 1274|   106k|        return std::addressof(value());
 1275|   106k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   106k|    {
 1221|   106k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   106k|        return this->get_value();
 1223|   106k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   106k|    {
  155|   106k|        return m_value;
  156|   106k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  28.9k|    {
 1263|  28.9k|        return std::move(value());
 1264|  28.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   168k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   106k|    {
 1034|   106k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   106k|    {
  142|   106k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   168k|    {
 1191|   168k|        return has_value();
 1192|   168k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   274k|    {
  189|   274k|        return m_has_value;
  190|   274k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   106k|    {
 1274|   106k|        return std::addressof(value());
 1275|   106k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   106k|    {
 1221|   106k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   106k|        return this->get_value();
 1223|   106k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   106k|    {
  155|   106k|        return m_value;
  156|   106k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  62.7k|    {
 1078|  62.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  62.7k|    {
  151|  62.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   168k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   106k|    {
 1034|   106k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   106k|    {
  142|   106k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   168k|    {
 1191|   168k|        return has_value();
 1192|   168k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   274k|    {
  189|   274k|        return m_has_value;
  190|   274k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   106k|    {
 1274|   106k|        return std::addressof(value());
 1275|   106k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   106k|    {
 1221|   106k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   106k|        return this->get_value();
 1223|   106k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   106k|    {
  155|   106k|        return m_value;
  156|   106k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.52M|    {
 1405|  2.52M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.52M|                                            std::forward<F>(f));
 1407|  2.52M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.52M|{
  927|  2.52M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.52M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.52M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.52M|            return result(*std::forward<Exp>(exp));
  931|  2.52M|        }
  932|       |
  933|  2.52M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.52M|        return result(unexpect, monostate{});
  935|  2.52M|    }
  936|  2.52M|    else {
  937|  2.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.49M, False: 26.1k]
  |  |  ------------------
  ------------------
  939|  2.52M|                   ? result(*std::forward<Exp>(exp))
  940|  2.52M|                   : result(unexpect,
  941|  26.1k|                            std::invoke(std::forward<F>(f),
  942|  26.1k|                                        std::forward<Exp>(exp).error()));
  943|  2.52M|    }
  944|  2.52M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  9.65M|    {
  189|  9.65M|        return m_has_value;
  190|  9.65M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.49M|    {
 1263|  2.49M|        return std::move(value());
 1264|  2.49M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.41M|    {
 1221|  3.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.41M|        return this->get_value();
 1223|  3.41M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.41M|    {
  155|  3.41M|        return m_value;
  156|  3.41M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  9.79M|    {
 1034|  9.79M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.79M|    {
  142|  9.79M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  26.1k|    {
 1207|  26.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|  26.1k|        return std::move(this->get_unexpected().error());
 1209|  26.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  33.2k|    {
  172|  33.2k|        return m_unexpected;
  173|  33.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   324k|    {
   72|   324k|        return m_unexpected;
   73|   324k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.42M|    {
 1088|  2.42M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.58M|    {
  151|  2.58M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  14.9M|    {
 1191|  14.9M|        return has_value();
 1192|  14.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  22.6M|    {
  189|  22.6M|        return m_has_value;
  190|  22.6M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   212k|    {
 1197|   212k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   212k|        return this->get_unexpected().error();
 1199|   212k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   212k|    {
  172|   212k|        return m_unexpected;
  173|   212k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   162k|    {
 1078|   162k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.70M|    {
 1263|  5.70M|        return std::move(value());
 1264|  5.70M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.47M|    {
 1221|  7.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  7.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  7.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  7.47M|        return this->get_value();
 1223|  7.47M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  7.47M|    {
  155|  7.47M|        return m_value;
  156|  7.47M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   178k|    {
   58|   178k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   178k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   178k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   827k|    {
 1078|   827k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   827k|    {
  151|   827k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  69.4k|    {
   58|  69.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  69.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  69.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   162k|    {
   67|   162k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   162k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   162k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.20M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  6.17M|    {
 1034|  6.17M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.17M|    {
  142|  6.17M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  3.68M|    {
 1191|  3.68M|        return has_value();
 1192|  3.68M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  7.12k|    {
 1197|  7.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  7.12k|        return this->get_unexpected().error();
 1199|  7.12k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  69.7k|    {
   58|  69.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  69.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  69.7k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.52M|    {
 1078|  2.52M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  20.8M|    {
   72|  20.8M|        return m_unexpected;
   73|  20.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.52M|    {
  151|  2.52M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  5.68M|    {
   67|  5.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  5.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  5.68M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   917k|    {
 1251|   917k|        return value();
 1252|   917k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   934k|    {
 1034|   934k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   934k|    {
  142|   934k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  22.8M|    {
   58|  22.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  22.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  22.8M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.75M|    {
 1078|  9.75M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  22.8M|    {
   72|  22.8M|        return m_unexpected;
   73|  22.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.75M|    {
  151|  9.75M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  22.8M|    {
   67|  22.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  22.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  22.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  16.7M|    {
 1191|  16.7M|        return has_value();
 1192|  16.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  28.4M|    {
  189|  28.4M|        return m_has_value;
  190|  28.4M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.70M|    {
 1197|  6.70M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  6.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  6.70M|        return this->get_unexpected().error();
 1199|  6.70M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.70M|    {
  172|  6.70M|        return m_unexpected;
  173|  6.70M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.57M|    {
 1034|  2.57M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.57M|    {
  142|  2.57M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.57M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  93.0k|    {
   58|  93.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  93.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  93.0k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.62M|    {
 1251|  2.62M|        return value();
 1252|  2.62M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.62M|    {
 1221|  2.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.62M|        return this->get_value();
 1223|  2.62M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.62M|    {
  155|  2.62M|        return m_value;
  156|  2.62M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  79.0k|    {
 1191|  79.0k|        return has_value();
 1192|  79.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  5.15M|    {
  189|  5.15M|        return m_has_value;
  190|  5.15M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.49M|    {
 1263|  2.49M|        return std::move(value());
 1264|  2.49M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.57M|    {
 1221|  2.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.57M|        return this->get_value();
 1223|  2.57M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.57M|    {
  155|  2.57M|        return m_value;
  156|  2.57M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  1.01M|    {
 1034|  1.01M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.01M|    {
  142|  1.01M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.76M|    {
 1251|  1.76M|        return value();
 1252|  1.76M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   131k|    {
 1034|   131k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   131k|    {
  142|   131k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  5.52M|    {
   58|  5.52M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  5.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.52M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  9.93M|    {
 1263|  9.93M|        return std::move(value());
 1264|  9.93M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.49M|    {
 1405|  2.49M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.49M|                                            std::forward<F>(f));
 1407|  2.49M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.49M|{
  927|  2.49M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.49M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.49M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.49M|            return result(*std::forward<Exp>(exp));
  931|  2.49M|        }
  932|       |
  933|  2.49M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.49M|        return result(unexpect, monostate{});
  935|  2.49M|    }
  936|  2.49M|    else {
  937|  2.49M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.49M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.49M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.49M|                   ? result(*std::forward<Exp>(exp))
  940|  2.49M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.49M|    }
  944|  2.49M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.49M|    {
 1034|  2.49M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.49M|    {
  142|  2.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.49M|    {
 1191|  2.49M|        return has_value();
 1192|  2.49M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.99M|    {
  189|  4.99M|        return m_has_value;
  190|  4.99M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.49M|    {
 1263|  2.49M|        return std::move(value());
 1264|  2.49M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.49M|    {
 1221|  2.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.49M|        return this->get_value();
 1223|  2.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.49M|    {
  155|  2.49M|        return m_value;
  156|  2.49M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  2.39M|    {
 1395|  2.39M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.39M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.39M|{
  927|  2.39M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.39M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.39M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.39M|            return result(*std::forward<Exp>(exp));
  931|  2.39M|        }
  932|       |
  933|  2.39M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.39M|        return result(unexpect, monostate{});
  935|  2.39M|    }
  936|  2.39M|    else {
  937|  2.39M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.39M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
  939|  2.39M|                   ? result(*std::forward<Exp>(exp))
  940|  2.39M|                   : result(unexpect,
  941|  2.39M|                            std::invoke(std::forward<F>(f),
  942|  2.39M|                                        std::forward<Exp>(exp).error()));
  943|  2.39M|    }
  944|  2.39M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  78.8k|    {
 1274|  78.8k|        return std::addressof(value());
 1275|  78.8k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  14.6M|    {
 1034|  14.6M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  14.6M|    {
  142|  14.6M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    714|    {
 1078|    714|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    714|    {
  151|    714|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.65M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.65M|    {
 1034|  1.65M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.65M|    {
  142|  1.65M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   282k|    {
 1405|   282k|        return detail::transform_error_impl(std::move(*this),
 1406|   282k|                                            std::forward<F>(f));
 1407|   282k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   282k|{
  927|   282k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   282k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   282k|        if (SCN_LIKELY(exp.has_value())) {
  930|   282k|            return result(*std::forward<Exp>(exp));
  931|   282k|        }
  932|       |
  933|   282k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   282k|        return result(unexpect, monostate{});
  935|   282k|    }
  936|   282k|    else {
  937|   282k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   282k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   282k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 282k, False: 99]
  |  |  ------------------
  ------------------
  939|   282k|                   ? result(*std::forward<Exp>(exp))
  940|   282k|                   : result(unexpect,
  941|     99|                            std::invoke(std::forward<F>(f),
  942|     99|                                        std::forward<Exp>(exp).error()));
  943|   282k|    }
  944|   282k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.67M|    {
  189|  2.67M|        return m_has_value;
  190|  2.67M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.01M|    {
 1263|  1.01M|        return std::move(value());
 1264|  1.01M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.01M|    {
 1221|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.01M|        return this->get_value();
 1223|  1.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.01M|    {
  155|  1.01M|        return m_value;
  156|  1.01M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   815k|    {
 1034|   815k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   815k|    {
  142|   815k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.41M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    582|    {
 1207|    582|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    582|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    582|        return std::move(this->get_unexpected().error());
 1209|    582|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    714|    {
  172|    714|        return m_unexpected;
  173|    714|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   371k|    {
 1088|   371k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   597k|    {
  151|   597k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   637k|    {
 1191|   637k|        return has_value();
 1192|   637k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|    132|    {
 1197|    132|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    132|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    132|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|    132|        return this->get_unexpected().error();
 1199|    132|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   283k|    {
 1078|   283k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   283k|    {
  151|   283k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.86M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.65M|    {
 1078|  1.65M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.65M|    {
  151|  1.65M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.14M|    {
 1191|  3.14M|        return has_value();
 1192|  3.14M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  5.57M|    {
  189|  5.57M|        return m_has_value;
  190|  5.57M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   937k|    {
 1197|   937k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   937k|        return this->get_unexpected().error();
 1199|   937k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   937k|    {
  172|   937k|        return m_unexpected;
  173|   937k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   282k|    {
 1034|   282k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   282k|    {
  142|   282k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   282k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   387k|    {
 1251|   387k|        return value();
 1252|   387k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.12M|    {
 1221|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.12M|        return this->get_value();
 1223|  1.12M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.12M|    {
  155|  1.12M|        return m_value;
  156|  1.12M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   565k|    {
  189|   565k|        return m_has_value;
  190|   565k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   282k|    {
 1263|   282k|        return std::move(value());
 1264|   282k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   282k|    {
 1221|   282k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   282k|        return this->get_value();
 1223|   282k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   282k|    {
  155|   282k|        return m_value;
  156|   282k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   734k|    {
 1405|   734k|        return detail::transform_error_impl(std::move(*this),
 1406|   734k|                                            std::forward<F>(f));
 1407|   734k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   734k|{
  927|   734k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   734k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   734k|        if (SCN_LIKELY(exp.has_value())) {
  930|   734k|            return result(*std::forward<Exp>(exp));
  931|   734k|        }
  932|       |
  933|   734k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   734k|        return result(unexpect, monostate{});
  935|   734k|    }
  936|   734k|    else {
  937|   734k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   734k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   734k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 734k, False: 483]
  |  |  ------------------
  ------------------
  939|   734k|                   ? result(*std::forward<Exp>(exp))
  940|   734k|                   : result(unexpect,
  941|    483|                            std::invoke(std::forward<F>(f),
  942|    483|                                        std::forward<Exp>(exp).error()));
  943|   734k|    }
  944|   734k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   928k|    {
 1034|   928k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   928k|    {
  142|   928k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    483|    {
 1088|    483|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   734k|    {
 1263|   734k|        return std::move(value());
 1264|   734k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   226k|    {
 1078|   226k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   129k|    {
 1251|   129k|        return value();
 1252|   129k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   637k|    {
 1221|   637k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   637k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   637k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   637k|        return this->get_value();
 1223|   637k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.64M|    {
  189|  2.64M|        return m_has_value;
  190|  2.64M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   637k|    {
  155|   637k|        return m_value;
  156|   637k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   282k|    {
 1405|   282k|        return detail::transform_error_impl(std::move(*this),
 1406|   282k|                                            std::forward<F>(f));
 1407|   282k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   282k|{
  927|   282k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   282k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   282k|        if (SCN_LIKELY(exp.has_value())) {
  930|   282k|            return result(*std::forward<Exp>(exp));
  931|   282k|        }
  932|       |
  933|   282k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   282k|        return result(unexpect, monostate{});
  935|   282k|    }
  936|   282k|    else {
  937|   282k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   282k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   282k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 282k, False: 0]
  |  |  ------------------
  ------------------
  939|   282k|                   ? result(*std::forward<Exp>(exp))
  940|   282k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   282k|    }
  944|   282k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   282k|    {
 1034|   282k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   282k|    {
  142|   282k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   282k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   282k|    {
 1191|   282k|        return has_value();
 1192|   282k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   565k|    {
  189|   565k|        return m_has_value;
  190|   565k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   282k|    {
 1263|   282k|        return std::move(value());
 1264|   282k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   282k|    {
 1221|   282k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   282k|        return this->get_value();
 1223|   282k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   282k|    {
  155|   282k|        return m_value;
  156|   282k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   371k|    {
 1395|   371k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   371k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   371k|{
  927|   371k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   371k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   371k|        if (SCN_LIKELY(exp.has_value())) {
  930|   371k|            return result(*std::forward<Exp>(exp));
  931|   371k|        }
  932|       |
  933|   371k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   371k|        return result(unexpect, monostate{});
  935|   371k|    }
  936|   371k|    else {
  937|   371k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   371k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   371k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
  939|   371k|                   ? result(*std::forward<Exp>(exp))
  940|   371k|                   : result(unexpect,
  941|   371k|                            std::invoke(std::forward<F>(f),
  942|   371k|                                        std::forward<Exp>(exp).error()));
  943|   371k|    }
  944|   371k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.69M|    {
 1191|  1.69M|        return has_value();
 1192|  1.69M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   314k|    {
 1197|   314k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   314k|        return this->get_unexpected().error();
 1199|   314k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   314k|    {
  172|   314k|        return m_unexpected;
  173|   314k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   508k|    {
 1263|   508k|        return std::move(value());
 1264|   508k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   127k|    {
 1078|   127k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   127k|    {
  151|   127k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  11.2M|    {
 1034|  11.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.2M|    {
  142|  11.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.24M|    {
 1405|  2.24M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.24M|                                            std::forward<F>(f));
 1407|  2.24M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.24M|{
  927|  2.24M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.24M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.24M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.24M|            return result(*std::forward<Exp>(exp));
  931|  2.24M|        }
  932|       |
  933|  2.24M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.24M|        return result(unexpect, monostate{});
  935|  2.24M|    }
  936|  2.24M|    else {
  937|  2.24M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.24M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.21M, False: 28.0k]
  |  |  ------------------
  ------------------
  939|  2.24M|                   ? result(*std::forward<Exp>(exp))
  940|  2.24M|                   : result(unexpect,
  941|  28.0k|                            std::invoke(std::forward<F>(f),
  942|  28.0k|                                        std::forward<Exp>(exp).error()));
  943|  2.24M|    }
  944|  2.24M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  20.3M|    {
  189|  20.3M|        return m_has_value;
  190|  20.3M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.07M|    {
 1263|  8.07M|        return std::move(value());
 1264|  8.07M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.83M|    {
 1221|  8.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  8.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  8.83M|        return this->get_value();
 1223|  8.83M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  8.83M|    {
  155|  8.83M|        return m_value;
  156|  8.83M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  8.49M|    {
 1034|  8.49M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.49M|    {
  142|  8.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   119k|    {
 1207|   119k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   119k|        return std::move(this->get_unexpected().error());
 1209|   119k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   127k|    {
  172|   127k|        return m_unexpected;
  173|   127k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.18M|    {
 1088|  2.18M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.46M|    {
  151|  2.46M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   280k|    {
 1078|   280k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  3.21M|    {
 1191|  3.21M|        return has_value();
 1192|  3.21M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  7.38k|    {
 1197|  7.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  7.38k|        return this->get_unexpected().error();
 1199|  7.38k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.27M|    {
 1078|  2.27M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.36M|    {
  151|  2.36M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   765k|    {
 1251|   765k|        return value();
 1252|   765k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   781k|    {
 1034|   781k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   781k|    {
  142|   781k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  8.58M|    {
 1078|  8.58M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  8.58M|    {
  151|  8.58M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  20.6M|    {
 1191|  20.6M|        return has_value();
 1192|  20.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  36.9M|    {
  189|  36.9M|        return m_has_value;
  190|  36.9M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  6.09M|    {
 1197|  6.09M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  6.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  6.09M|        return this->get_unexpected().error();
 1199|  6.09M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.09M|    {
  172|  6.09M|        return m_unexpected;
  173|  6.09M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.28M|    {
 1034|  2.28M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.28M|    {
  142|  2.28M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.28M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.21M|    {
 1251|  2.21M|        return value();
 1252|  2.21M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.07M|    {
 1221|  8.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  8.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  8.07M|        return this->get_value();
 1223|  8.07M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.07M|    {
  155|  8.07M|        return m_value;
  156|  8.07M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  69.8k|    {
 1191|  69.8k|        return has_value();
 1192|  69.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.56M|    {
  189|  4.56M|        return m_has_value;
  190|  4.56M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.21M|    {
 1263|  2.21M|        return std::move(value());
 1264|  2.21M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.28M|    {
 1221|  2.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.28M|        return this->get_value();
 1223|  2.28M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.28M|    {
  155|  2.28M|        return m_value;
  156|  2.28M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  5.95M|    {
 1405|  5.95M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.95M|                                            std::forward<F>(f));
 1407|  5.95M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.95M|{
  927|  5.95M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.95M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.95M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.95M|            return result(*std::forward<Exp>(exp));
  931|  5.95M|        }
  932|       |
  933|  5.95M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.95M|        return result(unexpect, monostate{});
  935|  5.95M|    }
  936|  5.95M|    else {
  937|  5.95M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.95M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  5.95M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 5.85M, False: 91.6k]
  |  |  ------------------
  ------------------
  939|  5.95M|                   ? result(*std::forward<Exp>(exp))
  940|  5.95M|                   : result(unexpect,
  941|  91.6k|                            std::invoke(std::forward<F>(f),
  942|  91.6k|                                        std::forward<Exp>(exp).error()));
  943|  5.95M|    }
  944|  5.95M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.72M|    {
 1034|  6.72M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.72M|    {
  142|  6.72M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|  91.6k|    {
 1088|  91.6k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.85M|    {
 1263|  5.85M|        return std::move(value());
 1264|  5.85M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.50M|    {
 1251|  1.50M|        return value();
 1252|  1.50M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.48M|    {
 1221|  6.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.48M|        return this->get_value();
 1223|  6.48M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  20.1M|    {
  189|  20.1M|        return m_has_value;
  190|  20.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.48M|    {
  155|  6.48M|        return m_value;
  156|  6.48M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   122k|    {
 1034|   122k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   122k|    {
  142|   122k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.21M|    {
 1405|  2.21M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.21M|                                            std::forward<F>(f));
 1407|  2.21M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.21M|{
  927|  2.21M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.21M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.21M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.21M|            return result(*std::forward<Exp>(exp));
  931|  2.21M|        }
  932|       |
  933|  2.21M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.21M|        return result(unexpect, monostate{});
  935|  2.21M|    }
  936|  2.21M|    else {
  937|  2.21M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.21M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.21M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.21M|                   ? result(*std::forward<Exp>(exp))
  940|  2.21M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.21M|    }
  944|  2.21M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.21M|    {
 1034|  2.21M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.21M|    {
  142|  2.21M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.21M|    {
 1191|  2.21M|        return has_value();
 1192|  2.21M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.42M|    {
  189|  4.42M|        return m_has_value;
  190|  4.42M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.21M|    {
 1263|  2.21M|        return std::move(value());
 1264|  2.21M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.21M|    {
 1221|  2.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.21M|        return this->get_value();
 1223|  2.21M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.21M|    {
  155|  2.21M|        return m_value;
  156|  2.21M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  2.15M|    {
 1395|  2.15M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.15M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.15M|{
  927|  2.15M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.15M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.15M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.15M|            return result(*std::forward<Exp>(exp));
  931|  2.15M|        }
  932|       |
  933|  2.15M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.15M|        return result(unexpect, monostate{});
  935|  2.15M|    }
  936|  2.15M|    else {
  937|  2.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 2.15M]
  |  |  ------------------
  ------------------
  939|  2.15M|                   ? result(*std::forward<Exp>(exp))
  940|  2.15M|                   : result(unexpect,
  941|  2.15M|                            std::invoke(std::forward<F>(f),
  942|  2.15M|                                        std::forward<Exp>(exp).error()));
  943|  2.15M|    }
  944|  2.15M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  69.7k|    {
 1274|  69.7k|        return std::addressof(value());
 1275|  69.7k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  13.2M|    {
 1191|  13.2M|        return has_value();
 1192|  13.2M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   373k|    {
 1197|   373k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   373k|        return this->get_unexpected().error();
 1199|   373k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   373k|    {
  172|   373k|        return m_unexpected;
  173|   373k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.98M|    {
 1263|  4.98M|        return std::move(value());
 1264|  4.98M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   404k|    {
 1078|   404k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.07M|    {
  151|  1.07M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.53M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  1.46M|    {
 1034|  1.46M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.46M|    {
  142|  1.46M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  3.03M|    {
 1191|  3.03M|        return has_value();
 1192|  3.03M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.74M|    {
  189|  4.74M|        return m_has_value;
  190|  4.74M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   564k|    {
 1197|   564k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   564k|        return this->get_unexpected().error();
 1199|   564k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   564k|    {
  172|   564k|        return m_unexpected;
  173|   564k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   231k|    {
 1251|   231k|        return value();
 1252|   231k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.14M|    {
 1221|  1.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.14M|        return this->get_value();
 1223|  1.14M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.14M|    {
  155|  1.14M|        return m_value;
  156|  1.14M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|  1.06k|    {
 1078|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|  1.06k|    {
  151|  1.06k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.96M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.96M|    {
 1034|  2.96M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.96M|    {
  142|  2.96M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   506k|    {
 1405|   506k|        return detail::transform_error_impl(std::move(*this),
 1406|   506k|                                            std::forward<F>(f));
 1407|   506k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   506k|{
  927|   506k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   506k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   506k|        if (SCN_LIKELY(exp.has_value())) {
  930|   506k|            return result(*std::forward<Exp>(exp));
  931|   506k|        }
  932|       |
  933|   506k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   506k|        return result(unexpect, monostate{});
  935|   506k|    }
  936|   506k|    else {
  937|   506k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   506k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 506k, False: 231]
  |  |  ------------------
  ------------------
  939|   506k|                   ? result(*std::forward<Exp>(exp))
  940|   506k|                   : result(unexpect,
  941|    231|                            std::invoke(std::forward<F>(f),
  942|    231|                                        std::forward<Exp>(exp).error()));
  943|   506k|    }
  944|   506k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.94M|    {
  189|  4.94M|        return m_has_value;
  190|  4.94M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.82M|    {
 1263|  1.82M|        return std::move(value());
 1264|  1.82M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.98M|    {
 1221|  1.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.98M|        return this->get_value();
 1223|  1.98M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.98M|    {
  155|  1.98M|        return m_value;
  156|  1.98M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    801|    {
 1207|    801|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    801|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    801|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    801|        return std::move(this->get_unexpected().error());
 1209|    801|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  1.06k|    {
  172|  1.06k|        return m_unexpected;
  173|  1.06k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   665k|    {
 1088|   665k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.14M|    {
 1191|  1.14M|        return has_value();
 1192|  1.14M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|    264|    {
 1197|    264|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    264|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    264|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|    264|        return this->get_unexpected().error();
 1199|    264|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   506k|    {
 1078|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   507k|    {
  151|   507k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.13M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   158k|    {
 1251|   158k|        return value();
 1252|   158k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   158k|    {
 1034|   158k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   158k|    {
  142|   158k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.80M|    {
 1078|  2.80M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  2.80M|    {
  151|  2.80M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  5.64M|    {
 1191|  5.64M|        return has_value();
 1192|  5.64M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  9.99M|    {
  189|  9.99M|        return m_has_value;
  190|  9.99M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  1.51M|    {
 1197|  1.51M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.51M|        return this->get_unexpected().error();
 1199|  1.51M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.51M|    {
  172|  1.51M|        return m_unexpected;
  173|  1.51M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   506k|    {
 1034|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   506k|    {
  142|   506k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   506k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   853k|    {
 1251|   853k|        return value();
 1252|   853k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.16M|    {
 1221|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.16M|        return this->get_value();
 1223|  2.16M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.16M|    {
  155|  2.16M|        return m_value;
  156|  2.16M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.01M|    {
  189|  1.01M|        return m_has_value;
  190|  1.01M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   506k|    {
 1263|   506k|        return std::move(value());
 1264|   506k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   506k|    {
 1221|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   506k|        return this->get_value();
 1223|   506k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   506k|    {
  155|   506k|        return m_value;
  156|   506k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.31M|    {
 1405|  1.31M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.31M|                                            std::forward<F>(f));
 1407|  1.31M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.31M|{
  927|  1.31M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.31M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.31M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.31M|            return result(*std::forward<Exp>(exp));
  931|  1.31M|        }
  932|       |
  933|  1.31M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.31M|        return result(unexpect, monostate{});
  935|  1.31M|    }
  936|  1.31M|    else {
  937|  1.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  1.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 1.31M, False: 570]
  |  |  ------------------
  ------------------
  939|  1.31M|                   ? result(*std::forward<Exp>(exp))
  940|  1.31M|                   : result(unexpect,
  941|    570|                            std::invoke(std::forward<F>(f),
  942|    570|                                        std::forward<Exp>(exp).error()));
  943|  1.31M|    }
  944|  1.31M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.66M|    {
 1034|  1.66M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.66M|    {
  142|  1.66M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    570|    {
 1088|    570|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.31M|    {
 1263|  1.31M|        return std::move(value());
 1264|  1.31M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   506k|    {
 1405|   506k|        return detail::transform_error_impl(std::move(*this),
 1406|   506k|                                            std::forward<F>(f));
 1407|   506k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   506k|{
  927|   506k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   506k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   506k|        if (SCN_LIKELY(exp.has_value())) {
  930|   506k|            return result(*std::forward<Exp>(exp));
  931|   506k|        }
  932|       |
  933|   506k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   506k|        return result(unexpect, monostate{});
  935|   506k|    }
  936|   506k|    else {
  937|   506k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   506k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 506k, False: 0]
  |  |  ------------------
  ------------------
  939|   506k|                   ? result(*std::forward<Exp>(exp))
  940|   506k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   506k|    }
  944|   506k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   506k|    {
 1034|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   506k|    {
  142|   506k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   506k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   506k|    {
 1191|   506k|        return has_value();
 1192|   506k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.01M|    {
  189|  1.01M|        return m_has_value;
  190|  1.01M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   506k|    {
 1263|   506k|        return std::move(value());
 1264|   506k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   506k|    {
 1221|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   506k|        return this->get_value();
 1223|   506k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   506k|    {
  155|   506k|        return m_value;
  156|   506k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   665k|    {
 1395|   665k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   665k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   665k|{
  927|   665k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   665k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   665k|        if (SCN_LIKELY(exp.has_value())) {
  930|   665k|            return result(*std::forward<Exp>(exp));
  931|   665k|        }
  932|       |
  933|   665k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   665k|        return result(unexpect, monostate{});
  935|   665k|    }
  936|   665k|    else {
  937|   665k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   665k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   665k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
  939|   665k|                   ? result(*std::forward<Exp>(exp))
  940|   665k|                   : result(unexpect,
  941|   665k|                            std::invoke(std::forward<F>(f),
  942|   665k|                                        std::forward<Exp>(exp).error()));
  943|   665k|    }
  944|   665k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   911k|    {
 1263|   911k|        return std::move(value());
 1264|   911k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|   244k|    {
 1034|   244k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|   244k|    {
  142|   244k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.38k|{
  200|  5.38k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.38k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.38k|{
  180|  5.38k|    return p;
  181|  5.38k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.38k|{
  200|  5.38k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.38k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.38k|{
  180|  5.38k|    return p;
  181|  5.38k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.38k|{
  200|  5.38k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.38k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.38k|{
  180|  5.38k|    return p;
  181|  5.38k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  30.4M|{
  200|  30.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  30.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  30.4M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  31.1M|{
  180|  31.1M|    return p;
  181|  31.1M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.7M|{
  200|  11.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  11.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.7M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  11.7M|{
  180|  11.7M|    return p;
  181|  11.7M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   710k|{
  200|   710k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|   710k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   710k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.5M|{
  200|  11.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.5M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  13.7M|{
  180|  13.7M|    return p;
  181|  13.7M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.22M|{
  200|  2.22M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.22M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  18.7k|    {
  242|  18.7k|        return static_cast<size_type>(m_end - m_ptr);
  243|  18.7k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.69k|    {
  181|  2.69k|        return m_ptr;
  182|  2.69k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.69k|    {
  185|  2.69k|        return m_end;
  186|  2.69k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.69k|    {
  238|  2.69k|        return m_ptr;
  239|  2.69k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.69k|    {
  120|  2.69k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  32.3k|    {
  181|  32.3k|        return m_ptr;
  182|  32.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  32.3k|    {
  185|  32.3k|        return m_end;
  186|  32.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.69k|    {
  120|  2.69k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  57.8k|    {
  181|  57.8k|        return m_ptr;
  182|  57.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  57.8k|    {
  185|  57.8k|        return m_end;
  186|  57.8k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.69k|    {
  120|  2.69k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  5.86M|    {
  120|  5.86M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  5.86M|    {
  238|  5.86M|        return m_ptr;
  239|  5.86M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  5.86M|    {
  242|  5.86M|        return static_cast<size_type>(m_end - m_ptr);
  243|  5.86M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   266k|{
   60|   266k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   266k|                                          const CharT*, const CharT*>) {
   62|   266k|        return {first, last};
   63|   266k|    }
   64|   266k|    else {
   65|   266k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   266k|    }
   67|   266k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  6.09M|{
   60|  6.09M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  6.09M|                                          const CharT*, const CharT*>) {
   62|  6.09M|        return {first, last};
   63|  6.09M|    }
   64|  6.09M|    else {
   65|  6.09M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  6.09M|    }
   67|  6.09M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  9.86M|{
   44|  9.86M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  9.86M|                                          decltype(first), decltype(last)> &&
   46|  9.86M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  9.86M|        return {first, last};
   48|  9.86M|    }
   49|  9.86M|    else {
   50|  9.86M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  9.86M|                                       to_address(first), to_address(last)))};
   52|  9.86M|    }
   53|  9.86M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  12.8M|{
   75|  12.8M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  12.8M|                      typename std::basic_string_view<CharT>::iterator,
   77|  12.8M|                      decltype(it)> &&
   78|  12.8M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  12.8M|        SCN_UNUSED(sv);
  ------------------
  |  |  231|  12.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  12.8M|        return it;
   81|  12.8M|    }
   82|  12.8M|    else {
   83|  12.8M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  12.8M|    }
   85|  12.8M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   282k|{
   54|   282k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   282k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   282k|        return true;
   57|   282k|    }
   58|   282k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   282k|                           ranges::iterator_t<Range>,
   60|   282k|                           typename detail::basic_scan_buffer<
   61|   282k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   282k|        auto beg = ranges::begin(r);
   63|   282k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 282k, False: 0]
  ------------------
   64|   282k|            return false;
   65|   282k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   282k|    else {
   79|   282k|        return false;
   80|   282k|    }
   81|   282k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   371k|{
  112|   371k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   371k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   371k|        return r;
  115|   371k|    }
  116|   371k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   371k|                           ranges::iterator_t<Range>,
  118|   371k|                           typename detail::basic_scan_buffer<
  119|   371k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   371k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   371k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   371k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   371k|                ranges::begin(r), ranges::end(r)));
  124|   371k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   371k|        }
  126|   371k|        else {
  127|   371k|            return ranges::begin(r).contiguous_segment();
  128|   371k|        }
  129|   371k|    }
  130|   371k|    else {
  131|   371k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   371k|    }
  133|   371k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   734k|{
  166|   734k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   734k|        return ranges_polyfill::usize(r);
  168|   734k|    }
  169|   734k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   734k|                           ranges::iterator_t<Range>,
  171|   734k|                           typename detail::basic_scan_buffer<
  172|   734k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   734k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   734k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   734k|                                       ranges::begin(r).position());
  176|   734k|        }
  177|   734k|        else {
  178|   734k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 734k, False: 0]
  ------------------
  179|   734k|                return static_cast<size_t>(
  180|   734k|                    ranges::begin(r).parent()->chars_available() -
  181|   734k|                    ranges::begin(r).position());
  182|   734k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   734k|        }
  185|   734k|    }
  186|   734k|    else {
  187|   734k|        return 0;
  188|   734k|    }
  189|   734k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   506k|{
   54|   506k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   506k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   506k|        return true;
   57|   506k|    }
   58|   506k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   506k|                           ranges::iterator_t<Range>,
   60|   506k|                           typename detail::basic_scan_buffer<
   61|   506k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   506k|        auto beg = ranges::begin(r);
   63|   506k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 506k, False: 0]
  ------------------
   64|   506k|            return false;
   65|   506k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   506k|    else {
   79|   506k|        return false;
   80|   506k|    }
   81|   506k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   506k|{
  112|   506k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   506k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   506k|        return r;
  115|   506k|    }
  116|   506k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   506k|                           ranges::iterator_t<Range>,
  118|   506k|                           typename detail::basic_scan_buffer<
  119|   506k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   506k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   506k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   506k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   506k|                ranges::begin(r), ranges::end(r)));
  124|   506k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   506k|        }
  126|   506k|        else {
  127|   506k|            return ranges::begin(r).contiguous_segment();
  128|   506k|        }
  129|   506k|    }
  130|   506k|    else {
  131|   506k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   506k|    }
  133|   506k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.31M|{
  166|  1.31M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.31M|        return ranges_polyfill::usize(r);
  168|  1.31M|    }
  169|  1.31M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.31M|                           ranges::iterator_t<Range>,
  171|  1.31M|                           typename detail::basic_scan_buffer<
  172|  1.31M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.31M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.31M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.31M|                                       ranges::begin(r).position());
  176|  1.31M|        }
  177|  1.31M|        else {
  178|  1.31M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.31M, False: 0]
  ------------------
  179|  1.31M|                return static_cast<size_t>(
  180|  1.31M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.31M|                    ranges::begin(r).position());
  182|  1.31M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.31M|        }
  185|  1.31M|    }
  186|  1.31M|    else {
  187|  1.31M|        return 0;
  188|  1.31M|    }
  189|  1.31M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.50M|{
  235|  2.50M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.50M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.50M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.50M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.50M|    }
  240|  2.50M|    else {
  241|  2.50M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.50M|    }
  243|  2.50M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.50M|    {
   50|  2.50M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  7.55M|    {
   63|  7.55M|        return sv;
   64|  7.55M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  9.49M|    {
  142|  9.49M|        return m_view;
  143|  9.49M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  5.74M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  5.56M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  2.33M|    {
  137|  2.33M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.33M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  2.33M|    {
  181|  2.33M|        using value_t = ranges::range_value_t<Range>;
  182|  2.33M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.33M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.33M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.33M|            m_storage.reset();
  186|  2.33M|            m_view = string_view_type{ranges::data(range),
  187|  2.33M|                                      ranges_polyfill::usize(range)};
  188|  2.33M|        }
  189|  2.33M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  2.33M|                                          std::basic_string<CharT>>) {
  191|  2.33M|            m_storage.emplace(SCN_FWD(range));
  192|  2.33M|            m_view = string_view_type{*m_storage};
  193|  2.33M|        }
  194|  2.33M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.33M|                                          typename detail::basic_scan_buffer<
  196|  2.33M|                                              value_t>::forward_iterator> &&
  197|  2.33M|                           ranges::common_range<Range>) {
  198|  2.33M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.33M|            auto end_seg = range.end().contiguous_segment();
  200|  2.33M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.33M|                             detail::to_address(end_seg.end()))) {
  202|  2.33M|                auto& str = m_storage.emplace();
  203|  2.33M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.33M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.33M|                m_view = string_view_type{str};
  206|  2.33M|                return;
  207|  2.33M|            }
  208|       |
  209|  2.33M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.33M|                                                            end_seg.data());
  211|  2.33M|            m_storage.reset();
  212|  2.33M|        }
  213|  2.33M|        else {
  214|  2.33M|            auto& str = m_storage.emplace();
  215|  2.33M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.33M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.33M|            }
  218|  2.33M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.33M|                      std::back_inserter(str));
  220|  2.33M|            m_view = string_view_type{str};
  221|  2.33M|        }
  222|  2.33M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  3.08M|    {
  147|  3.08M|        return m_storage.has_value();
  148|  3.08M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  1.81M|    {
  152|  1.81M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  246|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.81M|        return *m_storage;
  154|  1.81M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   177k|{
  235|   177k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   177k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   177k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   177k|        return string_view_wrapper{SCN_FWD(range)};
  239|   177k|    }
  240|   177k|    else {
  241|   177k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   177k|    }
  243|   177k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   177k|    {
   97|   177k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   177k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   355k|    {
  181|   355k|        using value_t = ranges::range_value_t<Range>;
  182|   355k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   355k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   355k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   355k|            m_storage.reset();
  186|   355k|            m_view = string_view_type{ranges::data(range),
  187|   355k|                                      ranges_polyfill::usize(range)};
  188|   355k|        }
  189|   355k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   355k|                                          std::basic_string<CharT>>) {
  191|   355k|            m_storage.emplace(SCN_FWD(range));
  192|   355k|            m_view = string_view_type{*m_storage};
  193|   355k|        }
  194|   355k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   355k|                                          typename detail::basic_scan_buffer<
  196|   355k|                                              value_t>::forward_iterator> &&
  197|   355k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   355k|            auto beg_seg = range.begin().contiguous_segment();
  199|   355k|            auto end_seg = range.end().contiguous_segment();
  200|   355k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  157|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 177k, False: 177k]
  |  |  ------------------
  ------------------
  201|   355k|                             detail::to_address(end_seg.end()))) {
  202|   177k|                auto& str = m_storage.emplace();
  203|   177k|                str.reserve(range.end().position() - range.begin().position());
  204|   177k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   177k|                m_view = string_view_type{str};
  206|   177k|                return;
  207|   177k|            }
  208|       |
  209|   177k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   177k|                                                            end_seg.data());
  211|   177k|            m_storage.reset();
  212|   177k|        }
  213|   355k|        else {
  214|   355k|            auto& str = m_storage.emplace();
  215|   355k|            if constexpr (ranges::sized_range<Range>) {
  216|   355k|                str.reserve(ranges_polyfill::usize(range));
  217|   355k|            }
  218|   355k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   355k|                      std::back_inserter(str));
  220|   355k|            m_view = string_view_type{str};
  221|   355k|        }
  222|   355k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|   177k|    {
  137|   177k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   177k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  10.4M|    {
  142|  10.4M|        return m_view;
  143|  10.4M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  6.23M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  5.43M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  2.01M|    {
  137|  2.01M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.01M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  2.01M|    {
  181|  2.01M|        using value_t = ranges::range_value_t<Range>;
  182|  2.01M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.01M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.01M|            m_storage.reset();
  186|  2.01M|            m_view = string_view_type{ranges::data(range),
  187|  2.01M|                                      ranges_polyfill::usize(range)};
  188|  2.01M|        }
  189|  2.01M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  2.01M|                                          std::basic_string<CharT>>) {
  191|  2.01M|            m_storage.emplace(SCN_FWD(range));
  192|  2.01M|            m_view = string_view_type{*m_storage};
  193|  2.01M|        }
  194|  2.01M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.01M|                                          typename detail::basic_scan_buffer<
  196|  2.01M|                                              value_t>::forward_iterator> &&
  197|  2.01M|                           ranges::common_range<Range>) {
  198|  2.01M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.01M|            auto end_seg = range.end().contiguous_segment();
  200|  2.01M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.01M|                             detail::to_address(end_seg.end()))) {
  202|  2.01M|                auto& str = m_storage.emplace();
  203|  2.01M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.01M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.01M|                m_view = string_view_type{str};
  206|  2.01M|                return;
  207|  2.01M|            }
  208|       |
  209|  2.01M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.01M|                                                            end_seg.data());
  211|  2.01M|            m_storage.reset();
  212|  2.01M|        }
  213|  2.01M|        else {
  214|  2.01M|            auto& str = m_storage.emplace();
  215|  2.01M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.01M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.01M|            }
  218|  2.01M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.01M|                      std::back_inserter(str));
  220|  2.01M|            m_view = string_view_type{str};
  221|  2.01M|        }
  222|  2.01M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  2.79M|    {
  147|  2.79M|        return m_storage.has_value();
  148|  2.79M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  1.63M|    {
  152|  1.63M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  246|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.63M|        return *m_storage;
  154|  1.63M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   795k|{
  235|   795k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   795k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   795k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   795k|        return string_view_wrapper{SCN_FWD(range)};
  239|   795k|    }
  240|   795k|    else {
  241|   795k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  252|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   795k|    }
  243|   795k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   795k|    {
   97|   795k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   795k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  1.11M|    {
  181|  1.11M|        using value_t = ranges::range_value_t<Range>;
  182|  1.11M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.11M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.11M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.11M|            m_storage.reset();
  186|  1.11M|            m_view = string_view_type{ranges::data(range),
  187|  1.11M|                                      ranges_polyfill::usize(range)};
  188|  1.11M|        }
  189|  1.11M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.11M|                                          std::basic_string<CharT>>) {
  191|  1.11M|            m_storage.emplace(SCN_FWD(range));
  192|  1.11M|            m_view = string_view_type{*m_storage};
  193|  1.11M|        }
  194|  1.11M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  1.11M|                                          typename detail::basic_scan_buffer<
  196|  1.11M|                                              value_t>::forward_iterator> &&
  197|  1.11M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  1.11M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.11M|            auto end_seg = range.end().contiguous_segment();
  200|  1.11M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  157|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 795k, False: 318k]
  |  |  ------------------
  ------------------
  201|  1.11M|                             detail::to_address(end_seg.end()))) {
  202|   795k|                auto& str = m_storage.emplace();
  203|   795k|                str.reserve(range.end().position() - range.begin().position());
  204|   795k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   795k|                m_view = string_view_type{str};
  206|   795k|                return;
  207|   795k|            }
  208|       |
  209|   318k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   318k|                                                            end_seg.data());
  211|   318k|            m_storage.reset();
  212|   318k|        }
  213|  1.11M|        else {
  214|  1.11M|            auto& str = m_storage.emplace();
  215|  1.11M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.11M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.11M|            }
  218|  1.11M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.11M|                      std::back_inserter(str));
  220|  1.11M|            m_view = string_view_type{str};
  221|  1.11M|        }
  222|  1.11M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|   318k|    {
  137|   318k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   318k|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  1.27M|{
  235|  1.27M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.27M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.27M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.27M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.27M|    }
  240|  1.27M|    else {
  241|  1.27M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.27M|    }
  243|  1.27M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  1.27M|    {
   50|  1.27M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  1.27M|    {
  137|  1.27M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.27M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  1.27M|    {
  181|  1.27M|        using value_t = ranges::range_value_t<Range>;
  182|  1.27M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.27M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.27M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.27M|            m_storage.reset();
  186|  1.27M|            m_view = string_view_type{ranges::data(range),
  187|  1.27M|                                      ranges_polyfill::usize(range)};
  188|  1.27M|        }
  189|  1.27M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.27M|                                          std::basic_string<CharT>>) {
  191|  1.27M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.27M|            m_view = string_view_type{*m_storage};
  193|  1.27M|        }
  194|  1.27M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.27M|                                          typename detail::basic_scan_buffer<
  196|  1.27M|                                              value_t>::forward_iterator> &&
  197|  1.27M|                           ranges::common_range<Range>) {
  198|  1.27M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.27M|            auto end_seg = range.end().contiguous_segment();
  200|  1.27M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.27M|                             detail::to_address(end_seg.end()))) {
  202|  1.27M|                auto& str = m_storage.emplace();
  203|  1.27M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.27M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.27M|                m_view = string_view_type{str};
  206|  1.27M|                return;
  207|  1.27M|            }
  208|       |
  209|  1.27M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.27M|                                                            end_seg.data());
  211|  1.27M|            m_storage.reset();
  212|  1.27M|        }
  213|  1.27M|        else {
  214|  1.27M|            auto& str = m_storage.emplace();
  215|  1.27M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.27M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.27M|            }
  218|  1.27M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.27M|                      std::back_inserter(str));
  220|  1.27M|            m_view = string_view_type{str};
  221|  1.27M|        }
  222|  1.27M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|  1.15M|    {
  137|  1.15M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.15M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|  1.15M|    {
  181|  1.15M|        using value_t = ranges::range_value_t<Range>;
  182|  1.15M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.15M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.15M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.15M|            m_storage.reset();
  186|  1.15M|            m_view = string_view_type{ranges::data(range),
  187|  1.15M|                                      ranges_polyfill::usize(range)};
  188|  1.15M|        }
  189|  1.15M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.15M|                                          std::basic_string<CharT>>) {
  191|  1.15M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  252|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.15M|            m_view = string_view_type{*m_storage};
  193|  1.15M|        }
  194|  1.15M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.15M|                                          typename detail::basic_scan_buffer<
  196|  1.15M|                                              value_t>::forward_iterator> &&
  197|  1.15M|                           ranges::common_range<Range>) {
  198|  1.15M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.15M|            auto end_seg = range.end().contiguous_segment();
  200|  1.15M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.15M|                             detail::to_address(end_seg.end()))) {
  202|  1.15M|                auto& str = m_storage.emplace();
  203|  1.15M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.15M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.15M|                m_view = string_view_type{str};
  206|  1.15M|                return;
  207|  1.15M|            }
  208|       |
  209|  1.15M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.15M|                                                            end_seg.data());
  211|  1.15M|            m_storage.reset();
  212|  1.15M|        }
  213|  1.15M|        else {
  214|  1.15M|            auto& str = m_storage.emplace();
  215|  1.15M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.15M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.15M|            }
  218|  1.15M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.15M|                      std::back_inserter(str));
  220|  1.15M|            m_view = string_view_type{str};
  221|  1.15M|        }
  222|  1.15M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  8.71M|{
   97|  8.71M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  8.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 33.2k, False: 8.67M]
  |  |  ------------------
  ------------------
   98|  33.2k|        return eof_error::eof;
   99|  33.2k|    }
  100|  8.67M|    return eof_error::good;
  101|  8.71M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  8.71M|{
   91|  8.71M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  8.71M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  8.71M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  8.71M|    {
   84|  8.71M|        return begin == end;
   85|  8.71M|    }
   86|  8.71M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.20M|{
   97|  1.20M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 231, False: 1.20M]
  |  |  ------------------
  ------------------
   98|    231|        return eof_error::eof;
   99|    231|    }
  100|  1.20M|    return eof_error::good;
  101|  1.20M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.20M|{
   91|  1.20M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.20M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.20M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.20M|    {
   84|  1.20M|        return begin == end;
   85|  1.20M|    }
   86|  1.20M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  7.67M|{
   97|  7.67M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  7.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 35.4k, False: 7.63M]
  |  |  ------------------
  ------------------
   98|  35.4k|        return eof_error::eof;
   99|  35.4k|    }
  100|  7.63M|    return eof_error::good;
  101|  7.67M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  7.67M|{
   91|  7.67M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  7.67M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  7.67M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  7.67M|    {
   84|  7.67M|        return begin == end;
   85|  7.67M|    }
   86|  7.67M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.15M|{
   97|  2.15M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 495, False: 2.15M]
  |  |  ------------------
  ------------------
   98|    495|        return eof_error::eof;
   99|    495|    }
  100|  2.15M|    return eof_error::good;
  101|  2.15M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.15M|{
   91|  2.15M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.15M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.15M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.15M|    {
   84|  2.15M|        return begin == end;
   85|  2.15M|    }
   86|  2.15M|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  1.27M|{
  120|  1.27M|    return find_classic_impl(
  121|  1.27M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  1.27M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  1.27M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.78M|{
  128|  2.78M|    return find_classic_impl(
  129|  2.78M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.78M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.78M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|  1.27M|{
   44|  1.27M|    auto it = source.begin();
   45|       |
   46|  6.42M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 6.06M, False: 361k]
  ------------------
   47|  6.06M|        auto sv =
   48|  6.06M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  6.06M|                .substr(0, 8);
   50|       |
   51|  6.06M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.87M, False: 182k]
  ------------------
   52|  5.87M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.87M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.87M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 838k, False: 5.04M]
  ------------------
   55|   838k|                break;
   56|   838k|            }
   57|  5.04M|            continue;
   58|  5.87M|        }
   59|       |
   60|   653k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 544k, False: 108k]
  ------------------
   61|   544k|            auto tmp =
   62|   544k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   544k|            auto res = get_next_code_point(tmp);
   64|   544k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 74.1k, False: 470k]
  ------------------
   65|  74.1k|                return it;
   66|  74.1k|            }
   67|   470k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   470k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   470k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  247|   470k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   470k|        }
   71|   182k|    }
   72|       |
   73|  1.19M|    return detail::make_string_view_iterator(source, it);
   74|  1.27M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  8.88M|{
   31|  8.88M|    static_assert(sizeof(*source.data()) == 1);
   32|  8.88M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  246|  8.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  8.88M|    uint64_t word{};
   34|  8.88M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  8.88M|    return has_byte_greater(word, 127) != 0;
   37|  8.88M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  121|  41.4M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  122|   544k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|  2.78M|{
   44|  2.78M|    auto it = source.begin();
   45|       |
   46|  2.91M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.82M, False: 93.0k]
  ------------------
   47|  2.82M|        auto sv =
   48|  2.82M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.82M|                .substr(0, 8);
   50|       |
   51|  2.82M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.55M, False: 273k]
  ------------------
   52|  2.55M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.55M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.55M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.43M, False: 118k]
  ------------------
   55|  2.43M|                break;
   56|  2.43M|            }
   57|   118k|            continue;
   58|  2.55M|        }
   59|       |
   60|   450k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 437k, False: 13.0k]
  ------------------
   61|   437k|            auto tmp =
   62|   437k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   437k|            auto res = get_next_code_point(tmp);
   64|   437k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 260k, False: 177k]
  ------------------
   65|   260k|                return it;
   66|   260k|            }
   67|   177k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   177k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   177k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  247|   177k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   177k|        }
   71|   273k|    }
   72|       |
   73|  2.52M|    return detail::make_string_view_iterator(source, it);
   74|  2.78M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  129|  4.53M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  130|   437k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.50M|{
  300|  2.50M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.50M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.50M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.50M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  252|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.50M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.50M|        return ranges::next(ranges::begin(range),
  306|  2.50M|                            ranges::distance(buf.view().begin(), it));
  307|  2.50M|    }
  308|  2.50M|    else {
  309|  2.50M|        auto it = ranges::begin(range);
  310|       |
  311|  2.50M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.50M|            auto seg = get_contiguous_beginning(range);
  313|  2.50M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.50M|                seg_it != seg.end()) {
  315|  2.50M|                return ranges_polyfill::batch_next(
  316|  2.50M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.50M|            }
  318|  2.50M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.50M|        }
  320|       |
  321|  2.50M|        return read_while_code_point(
  322|  2.50M|            SCN_FWD(range),
  323|  2.50M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.50M|    }
  325|  2.50M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.98M|{
  459|  2.98M|    auto it = read_code_unit(range);
  460|  2.98M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.27k, False: 2.98M]
  |  |  ------------------
  ------------------
  461|  3.27k|        return unexpected(make_eof_parse_error(it.error()));
  462|  3.27k|    }
  463|       |
  464|  5.46M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.46M, False: 2.17M]
  ------------------
  465|  5.46M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 813k, False: 4.65M]
  ------------------
  466|   813k|            return *it;
  467|   813k|        }
  468|  5.46M|    }
  469|       |
  470|  2.17M|    return unexpected(parse_error::error);
  471|  2.98M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.71M|{
  418|  6.71M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.71M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.71M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.71M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 54.1k, False: 6.65M]
  ------------------
  423|  54.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  54.1k|        }
  425|  6.65M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 6.44M, False: 215k]
  ------------------
  426|  6.44M|            return unexpected(parse_error::error);
  427|  6.44M|        }
  428|   215k|        return ranges::next(ranges::begin(range), str.size());
  429|  6.65M|    }
  430|  6.71M|    else {
  431|  6.71M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.71M|            if (ch < 'A' || ch > 'Z') {
  433|  6.71M|                return ch;
  434|  6.71M|            }
  435|  6.71M|            return static_cast<char_type>(ch +
  436|  6.71M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.71M|        };
  438|       |
  439|  6.71M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  6.71M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.71M|        if (SCN_UNLIKELY(!std::equal(
  443|  6.71M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.71M|                    return ascii_tolower(a) ==
  445|  6.71M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.71M|                }))) {
  447|  6.71M|            return unexpected(parse_error::error);
  448|  6.71M|        }
  449|       |
  450|  6.71M|        return it;
  451|  6.71M|    }
  452|  6.71M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  6.69M|{
  407|  6.69M|    unsigned char running_diff{0};
  408|  25.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 18.4M, False: 6.69M]
  ------------------
  409|  18.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  18.4M|    }
  411|  6.69M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 200k, False: 6.49M]
  |  Branch (411:33): [True: 32.1k, False: 6.46M]
  ------------------
  412|  6.69M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  38.3k|{
  418|  38.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  38.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  38.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  38.3k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 666, False: 37.6k]
  ------------------
  423|    666|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    666|        }
  425|  37.6k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 21.0k, False: 16.5k]
  ------------------
  426|  21.0k|            return unexpected(parse_error::error);
  427|  21.0k|        }
  428|  16.5k|        return ranges::next(ranges::begin(range), str.size());
  429|  37.6k|    }
  430|  38.3k|    else {
  431|  38.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  38.3k|            if (ch < 'A' || ch > 'Z') {
  433|  38.3k|                return ch;
  434|  38.3k|            }
  435|  38.3k|            return static_cast<char_type>(ch +
  436|  38.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  38.3k|        };
  438|       |
  439|  38.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  38.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  38.3k|        if (SCN_UNLIKELY(!std::equal(
  443|  38.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  38.3k|                    return ascii_tolower(a) ==
  445|  38.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  38.3k|                }))) {
  447|  38.3k|            return unexpected(parse_error::error);
  448|  38.3k|        }
  449|       |
  450|  38.3k|        return it;
  451|  38.3k|    }
  452|  38.3k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   691k|{
  332|   691k|    auto it = read_code_unit(range);
  333|   691k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.84k, False: 687k]
  |  |  ------------------
  ------------------
  334|  3.84k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.84k|    }
  336|       |
  337|   687k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 583k, False: 104k]
  |  |  ------------------
  ------------------
  338|   687k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   583k|        return unexpected(parse_error::error);
  340|   583k|    }
  341|       |
  342|   104k|    return *it;
  343|   687k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  3.53k|{
  139|  3.53k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  3.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  3.53k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  3.53k|{
  131|  3.53k|    return ranges::find_if(range, pred);
  132|  3.53k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.29M|{
  159|  1.29M|    auto it = read_while_code_unit(range, pred);
  160|  1.29M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 537k, False: 758k]
  ------------------
  161|   537k|        return unexpected(parse_error::error);
  162|   537k|    }
  163|   758k|    return it;
  164|  1.29M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.29M|{
  139|  1.29M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.29M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.29M|{
  131|  1.29M|    return ranges::find_if(range, pred);
  132|  1.29M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   282k|{
  300|   282k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   282k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   282k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   282k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   282k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   282k|        return ranges::next(ranges::begin(range),
  306|   282k|                            ranges::distance(buf.view().begin(), it));
  307|   282k|    }
  308|   282k|    else {
  309|   282k|        auto it = ranges::begin(range);
  310|       |
  311|   282k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   282k|            auto seg = get_contiguous_beginning(range);
  313|   282k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   282k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 193k, False: 88.8k]
  ------------------
  315|   193k|                return ranges_polyfill::batch_next(
  316|   193k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   193k|            }
  318|  88.8k|            ranges_polyfill::batch_next(it, seg.size());
  319|  88.8k|        }
  320|       |
  321|  88.8k|        return read_while_code_point(
  322|  88.8k|            SCN_FWD(range),
  ------------------
  |  |  252|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  88.8k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   282k|    }
  325|   282k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|  88.8k|{
  264|  88.8k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  88.8k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|  88.8k|{
  231|  88.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  88.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  88.8k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  88.8k|    }
  235|  88.8k|    else {
  236|  88.8k|        auto it = ranges::begin(range);
  237|  88.8k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  88.8k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  88.8k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 88.8k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   177k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 177k, False: 33]
  ------------------
  246|   177k|            const auto [iter, value] =
  247|   177k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   177k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   177k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 88.8k, False: 88.8k]
  ------------------
  250|  88.8k|                return it;
  251|  88.8k|            }
  252|  88.8k|            it = iter;
  253|  88.8k|        }
  254|       |
  255|     33|        return it;
  256|  88.8k|    }
  257|  88.8k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  88.8k|{
  178|  88.8k|    static_assert(ranges::contiguous_range<Range> &&
  179|  88.8k|                  ranges::sized_range<Range>);
  180|       |
  181|  88.8k|    std::array<char32_t, 16> cp_buf{};
  182|  88.8k|    std::array<uint8_t, 16> idx_buf{};
  183|  88.8k|    auto it = ranges::begin(range);
  184|   177k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 88.8k, False: 88.8k]
  ------------------
  185|  88.8k|        auto chunk_begin = it;
  186|  88.8k|        size_t code_point_count = 0;
  187|  88.8k|        uint8_t code_unit_idx = 0;
  188|   177k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 177k, False: 0]
  |  Branch (188:52): [True: 88.8k, False: 88.8k]
  ------------------
  189|  88.8k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 88.8k, False: 0]
  ------------------
  190|  88.8k|                idx_buf[code_point_count] = code_unit_idx;
  191|  88.8k|                ++code_point_count;
  192|  88.8k|            }
  193|  88.8k|            ++it;
  194|  88.8k|            ++code_unit_idx;
  195|  88.8k|        }
  196|       |
  197|  88.8k|        auto input = detail::make_string_view_from_pointers(
  198|  88.8k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  88.8k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  88.8k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  88.8k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 88.8k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   177k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 88.8k, False: 88.8k]
  ------------------
  217|  88.8k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 88.8k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|  88.8k|        }
  221|  88.8k|    }
  222|       |
  223|  88.8k|    return it;
  224|  88.8k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   177k|{
   42|   177k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  246|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|   177k|    auto it = ranges::begin(range);
   45|   177k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   177k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 177k, False: 0]
  ------------------
   59|   177k|        ++it;
   60|   177k|        return {it, make_contiguous_buffer(
   61|   177k|                        ranges::subrange{ranges::begin(range), it})};
   62|   177k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   177k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   266k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   444k|{
  459|   444k|    auto it = read_code_unit(range);
  460|   444k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 60, False: 444k]
  |  |  ------------------
  ------------------
  461|     60|        return unexpected(make_eof_parse_error(it.error()));
  462|     60|    }
  463|       |
  464|   888k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 888k, False: 444k]
  ------------------
  465|   888k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 888k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   888k|    }
  469|       |
  470|   444k|    return unexpected(parse_error::error);
  471|   444k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   734k|{
  418|   734k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   734k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   734k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   734k|        if (ranges::size(range) < str.size()) {
  423|   734k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   734k|        }
  425|   734k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   734k|            return unexpected(parse_error::error);
  427|   734k|        }
  428|   734k|        return ranges::next(ranges::begin(range), str.size());
  429|   734k|    }
  430|   734k|    else {
  431|   734k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   734k|            if (ch < 'A' || ch > 'Z') {
  433|   734k|                return ch;
  434|   734k|            }
  435|   734k|            return static_cast<char_type>(ch +
  436|   734k|                                          static_cast<char_type>('a' - 'A'));
  437|   734k|        };
  438|       |
  439|   734k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   734k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   734k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   734k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 483, False: 734k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    483|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    483|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    483|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    483|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    483|    }                                                  \
  |  |  |  |   70|   734k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   734k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   734k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   734k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 734k, False: 0]
  |  |  ------------------
  ------------------
  443|   734k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   734k|                    return ascii_tolower(a) ==
  445|   734k|                           static_cast<detail::char_t<Range>>(b);
  446|   734k|                }))) {
  447|   734k|            return unexpected(parse_error::error);
  448|   734k|        }
  449|       |
  450|      0|        return it;
  451|   734k|    }
  452|   734k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   790k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   790k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 790k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   790k|                return ch;
  434|   790k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   790k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   476k|{
  139|   476k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   476k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   476k|{
  131|   476k|    return ranges::find_if(range, pred);
  132|   476k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|   193k|{
  332|   193k|    auto it = read_code_unit(range);
  333|   193k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 72, False: 193k]
  |  |  ------------------
  ------------------
  334|     72|        return unexpected(make_eof_parse_error(it.error()));
  335|     72|    }
  336|       |
  337|   193k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 193k, False: 0]
  |  |  ------------------
  ------------------
  338|   193k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   193k|        return unexpected(parse_error::error);
  340|   193k|    }
  341|       |
  342|      0|    return *it;
  343|   193k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   476k|{
  159|   476k|    auto it = read_while_code_unit(range, pred);
  160|   476k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 282k, False: 193k]
  ------------------
  161|   282k|        return unexpected(parse_error::error);
  162|   282k|    }
  163|   193k|    return it;
  164|   476k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.21M|{
  300|  2.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.21M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.21M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.21M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.21M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.21M|        return ranges::next(ranges::begin(range),
  306|  2.21M|                            ranges::distance(buf.view().begin(), it));
  307|  2.21M|    }
  308|  2.21M|    else {
  309|  2.21M|        auto it = ranges::begin(range);
  310|       |
  311|  2.21M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.21M|            auto seg = get_contiguous_beginning(range);
  313|  2.21M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.21M|                seg_it != seg.end()) {
  315|  2.21M|                return ranges_polyfill::batch_next(
  316|  2.21M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.21M|            }
  318|  2.21M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.21M|        }
  320|       |
  321|  2.21M|        return read_while_code_point(
  322|  2.21M|            SCN_FWD(range),
  ------------------
  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.21M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.21M|    }
  325|  2.21M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.21M|{
  264|  2.21M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.21M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.21M|{
  231|  2.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.21M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.21M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.21M|    }
  235|  2.21M|    else {
  236|  2.21M|        auto it = ranges::begin(range);
  237|  2.21M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.21M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.21M|            seg_it != seg.end()) {
  241|  2.21M|            return ranges_polyfill::batch_next(
  242|  2.21M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.21M|        }
  244|       |
  245|  2.21M|        while (it != ranges::end(range)) {
  246|  2.21M|            const auto [iter, value] =
  247|  2.21M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.21M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.21M|            if (pred(cp)) {
  250|  2.21M|                return it;
  251|  2.21M|            }
  252|  2.21M|            it = iter;
  253|  2.21M|        }
  254|       |
  255|  2.21M|        return it;
  256|  2.21M|    }
  257|  2.21M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.21M|{
  178|  2.21M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.21M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.21M|    std::array<char32_t, 16> cp_buf{};
  182|  2.21M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.21M|    auto it = ranges::begin(range);
  184|  2.23M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.22M, False: 5.71k]
  ------------------
  185|  2.22M|        auto chunk_begin = it;
  186|  2.22M|        size_t code_point_count = 0;
  187|  2.22M|        uint8_t code_unit_idx = 0;
  188|  36.2M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 34.1M, False: 2.05M]
  |  Branch (188:52): [True: 33.9M, False: 174k]
  ------------------
  189|  33.9M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 33.9M, False: 0]
  ------------------
  190|  33.9M|                idx_buf[code_point_count] = code_unit_idx;
  191|  33.9M|                ++code_point_count;
  192|  33.9M|            }
  193|  33.9M|            ++it;
  194|  33.9M|            ++code_unit_idx;
  195|  33.9M|        }
  196|       |
  197|  2.22M|        auto input = detail::make_string_view_from_pointers(
  198|  2.22M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.22M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.22M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.22M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  4.08M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 4.07M, False: 12.3k]
  ------------------
  217|  4.07M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.21M, False: 1.86M]
  ------------------
  218|  2.21M|                return chunk_begin + idx_buf[i];
  219|  2.21M|            }
  220|  4.07M|        }
  221|  2.22M|    }
  222|       |
  223|  5.71k|    return it;
  224|  2.21M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  4.07M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.62M|{
  459|  2.62M|    auto it = read_code_unit(range);
  460|  2.62M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.37k, False: 2.62M]
  |  |  ------------------
  ------------------
  461|  3.37k|        return unexpected(make_eof_parse_error(it.error()));
  462|  3.37k|    }
  463|       |
  464|  4.82M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.82M, False: 1.93M]
  ------------------
  465|  4.82M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 683k, False: 4.13M]
  ------------------
  466|   683k|            return *it;
  467|   683k|        }
  468|  4.82M|    }
  469|       |
  470|  1.93M|    return unexpected(parse_error::error);
  471|  2.62M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.91M|{
  418|  5.91M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.91M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.91M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.91M|        if (ranges::size(range) < str.size()) {
  423|  5.91M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  5.91M|        }
  425|  5.91M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  5.91M|            return unexpected(parse_error::error);
  427|  5.91M|        }
  428|  5.91M|        return ranges::next(ranges::begin(range), str.size());
  429|  5.91M|    }
  430|  5.91M|    else {
  431|  5.91M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.91M|            if (ch < 'A' || ch > 'Z') {
  433|  5.91M|                return ch;
  434|  5.91M|            }
  435|  5.91M|            return static_cast<char_type>(ch +
  436|  5.91M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.91M|        };
  438|       |
  439|  5.91M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  5.91M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.91M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.91M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 91.0k, False: 5.82M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  91.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  91.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  91.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  91.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  91.0k|    }                                                  \
  |  |  |  |   70|  5.91M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  5.82M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.82M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|  5.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.62M, False: 199k]
  |  |  ------------------
  ------------------
  443|  5.82M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.82M|                    return ascii_tolower(a) ==
  445|  5.82M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.82M|                }))) {
  447|  5.62M|            return unexpected(parse_error::error);
  448|  5.62M|        }
  449|       |
  450|   199k|        return it;
  451|  5.82M|    }
  452|  5.91M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  6.73M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.73M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 5.91M, False: 821k]
  |  Branch (432:29): [True: 721k, False: 100k]
  ------------------
  433|  6.63M|                return ch;
  434|  6.63M|            }
  435|   100k|            return static_cast<char_type>(ch +
  436|   100k|                                          static_cast<char_type>('a' - 'A'));
  437|  6.73M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  34.0k|{
  418|  34.0k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  34.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  34.0k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  34.0k|        if (ranges::size(range) < str.size()) {
  423|  34.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  34.0k|        }
  425|  34.0k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  34.0k|            return unexpected(parse_error::error);
  427|  34.0k|        }
  428|  34.0k|        return ranges::next(ranges::begin(range), str.size());
  429|  34.0k|    }
  430|  34.0k|    else {
  431|  34.0k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  34.0k|            if (ch < 'A' || ch > 'Z') {
  433|  34.0k|                return ch;
  434|  34.0k|            }
  435|  34.0k|            return static_cast<char_type>(ch +
  436|  34.0k|                                          static_cast<char_type>('a' - 'A'));
  437|  34.0k|        };
  438|       |
  439|  34.0k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 613, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    613|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    613|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    613|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    613|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    613|    }                                                  \
  |  |  |  |   70|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  33.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  33.3k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 17.4k, False: 15.9k]
  |  |  ------------------
  ------------------
  443|  33.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  33.3k|                    return ascii_tolower(a) ==
  445|  33.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  33.3k|                }))) {
  447|  17.4k|            return unexpected(parse_error::error);
  448|  17.4k|        }
  449|       |
  450|  15.9k|        return it;
  451|  33.3k|    }
  452|  34.0k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   100k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 15.6k, False: 85.2k]
  |  Branch (432:29): [True: 84.8k, False: 374]
  ------------------
  433|   100k|                return ch;
  434|   100k|            }
  435|    374|            return static_cast<char_type>(ch +
  436|    374|                                          static_cast<char_type>('a' - 'A'));
  437|   100k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   590k|{
  332|   590k|    auto it = read_code_unit(range);
  333|   590k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.00k, False: 586k]
  |  |  ------------------
  ------------------
  334|  4.00k|        return unexpected(make_eof_parse_error(it.error()));
  335|  4.00k|    }
  336|       |
  337|   586k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 504k, False: 82.2k]
  |  |  ------------------
  ------------------
  338|   586k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   504k|        return unexpected(parse_error::error);
  340|   504k|    }
  341|       |
  342|  82.2k|    return *it;
  343|   586k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  3.46k|{
  139|  3.46k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  3.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  3.46k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  3.46k|{
  131|  3.46k|    return ranges::find_if(range, pred);
  132|  3.46k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.13M|{
  159|  1.13M|    auto it = read_while_code_unit(range, pred);
  160|  1.13M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 500k, False: 633k]
  ------------------
  161|   500k|        return unexpected(parse_error::error);
  162|   500k|    }
  163|   633k|    return it;
  164|  1.13M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.13M|{
  139|  1.13M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.13M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.13M|{
  131|  1.13M|    return ranges::find_if(range, pred);
  132|  1.13M|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|  1.15M|{
  231|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  1.15M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  1.15M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  252|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  1.15M|    }
  235|  1.15M|    else {
  236|  1.15M|        auto it = ranges::begin(range);
  237|  1.15M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  1.15M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  1.15M|            seg_it != seg.end()) {
  241|  1.15M|            return ranges_polyfill::batch_next(
  242|  1.15M|                it, ranges::distance(seg.begin(), seg_it));
  243|  1.15M|        }
  244|       |
  245|  1.15M|        while (it != ranges::end(range)) {
  246|  1.15M|            const auto [iter, value] =
  247|  1.15M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.15M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.15M|            if (pred(cp)) {
  250|  1.15M|                return it;
  251|  1.15M|            }
  252|  1.15M|            it = iter;
  253|  1.15M|        }
  254|       |
  255|  1.15M|        return it;
  256|  1.15M|    }
  257|  1.15M|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|  1.15M|{
  178|  1.15M|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.15M|                  ranges::sized_range<Range>);
  180|       |
  181|  1.15M|    std::array<char32_t, 16> cp_buf{};
  182|  1.15M|    std::array<uint8_t, 16> idx_buf{};
  183|  1.15M|    auto it = ranges::begin(range);
  184|  3.41M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.04M, False: 373k]
  ------------------
  185|  3.04M|        auto chunk_begin = it;
  186|  3.04M|        size_t code_point_count = 0;
  187|  3.04M|        uint8_t code_unit_idx = 0;
  188|  46.9M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 44.2M, False: 2.63M]
  |  Branch (188:52): [True: 43.8M, False: 410k]
  ------------------
  189|  43.8M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 43.8M, False: 0]
  ------------------
  190|  43.8M|                idx_buf[code_point_count] = code_unit_idx;
  191|  43.8M|                ++code_point_count;
  192|  43.8M|            }
  193|  43.8M|            ++it;
  194|  43.8M|            ++code_unit_idx;
  195|  43.8M|        }
  196|       |
  197|  3.04M|        auto input = detail::make_string_view_from_pointers(
  198|  3.04M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.04M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.04M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.04M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.04M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  38.2M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 35.9M, False: 2.26M]
  ------------------
  217|  35.9M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 780k, False: 35.1M]
  ------------------
  218|   780k|                return chunk_begin + idx_buf[i];
  219|   780k|            }
  220|  35.9M|        }
  221|  3.04M|    }
  222|       |
  223|   373k|    return it;
  224|  1.15M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   506k|{
  178|   506k|    static_assert(ranges::contiguous_range<Range> &&
  179|   506k|                  ranges::sized_range<Range>);
  180|       |
  181|   506k|    std::array<char32_t, 16> cp_buf{};
  182|   506k|    std::array<uint8_t, 16> idx_buf{};
  183|   506k|    auto it = ranges::begin(range);
  184|   824k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 506k, False: 318k]
  ------------------
  185|   506k|        auto chunk_begin = it;
  186|   506k|        size_t code_point_count = 0;
  187|   506k|        uint8_t code_unit_idx = 0;
  188|  1.01M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.01M, False: 0]
  |  Branch (188:52): [True: 506k, False: 506k]
  ------------------
  189|   506k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 506k, False: 0]
  ------------------
  190|   506k|                idx_buf[code_point_count] = code_unit_idx;
  191|   506k|                ++code_point_count;
  192|   506k|            }
  193|   506k|            ++it;
  194|   506k|            ++code_unit_idx;
  195|   506k|        }
  196|       |
  197|   506k|        auto input = detail::make_string_view_from_pointers(
  198|   506k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   506k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   506k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   506k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   824k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 506k, False: 318k]
  ------------------
  217|   506k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 188k, False: 318k]
  ------------------
  218|   188k|                return chunk_begin + idx_buf[i];
  219|   188k|            }
  220|   506k|        }
  221|   506k|    }
  222|       |
  223|   318k|    return it;
  224|   506k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   506k|{
  300|   506k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   506k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   506k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   506k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   506k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   506k|        return ranges::next(ranges::begin(range),
  306|   506k|                            ranges::distance(buf.view().begin(), it));
  307|   506k|    }
  308|   506k|    else {
  309|   506k|        auto it = ranges::begin(range);
  310|       |
  311|   506k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   506k|            auto seg = get_contiguous_beginning(range);
  313|   506k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   506k|                seg_it != seg.end()) {
  315|   506k|                return ranges_polyfill::batch_next(
  316|   506k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   506k|            }
  318|   506k|            ranges_polyfill::batch_next(it, seg.size());
  319|   506k|        }
  320|       |
  321|   506k|        return read_while_code_point(
  322|   506k|            SCN_FWD(range),
  ------------------
  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   506k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   506k|    }
  325|   506k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   506k|{
  264|   506k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   506k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   506k|{
  231|   506k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   506k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   506k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   506k|    }
  235|   506k|    else {
  236|   506k|        auto it = ranges::begin(range);
  237|   506k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   506k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   506k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 188k, False: 318k]
  ------------------
  241|   188k|            return ranges_polyfill::batch_next(
  242|   188k|                it, ranges::distance(seg.begin(), seg_it));
  243|   188k|        }
  244|       |
  245|   795k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 795k, False: 99]
  ------------------
  246|   795k|            const auto [iter, value] =
  247|   795k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   795k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   795k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 318k, False: 477k]
  ------------------
  250|   318k|                return it;
  251|   318k|            }
  252|   477k|            it = iter;
  253|   477k|        }
  254|       |
  255|     99|        return it;
  256|   318k|    }
  257|   506k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   795k|{
   42|   795k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  246|   795k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   795k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|   795k|    auto it = ranges::begin(range);
   45|   795k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   795k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 795k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   795k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 795k, False: 0]
  ------------------
   59|   795k|        ++it;
   60|   795k|        return {it, make_contiguous_buffer(
   61|   795k|                        ranges::subrange{ranges::begin(range), it})};
   62|   795k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   795k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  1.30M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   795k|{
  459|   795k|    auto it = read_code_unit(range);
  460|   795k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 120, False: 795k]
  |  |  ------------------
  ------------------
  461|    120|        return unexpected(make_eof_parse_error(it.error()));
  462|    120|    }
  463|       |
  464|  1.43M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.43M, False: 636k]
  ------------------
  465|  1.43M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 158k, False: 1.27M]
  ------------------
  466|   158k|            return *it;
  467|   158k|        }
  468|  1.43M|    }
  469|       |
  470|   636k|    return unexpected(parse_error::error);
  471|   795k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.31M|{
  418|  1.31M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.31M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.31M|        if (ranges::size(range) < str.size()) {
  423|  1.31M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.31M|        }
  425|  1.31M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.31M|            return unexpected(parse_error::error);
  427|  1.31M|        }
  428|  1.31M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.31M|    }
  430|  1.31M|    else {
  431|  1.31M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.31M|            if (ch < 'A' || ch > 'Z') {
  433|  1.31M|                return ch;
  434|  1.31M|            }
  435|  1.31M|            return static_cast<char_type>(ch +
  436|  1.31M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.31M|        };
  438|       |
  439|  1.31M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.31M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.31M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.31M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 570, False: 1.31M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    570|    }                                                  \
  |  |  |  |   70|  1.31M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.31M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.31M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.31M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.31M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.31M|                    return ascii_tolower(a) ==
  445|  1.31M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.31M|                }))) {
  447|  1.31M|            return unexpected(parse_error::error);
  448|  1.31M|        }
  449|       |
  450|      0|        return it;
  451|  1.31M|    }
  452|  1.31M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.41M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.41M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 1.41M, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|  1.41M|                return ch;
  434|  1.41M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.41M|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   853k|{
  139|   853k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   853k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   853k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   853k|{
  131|   853k|    return ranges::find_if(range, pred);
  132|   853k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|   347k|{
  332|   347k|    auto it = read_code_unit(range);
  333|   347k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 144, False: 347k]
  |  |  ------------------
  ------------------
  334|    144|        return unexpected(make_eof_parse_error(it.error()));
  335|    144|    }
  336|       |
  337|   347k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 347k, False: 0]
  |  |  ------------------
  ------------------
  338|   347k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   347k|        return unexpected(parse_error::error);
  340|   347k|    }
  341|       |
  342|      0|    return *it;
  343|   347k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   853k|{
  159|   853k|    auto it = read_while_code_unit(range, pred);
  160|   853k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 506k, False: 347k]
  ------------------
  161|   506k|        return unexpected(parse_error::error);
  162|   506k|    }
  163|   347k|    return it;
  164|   853k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.27M|{
  270|  1.27M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.27M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.27M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.27M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  252|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  1.27M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.27M|        return ranges::next(ranges::begin(range),
  276|  1.27M|                            ranges::distance(buf.view().begin(), it));
  277|  1.27M|    }
  278|  1.27M|    else {
  279|  1.27M|        auto it = ranges::begin(range);
  280|       |
  281|  1.27M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  1.27M|            auto seg = get_contiguous_beginning(range);
  283|  1.27M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.27M|                seg_it != seg.end()) {
  285|  1.27M|                return ranges_polyfill::batch_next(
  286|  1.27M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.27M|            }
  288|  1.27M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.27M|        }
  290|       |
  291|  1.27M|        return read_until_code_point(
  292|  1.27M|            ranges::subrange{it, ranges::end(range)},
  293|  1.27M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.27M|    }
  295|  1.27M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.15M|{
  270|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.15M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.15M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.15M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  1.15M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.15M|        return ranges::next(ranges::begin(range),
  276|  1.15M|                            ranges::distance(buf.view().begin(), it));
  277|  1.15M|    }
  278|  1.15M|    else {
  279|  1.15M|        auto it = ranges::begin(range);
  280|       |
  281|  1.15M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  1.15M|            auto seg = get_contiguous_beginning(range);
  283|  1.15M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.15M|                seg_it != seg.end()) {
  285|  1.15M|                return ranges_polyfill::batch_next(
  286|  1.15M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.15M|            }
  288|  1.15M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.15M|        }
  290|       |
  291|  1.15M|        return read_until_code_point(
  292|  1.15M|            ranges::subrange{it, ranges::end(range)},
  293|  1.15M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.15M|    }
  295|  1.15M|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  35.9M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.68M|{
   36|  3.68M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 7.12k, False: 3.67M]
  |  |  ------------------
  ------------------
   37|  7.12k|        return unexpected(e);
   38|  7.12k|    }
   39|       |
   40|  3.67M|    return ranges::next(ranges::begin(range));
   41|  3.68M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.74M|{
   30|  1.74M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.74M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   637k|{
   36|   637k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 132, False: 637k]
  |  |  ------------------
  ------------------
   37|    132|        return unexpected(e);
   38|    132|    }
   39|       |
   40|   637k|    return ranges::next(ranges::begin(range));
   41|   637k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   734k|{
   48|   734k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|   734k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   734k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   734k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   734k|        const auto sz = ranges::ssize(range);
   52|   734k|        if (sz < count) {
   53|   734k|            return unexpected(eof_error::eof);
   54|   734k|        }
   55|       |
   56|   734k|        return ranges::next(ranges::begin(range), count);
   57|   734k|    }
   58|   734k|    else {
   59|   734k|        auto it = ranges::begin(range);
   60|   734k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 451k, False: 282k]
  ------------------
   61|   451k|            return ranges_polyfill::batch_next(it, count);
   62|   451k|        }
   63|       |
   64|  1.13M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 848k, False: 282k]
  ------------------
   65|   848k|             ++i, (void)++it) {
   66|   848k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 483, False: 847k]
  ------------------
   67|    483|                return unexpected(eof_error::eof);
   68|    483|            }
   69|   848k|        }
   70|       |
   71|   282k|        return it;
   72|   282k|    }
   73|   734k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.21M|{
   36|  3.21M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  3.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 7.38k, False: 3.20M]
  |  |  ------------------
  ------------------
   37|  7.38k|        return unexpected(e);
   38|  7.38k|    }
   39|       |
   40|  3.20M|    return ranges::next(ranges::begin(range));
   41|  3.21M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  5.95M|{
   48|  5.95M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|  5.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  5.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  5.95M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  5.95M|        const auto sz = ranges::ssize(range);
   52|  5.95M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 91.6k, False: 5.85M]
  ------------------
   53|  91.6k|            return unexpected(eof_error::eof);
   54|  91.6k|        }
   55|       |
   56|  5.85M|        return ranges::next(ranges::begin(range), count);
   57|  5.95M|    }
   58|  5.95M|    else {
   59|  5.95M|        auto it = ranges::begin(range);
   60|  5.95M|        if (guaranteed_minimum_size(range) >= count) {
   61|  5.95M|            return ranges_polyfill::batch_next(it, count);
   62|  5.95M|        }
   63|       |
   64|  5.95M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  5.95M|             ++i, (void)++it) {
   66|  5.95M|            if (it == ranges::end(range)) {
   67|  5.95M|                return unexpected(eof_error::eof);
   68|  5.95M|            }
   69|  5.95M|        }
   70|       |
   71|  5.95M|        return it;
   72|  5.95M|    }
   73|  5.95M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.52M|{
   30|  1.52M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.52M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.14M|{
   36|  1.14M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 264, False: 1.14M]
  |  |  ------------------
  ------------------
   37|    264|        return unexpected(e);
   38|    264|    }
   39|       |
   40|  1.14M|    return ranges::next(ranges::begin(range));
   41|  1.14M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.31M|{
   48|  1.31M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.31M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.31M|        const auto sz = ranges::ssize(range);
   52|  1.31M|        if (sz < count) {
   53|  1.31M|            return unexpected(eof_error::eof);
   54|  1.31M|        }
   55|       |
   56|  1.31M|        return ranges::next(ranges::begin(range), count);
   57|  1.31M|    }
   58|  1.31M|    else {
   59|  1.31M|        auto it = ranges::begin(range);
   60|  1.31M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 809k, False: 506k]
  ------------------
   61|   809k|            return ranges_polyfill::batch_next(it, count);
   62|   809k|        }
   63|       |
   64|  2.02M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 1.51M, False: 505k]
  ------------------
   65|  1.51M|             ++i, (void)++it) {
   66|  1.51M|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 570, False: 1.51M]
  ------------------
   67|    570|                return unexpected(eof_error::eof);
   68|    570|            }
   69|  1.51M|        }
   70|       |
   71|   505k|        return it;
   72|   506k|    }
   73|  1.31M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.50M|{
   33|  2.50M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.50M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.09M|{
   39|  1.09M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.09M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 546k, False: 546k]
  ------------------
   41|  1.09M|                    : std::locale{};
   42|  1.09M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   558k|    {
  112|   558k|        auto stdloc = loc.get<std::locale>();
  113|   558k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   558k|        grouping = numpunct.grouping();
  115|   558k|        thousands_sep =
  116|   558k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 558k]
  ------------------
  117|   558k|        decimal_point = numpunct.decimal_point();
  118|   558k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   558k|{
   49|   558k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 558k, False: 0]
  ------------------
   50|   558k|        return std::use_facet<Facet>(stdloc);
   51|   558k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   558k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  2.78M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  2.42M|    {
   89|  2.42M|        std::setlocale(cat, "C");
   90|  2.42M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  2.42M|    {
   60|  2.42M|        const auto loc = std::setlocale(cat, nullptr);
   61|  2.42M|        std::strcpy(m_locbuf, loc);
   62|  2.42M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  2.42M|    {
   65|       |        // Restore locale to what it was before
   66|  2.42M|        std::setlocale(m_category, m_locbuf);
   67|  2.42M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   533k|    {
  112|   533k|        auto stdloc = loc.get<std::locale>();
  113|   533k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   533k|        grouping = numpunct.grouping();
  115|   533k|        thousands_sep =
  116|   533k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 533k]
  ------------------
  117|   533k|        decimal_point = numpunct.decimal_point();
  118|   533k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   533k|{
   49|   533k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 533k, False: 0]
  ------------------
   50|   533k|        return std::use_facet<Facet>(stdloc);
   51|   533k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   533k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  2.71M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.50M|{
   46|  2.50M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.50M, False: 0]
  ------------------
   47|  2.50M|        auto it = read_while_classic_space(range);
   48|  2.50M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.50M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.16k, False: 2.49M]
  |  |  ------------------
  ------------------
   50|  4.16k|            return unexpected(e);
   51|  4.16k|        }
   52|       |
   53|  2.49M|        return it;
   54|  2.50M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.50M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  2.80M|    {
  126|  2.80M|        return true;
  127|  2.80M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   282k|{
   46|   282k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 282k, False: 0]
  ------------------
   47|   282k|        auto it = read_while_classic_space(range);
   48|   282k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   282k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 33, False: 282k]
  |  |  ------------------
  ------------------
   50|     33|            return unexpected(e);
   51|     33|        }
   52|       |
   53|   282k|        return it;
   54|   282k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   282k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  3.90M|    {
   35|  3.90M|        return m_msg == nullptr;
   36|  3.90M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.96M|    {
  131|  1.96M|        reader_error_handler eh{};
  132|  1.96M|        get_derived().check_specs_impl(specs, eh);
  133|  1.96M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.96M|        return {};
  137|  1.96M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  1.96M|    {
  142|  1.96M|        return static_cast<Derived&>(*this);
  143|  1.96M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.21M|{
   46|  2.21M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.21M, False: 0]
  ------------------
   47|  2.21M|        auto it = read_while_classic_space(range);
   48|  2.21M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.21M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.71k, False: 2.21M]
  |  |  ------------------
  ------------------
   50|  5.71k|            return unexpected(e);
   51|  5.71k|        }
   52|       |
   53|  2.21M|        return it;
   54|  2.21M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.21M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  2.74M|    {
  126|  2.74M|        return true;
  127|  2.74M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.93M|    {
  131|  1.93M|        reader_error_handler eh{};
  132|  1.93M|        get_derived().check_specs_impl(specs, eh);
  133|  1.93M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.93M|        return {};
  137|  1.93M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  1.93M|    {
  142|  1.93M|        return static_cast<Derived&>(*this);
  143|  1.93M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   506k|{
   46|   506k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 506k, False: 0]
  ------------------
   47|   506k|        auto it = read_while_classic_space(range);
   48|   506k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   506k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 99, False: 506k]
  |  |  ------------------
  ------------------
   50|     99|            return unexpected(e);
   51|     99|        }
   52|       |
   53|   506k|        return it;
   54|   506k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   506k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   827k|{
  640|   827k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   827k|                                  m_nan_payload_buffer, value);
  642|   827k|    value = this->setsign(value);
  643|   827k|    return n;
  644|   827k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   775k|{
  640|   775k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   775k|                                  m_nan_payload_buffer, value);
  642|   775k|    value = this->setsign(value);
  643|   775k|    return n;
  644|   775k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   898k|{
  640|   898k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   898k|                                  m_nan_payload_buffer, value);
  642|   898k|    value = this->setsign(value);
  643|   898k|    return n;
  644|   898k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   833k|{
  640|   833k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   833k|                                  m_nan_payload_buffer, value);
  642|   833k|    value = this->setsign(value);
  643|   833k|    return n;
  644|   833k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   910k|{
  640|   910k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   910k|                                  m_nan_payload_buffer, value);
  642|   910k|    value = this->setsign(value);
  643|   910k|    return n;
  644|   910k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   843k|{
  640|   843k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   843k|                                  m_nan_payload_buffer, value);
  642|   843k|    value = this->setsign(value);
  643|   843k|    return n;
  644|   843k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   827k|{
  557|   827k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.68k, False: 821k]
  ------------------
  558|  6.68k|        value = std::numeric_limits<T>::infinity();
  559|  6.68k|        return 3;
  560|  6.68k|    }
  561|   821k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.31k, False: 815k]
  ------------------
  562|  5.31k|        value = std::numeric_limits<T>::infinity();
  563|  5.31k|        return 8;
  564|  5.31k|    }
  565|   815k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 28.8k, False: 787k]
  ------------------
  566|  28.8k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  28.8k|        return 3;
  568|  28.8k|    }
  569|   787k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 779, False: 786k]
  ------------------
  570|    779|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    779|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    779|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    779|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    779|    }
  601|       |
  602|   786k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   786k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 175k, False: 611k]
  ------------------
  604|   175k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.41k, False: 172k]
  |  |  ------------------
  ------------------
  605|  2.41k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.41k|                                         "Invalid floating-point digit");
  607|  2.41k|        }
  608|   175k|    }
  609|   783k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.24k, False: 777k]
  |  |  ------------------
  ------------------
  610|  6.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  6.24k|                                     "Invalid floating-point digit");
  612|  6.24k|    }
  613|       |
  614|   777k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   777k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   777k|            double tmp{};
  619|   777k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   777k|            value = tmp;
  621|   777k|            return ret;
  622|   777k|        }
  623|   777k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   777k|            return fast_float_fallback(data, value);
  627|   777k|        }
  628|   777k|    }
  629|   777k|    else {
  630|       |        // Default to fast_float
  631|   777k|        return fast_float_impl<CharT, T>{data}(value);
  632|   777k|    }
  633|   777k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  496|   777k|    {
  497|   777k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  130|  2.89M|    {
  131|  2.89M|        return {kind, options};
  132|  2.89M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  500|   777k|    {
  501|   777k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 172k, False: 605k]
  ------------------
  502|   777k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 24.3k, False: 580k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   196k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   196k|                                              value);
  506|   196k|        }
  507|       |
  508|   580k|        const auto flags = get_flags();
  509|   580k|        const auto view = get_view();
  510|   580k|        const auto result = fast_float::from_chars(
  511|   580k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   580k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  157|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 580k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   580k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  157|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.94k, False: 575k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  4.94k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  4.94k|                                              value);
  521|  4.94k|        }
  522|       |
  523|   575k|        return result.ptr - view.data();
  524|   580k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   201k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   201k|    {
  467|   201k|#if !SCN_DISABLE_STRTOD
  468|   201k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   201k|    }
  475|   201k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  312|   201k|    {
  313|   201k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  144|   384k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  316|   201k|    {
  317|   201k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   201k|                           generic_strtod);
  319|   201k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   201k|    {
  151|   201k|        CharT* end{};
  152|   201k|        errno = 0;
  153|   201k|        value = strtod_cb(src, &end);
  154|   201k|        const auto saved_errno = errno;
  155|   201k|        auto chars_read = end - src;
  156|       |
  157|   201k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   201k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.74k, False: 196k]
  |  |  ------------------
  ------------------
  159|  5.74k|            return unexpected(e);
  160|  5.74k|        }
  161|       |
  162|   196k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 171k, False: 24.1k]
  ------------------
  163|   196k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 171k, False: 0]
  ------------------
  164|   171k|            chars_read -= 2;
  165|   171k|        }
  166|       |
  167|   196k|        return chars_read;
  168|   201k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  196|   384k|    {
  197|   384k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 109k, False: 274k]
  |  Branch (197:37): [True: 0, False: 109k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   384k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 46.4k, False: 337k]
  ------------------
  204|   384k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 46.4k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   384k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 10.6k, False: 373k]
  |  Branch (210:34): [True: 1.59k, False: 9.06k]
  ------------------
  211|  1.59k|            SCN_UNLIKELY_ATTR
  212|  1.59k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|  1.59k|        }
  214|       |
  215|   382k|        SCN_GCC_COMPAT_PUSH
  216|   382k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   382k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 382k, False: 0]
  ------------------
  219|   382k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 382k, False: 0]
  ------------------
  220|   382k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 8.83k, False: 373k]
  ------------------
  221|  8.83k|            SCN_UNLIKELY_ATTR
  222|  8.83k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  8.83k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   373k|            return {};
  228|   382k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  105|   394k|{
  106|   394k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (106:12): [True: 110k, False: 283k]
  |  Branch (106:25): [True: 0, False: 283k]
  ------------------
  107|   394k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   201k|    {
  174|   201k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 201k, False: 4]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   201k|            auto first_space = read_until_classic_space(input.view());
  177|   201k|            input.assign(
  178|   201k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   201k|        }
  180|       |
  181|   201k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 172k, False: 29.3k]
  ------------------
  182|   172k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   172k|                input.get_allocated_string().insert(0, "0x");
  184|   172k|            }
  185|   172k|            else {
  186|   172k|                input.get_allocated_string().insert(0, L"0x");
  187|   172k|            }
  188|   172k|        }
  189|       |
  190|   201k|        return input.get_allocated_string().c_str();
  191|   201k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  323|   201k|    {
  324|   201k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   201k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   201k|        }
  327|   201k|        else {
  328|   201k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   201k|        }
  330|   201k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  231|   201k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   201k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   201k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   201k|            return std::strtof(str, str_end);
  258|   201k|        }
  259|   201k|        else if constexpr (std::is_same_v<T, double>) {
  260|   201k|            return std::strtod(str, str_end);
  261|   201k|        }
  262|   201k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   201k|            return std::strtold(str, str_end);
  264|   201k|        }
  265|   201k|#endif
  266|   201k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  479|  2.32M|    {
  480|  2.32M|        unsigned format_flags{};
  481|  2.32M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (481:13): [True: 2.30M, False: 17.2k]
  ------------------
  482|  2.30M|            format_flags |= fast_float::fixed;
  483|  2.30M|        }
  484|  2.32M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (484:13): [True: 2.03M, False: 289k]
  ------------------
  485|  2.03M|            format_flags |= fast_float::scientific;
  486|  2.03M|        }
  487|       |
  488|  2.32M|        return static_cast<fast_float::chars_format>(format_flags);
  489|  2.32M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  528|   580k|    {
  529|   580k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   580k|            return m_input.view();
  531|   580k|        }
  532|   580k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   580k|            return std::u16string_view{
  534|   580k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   580k|                m_input.view().size()};
  536|   580k|        }
  537|   580k|        else {
  538|   580k|            return std::u32string_view{
  539|   580k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   580k|                m_input.view().size()};
  541|   580k|        }
  542|   580k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   775k|{
  557|   775k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.52k, False: 770k]
  ------------------
  558|  5.52k|        value = std::numeric_limits<T>::infinity();
  559|  5.52k|        return 3;
  560|  5.52k|    }
  561|   770k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.10k, False: 765k]
  ------------------
  562|  5.10k|        value = std::numeric_limits<T>::infinity();
  563|  5.10k|        return 8;
  564|  5.10k|    }
  565|   765k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 27.5k, False: 737k]
  ------------------
  566|  27.5k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  27.5k|        return 3;
  568|  27.5k|    }
  569|   737k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 779, False: 736k]
  ------------------
  570|    779|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    779|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    779|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    779|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    779|    }
  601|       |
  602|   736k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   736k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 162k, False: 573k]
  ------------------
  604|   162k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.67k, False: 156k]
  |  |  ------------------
  ------------------
  605|  6.67k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.67k|                                         "Invalid floating-point digit");
  607|  6.67k|        }
  608|   162k|    }
  609|   730k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 17.2k, False: 712k]
  |  |  ------------------
  ------------------
  610|  17.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.2k|                                     "Invalid floating-point digit");
  612|  17.2k|    }
  613|       |
  614|   712k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   712k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   712k|            double tmp{};
  619|   712k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   712k|            value = tmp;
  621|   712k|            return ret;
  622|   712k|        }
  623|   712k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   712k|            return fast_float_fallback(data, value);
  627|   712k|        }
  628|   712k|    }
  629|   712k|    else {
  630|       |        // Default to fast_float
  631|   712k|        return fast_float_impl<CharT, T>{data}(value);
  632|   712k|    }
  633|   712k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  496|   712k|    {
  497|   712k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  130|  2.63M|    {
  131|  2.63M|        return {kind, options};
  132|  2.63M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  500|   712k|    {
  501|   712k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 156k, False: 556k]
  ------------------
  502|   712k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 22.1k, False: 534k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   178k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   178k|                                              value);
  506|   178k|        }
  507|       |
  508|   534k|        const auto flags = get_flags();
  509|   534k|        const auto view = get_view();
  510|   534k|        const auto result = fast_float::from_chars(
  511|   534k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   534k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  157|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 534k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   534k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  157|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.05k, False: 530k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  4.05k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  4.05k|                                              value);
  521|  4.05k|        }
  522|       |
  523|   530k|        return result.ptr - view.data();
  524|   534k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   182k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   182k|    {
  467|   182k|#if !SCN_DISABLE_STRTOD
  468|   182k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   182k|    }
  475|   182k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  312|   182k|    {
  313|   182k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  316|   182k|    {
  317|   182k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   182k|                           generic_strtod);
  319|   182k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   182k|    {
  151|   182k|        CharT* end{};
  152|   182k|        errno = 0;
  153|   182k|        value = strtod_cb(src, &end);
  154|   182k|        const auto saved_errno = errno;
  155|   182k|        auto chars_read = end - src;
  156|       |
  157|   182k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   182k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.69k, False: 177k]
  |  |  ------------------
  ------------------
  159|  4.69k|            return unexpected(e);
  160|  4.69k|        }
  161|       |
  162|   177k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 155k, False: 21.9k]
  ------------------
  163|   177k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 155k, False: 0]
  ------------------
  164|   155k|            chars_read -= 2;
  165|   155k|        }
  166|       |
  167|   177k|        return chars_read;
  168|   182k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   182k|    {
  174|   182k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 182k, False: 8]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   182k|            auto first_space = read_until_classic_space(input.view());
  177|   182k|            input.assign(
  178|   182k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   182k|        }
  180|       |
  181|   182k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 156k, False: 26.1k]
  ------------------
  182|   156k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   156k|                input.get_allocated_string().insert(0, "0x");
  184|   156k|            }
  185|   156k|            else {
  186|   156k|                input.get_allocated_string().insert(0, L"0x");
  187|   156k|            }
  188|   156k|        }
  189|       |
  190|   182k|        return input.get_allocated_string().c_str();
  191|   182k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  323|   182k|    {
  324|   182k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   182k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   182k|        }
  327|   182k|        else {
  328|   182k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   182k|        }
  330|   182k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  269|   182k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   182k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   182k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   182k|            return std::wcstof(str, str_end);
  296|   182k|        }
  297|   182k|        else if constexpr (std::is_same_v<T, double>) {
  298|   182k|            return std::wcstod(str, str_end);
  299|   182k|        }
  300|   182k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   182k|            return std::wcstold(str, str_end);
  302|   182k|        }
  303|   182k|#endif
  304|   182k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  528|   534k|    {
  529|   534k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   534k|            return m_input.view();
  531|   534k|        }
  532|   534k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   534k|            return std::u16string_view{
  534|   534k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   534k|                m_input.view().size()};
  536|   534k|        }
  537|   534k|        else {
  538|   534k|            return std::u32string_view{
  539|   534k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   534k|                m_input.view().size()};
  541|   534k|        }
  542|   534k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   898k|{
  557|   898k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 7.37k, False: 891k]
  ------------------
  558|  7.37k|        value = std::numeric_limits<T>::infinity();
  559|  7.37k|        return 3;
  560|  7.37k|    }
  561|   891k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.58k, False: 885k]
  ------------------
  562|  5.58k|        value = std::numeric_limits<T>::infinity();
  563|  5.58k|        return 8;
  564|  5.58k|    }
  565|   885k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 29.4k, False: 856k]
  ------------------
  566|  29.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  29.4k|        return 3;
  568|  29.4k|    }
  569|   856k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 849, False: 855k]
  ------------------
  570|    849|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    849|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    849|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    849|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    849|    }
  601|       |
  602|   855k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   855k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   855k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   855k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 185k, False: 670k]
  ------------------
  604|   185k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.61k, False: 182k]
  |  |  ------------------
  ------------------
  605|  2.61k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.61k|                                         "Invalid floating-point digit");
  607|  2.61k|        }
  608|   185k|    }
  609|   852k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   852k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 7.40k, False: 845k]
  |  |  ------------------
  ------------------
  610|  7.40k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.40k|                                     "Invalid floating-point digit");
  612|  7.40k|    }
  613|       |
  614|   845k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   845k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   845k|            double tmp{};
  619|   845k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   845k|            value = tmp;
  621|   845k|            return ret;
  622|   845k|        }
  623|   845k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   845k|            return fast_float_fallback(data, value);
  627|   845k|        }
  628|   845k|    }
  629|   845k|    else {
  630|       |        // Default to fast_float
  631|   845k|        return fast_float_impl<CharT, T>{data}(value);
  632|   845k|    }
  633|   845k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  496|   845k|    {
  497|   845k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  500|   845k|    {
  501|   845k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 182k, False: 662k]
  ------------------
  502|   845k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 30.7k, False: 632k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   213k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   213k|                                              value);
  506|   213k|        }
  507|       |
  508|   632k|        const auto flags = get_flags();
  509|   632k|        const auto view = get_view();
  510|   632k|        const auto result = fast_float::from_chars(
  511|   632k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   632k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  157|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 632k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   632k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  157|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.31k, False: 629k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  2.31k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  2.31k|                                              value);
  521|  2.31k|        }
  522|       |
  523|   629k|        return result.ptr - view.data();
  524|   632k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   215k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   215k|    {
  467|   215k|#if !SCN_DISABLE_STRTOD
  468|   215k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   215k|    }
  475|   215k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  312|   215k|    {
  313|   215k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  144|   410k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  316|   215k|    {
  317|   215k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   215k|                           generic_strtod);
  319|   215k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   215k|    {
  151|   215k|        CharT* end{};
  152|   215k|        errno = 0;
  153|   215k|        value = strtod_cb(src, &end);
  154|   215k|        const auto saved_errno = errno;
  155|   215k|        auto chars_read = end - src;
  156|       |
  157|   215k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   215k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.59k, False: 213k]
  |  |  ------------------
  ------------------
  159|  2.59k|            return unexpected(e);
  160|  2.59k|        }
  161|       |
  162|   213k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 182k, False: 30.7k]
  ------------------
  163|   213k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 182k, False: 0]
  ------------------
  164|   182k|            chars_read -= 2;
  165|   182k|        }
  166|       |
  167|   213k|        return chars_read;
  168|   215k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  196|   410k|    {
  197|   410k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 112k, False: 297k]
  |  Branch (197:37): [True: 0, False: 112k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   410k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 58.6k, False: 351k]
  ------------------
  204|   410k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 58.6k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   410k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 4.87k, False: 405k]
  |  Branch (210:34): [True: 484, False: 4.39k]
  ------------------
  211|    484|            SCN_UNLIKELY_ATTR
  212|    484|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    484|        }
  214|       |
  215|   409k|        SCN_GCC_COMPAT_PUSH
  216|   409k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   409k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 409k, False: 0]
  ------------------
  219|   409k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 409k, False: 0]
  ------------------
  220|   409k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 4.39k, False: 405k]
  ------------------
  221|  4.39k|            SCN_UNLIKELY_ATTR
  222|  4.39k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  4.39k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   405k|            return {};
  228|   409k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  109|   415k|{
  110|   415k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (110:12): [True: 112k, False: 302k]
  |  Branch (110:24): [True: 0, False: 302k]
  ------------------
  111|   415k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   215k|    {
  174|   215k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 215k, False: 4]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   215k|            auto first_space = read_until_classic_space(input.view());
  177|   215k|            input.assign(
  178|   215k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   215k|        }
  180|       |
  181|   215k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 182k, False: 33.1k]
  ------------------
  182|   182k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   182k|                input.get_allocated_string().insert(0, "0x");
  184|   182k|            }
  185|   182k|            else {
  186|   182k|                input.get_allocated_string().insert(0, L"0x");
  187|   182k|            }
  188|   182k|        }
  189|       |
  190|   215k|        return input.get_allocated_string().c_str();
  191|   215k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  323|   215k|    {
  324|   215k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   215k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   215k|        }
  327|   215k|        else {
  328|   215k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   215k|        }
  330|   215k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  231|   215k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   215k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   215k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   215k|            return std::strtof(str, str_end);
  258|   215k|        }
  259|   215k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   215k|            return std::strtod(str, str_end);
  261|   215k|        }
  262|   215k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   215k|            return std::strtold(str, str_end);
  264|   215k|        }
  265|   215k|#endif
  266|   215k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  528|   632k|    {
  529|   632k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   632k|            return m_input.view();
  531|   632k|        }
  532|   632k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   632k|            return std::u16string_view{
  534|   632k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   632k|                m_input.view().size()};
  536|   632k|        }
  537|   632k|        else {
  538|   632k|            return std::u32string_view{
  539|   632k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   632k|                m_input.view().size()};
  541|   632k|        }
  542|   632k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   833k|{
  557|   833k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.13k, False: 826k]
  ------------------
  558|  6.13k|        value = std::numeric_limits<T>::infinity();
  559|  6.13k|        return 3;
  560|  6.13k|    }
  561|   826k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.36k, False: 821k]
  ------------------
  562|  5.36k|        value = std::numeric_limits<T>::infinity();
  563|  5.36k|        return 8;
  564|  5.36k|    }
  565|   821k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 28.1k, False: 793k]
  ------------------
  566|  28.1k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  28.1k|        return 3;
  568|  28.1k|    }
  569|   793k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 849, False: 792k]
  ------------------
  570|    849|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    849|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    849|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    849|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    849|    }
  601|       |
  602|   792k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   792k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   792k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   792k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 171k, False: 621k]
  ------------------
  604|   171k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.77k, False: 164k]
  |  |  ------------------
  ------------------
  605|  6.77k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.77k|                                         "Invalid floating-point digit");
  607|  6.77k|        }
  608|   171k|    }
  609|   785k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 17.9k, False: 767k]
  |  |  ------------------
  ------------------
  610|  17.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.9k|                                     "Invalid floating-point digit");
  612|  17.9k|    }
  613|       |
  614|   767k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   767k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   767k|            double tmp{};
  619|   767k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   767k|            value = tmp;
  621|   767k|            return ret;
  622|   767k|        }
  623|   767k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   767k|            return fast_float_fallback(data, value);
  627|   767k|        }
  628|   767k|    }
  629|   767k|    else {
  630|       |        // Default to fast_float
  631|   767k|        return fast_float_impl<CharT, T>{data}(value);
  632|   767k|    }
  633|   767k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  496|   767k|    {
  497|   767k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  500|   767k|    {
  501|   767k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 164k, False: 603k]
  ------------------
  502|   767k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 27.8k, False: 575k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   192k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   192k|                                              value);
  506|   192k|        }
  507|       |
  508|   575k|        const auto flags = get_flags();
  509|   575k|        const auto view = get_view();
  510|   575k|        const auto result = fast_float::from_chars(
  511|   575k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   575k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  157|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 575k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   575k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  157|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.05k, False: 573k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  2.05k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  2.05k|                                              value);
  521|  2.05k|        }
  522|       |
  523|   573k|        return result.ptr - view.data();
  524|   575k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   194k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   194k|    {
  467|   194k|#if !SCN_DISABLE_STRTOD
  468|   194k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   194k|    }
  475|   194k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  312|   194k|    {
  313|   194k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  316|   194k|    {
  317|   194k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   194k|                           generic_strtod);
  319|   194k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   194k|    {
  151|   194k|        CharT* end{};
  152|   194k|        errno = 0;
  153|   194k|        value = strtod_cb(src, &end);
  154|   194k|        const auto saved_errno = errno;
  155|   194k|        auto chars_read = end - src;
  156|       |
  157|   194k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   194k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.27k, False: 192k]
  |  |  ------------------
  ------------------
  159|  2.27k|            return unexpected(e);
  160|  2.27k|        }
  161|       |
  162|   192k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 164k, False: 27.8k]
  ------------------
  163|   192k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 164k, False: 0]
  ------------------
  164|   164k|            chars_read -= 2;
  165|   164k|        }
  166|       |
  167|   192k|        return chars_read;
  168|   194k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   194k|    {
  174|   194k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 194k, False: 8]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   194k|            auto first_space = read_until_classic_space(input.view());
  177|   194k|            input.assign(
  178|   194k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   194k|        }
  180|       |
  181|   194k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 164k, False: 29.9k]
  ------------------
  182|   164k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   164k|                input.get_allocated_string().insert(0, "0x");
  184|   164k|            }
  185|   164k|            else {
  186|   164k|                input.get_allocated_string().insert(0, L"0x");
  187|   164k|            }
  188|   164k|        }
  189|       |
  190|   194k|        return input.get_allocated_string().c_str();
  191|   194k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  323|   194k|    {
  324|   194k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   194k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   194k|        }
  327|   194k|        else {
  328|   194k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   194k|        }
  330|   194k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  269|   194k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   194k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   194k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   194k|            return std::wcstof(str, str_end);
  296|   194k|        }
  297|   194k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   194k|            return std::wcstod(str, str_end);
  299|   194k|        }
  300|   194k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   194k|            return std::wcstold(str, str_end);
  302|   194k|        }
  303|   194k|#endif
  304|   194k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  528|   575k|    {
  529|   575k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   575k|            return m_input.view();
  531|   575k|        }
  532|   575k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   575k|            return std::u16string_view{
  534|   575k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   575k|                m_input.view().size()};
  536|   575k|        }
  537|   575k|        else {
  538|   575k|            return std::u32string_view{
  539|   575k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   575k|                m_input.view().size()};
  541|   575k|        }
  542|   575k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   910k|{
  557|   910k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 7.68k, False: 902k]
  ------------------
  558|  7.68k|        value = std::numeric_limits<T>::infinity();
  559|  7.68k|        return 3;
  560|  7.68k|    }
  561|   902k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.67k, False: 897k]
  ------------------
  562|  5.67k|        value = std::numeric_limits<T>::infinity();
  563|  5.67k|        return 8;
  564|  5.67k|    }
  565|   897k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 29.5k, False: 867k]
  ------------------
  566|  29.5k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  29.5k|        return 3;
  568|  29.5k|    }
  569|   867k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 865, False: 866k]
  ------------------
  570|    865|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    865|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    865|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    865|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    865|    }
  601|       |
  602|   866k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   866k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   866k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   866k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 186k, False: 680k]
  ------------------
  604|   186k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.74k, False: 183k]
  |  |  ------------------
  ------------------
  605|  2.74k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.74k|                                         "Invalid floating-point digit");
  607|  2.74k|        }
  608|   186k|    }
  609|   863k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   863k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.10k, False: 855k]
  |  |  ------------------
  ------------------
  610|  8.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  8.10k|                                     "Invalid floating-point digit");
  612|  8.10k|    }
  613|       |
  614|   855k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   855k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   855k|            double tmp{};
  619|   855k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   855k|            value = tmp;
  621|   855k|            return ret;
  622|   855k|        }
  623|   855k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   855k|            return fast_float_fallback(data, value);
  627|   855k|        }
  628|   855k|    }
  629|   855k|    else {
  630|       |        // Default to fast_float
  631|   855k|        return fast_float_impl<CharT, T>{data}(value);
  632|   855k|    }
  633|   855k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   855k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   855k|    {
  467|   855k|#if !SCN_DISABLE_STRTOD
  468|   855k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   855k|    }
  475|   855k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  312|   855k|    {
  313|   855k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  144|  1.63M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  316|   855k|    {
  317|   855k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   855k|                           generic_strtod);
  319|   855k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   855k|    {
  151|   855k|        CharT* end{};
  152|   855k|        errno = 0;
  153|   855k|        value = strtod_cb(src, &end);
  154|   855k|        const auto saved_errno = errno;
  155|   855k|        auto chars_read = end - src;
  156|       |
  157|   855k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   855k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 799, False: 854k]
  |  |  ------------------
  ------------------
  159|    799|            return unexpected(e);
  160|    799|        }
  161|       |
  162|   854k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 183k, False: 671k]
  ------------------
  163|   854k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 183k, False: 0]
  ------------------
  164|   183k|            chars_read -= 2;
  165|   183k|        }
  166|       |
  167|   854k|        return chars_read;
  168|   855k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  196|  1.63M|    {
  197|  1.63M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 481k, False: 1.15M]
  |  Branch (197:37): [True: 0, False: 481k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|  1.63M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 58.6k, False: 1.57M]
  ------------------
  204|  1.63M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 58.6k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|  1.63M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 1.47k, False: 1.63M]
  |  Branch (210:34): [True: 106, False: 1.37k]
  ------------------
  211|    106|            SCN_UNLIKELY_ATTR
  212|    106|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    106|        }
  214|       |
  215|  1.63M|        SCN_GCC_COMPAT_PUSH
  216|  1.63M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|  1.63M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 1.63M, False: 0]
  ------------------
  219|  1.63M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 1.63M, False: 0]
  ------------------
  220|  1.63M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 1.37k, False: 1.63M]
  ------------------
  221|  1.37k|            SCN_UNLIKELY_ATTR
  222|  1.37k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  1.37k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|  1.63M|            return {};
  228|  1.63M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  113|  1.63M|{
  114|  1.63M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (114:12): [True: 481k, False: 1.15M]
  |  Branch (114:26): [True: 0, False: 1.15M]
  ------------------
  115|  1.63M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   855k|    {
  174|   855k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 855k, False: 22]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   855k|            auto first_space = read_until_classic_space(input.view());
  177|   855k|            input.assign(
  178|   855k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   855k|        }
  180|       |
  181|   855k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 183k, False: 672k]
  ------------------
  182|   183k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   183k|                input.get_allocated_string().insert(0, "0x");
  184|   183k|            }
  185|   183k|            else {
  186|   183k|                input.get_allocated_string().insert(0, L"0x");
  187|   183k|            }
  188|   183k|        }
  189|       |
  190|   855k|        return input.get_allocated_string().c_str();
  191|   855k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  323|   855k|    {
  324|   855k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   855k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   855k|        }
  327|   855k|        else {
  328|   855k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   855k|        }
  330|   855k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  231|   855k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   855k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   855k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   855k|            return std::strtof(str, str_end);
  258|   855k|        }
  259|   855k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   855k|            return std::strtod(str, str_end);
  261|   855k|        }
  262|   855k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (262:28): [Folded - Ignored]
  ------------------
  263|   855k|            return std::strtold(str, str_end);
  264|   855k|        }
  265|   855k|#endif
  266|   855k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   843k|{
  557|   843k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.44k, False: 837k]
  ------------------
  558|  6.44k|        value = std::numeric_limits<T>::infinity();
  559|  6.44k|        return 3;
  560|  6.44k|    }
  561|   837k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.44k, False: 831k]
  ------------------
  562|  5.44k|        value = std::numeric_limits<T>::infinity();
  563|  5.44k|        return 8;
  564|  5.44k|    }
  565|   831k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 28.2k, False: 803k]
  ------------------
  566|  28.2k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  28.2k|        return 3;
  568|  28.2k|    }
  569|   803k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 865, False: 802k]
  ------------------
  570|    865|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|    865|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  231|    865|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|    865|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|    865|    }
  601|       |
  602|   802k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  246|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   802k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 171k, False: 630k]
  ------------------
  604|   171k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  157|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.85k, False: 165k]
  |  |  ------------------
  ------------------
  605|  6.85k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.85k|                                         "Invalid floating-point digit");
  607|  6.85k|        }
  608|   171k|    }
  609|   795k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  157|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 18.5k, False: 777k]
  |  |  ------------------
  ------------------
  610|  18.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  18.5k|                                     "Invalid floating-point digit");
  612|  18.5k|    }
  613|       |
  614|   777k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   777k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   777k|            double tmp{};
  619|   777k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   777k|            value = tmp;
  621|   777k|            return ret;
  622|   777k|        }
  623|   777k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   777k|            return fast_float_fallback(data, value);
  627|   777k|        }
  628|   777k|    }
  629|   777k|    else {
  630|       |        // Default to fast_float
  631|   777k|        return fast_float_impl<CharT, T>{data}(value);
  632|   777k|    }
  633|   777k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   777k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   777k|    {
  467|   777k|#if !SCN_DISABLE_STRTOD
  468|   777k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   777k|    }
  475|   777k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  312|   777k|    {
  313|   777k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  316|   777k|    {
  317|   777k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   777k|                           generic_strtod);
  319|   777k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   777k|    {
  151|   777k|        CharT* end{};
  152|   777k|        errno = 0;
  153|   777k|        value = strtod_cb(src, &end);
  154|   777k|        const auto saved_errno = errno;
  155|   777k|        auto chars_read = end - src;
  156|       |
  157|   777k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   777k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 677, False: 776k]
  |  |  ------------------
  ------------------
  159|    677|            return unexpected(e);
  160|    677|        }
  161|       |
  162|   776k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 164k, False: 611k]
  ------------------
  163|   776k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 164k, False: 0]
  ------------------
  164|   164k|            chars_read -= 2;
  165|   164k|        }
  166|       |
  167|   776k|        return chars_read;
  168|   777k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   777k|    {
  174|   777k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 777k, False: 44]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   777k|            auto first_space = read_until_classic_space(input.view());
  177|   777k|            input.assign(
  178|   777k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   777k|        }
  180|       |
  181|   777k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 165k, False: 612k]
  ------------------
  182|   165k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   165k|                input.get_allocated_string().insert(0, "0x");
  184|   165k|            }
  185|   165k|            else {
  186|   165k|                input.get_allocated_string().insert(0, L"0x");
  187|   165k|            }
  188|   165k|        }
  189|       |
  190|   777k|        return input.get_allocated_string().c_str();
  191|   777k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  323|   777k|    {
  324|   777k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   777k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   777k|        }
  327|   777k|        else {
  328|   777k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   777k|        }
  330|   777k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  269|   777k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   777k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   777k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   777k|            return std::wcstof(str, str_end);
  296|   777k|        }
  297|   777k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   777k|            return std::wcstod(str, str_end);
  299|   777k|        }
  300|   777k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (300:28): [Folded - Ignored]
  ------------------
  301|   777k|            return std::wcstold(str, str_end);
  302|   777k|        }
  303|   777k|#endif
  304|   777k|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   235k|    {
  577|   235k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   235k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   235k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   235k|        float_reader<CharT> rd{};
  581|   235k|        return read_impl<range_nocvref_t>(
  582|   235k|            range, rd,
  583|   235k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   235k|                return r.read_source(SCN_FWD(args)...);
  585|   235k|            },
  586|   235k|            value);
  587|   235k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|   838k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  1.63M|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   781k|    {
  633|   781k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   781k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 12.7k, False: 768k]
  |  |  ------------------
  ------------------
  635|  12.7k|            return unexpected(r.error());
  636|  12.7k|        }
  637|       |
  638|   768k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   768k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   768k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   768k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 14.4k, False: 754k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.4k|    }                                                  \
  |  |  |  |   70|   768k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   754k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   754k|        return ranges::next(ranges::begin(range), n);
  640|   768k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   827k|    {
   98|   827k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   827k|        const std::ptrdiff_t sign_len =
  101|   827k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 223k, False: 604k]
  ------------------
  102|       |
  103|   827k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   827k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   827k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   827k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   827k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 14.4k, False: 813k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.4k|    }                                                  \
  |  |  |  |   70|   827k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   813k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   827k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   235k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   235k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   235k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.98M|    {
   73|  1.98M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  157|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.98M|        return read_source_impl(range);
   79|  1.98M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.49M|    {
  112|  2.49M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.49M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.49M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.49M|        auto it = sign_result.first;
  115|  2.49M|        m_sign = sign_result.second;
  116|       |
  117|  2.49M|        auto digits_begin = it;
  118|  2.49M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.49M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.49M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.49M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  157|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.49M]
  |  |  |  Branch (157:45): [True: 0, False: 2.49M]
  |  |  |  Branch (157:45): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
  122|  2.49M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.49M|            else {
  133|  2.49M|                auto cb = [&](auto&& rr)
  134|  2.49M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.49M|                    auto res = read_all(rr);
  136|  2.49M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.49M|                        return unexpected_scan_error(
  138|  2.49M|                            scan_error::invalid_scanned_value,
  139|  2.49M|                            "Invalid float value");
  140|  2.49M|                    }
  141|  2.49M|                    return res;
  142|  2.49M|                };
  143|  2.49M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 40.2k, False: 2.45M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  40.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  40.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  40.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  40.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  40.2k|    }                                                  \
  |  |   70|  2.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.45M|            }
  145|  2.49M|        }
  146|  2.45M|        else {
  147|  2.45M|            SCN_TRY_ASSIGN(
  148|  2.45M|                it,
  149|  2.45M|                do_read_source_impl(
  150|  2.45M|                    r,
  151|  2.45M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.45M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.45M|        }
  154|       |
  155|  2.45M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.45M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.43M, False: 21.7k]
  |  Branch (157:48): [True: 2.42M, False: 16.5k]
  ------------------
  158|  2.45M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 2.33M, False: 87.9k]
  ------------------
  159|  2.45M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 2.33M, False: 2.49k]
  ------------------
  160|  2.33M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  2.33M|        }
  162|       |
  163|  2.45M|        handle_separators();
  164|       |
  165|  2.45M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.45M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.45M|        return it;
  178|  2.45M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.49M|    {
  226|  2.49M|        auto it = ranges::begin(range);
  227|  2.49M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.46M, False: 38.3k]
  ------------------
  228|  2.46M|            return unexpected(r.error());
  229|  2.46M|        }
  230|  38.3k|        else {
  231|  38.3k|            it = *r;
  232|  38.3k|        }
  233|       |
  234|  38.3k|        if (auto r = read_matching_string_classic_nocase(
  235|  38.3k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  38.3k|            !r) {
  ------------------
  |  Branch (236:13): [True: 21.7k, False: 16.5k]
  ------------------
  237|  21.7k|            m_kind = float_kind::inf_short;
  238|  21.7k|            return it;
  239|  21.7k|        }
  240|  16.5k|        else {
  241|  16.5k|            m_kind = float_kind::inf_long;
  242|  16.5k|            return *r;
  243|  16.5k|        }
  244|  38.3k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.46M|    {
  249|  2.46M|        auto it = ranges::begin(range);
  250|  2.46M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.36M, False: 91.4k]
  ------------------
  251|  2.36M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.36M|                scan_error::invalid_scanned_value,
  253|  2.36M|                "Invalid floating-point NaN value"));
  254|  2.36M|        }
  255|  91.4k|        else {
  256|  91.4k|            it = *r;
  257|  91.4k|        }
  258|       |
  259|  91.4k|        if (auto r = read_matching_code_unit(
  260|  91.4k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  91.4k|            !r) {
  ------------------
  |  Branch (261:13): [True: 87.9k, False: 3.53k]
  ------------------
  262|  87.9k|            m_kind = float_kind::nan_simple;
  263|  87.9k|            return it;
  264|  87.9k|        }
  265|  3.53k|        else {
  266|  3.53k|            it = *r;
  267|  3.53k|        }
  268|       |
  269|  3.53k|        auto payload_beg_it = it;
  270|  3.53k|        it = read_while_code_unit(
  271|  3.53k|            ranges::subrange{it, ranges::end(range)},
  272|  3.53k|            [](char_type ch) SCN_NOEXCEPT {
  273|  3.53k|                return is_ascii_char(ch) &&
  274|  3.53k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  3.53k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  3.53k|            });
  277|  3.53k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  3.53k|        m_kind = float_kind::nan_with_payload;
  280|  3.53k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 2.49k, False: 1.04k]
  ------------------
  281|  3.53k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  2.49k|            return *r;
  283|  2.49k|        }
  284|  1.04k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.04k|                                     "Invalid floating-point NaN payload");
  286|  3.53k|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|  21.2k|            [](char_type ch) SCN_NOEXCEPT {
  273|  21.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 21.1k, False: 143]
  ------------------
  274|  21.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 18.6k, False: 2.51k]
  |  Branch (274:39): [True: 9.58k, False: 9.03k]
  |  Branch (274:54): [True: 3.76k, False: 7.78k]
  |  Branch (274:67): [True: 3.68k, False: 83]
  ------------------
  275|  21.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 5.32k, False: 2.54k]
  |  Branch (275:39): [True: 2.51k, False: 2.80k]
  |  Branch (275:53): [True: 2.72k, False: 2.62k]
  ------------------
  276|  21.2k|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.74M|    {
  220|  1.74M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.74M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   410k|    {
  292|   410k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 79.0k, False: 331k]
  ------------------
  293|  79.0k|            auto beg_exp_it = ranges::begin(range);
  294|  79.0k|            auto it = *r;
  295|       |
  296|  79.0k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 78.8k, False: 162]
  ------------------
  297|  79.0k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  78.8k|                it = r_sign->first;
  299|  78.8k|            }
  300|       |
  301|  79.0k|            if (auto r_exp = read_while1_code_unit(
  302|  79.0k|                    ranges::subrange{it, ranges::end(range)},
  303|  79.0k|                    [](char_type ch)
  304|  79.0k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  79.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  157|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.00k, False: 78.0k]
  |  |  ------------------
  ------------------
  306|  1.00k|                it = beg_exp_it;
  307|  1.00k|            }
  308|  78.0k|            else {
  309|  78.0k|                it = *r_exp;
  310|  78.0k|            }
  311|       |
  312|  79.0k|            return it;
  313|  79.0k|        }
  314|   331k|        else {
  315|   331k|            return ranges::begin(range);
  316|   331k|        }
  317|   410k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|   259k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   620k|    {
  365|   620k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   620k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 420k, False: 200k]
  |  Branch (366:50): [True: 28.3k, False: 392k]
  ------------------
  367|       |
  368|   620k|        auto it = ranges::begin(range);
  369|   620k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   620k|        if (auto r =
  372|   620k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   620k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 24.3k, False: 596k]
  |  |  ------------------
  ------------------
  374|  24.3k|            return r.transform_error(
  375|  24.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  24.3k|                                              "Invalid floating-point value"));
  377|  24.3k|        }
  378|   596k|        else {
  379|   596k|            digits_count += ranges::distance(it, *r);
  380|   596k|            it = *r;
  381|   596k|        }
  382|       |
  383|   596k|        m_integral_part_length = digits_count;
  384|   596k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 98.3k, False: 498k]
  ------------------
  385|   596k|                ranges::subrange{it, ranges::end(range)},
  386|   596k|                m_locale_options.decimal_point)) {
  387|  98.3k|            it = *r;
  388|  98.3k|        }
  389|       |
  390|   596k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 84.3k, False: 512k]
  ------------------
  391|   596k|                                     false)) {
  392|  84.3k|            digits_count += ranges::distance(it, *r);
  393|  84.3k|            it = *r;
  394|  84.3k|        }
  395|       |
  396|   596k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 596k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   596k|        auto beg_exp_it = it;
  402|   596k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 410k, False: 186k]
  ------------------
  403|   410k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   410k|        }
  405|   596k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 27.5k, False: 569k]
  |  Branch (405:29): [True: 13.8k, False: 13.7k]
  ------------------
  406|  13.8k|            return unexpected_scan_error(
  407|  13.8k|                scan_error::invalid_scanned_value,
  408|  13.8k|                "No exponent given to scientific float");
  409|  13.8k|        }
  410|       |
  411|   582k|        m_kind =
  412|   582k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 504k, False: 78.0k]
  ------------------
  413|       |
  414|   582k|        return it;
  415|   596k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.21M|    {
  185|  1.21M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.21M]
  |  |  |  Branch (157:45): [True: 0, False: 1.21M]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.21M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.21M|        return read_while1_code_unit(
  195|  1.21M|            SCN_FWD(range),
  ------------------
  |  |  252|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.21M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.21M|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|  7.31M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.49M|    {
  423|  2.49M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.49M|        const bool allowed_nonhex =
  425|  2.49M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.49M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.49M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.46M, False: 38.3k]
  |  Branch (428:45): [True: 0, False: 2.46M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.49M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 38.3k, False: 2.46M]
  ------------------
  434|  38.3k|            return *r;
  435|  38.3k|        }
  436|       |
  437|  2.46M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.37M, False: 90.3k]
  |  Branch (437:45): [True: 1.04k, False: 2.36M]
  ------------------
  438|  1.04k|            return unexpected(r.error());
  439|  1.04k|        }
  440|  2.46M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 90.3k, False: 2.36M]
  ------------------
  441|  90.3k|            return *r;
  442|  90.3k|        }
  443|       |
  444|  2.36M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.74M, False: 620k]
  |  Branch (444:28): [True: 539k, False: 1.20M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   539k|            auto it = ranges::begin(range);
  448|       |
  449|   539k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 24.9k, False: 514k]
  ------------------
  450|  24.9k|                m_kind = float_kind::hex_with_prefix;
  451|  24.9k|                it = *r;
  452|  24.9k|            }
  453|   514k|            else {
  454|   514k|                m_kind = float_kind::hex_without_prefix;
  455|   514k|            }
  456|       |
  457|   539k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   539k|        }
  459|  1.83M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 620k, False: 1.20M]
  |  Branch (459:34): [True: 620k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   620k|            m_kind = float_kind::generic;
  463|   620k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  252|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   620k|        }
  465|  1.20M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.20M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  157|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 61.0k, False: 1.14M]
  |  |  ------------------
  ------------------
  471|  61.0k|                m_kind = float_kind::hex_with_prefix;
  472|  61.0k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  61.0k|            }
  474|       |
  475|  1.14M|            m_kind = float_kind::generic;
  476|  1.14M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  252|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.20M|        }
  478|  2.36M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   600k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   600k|                    auto res = read_all(rr);
  136|   600k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  157|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 350, False: 600k]
  |  |  ------------------
  ------------------
  137|    350|                        return unexpected_scan_error(
  138|    350|                            scan_error::invalid_scanned_value,
  139|    350|                            "Invalid float value");
  140|    350|                    }
  141|   600k|                    return res;
  142|   600k|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.14M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.14M|                    auto res = read_all(rr);
  136|  1.14M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  157|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 715, False: 1.14M]
  |  |  ------------------
  ------------------
  137|    715|                        return unexpected_scan_error(
  138|    715|                            scan_error::invalid_scanned_value,
  139|    715|                            "Invalid float value");
  140|    715|                    }
  141|  1.14M|                    return res;
  142|  1.14M|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  2.63M|    {
  482|  2.63M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.63M, False: 0]
  ------------------
  483|  2.63M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.63M, False: 0]
  ------------------
  484|  2.63M|            return;
  485|  2.63M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   262k|    {
  577|   262k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   262k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   262k|        float_reader<CharT> rd{};
  581|   262k|        return read_impl<range_nocvref_t>(
  582|   262k|            range, rd,
  583|   262k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   262k|                return r.read_source(SCN_FWD(args)...);
  585|   262k|            },
  586|   262k|            value);
  587|   262k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   853k|    {
  633|   853k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   853k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 13.4k, False: 839k]
  |  |  ------------------
  ------------------
  635|  13.4k|            return unexpected(r.error());
  636|  13.4k|        }
  637|       |
  638|   839k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   839k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   839k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   839k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 12.6k, False: 826k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.6k|    }                                                  \
  |  |  |  |   70|   839k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   826k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   826k|        return ranges::next(ranges::begin(range), n);
  640|   839k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   898k|    {
   98|   898k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   898k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   898k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   898k|        const std::ptrdiff_t sign_len =
  101|   898k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 241k, False: 657k]
  ------------------
  102|       |
  103|   898k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   898k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   898k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   898k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   898k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 12.6k, False: 886k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.6k|    }                                                  \
  |  |  |  |   70|   898k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   886k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   898k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   262k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   262k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   262k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   267k|    {
  577|   267k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   267k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   267k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   267k|        float_reader<CharT> rd{};
  581|   267k|        return read_impl<range_nocvref_t>(
  582|   267k|            range, rd,
  583|   267k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   267k|                return r.read_source(SCN_FWD(args)...);
  585|   267k|            },
  586|   267k|            value);
  587|   267k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   865k|    {
  633|   865k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   865k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   865k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 13.9k, False: 851k]
  |  |  ------------------
  ------------------
  635|  13.9k|            return unexpected(r.error());
  636|  13.9k|        }
  637|       |
  638|   851k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   851k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   851k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   851k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 11.6k, False: 839k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   851k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   839k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   839k|        return ranges::next(ranges::begin(range), n);
  640|   851k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   910k|    {
   98|   910k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   910k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   910k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   910k|        const std::ptrdiff_t sign_len =
  101|   910k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 248k, False: 662k]
  ------------------
  102|       |
  103|   910k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   910k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   910k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   910k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 11.6k, False: 898k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   910k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   898k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   910k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   267k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   267k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   267k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  24.2k|    {
  577|  24.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  24.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  24.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  24.2k|        float_reader<CharT> rd{};
  581|  24.2k|        return read_impl<range_nocvref_t>(
  582|  24.2k|            range, rd,
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  585|  24.2k|            },
  586|  24.2k|            value);
  587|  24.2k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  94.2k|    {
  633|  94.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  94.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 34.9k, False: 59.2k]
  |  |  ------------------
  ------------------
  635|  34.9k|            return unexpected(r.error());
  636|  34.9k|        }
  637|       |
  638|  59.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  59.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  59.2k|        return ranges::next(ranges::begin(range), n);
  640|  59.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  24.2k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   234k|    {
   73|   234k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  157|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 234k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   234k|        return read_source_impl(range);
   79|   234k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   282k|    {
  112|   282k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 282k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   282k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   282k|        auto it = sign_result.first;
  115|   282k|        m_sign = sign_result.second;
  116|       |
  117|   282k|        auto digits_begin = it;
  118|   282k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   282k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   282k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   282k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   282k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   282k|                SCN_TRY_ASSIGN(
  124|   282k|                    it,
  125|   282k|                    do_read_source_impl(
  126|   282k|                        r,
  127|   282k|                        [&](auto&& rr) {
  128|   282k|                            return read_regular_float(SCN_FWD(rr));
  129|   282k|                        },
  130|   282k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   282k|            }
  132|   282k|            else {
  133|   282k|                auto cb = [&](auto&& rr)
  134|   282k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   282k|                    auto res = read_all(rr);
  136|   282k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   282k|                        return unexpected_scan_error(
  138|   282k|                            scan_error::invalid_scanned_value,
  139|   282k|                            "Invalid float value");
  140|   282k|                    }
  141|   282k|                    return res;
  142|   282k|                };
  143|   282k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   282k|            }
  145|   282k|        }
  146|   282k|        else {
  147|   282k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 104k, False: 177k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   104k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   104k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   104k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   104k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   104k|    }                                                  \
  |  |   70|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|   177k|                it,
  149|   177k|                do_read_source_impl(
  150|   177k|                    r,
  151|   177k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|   177k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|   177k|        }
  154|       |
  155|   177k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|   177k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 177k, False: 0]
  |  Branch (157:48): [True: 177k, False: 0]
  ------------------
  158|   177k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 177k, False: 0]
  ------------------
  159|   177k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 177k, False: 0]
  ------------------
  160|   177k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|   177k|        }
  162|       |
  163|   177k|        handle_separators();
  164|       |
  165|   177k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 177k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|   177k|        return it;
  178|   177k|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   282k|    {
  423|   282k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   282k|        const bool allowed_nonhex =
  425|   282k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   282k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   282k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 282k, False: 0]
  |  Branch (428:45): [True: 0, False: 282k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   282k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 282k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   282k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 282k, False: 0]
  |  Branch (437:45): [True: 0, False: 282k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   282k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 282k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   282k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 169k, False: 113k]
  |  Branch (444:28): [True: 48.4k, False: 121k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  48.4k|            auto it = ranges::begin(range);
  448|       |
  449|  48.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 48.4k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  48.4k|            else {
  454|  48.4k|                m_kind = float_kind::hex_without_prefix;
  455|  48.4k|            }
  456|       |
  457|  48.4k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  48.4k|        }
  459|   234k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 113k, False: 121k]
  |  Branch (459:34): [True: 113k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   113k|            m_kind = float_kind::generic;
  463|   113k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  252|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   113k|        }
  465|   121k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   121k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  157|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   121k|            m_kind = float_kind::generic;
  476|   121k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  252|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   121k|        }
  478|   282k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   282k|    {
  226|   282k|        auto it = ranges::begin(range);
  227|   282k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 282k, False: 0]
  ------------------
  228|   282k|            return unexpected(r.error());
  229|   282k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   282k|    {
  249|   282k|        auto it = ranges::begin(range);
  250|   282k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 282k, False: 0]
  ------------------
  251|   282k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   282k|                scan_error::invalid_scanned_value,
  253|   282k|                "Invalid floating-point NaN value"));
  254|   282k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   169k|    {
  220|   169k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   169k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  48.4k|    {
  323|  48.4k|        auto it = ranges::begin(range);
  324|       |
  325|  48.4k|        std::ptrdiff_t digits_count = 0;
  326|  48.4k|        if (auto r =
  327|  48.4k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  48.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 16.1k, False: 32.3k]
  |  |  ------------------
  ------------------
  329|  16.1k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  16.1k|                scan_error::invalid_scanned_value,
  331|  16.1k|                "Invalid hexadecimal floating-point value"));
  332|  16.1k|        }
  333|  32.3k|        else {
  334|  32.3k|            digits_count += ranges::distance(it, *r);
  335|  32.3k|            it = *r;
  336|  32.3k|        }
  337|       |
  338|  32.3k|        m_integral_part_length = digits_count;
  339|  32.3k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 32.3k]
  ------------------
  340|  32.3k|                ranges::subrange{it, ranges::end(range)},
  341|  32.3k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|  32.3k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 32.3k]
  ------------------
  346|  32.3k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|  32.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 32.3k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|  32.3k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|  32.3k|        return it;
  359|  32.3k|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  80.7k|    {
  203|  80.7k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 80.7k]
  |  |  |  Branch (157:45): [True: 0, False: 80.7k]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  80.7k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  80.7k|        return read_while1_code_unit(
  213|  80.7k|            SCN_FWD(range),
  ------------------
  |  |  252|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  80.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  80.7k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|   113k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|   161k|    {
  292|   161k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 161k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|   161k|        else {
  315|   161k|            return ranges::begin(range);
  316|   161k|        }
  317|   161k|    }
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   234k|    {
  365|   234k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   234k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 185k, False: 48.4k]
  |  Branch (366:50): [True: 16.1k, False: 169k]
  ------------------
  367|       |
  368|   234k|        auto it = ranges::begin(range);
  369|   234k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   234k|        if (auto r =
  372|   234k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   234k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 72.6k, False: 161k]
  |  |  ------------------
  ------------------
  374|  72.6k|            return r.transform_error(
  375|  72.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  72.6k|                                              "Invalid floating-point value"));
  377|  72.6k|        }
  378|   161k|        else {
  379|   161k|            digits_count += ranges::distance(it, *r);
  380|   161k|            it = *r;
  381|   161k|        }
  382|       |
  383|   161k|        m_integral_part_length = digits_count;
  384|   161k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 161k]
  ------------------
  385|   161k|                ranges::subrange{it, ranges::end(range)},
  386|   161k|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|   161k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 161k]
  ------------------
  391|   161k|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|   161k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 161k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   161k|        auto beg_exp_it = it;
  402|   161k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 129k, False: 32.3k]
  ------------------
  403|   129k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   129k|        }
  405|   161k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 16.1k, False: 145k]
  |  Branch (405:29): [True: 16.1k, False: 0]
  ------------------
  406|  16.1k|            return unexpected_scan_error(
  407|  16.1k|                scan_error::invalid_scanned_value,
  408|  16.1k|                "No exponent given to scientific float");
  409|  16.1k|        }
  410|       |
  411|   145k|        m_kind =
  412|   145k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 145k, False: 0]
  ------------------
  413|       |
  414|   145k|        return it;
  415|   161k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   395k|    {
  185|   395k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 395k]
  |  |  |  Branch (157:45): [True: 0, False: 395k]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   395k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   395k|        return read_while1_code_unit(
  195|   395k|            SCN_FWD(range),
  ------------------
  |  |  252|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   395k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   395k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|   557k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  24.2k|    {
  577|  24.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  24.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  24.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  24.2k|        float_reader<CharT> rd{};
  581|  24.2k|        return read_impl<range_nocvref_t>(
  582|  24.2k|            range, rd,
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  585|  24.2k|            },
  586|  24.2k|            value);
  587|  24.2k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  94.2k|    {
  633|  94.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  94.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 34.9k, False: 59.2k]
  |  |  ------------------
  ------------------
  635|  34.9k|            return unexpected(r.error());
  636|  34.9k|        }
  637|       |
  638|  59.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  59.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  59.2k|        return ranges::next(ranges::begin(range), n);
  640|  59.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  24.2k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  24.2k|    {
  577|  24.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  24.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  24.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  24.2k|        float_reader<CharT> rd{};
  581|  24.2k|        return read_impl<range_nocvref_t>(
  582|  24.2k|            range, rd,
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  585|  24.2k|            },
  586|  24.2k|            value);
  587|  24.2k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  94.2k|    {
  633|  94.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  94.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 34.9k, False: 59.2k]
  |  |  ------------------
  ------------------
  635|  34.9k|            return unexpected(r.error());
  636|  34.9k|        }
  637|       |
  638|  59.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  59.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  59.2k|        return ranges::next(ranges::begin(range), n);
  640|  59.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  24.2k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  24.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  24.2k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.96M|    {
  570|  1.96M|        detail::check_float_type_specs(specs, eh);
  571|  1.96M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.94M|    {
  644|  1.94M|        unsigned options{};
  645|  1.94M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 558k, False: 1.38M]
  ------------------
  646|   558k|            options |= float_reader_base::allow_thsep;
  647|   558k|        }
  648|       |
  649|  1.94M|        SCN_GCC_COMPAT_PUSH
  650|  1.94M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.94M|        switch (specs.type) {
  653|   256k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 256k, False: 1.68M]
  ------------------
  654|   256k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  45.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 45.9k, False: 1.89M]
  ------------------
  657|  45.9k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   616k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 616k, False: 1.32M]
  ------------------
  660|   616k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   466k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 466k, False: 1.47M]
  ------------------
  663|   466k|                return options | float_reader_base::allow_scientific |
  664|   466k|                       float_reader_base::allow_fixed;
  665|       |
  666|   558k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 558k, False: 1.38M]
  ------------------
  667|   558k|                return options | float_reader_base::allow_scientific |
  668|   558k|                       float_reader_base::allow_fixed |
  669|   558k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.94M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|  1.94M|                SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.94M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.94M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  1.94M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  3.86M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   545k|    {
  596|   545k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   545k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   545k|#if !SCN_DISABLE_LOCALE
  600|   545k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 157k, False: 388k]
  ------------------
  601|   157k|            return read_impl<range_nocvref_t>(
  602|   157k|                range, rd,
  603|   157k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   157k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   157k|                },
  606|   157k|                value, loc);
  607|   157k|        }
  608|   388k|#endif
  609|       |
  610|   388k|        return read_impl<range_nocvref_t>(
  611|   388k|            range, rd,
  612|   388k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   388k|                return r.read_source(SCN_FWD(args)...);
  614|   388k|            },
  615|   388k|            value);
  616|   545k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   157k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   157k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   157k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   510k|    {
   86|   510k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   510k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  156|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   510k|        return read_source_impl(range);
   92|   510k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   388k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   388k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   388k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   590k|    {
  596|   590k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   590k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   590k|#if !SCN_DISABLE_LOCALE
  600|   590k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 175k, False: 415k]
  ------------------
  601|   175k|            return read_impl<range_nocvref_t>(
  602|   175k|                range, rd,
  603|   175k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   175k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   175k|                },
  606|   175k|                value, loc);
  607|   175k|        }
  608|   415k|#endif
  609|       |
  610|   415k|        return read_impl<range_nocvref_t>(
  611|   415k|            range, rd,
  612|   415k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   415k|                return r.read_source(SCN_FWD(args)...);
  614|   415k|            },
  615|   415k|            value);
  616|   590k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   175k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   175k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   175k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   415k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   415k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   415k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   597k|    {
  596|   597k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   597k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   597k|#if !SCN_DISABLE_LOCALE
  600|   597k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 178k, False: 419k]
  ------------------
  601|   178k|            return read_impl<range_nocvref_t>(
  602|   178k|                range, rd,
  603|   178k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   178k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   178k|                },
  606|   178k|                value, loc);
  607|   178k|        }
  608|   419k|#endif
  609|       |
  610|   419k|        return read_impl<range_nocvref_t>(
  611|   419k|            range, rd,
  612|   419k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   419k|                return r.read_source(SCN_FWD(args)...);
  614|   419k|            },
  615|   419k|            value);
  616|   597k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   178k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   178k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   178k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   419k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   419k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   419k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  69.9k|    {
  596|  69.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  69.9k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  69.9k|#if !SCN_DISABLE_LOCALE
  600|  69.9k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 16.1k, False: 53.8k]
  ------------------
  601|  16.1k|            return read_impl<range_nocvref_t>(
  602|  16.1k|                range, rd,
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  16.1k|                },
  606|  16.1k|                value, loc);
  607|  16.1k|        }
  608|  53.8k|#endif
  609|       |
  610|  53.8k|        return read_impl<range_nocvref_t>(
  611|  53.8k|            range, rd,
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  614|  53.8k|            },
  615|  53.8k|            value);
  616|  69.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  16.1k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  48.4k|    {
   86|  48.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  48.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  156|  48.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  48.4k|        return read_source_impl(range);
   92|  48.4k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  53.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  69.9k|    {
  596|  69.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  69.9k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  69.9k|#if !SCN_DISABLE_LOCALE
  600|  69.9k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 16.1k, False: 53.8k]
  ------------------
  601|  16.1k|            return read_impl<range_nocvref_t>(
  602|  16.1k|                range, rd,
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  16.1k|                },
  606|  16.1k|                value, loc);
  607|  16.1k|        }
  608|  53.8k|#endif
  609|       |
  610|  53.8k|        return read_impl<range_nocvref_t>(
  611|  53.8k|            range, rd,
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  614|  53.8k|            },
  615|  53.8k|            value);
  616|  69.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  16.1k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  53.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  69.9k|    {
  596|  69.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  69.9k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  69.9k|#if !SCN_DISABLE_LOCALE
  600|  69.9k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 16.1k, False: 53.8k]
  ------------------
  601|  16.1k|            return read_impl<range_nocvref_t>(
  602|  16.1k|                range, rd,
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  16.1k|                },
  606|  16.1k|                value, loc);
  607|  16.1k|        }
  608|  53.8k|#endif
  609|       |
  610|  53.8k|        return read_impl<range_nocvref_t>(
  611|  53.8k|            range, rd,
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  614|  53.8k|            },
  615|  53.8k|            value);
  616|  69.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  16.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  16.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  16.1k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  53.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  53.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  53.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   207k|    {
  577|   207k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   207k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   207k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   207k|        float_reader<CharT> rd{};
  581|   207k|        return read_impl<range_nocvref_t>(
  582|   207k|            range, rd,
  583|   207k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   207k|                return r.read_source(SCN_FWD(args)...);
  585|   207k|            },
  586|   207k|            value);
  587|   207k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|   800k|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   695k|    {
  633|   695k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   695k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 25.6k, False: 669k]
  |  |  ------------------
  ------------------
  635|  25.6k|            return unexpected(r.error());
  636|  25.6k|        }
  637|       |
  638|   669k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   669k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   669k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   669k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 28.6k, False: 641k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.6k|    }                                                  \
  |  |  |  |   70|   669k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   641k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   641k|        return ranges::next(ranges::begin(range), n);
  640|   669k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   775k|    {
   98|   775k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   775k|        const std::ptrdiff_t sign_len =
  101|   775k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 185k, False: 589k]
  ------------------
  102|       |
  103|   775k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   775k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   775k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   775k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 28.6k, False: 747k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.6k|    }                                                  \
  |  |  |  |   70|   775k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   747k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   775k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   207k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   207k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.76M|    {
   73|  1.76M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  157|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.76M|        return read_source_impl(range);
   79|  1.76M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.21M|    {
  112|  2.21M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.21M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.21M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.21M|        auto it = sign_result.first;
  115|  2.21M|        m_sign = sign_result.second;
  116|       |
  117|  2.21M|        auto digits_begin = it;
  118|  2.21M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.21M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.21M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.21M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  157|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.21M]
  |  |  |  Branch (157:45): [True: 0, False: 2.21M]
  |  |  |  Branch (157:45): [True: 0, False: 2.21M]
  |  |  ------------------
  ------------------
  122|  2.21M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.21M|            else {
  133|  2.21M|                auto cb = [&](auto&& rr)
  134|  2.21M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.21M|                    auto res = read_all(rr);
  136|  2.21M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.21M|                        return unexpected_scan_error(
  138|  2.21M|                            scan_error::invalid_scanned_value,
  139|  2.21M|                            "Invalid float value");
  140|  2.21M|                    }
  141|  2.21M|                    return res;
  142|  2.21M|                };
  143|  2.21M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 78.2k, False: 2.13M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  78.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  78.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  78.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  78.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  78.2k|    }                                                  \
  |  |   70|  2.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.13M|            }
  145|  2.21M|        }
  146|  2.13M|        else {
  147|  2.13M|            SCN_TRY_ASSIGN(
  148|  2.13M|                it,
  149|  2.13M|                do_read_source_impl(
  150|  2.13M|                    r,
  151|  2.13M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.13M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.13M|        }
  154|       |
  155|  2.13M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.13M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.11M, False: 18.0k]
  |  Branch (157:48): [True: 2.10M, False: 15.9k]
  ------------------
  158|  2.13M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 2.01M, False: 83.9k]
  ------------------
  159|  2.13M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 2.01M, False: 2.49k]
  ------------------
  160|  2.01M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  2.01M|        }
  162|       |
  163|  2.13M|        handle_separators();
  164|       |
  165|  2.13M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.13M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.13M|        return it;
  178|  2.13M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.21M|    {
  226|  2.21M|        auto it = ranges::begin(range);
  227|  2.21M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.17M, False: 34.0k]
  ------------------
  228|  2.17M|            return unexpected(r.error());
  229|  2.17M|        }
  230|  34.0k|        else {
  231|  34.0k|            it = *r;
  232|  34.0k|        }
  233|       |
  234|  34.0k|        if (auto r = read_matching_string_classic_nocase(
  235|  34.0k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  34.0k|            !r) {
  ------------------
  |  Branch (236:13): [True: 18.0k, False: 15.9k]
  ------------------
  237|  18.0k|            m_kind = float_kind::inf_short;
  238|  18.0k|            return it;
  239|  18.0k|        }
  240|  15.9k|        else {
  241|  15.9k|            m_kind = float_kind::inf_long;
  242|  15.9k|            return *r;
  243|  15.9k|        }
  244|  34.0k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.17M|    {
  249|  2.17M|        auto it = ranges::begin(range);
  250|  2.17M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.09M, False: 87.4k]
  ------------------
  251|  2.09M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.09M|                scan_error::invalid_scanned_value,
  253|  2.09M|                "Invalid floating-point NaN value"));
  254|  2.09M|        }
  255|  87.4k|        else {
  256|  87.4k|            it = *r;
  257|  87.4k|        }
  258|       |
  259|  87.4k|        if (auto r = read_matching_code_unit(
  260|  87.4k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  87.4k|            !r) {
  ------------------
  |  Branch (261:13): [True: 83.9k, False: 3.46k]
  ------------------
  262|  83.9k|            m_kind = float_kind::nan_simple;
  263|  83.9k|            return it;
  264|  83.9k|        }
  265|  3.46k|        else {
  266|  3.46k|            it = *r;
  267|  3.46k|        }
  268|       |
  269|  3.46k|        auto payload_beg_it = it;
  270|  3.46k|        it = read_while_code_unit(
  271|  3.46k|            ranges::subrange{it, ranges::end(range)},
  272|  3.46k|            [](char_type ch) SCN_NOEXCEPT {
  273|  3.46k|                return is_ascii_char(ch) &&
  274|  3.46k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  3.46k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  3.46k|            });
  277|  3.46k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  3.46k|        m_kind = float_kind::nan_with_payload;
  280|  3.46k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 2.49k, False: 974]
  ------------------
  281|  3.46k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  2.49k|            return *r;
  283|  2.49k|        }
  284|    974|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|    974|                                     "Invalid floating-point NaN payload");
  286|  3.46k|    }
_ZZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlwE_clEw:
  272|  21.1k|            [](char_type ch) SCN_NOEXCEPT {
  273|  21.1k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 21.1k, False: 83]
  ------------------
  274|  21.1k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 18.6k, False: 2.50k]
  |  Branch (274:39): [True: 9.57k, False: 9.03k]
  |  Branch (274:54): [True: 3.76k, False: 7.77k]
  |  Branch (274:67): [True: 3.68k, False: 83]
  ------------------
  275|  21.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 5.32k, False: 2.53k]
  |  Branch (275:39): [True: 2.51k, False: 2.80k]
  |  Branch (275:53): [True: 2.72k, False: 2.61k]
  ------------------
  276|  21.1k|            });
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.52M|    {
  220|  1.52M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.52M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   341k|    {
  292|   341k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 69.8k, False: 271k]
  ------------------
  293|  69.8k|            auto beg_exp_it = ranges::begin(range);
  294|  69.8k|            auto it = *r;
  295|       |
  296|  69.8k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 69.7k, False: 162]
  ------------------
  297|  69.8k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  69.7k|                it = r_sign->first;
  299|  69.7k|            }
  300|       |
  301|  69.8k|            if (auto r_exp = read_while1_code_unit(
  302|  69.8k|                    ranges::subrange{it, ranges::end(range)},
  303|  69.8k|                    [](char_type ch)
  304|  69.8k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  69.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  157|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 990, False: 68.8k]
  |  |  ------------------
  ------------------
  306|    990|                it = beg_exp_it;
  307|    990|            }
  308|  68.8k|            else {
  309|  68.8k|                it = *r_exp;
  310|  68.8k|            }
  311|       |
  312|  69.8k|            return it;
  313|  69.8k|        }
  314|   271k|        else {
  315|   271k|            return ranges::begin(range);
  316|   271k|        }
  317|   341k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|   223k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   564k|    {
  365|   564k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   564k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 380k, False: 184k]
  |  Branch (366:50): [True: 39.6k, False: 340k]
  ------------------
  367|       |
  368|   564k|        auto it = ranges::begin(range);
  369|   564k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   564k|        if (auto r =
  372|   564k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   564k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 64.8k, False: 499k]
  |  |  ------------------
  ------------------
  374|  64.8k|            return r.transform_error(
  375|  64.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  64.8k|                                              "Invalid floating-point value"));
  377|  64.8k|        }
  378|   499k|        else {
  379|   499k|            digits_count += ranges::distance(it, *r);
  380|   499k|            it = *r;
  381|   499k|        }
  382|       |
  383|   499k|        m_integral_part_length = digits_count;
  384|   499k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 76.2k, False: 423k]
  ------------------
  385|   499k|                ranges::subrange{it, ranges::end(range)},
  386|   499k|                m_locale_options.decimal_point)) {
  387|  76.2k|            it = *r;
  388|  76.2k|        }
  389|       |
  390|   499k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 64.8k, False: 434k]
  ------------------
  391|   499k|                                     false)) {
  392|  64.8k|            digits_count += ranges::distance(it, *r);
  393|  64.8k|            it = *r;
  394|  64.8k|        }
  395|       |
  396|   499k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   499k|        auto beg_exp_it = it;
  402|   499k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 341k, False: 158k]
  ------------------
  403|   341k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   341k|        }
  405|   499k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 23.6k, False: 475k]
  |  Branch (405:29): [True: 11.2k, False: 12.3k]
  ------------------
  406|  11.2k|            return unexpected_scan_error(
  407|  11.2k|                scan_error::invalid_scanned_value,
  408|  11.2k|                "No exponent given to scientific float");
  409|  11.2k|        }
  410|       |
  411|   488k|        m_kind =
  412|   488k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 419k, False: 68.8k]
  ------------------
  413|       |
  414|   488k|        return it;
  415|   499k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.06M|    {
  185|  1.06M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.06M]
  |  |  |  Branch (157:45): [True: 0, False: 1.06M]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.06M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.06M|        return read_while1_code_unit(
  195|  1.06M|            SCN_FWD(range),
  ------------------
  |  |  252|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.06M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.06M|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|  5.75M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.21M|    {
  423|  2.21M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.21M|        const bool allowed_nonhex =
  425|  2.21M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.21M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.21M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.17M, False: 34.0k]
  |  Branch (428:45): [True: 0, False: 2.17M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.21M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 34.0k, False: 2.17M]
  ------------------
  434|  34.0k|            return *r;
  435|  34.0k|        }
  436|       |
  437|  2.17M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.09M, False: 86.4k]
  |  Branch (437:45): [True: 974, False: 2.09M]
  ------------------
  438|    974|            return unexpected(r.error());
  439|    974|        }
  440|  2.17M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 86.4k, False: 2.09M]
  ------------------
  441|  86.4k|            return *r;
  442|  86.4k|        }
  443|       |
  444|  2.09M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.52M, False: 564k]
  |  Branch (444:28): [True: 471k, False: 1.05M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   471k|            auto it = ranges::begin(range);
  448|       |
  449|   471k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 22.5k, False: 448k]
  ------------------
  450|  22.5k|                m_kind = float_kind::hex_with_prefix;
  451|  22.5k|                it = *r;
  452|  22.5k|            }
  453|   448k|            else {
  454|   448k|                m_kind = float_kind::hex_without_prefix;
  455|   448k|            }
  456|       |
  457|   471k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   471k|        }
  459|  1.61M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 564k, False: 1.05M]
  |  Branch (459:34): [True: 564k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   564k|            m_kind = float_kind::generic;
  463|   564k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  252|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   564k|        }
  465|  1.05M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.05M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  157|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 55.2k, False: 1.00M]
  |  |  ------------------
  ------------------
  471|  55.2k|                m_kind = float_kind::hex_with_prefix;
  472|  55.2k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  55.2k|            }
  474|       |
  475|  1.00M|            m_kind = float_kind::generic;
  476|  1.00M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  252|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.05M|        }
  478|  2.09M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   526k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   526k|                    auto res = read_all(rr);
  136|   526k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  157|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 368, False: 526k]
  |  |  ------------------
  ------------------
  137|    368|                        return unexpected_scan_error(
  138|    368|                            scan_error::invalid_scanned_value,
  139|    368|                            "Invalid float value");
  140|    368|                    }
  141|   526k|                    return res;
  142|   526k|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.00M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.00M|                    auto res = read_all(rr);
  136|  1.00M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 760, False: 999k]
  |  |  ------------------
  ------------------
  137|    760|                        return unexpected_scan_error(
  138|    760|                            scan_error::invalid_scanned_value,
  139|    760|                            "Invalid float value");
  140|    760|                    }
  141|   999k|                    return res;
  142|  1.00M|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  2.45M|    {
  482|  2.45M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.45M, False: 0]
  ------------------
  483|  2.45M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.45M, False: 0]
  ------------------
  484|  2.45M|            return;
  485|  2.45M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   229k|    {
  577|   229k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   229k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   229k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   229k|        float_reader<CharT> rd{};
  581|   229k|        return read_impl<range_nocvref_t>(
  582|   229k|            range, rd,
  583|   229k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   229k|                return r.read_source(SCN_FWD(args)...);
  585|   229k|            },
  586|   229k|            value);
  587|   229k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   753k|    {
  633|   753k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   753k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 26.1k, False: 726k]
  |  |  ------------------
  ------------------
  635|  26.1k|            return unexpected(r.error());
  636|  26.1k|        }
  637|       |
  638|   726k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   726k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   726k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   726k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.0k, False: 699k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.0k|    }                                                  \
  |  |  |  |   70|   726k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   699k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   699k|        return ranges::next(ranges::begin(range), n);
  640|   726k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   833k|    {
   98|   833k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   833k|        const std::ptrdiff_t sign_len =
  101|   833k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 200k, False: 632k]
  ------------------
  102|       |
  103|   833k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   833k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   833k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   833k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   833k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.0k, False: 805k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.0k|    }                                                  \
  |  |  |  |   70|   833k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   805k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   833k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   229k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   229k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   229k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   233k|    {
  577|   233k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   233k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   233k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   233k|        float_reader<CharT> rd{};
  581|   233k|        return read_impl<range_nocvref_t>(
  582|   233k|            range, rd,
  583|   233k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   233k|                return r.read_source(SCN_FWD(args)...);
  585|   233k|            },
  586|   233k|            value);
  587|   233k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   764k|    {
  633|   764k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   764k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 26.5k, False: 737k]
  |  |  ------------------
  ------------------
  635|  26.5k|            return unexpected(r.error());
  636|  26.5k|        }
  637|       |
  638|   737k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   737k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   737k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   737k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.1k, False: 711k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.1k|    }                                                  \
  |  |  |  |   70|   737k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   711k|        return ranges::next(ranges::begin(range), n);
  640|   737k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   843k|    {
   98|   843k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   843k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   843k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|   843k|        const std::ptrdiff_t sign_len =
  101|   843k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 206k, False: 637k]
  ------------------
  102|       |
  103|   843k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   843k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   843k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   843k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.1k, False: 817k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.1k|    }                                                  \
  |  |  |  |   70|   843k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   817k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   817k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   843k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   233k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   233k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   233k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.93M|    {
  570|  1.93M|        detail::check_float_type_specs(specs, eh);
  571|  1.93M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.91M|    {
  644|  1.91M|        unsigned options{};
  645|  1.91M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 533k, False: 1.38M]
  ------------------
  646|   533k|            options |= float_reader_base::allow_thsep;
  647|   533k|        }
  648|       |
  649|  1.91M|        SCN_GCC_COMPAT_PUSH
  650|  1.91M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.91M|        switch (specs.type) {
  653|   277k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 277k, False: 1.64M]
  ------------------
  654|   277k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  69.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 69.9k, False: 1.84M]
  ------------------
  657|  69.9k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   584k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 584k, False: 1.33M]
  ------------------
  660|   584k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   451k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 451k, False: 1.46M]
  ------------------
  663|   451k|                return options | float_reader_base::allow_scientific |
  664|   451k|                       float_reader_base::allow_fixed;
  665|       |
  666|   533k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 533k, False: 1.38M]
  ------------------
  667|   533k|                return options | float_reader_base::allow_scientific |
  668|   533k|                       float_reader_base::allow_fixed |
  669|   533k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.91M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|  1.91M|                SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.91M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.91M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  1.91M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   487k|    {
  596|   487k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   487k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   487k|#if !SCN_DISABLE_LOCALE
  600|   487k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 138k, False: 349k]
  ------------------
  601|   138k|            return read_impl<range_nocvref_t>(
  602|   138k|                range, rd,
  603|   138k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   138k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   138k|                },
  606|   138k|                value, loc);
  607|   138k|        }
  608|   349k|#endif
  609|       |
  610|   349k|        return read_impl<range_nocvref_t>(
  611|   349k|            range, rd,
  612|   349k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   349k|                return r.read_source(SCN_FWD(args)...);
  614|   349k|            },
  615|   349k|            value);
  616|   487k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   138k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   138k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   138k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   447k|    {
   86|   447k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   447k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  156|   447k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   447k|        return read_source_impl(range);
   92|   447k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   349k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   349k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   349k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   523k|    {
  596|   523k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   523k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   523k|#if !SCN_DISABLE_LOCALE
  600|   523k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 152k, False: 370k]
  ------------------
  601|   152k|            return read_impl<range_nocvref_t>(
  602|   152k|                range, rd,
  603|   152k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   152k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   152k|                },
  606|   152k|                value, loc);
  607|   152k|        }
  608|   370k|#endif
  609|       |
  610|   370k|        return read_impl<range_nocvref_t>(
  611|   370k|            range, rd,
  612|   370k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   370k|                return r.read_source(SCN_FWD(args)...);
  614|   370k|            },
  615|   370k|            value);
  616|   523k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   152k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   152k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   152k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   370k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   370k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   370k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   530k|    {
  596|   530k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   530k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   530k|#if !SCN_DISABLE_LOCALE
  600|   530k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 155k, False: 374k]
  ------------------
  601|   155k|            return read_impl<range_nocvref_t>(
  602|   155k|                range, rd,
  603|   155k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   155k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   155k|                },
  606|   155k|                value, loc);
  607|   155k|        }
  608|   374k|#endif
  609|       |
  610|   374k|        return read_impl<range_nocvref_t>(
  611|   374k|            range, rd,
  612|   374k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   374k|                return r.read_source(SCN_FWD(args)...);
  614|   374k|            },
  615|   374k|            value);
  616|   530k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   155k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   155k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   155k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   374k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   374k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   374k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  43.3k|    {
  577|  43.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  43.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  43.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  43.3k|        float_reader<CharT> rd{};
  581|  43.3k|        return read_impl<range_nocvref_t>(
  582|  43.3k|            range, rd,
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  585|  43.3k|            },
  586|  43.3k|            value);
  587|  43.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   168k|    {
  633|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 62.6k, False: 106k]
  |  |  ------------------
  ------------------
  635|  62.6k|            return unexpected(r.error());
  636|  62.6k|        }
  637|       |
  638|   106k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   106k|        return ranges::next(ranges::begin(range), n);
  640|   106k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  43.3k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   419k|    {
   73|   419k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  157|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   419k|        return read_source_impl(range);
   79|   419k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   506k|    {
  112|   506k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   506k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   506k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   506k|        auto it = sign_result.first;
  115|   506k|        m_sign = sign_result.second;
  116|       |
  117|   506k|        auto digits_begin = it;
  118|   506k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   506k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   506k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   506k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   506k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   506k|                SCN_TRY_ASSIGN(
  124|   506k|                    it,
  125|   506k|                    do_read_source_impl(
  126|   506k|                        r,
  127|   506k|                        [&](auto&& rr) {
  128|   506k|                            return read_regular_float(SCN_FWD(rr));
  129|   506k|                        },
  130|   506k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   506k|            }
  132|   506k|            else {
  133|   506k|                auto cb = [&](auto&& rr)
  134|   506k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   506k|                    auto res = read_all(rr);
  136|   506k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   506k|                        return unexpected_scan_error(
  138|   506k|                            scan_error::invalid_scanned_value,
  139|   506k|                            "Invalid float value");
  140|   506k|                    }
  141|   506k|                    return res;
  142|   506k|                };
  143|   506k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   506k|            }
  145|   506k|        }
  146|   506k|        else {
  147|   506k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  157|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (157:25): [True: 187k, False: 318k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   187k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   187k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   187k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   187k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   187k|    }                                                  \
  |  |   70|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|   318k|                it,
  149|   318k|                do_read_source_impl(
  150|   318k|                    r,
  151|   318k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|   318k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|   318k|        }
  154|       |
  155|   318k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  246|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|   318k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 318k, False: 0]
  |  Branch (157:48): [True: 318k, False: 0]
  ------------------
  158|   318k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 318k, False: 0]
  ------------------
  159|   318k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 318k, False: 0]
  ------------------
  160|   318k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|   318k|        }
  162|       |
  163|   318k|        handle_separators();
  164|       |
  165|   318k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 318k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|   318k|        return it;
  178|   318k|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   506k|    {
  423|   506k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   506k|        const bool allowed_nonhex =
  425|   506k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   506k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   506k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 506k, False: 0]
  |  Branch (428:45): [True: 0, False: 506k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   506k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 506k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   506k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 506k, False: 0]
  |  Branch (437:45): [True: 0, False: 506k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   506k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 506k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   506k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 303k, False: 202k]
  |  Branch (444:28): [True: 86.7k, False: 216k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  86.7k|            auto it = ranges::begin(range);
  448|       |
  449|  86.7k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 86.7k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  86.7k|            else {
  454|  86.7k|                m_kind = float_kind::hex_without_prefix;
  455|  86.7k|            }
  456|       |
  457|  86.7k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  86.7k|        }
  459|   419k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 202k, False: 216k]
  |  Branch (459:34): [True: 202k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   202k|            m_kind = float_kind::generic;
  463|   202k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  252|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   202k|        }
  465|   216k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   216k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  157|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   216k|            m_kind = float_kind::generic;
  476|   216k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  252|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   216k|        }
  478|   506k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   506k|    {
  226|   506k|        auto it = ranges::begin(range);
  227|   506k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 506k, False: 0]
  ------------------
  228|   506k|            return unexpected(r.error());
  229|   506k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   506k|    {
  249|   506k|        auto it = ranges::begin(range);
  250|   506k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 506k, False: 0]
  ------------------
  251|   506k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   506k|                scan_error::invalid_scanned_value,
  253|   506k|                "Invalid floating-point NaN value"));
  254|   506k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   303k|    {
  220|   303k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   303k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  86.7k|    {
  323|  86.7k|        auto it = ranges::begin(range);
  324|       |
  325|  86.7k|        std::ptrdiff_t digits_count = 0;
  326|  86.7k|        if (auto r =
  327|  86.7k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  86.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 28.9k, False: 57.8k]
  |  |  ------------------
  ------------------
  329|  28.9k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  28.9k|                scan_error::invalid_scanned_value,
  331|  28.9k|                "Invalid hexadecimal floating-point value"));
  332|  28.9k|        }
  333|  57.8k|        else {
  334|  57.8k|            digits_count += ranges::distance(it, *r);
  335|  57.8k|            it = *r;
  336|  57.8k|        }
  337|       |
  338|  57.8k|        m_integral_part_length = digits_count;
  339|  57.8k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 57.8k]
  ------------------
  340|  57.8k|                ranges::subrange{it, ranges::end(range)},
  341|  57.8k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|  57.8k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 57.8k]
  ------------------
  346|  57.8k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|  57.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 57.8k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|  57.8k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|  57.8k|        return it;
  359|  57.8k|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|   144k|    {
  203|   144k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 144k]
  |  |  |  Branch (157:45): [True: 0, False: 144k]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|   144k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|   144k|        return read_while1_code_unit(
  213|   144k|            SCN_FWD(range),
  ------------------
  |  |  252|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|   144k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|   144k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|   260k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|   289k|    {
  292|   289k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 289k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|   289k|        else {
  315|   289k|            return ranges::begin(range);
  316|   289k|        }
  317|   289k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   419k|    {
  365|   419k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   419k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 332k, False: 86.7k]
  |  Branch (366:50): [True: 28.9k, False: 303k]
  ------------------
  367|       |
  368|   419k|        auto it = ranges::begin(range);
  369|   419k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   419k|        if (auto r =
  372|   419k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   419k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 130k, False: 289k]
  |  |  ------------------
  ------------------
  374|   130k|            return r.transform_error(
  375|   130k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   130k|                                              "Invalid floating-point value"));
  377|   130k|        }
  378|   289k|        else {
  379|   289k|            digits_count += ranges::distance(it, *r);
  380|   289k|            it = *r;
  381|   289k|        }
  382|       |
  383|   289k|        m_integral_part_length = digits_count;
  384|   289k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 289k]
  ------------------
  385|   289k|                ranges::subrange{it, ranges::end(range)},
  386|   289k|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|   289k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 289k]
  ------------------
  391|   289k|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|   289k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  157|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 289k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   289k|        auto beg_exp_it = it;
  402|   289k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 231k, False: 57.8k]
  ------------------
  403|   231k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   231k|        }
  405|   289k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 28.9k, False: 260k]
  |  Branch (405:29): [True: 28.9k, False: 0]
  ------------------
  406|  28.9k|            return unexpected_scan_error(
  407|  28.9k|                scan_error::invalid_scanned_value,
  408|  28.9k|                "No exponent given to scientific float");
  409|  28.9k|        }
  410|       |
  411|   260k|        m_kind =
  412|   260k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 260k, False: 0]
  ------------------
  413|       |
  414|   260k|        return it;
  415|   289k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   708k|    {
  185|   708k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  157|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 708k]
  |  |  |  Branch (157:45): [True: 0, False: 708k]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   708k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   708k|        return read_while1_code_unit(
  195|   708k|            SCN_FWD(range),
  ------------------
  |  |  252|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   708k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   708k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|  1.28M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  43.3k|    {
  577|  43.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  43.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  43.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  43.3k|        float_reader<CharT> rd{};
  581|  43.3k|        return read_impl<range_nocvref_t>(
  582|  43.3k|            range, rd,
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  585|  43.3k|            },
  586|  43.3k|            value);
  587|  43.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   168k|    {
  633|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 62.6k, False: 106k]
  |  |  ------------------
  ------------------
  635|  62.6k|            return unexpected(r.error());
  636|  62.6k|        }
  637|       |
  638|   106k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   106k|        return ranges::next(ranges::begin(range), n);
  640|   106k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  43.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  43.3k|    {
  577|  43.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  43.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  43.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  43.3k|        float_reader<CharT> rd{};
  581|  43.3k|        return read_impl<range_nocvref_t>(
  582|  43.3k|            range, rd,
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  585|  43.3k|            },
  586|  43.3k|            value);
  587|  43.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   168k|    {
  633|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 62.6k, False: 106k]
  |  |  ------------------
  ------------------
  635|  62.6k|            return unexpected(r.error());
  636|  62.6k|        }
  637|       |
  638|   106k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   106k|        return ranges::next(ranges::begin(range), n);
  640|   106k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  43.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  43.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  43.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   125k|    {
  596|   125k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   125k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   125k|#if !SCN_DISABLE_LOCALE
  600|   125k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 28.9k, False: 96.4k]
  ------------------
  601|  28.9k|            return read_impl<range_nocvref_t>(
  602|  28.9k|                range, rd,
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  28.9k|                },
  606|  28.9k|                value, loc);
  607|  28.9k|        }
  608|  96.4k|#endif
  609|       |
  610|  96.4k|        return read_impl<range_nocvref_t>(
  611|  96.4k|            range, rd,
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  614|  96.4k|            },
  615|  96.4k|            value);
  616|   125k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  28.9k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  86.7k|    {
   86|  86.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  86.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  156|  86.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  86.7k|        return read_source_impl(range);
   92|  86.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  96.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   125k|    {
  596|   125k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   125k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   125k|#if !SCN_DISABLE_LOCALE
  600|   125k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 28.9k, False: 96.4k]
  ------------------
  601|  28.9k|            return read_impl<range_nocvref_t>(
  602|  28.9k|                range, rd,
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  28.9k|                },
  606|  28.9k|                value, loc);
  607|  28.9k|        }
  608|  96.4k|#endif
  609|       |
  610|  96.4k|        return read_impl<range_nocvref_t>(
  611|  96.4k|            range, rd,
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  614|  96.4k|            },
  615|  96.4k|            value);
  616|   125k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  28.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  96.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   125k|    {
  596|   125k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   125k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   125k|#if !SCN_DISABLE_LOCALE
  600|   125k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 28.9k, False: 96.4k]
  ------------------
  601|  28.9k|            return read_impl<range_nocvref_t>(
  602|  28.9k|                range, rd,
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  28.9k|                },
  606|  28.9k|                value, loc);
  607|  28.9k|        }
  608|  96.4k|#endif
  609|       |
  610|  96.4k|        return read_impl<range_nocvref_t>(
  611|  96.4k|            range, rd,
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  614|  96.4k|            },
  615|  96.4k|            value);
  616|   125k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  28.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  28.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  252|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  28.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  96.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  96.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  252|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  96.4k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|   827k|    {
  524|   827k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   827k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 88.9k, False: 739k]
  ------------------
  526|  88.9k|            return -value;
  527|  88.9k|        }
  528|   739k|        return value;
  529|   827k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|   775k|    {
  524|   775k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   775k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 76.5k, False: 699k]
  ------------------
  526|  76.5k|            return -value;
  527|  76.5k|        }
  528|   699k|        return value;
  529|   775k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|   898k|    {
  524|   898k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   898k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   898k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   898k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 94.7k, False: 804k]
  ------------------
  526|  94.7k|            return -value;
  527|  94.7k|        }
  528|   804k|        return value;
  529|   898k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|   833k|    {
  524|   833k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   833k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 81.1k, False: 751k]
  ------------------
  526|  81.1k|            return -value;
  527|  81.1k|        }
  528|   751k|        return value;
  529|   833k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|   910k|    {
  524|   910k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   910k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   910k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   910k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 97.9k, False: 812k]
  ------------------
  526|  97.9k|            return -value;
  527|  97.9k|        }
  528|   812k|        return value;
  529|   910k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|   843k|    {
  524|   843k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  246|   843k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   843k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   843k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 83.9k, False: 759k]
  ------------------
  526|  83.9k|            return -value;
  527|  83.9k|        }
  528|   759k|        return value;
  529|   843k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.49M|{
   69|  2.49M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.49M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.78M, False: 715k]
  ------------------
   71|  1.78M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.78M, False: 0]
  ------------------
   72|  1.78M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.78M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.78M|    }
   76|       |
   77|   715k|    auto& it = *r;
   78|   715k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 282k, False: 432k]
  ------------------
   79|   282k|        return std::pair{it, sign_type::minus_sign};
   80|   282k|    }
   81|   432k|    return std::pair{it, sign_type::plus_sign};
   82|   715k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  21.5M|{
   51|  21.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  21.5M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  79.0k|{
   69|  79.0k|    auto r = read_one_of_code_unit(range, "+-");
   70|  79.0k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 60.7k, False: 18.3k]
  ------------------
   71|  60.7k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 60.5k, False: 162]
  ------------------
   72|  60.5k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  60.5k|        }
   74|    162|        return unexpected(eof_error::eof);
   75|  60.7k|    }
   76|       |
   77|  18.3k|    auto& it = *r;
   78|  18.3k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 6.46k, False: 11.8k]
  ------------------
   79|  6.46k|        return std::pair{it, sign_type::minus_sign};
   80|  6.46k|    }
   81|  11.8k|    return std::pair{it, sign_type::plus_sign};
   82|  18.3k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   282k|{
   69|   282k|    auto r = read_one_of_code_unit(range, "+-");
   70|   282k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 282k, False: 0]
  ------------------
   71|   282k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 282k, False: 0]
  ------------------
   72|   282k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   282k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   282k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.21M|{
   69|  2.21M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.21M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.61M, False: 595k]
  ------------------
   71|  1.61M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.61M, False: 0]
  ------------------
   72|  1.61M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.61M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.61M|    }
   76|       |
   77|   595k|    auto& it = *r;
   78|   595k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 242k, False: 352k]
  ------------------
   79|   242k|        return std::pair{it, sign_type::minus_sign};
   80|   242k|    }
   81|   352k|    return std::pair{it, sign_type::plus_sign};
   82|   595k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  10.3M|{
   55|  10.3M|#if WCHAR_MIN < 0
   56|  10.3M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 10.3M, False: 4.20k]
  |  Branch (56:20): [True: 10.2M, False: 106k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  10.2M|        return char_to_int(static_cast<char>(ch));
   61|  10.2M|    }
   62|   110k|    return 255;
   63|  10.3M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  69.8k|{
   69|  69.8k|    auto r = read_one_of_code_unit(range, "+-");
   70|  69.8k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 52.2k, False: 17.5k]
  ------------------
   71|  52.2k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 52.1k, False: 162]
  ------------------
   72|  52.1k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  52.1k|        }
   74|    162|        return unexpected(eof_error::eof);
   75|  52.2k|    }
   76|       |
   77|  17.5k|    auto& it = *r;
   78|  17.5k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 6.07k, False: 11.5k]
  ------------------
   79|  6.07k|        return std::pair{it, sign_type::minus_sign};
   80|  6.07k|    }
   81|  11.5k|    return std::pair{it, sign_type::plus_sign};
   82|  17.5k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   506k|{
   69|   506k|    auto r = read_one_of_code_unit(range, "+-");
   70|   506k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 347k, False: 158k]
  ------------------
   71|   347k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 347k, False: 0]
  ------------------
   72|   347k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   347k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   347k|    }
   76|       |
   77|   158k|    auto& it = *r;
   78|   158k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 158k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|   158k|    return std::pair{it, sign_type::plus_sign};
   82|   158k|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.52M|{
   43|  2.52M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 21.9k, False: 2.50M]
  |  |  ------------------
  ------------------
   44|  21.9k|        return unexpected(e);
   45|  21.9k|    }
   46|       |
   47|  2.50M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.50M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.50M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.50M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|   237k|    {
  122|   237k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   237k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   237k|                          basic_contiguous_scan_context<char_type>>) {
  126|   237k|            auto rd = make_reader<T, char_type>();
  127|   237k|            return impl(rd, range, value);
  128|   237k|        }
  129|   237k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   237k|            auto rd = make_reader<T, char_type>();
  131|   237k|            if (!is_segment_contiguous(range)) {
  132|   237k|                return impl(rd, range, value);
  133|   237k|            }
  134|   237k|            auto crange = get_as_contiguous(range);
  135|   237k|            SCN_TRY(it, impl(rd, crange, value));
  136|   237k|            return ranges_polyfill::batch_next(
  137|   237k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   237k|        }
  139|   237k|        else {
  140|   237k|            SCN_EXPECT(false);
  141|   237k|            SCN_UNREACHABLE;
  142|   237k|        }
  143|   237k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   237k|    {
  112|   237k|        SCN_TRY(it,
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.19k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   235k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   235k|                    .transform_error(make_eof_scan_error));
  115|   235k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   235k|                               loc);
  117|   237k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|   265k|    {
  122|   265k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   265k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   265k|                          basic_contiguous_scan_context<char_type>>) {
  126|   265k|            auto rd = make_reader<T, char_type>();
  127|   265k|            return impl(rd, range, value);
  128|   265k|        }
  129|   265k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   265k|            auto rd = make_reader<T, char_type>();
  131|   265k|            if (!is_segment_contiguous(range)) {
  132|   265k|                return impl(rd, range, value);
  133|   265k|            }
  134|   265k|            auto crange = get_as_contiguous(range);
  135|   265k|            SCN_TRY(it, impl(rd, crange, value));
  136|   265k|            return ranges_polyfill::batch_next(
  137|   265k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   265k|        }
  139|   265k|        else {
  140|   265k|            SCN_EXPECT(false);
  141|   265k|            SCN_UNREACHABLE;
  142|   265k|        }
  143|   265k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   265k|    {
  112|   265k|        SCN_TRY(it,
  ------------------
  |  |   71|   265k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.55k, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   262k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   262k|                    .transform_error(make_eof_scan_error));
  115|   262k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   262k|                               loc);
  117|   265k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|   270k|    {
  122|   270k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   270k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   270k|                          basic_contiguous_scan_context<char_type>>) {
  126|   270k|            auto rd = make_reader<T, char_type>();
  127|   270k|            return impl(rd, range, value);
  128|   270k|        }
  129|   270k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   270k|            auto rd = make_reader<T, char_type>();
  131|   270k|            if (!is_segment_contiguous(range)) {
  132|   270k|                return impl(rd, range, value);
  133|   270k|            }
  134|   270k|            auto crange = get_as_contiguous(range);
  135|   270k|            SCN_TRY(it, impl(rd, crange, value));
  136|   270k|            return ranges_polyfill::batch_next(
  137|   270k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   270k|        }
  139|   270k|        else {
  140|   270k|            SCN_EXPECT(false);
  141|   270k|            SCN_UNREACHABLE;
  142|   270k|        }
  143|   270k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   270k|    {
  112|   270k|        SCN_TRY(it,
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.69k, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   267k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   267k|                    .transform_error(make_eof_scan_error));
  115|   267k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   267k|                               loc);
  117|   270k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   282k|{
   43|   282k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 66, False: 282k]
  |  |  ------------------
  ------------------
   44|     66|        return unexpected(e);
   45|     66|    }
   46|       |
   47|   282k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 282k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   282k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   282k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  24.2k|    {
  122|  24.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.2k|            auto rd = make_reader<T, char_type>();
  127|  24.2k|            return impl(rd, range, value);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            auto rd = make_reader<T, char_type>();
  131|  24.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.2k, False: 0]
  ------------------
  132|  24.2k|                return impl(rd, range, value);
  133|  24.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.2k|        else {
  140|  24.2k|            SCN_EXPECT(false);
  141|  24.2k|            SCN_UNREACHABLE;
  142|  24.2k|        }
  143|  24.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.2k|    {
  112|  24.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.2k|                    .transform_error(make_eof_scan_error));
  115|  24.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.2k|                               loc);
  117|  24.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  24.2k|    {
  122|  24.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.2k|            auto rd = make_reader<T, char_type>();
  127|  24.2k|            return impl(rd, range, value);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            auto rd = make_reader<T, char_type>();
  131|  24.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.2k, False: 0]
  ------------------
  132|  24.2k|                return impl(rd, range, value);
  133|  24.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.2k|        else {
  140|  24.2k|            SCN_EXPECT(false);
  141|  24.2k|            SCN_UNREACHABLE;
  142|  24.2k|        }
  143|  24.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.2k|    {
  112|  24.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.2k|                    .transform_error(make_eof_scan_error));
  115|  24.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.2k|                               loc);
  117|  24.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  24.2k|    {
  122|  24.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.2k|            auto rd = make_reader<T, char_type>();
  127|  24.2k|            return impl(rd, range, value);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            auto rd = make_reader<T, char_type>();
  131|  24.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.2k, False: 0]
  ------------------
  132|  24.2k|                return impl(rd, range, value);
  133|  24.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.2k|        else {
  140|  24.2k|            SCN_EXPECT(false);
  141|  24.2k|            SCN_UNREACHABLE;
  142|  24.2k|        }
  143|  24.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.2k|    {
  112|  24.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.2k|                    .transform_error(make_eof_scan_error));
  115|  24.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.2k|                               loc);
  117|  24.2k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|   551k|    {
  223|   551k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   551k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   551k|                          basic_contiguous_scan_context<char_type>>) {
  227|   551k|            auto rd = make_reader<T, char_type>();
  228|   551k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 551k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   551k|            return impl(rd, range, value);
  233|   551k|        }
  234|   551k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   551k|            auto rd = make_reader<T, char_type>();
  236|   551k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   551k|                return unexpected(e);
  238|   551k|            }
  239|       |
  240|   551k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   551k|                return impl(rd, range, value);
  242|   551k|            }
  243|       |
  244|   551k|            auto crange = get_as_contiguous(range);
  245|   551k|            SCN_TRY(it, impl(rd, crange, value));
  246|   551k|            return ranges_polyfill::batch_next(
  247|   551k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   551k|        }
  249|   551k|        else {
  250|   551k|            SCN_EXPECT(false);
  251|   551k|            SCN_UNREACHABLE;
  252|   551k|        }
  253|   551k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   551k|    {
  205|   551k|        SCN_TRY(it,
  ------------------
  |  |   71|   551k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.64k, False: 545k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.64k|    }                                                  \
  |  |  |  |   70|   551k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   545k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   545k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   545k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   545k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 545k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   545k|        return rd.read_specs(subr, specs, value, loc);
  218|   545k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|   596k|    {
  223|   596k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   596k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   596k|                          basic_contiguous_scan_context<char_type>>) {
  227|   596k|            auto rd = make_reader<T, char_type>();
  228|   596k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 596k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   596k|            return impl(rd, range, value);
  233|   596k|        }
  234|   596k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   596k|            auto rd = make_reader<T, char_type>();
  236|   596k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   596k|                return unexpected(e);
  238|   596k|            }
  239|       |
  240|   596k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   596k|                return impl(rd, range, value);
  242|   596k|            }
  243|       |
  244|   596k|            auto crange = get_as_contiguous(range);
  245|   596k|            SCN_TRY(it, impl(rd, crange, value));
  246|   596k|            return ranges_polyfill::batch_next(
  247|   596k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   596k|        }
  249|   596k|        else {
  250|   596k|            SCN_EXPECT(false);
  251|   596k|            SCN_UNREACHABLE;
  252|   596k|        }
  253|   596k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   596k|    {
  205|   596k|        SCN_TRY(it,
  ------------------
  |  |   71|   596k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   596k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   596k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.35k, False: 590k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.35k|    }                                                  \
  |  |  |  |   70|   596k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   590k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   590k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   590k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   590k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   590k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 590k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   590k|        return rd.read_specs(subr, specs, value, loc);
  218|   590k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|   604k|    {
  223|   604k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   604k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   604k|                          basic_contiguous_scan_context<char_type>>) {
  227|   604k|            auto rd = make_reader<T, char_type>();
  228|   604k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 604k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   604k|            return impl(rd, range, value);
  233|   604k|        }
  234|   604k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   604k|            auto rd = make_reader<T, char_type>();
  236|   604k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   604k|                return unexpected(e);
  238|   604k|            }
  239|       |
  240|   604k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   604k|                return impl(rd, range, value);
  242|   604k|            }
  243|       |
  244|   604k|            auto crange = get_as_contiguous(range);
  245|   604k|            SCN_TRY(it, impl(rd, crange, value));
  246|   604k|            return ranges_polyfill::batch_next(
  247|   604k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   604k|        }
  249|   604k|        else {
  250|   604k|            SCN_EXPECT(false);
  251|   604k|            SCN_UNREACHABLE;
  252|   604k|        }
  253|   604k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   604k|    {
  205|   604k|        SCN_TRY(it,
  ------------------
  |  |   71|   604k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   604k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   604k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.68k, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|   604k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   597k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   597k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   597k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   597k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 597k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   597k|        return rd.read_specs(subr, specs, value, loc);
  218|   597k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  70.0k|    {
  223|  70.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  70.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  70.0k|            auto rd = make_reader<T, char_type>();
  228|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  70.0k|                return unexpected(e);
  230|  70.0k|            }
  231|       |
  232|  70.0k|            return impl(rd, range, value);
  233|  70.0k|        }
  234|  70.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  70.0k|            auto rd = make_reader<T, char_type>();
  236|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  70.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 70.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  70.0k|                return impl(rd, range, value);
  242|  70.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  70.0k|        else {
  250|  70.0k|            SCN_EXPECT(false);
  251|  70.0k|            SCN_UNREACHABLE;
  252|  70.0k|        }
  253|  70.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  70.0k|    {
  205|  70.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 24, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  69.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  69.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  69.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  69.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 69.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  69.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  69.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  70.0k|    {
  223|  70.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  70.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  70.0k|            auto rd = make_reader<T, char_type>();
  228|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  70.0k|                return unexpected(e);
  230|  70.0k|            }
  231|       |
  232|  70.0k|            return impl(rd, range, value);
  233|  70.0k|        }
  234|  70.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  70.0k|            auto rd = make_reader<T, char_type>();
  236|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  70.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 70.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  70.0k|                return impl(rd, range, value);
  242|  70.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  70.0k|        else {
  250|  70.0k|            SCN_EXPECT(false);
  251|  70.0k|            SCN_UNREACHABLE;
  252|  70.0k|        }
  253|  70.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  70.0k|    {
  205|  70.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 24, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  69.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  69.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  69.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  69.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 69.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  69.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  69.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  70.0k|    {
  223|  70.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  70.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  70.0k|            auto rd = make_reader<T, char_type>();
  228|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  70.0k|                return unexpected(e);
  230|  70.0k|            }
  231|       |
  232|  70.0k|            return impl(rd, range, value);
  233|  70.0k|        }
  234|  70.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  70.0k|            auto rd = make_reader<T, char_type>();
  236|  70.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  70.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 70.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  70.0k|                return impl(rd, range, value);
  242|  70.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  70.0k|        else {
  250|  70.0k|            SCN_EXPECT(false);
  251|  70.0k|            SCN_UNREACHABLE;
  252|  70.0k|        }
  253|  70.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  70.0k|    {
  205|  70.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 24, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  69.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  69.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  69.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  69.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 69.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  69.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  69.9k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.24M|{
   43|  2.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 22.3k, False: 2.21M]
  |  |  ------------------
  ------------------
   44|  22.3k|        return unexpected(e);
   45|  22.3k|    }
   46|       |
   47|  2.21M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.21M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.21M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.21M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|   209k|    {
  122|   209k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   209k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   209k|                          basic_contiguous_scan_context<char_type>>) {
  126|   209k|            auto rd = make_reader<T, char_type>();
  127|   209k|            return impl(rd, range, value);
  128|   209k|        }
  129|   209k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   209k|            auto rd = make_reader<T, char_type>();
  131|   209k|            if (!is_segment_contiguous(range)) {
  132|   209k|                return impl(rd, range, value);
  133|   209k|            }
  134|   209k|            auto crange = get_as_contiguous(range);
  135|   209k|            SCN_TRY(it, impl(rd, crange, value));
  136|   209k|            return ranges_polyfill::batch_next(
  137|   209k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   209k|        }
  139|   209k|        else {
  140|   209k|            SCN_EXPECT(false);
  141|   209k|            SCN_UNREACHABLE;
  142|   209k|        }
  143|   209k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   209k|    {
  112|   209k|        SCN_TRY(it,
  ------------------
  |  |   71|   209k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   209k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   209k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.34k, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.34k|    }                                                  \
  |  |  |  |   70|   209k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   207k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   207k|                    .transform_error(make_eof_scan_error));
  115|   207k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   207k|                               loc);
  117|   209k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|   232k|    {
  122|   232k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   232k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   232k|                          basic_contiguous_scan_context<char_type>>) {
  126|   232k|            auto rd = make_reader<T, char_type>();
  127|   232k|            return impl(rd, range, value);
  128|   232k|        }
  129|   232k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   232k|            auto rd = make_reader<T, char_type>();
  131|   232k|            if (!is_segment_contiguous(range)) {
  132|   232k|                return impl(rd, range, value);
  133|   232k|            }
  134|   232k|            auto crange = get_as_contiguous(range);
  135|   232k|            SCN_TRY(it, impl(rd, crange, value));
  136|   232k|            return ranges_polyfill::batch_next(
  137|   232k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   232k|        }
  139|   232k|        else {
  140|   232k|            SCN_EXPECT(false);
  141|   232k|            SCN_UNREACHABLE;
  142|   232k|        }
  143|   232k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   232k|    {
  112|   232k|        SCN_TRY(it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.71k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.71k|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   229k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   229k|                    .transform_error(make_eof_scan_error));
  115|   229k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   229k|                               loc);
  117|   232k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|   236k|    {
  122|   236k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   236k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   236k|                          basic_contiguous_scan_context<char_type>>) {
  126|   236k|            auto rd = make_reader<T, char_type>();
  127|   236k|            return impl(rd, range, value);
  128|   236k|        }
  129|   236k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   236k|            auto rd = make_reader<T, char_type>();
  131|   236k|            if (!is_segment_contiguous(range)) {
  132|   236k|                return impl(rd, range, value);
  133|   236k|            }
  134|   236k|            auto crange = get_as_contiguous(range);
  135|   236k|            SCN_TRY(it, impl(rd, crange, value));
  136|   236k|            return ranges_polyfill::batch_next(
  137|   236k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   236k|        }
  139|   236k|        else {
  140|   236k|            SCN_EXPECT(false);
  141|   236k|            SCN_UNREACHABLE;
  142|   236k|        }
  143|   236k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   236k|    {
  112|   236k|        SCN_TRY(it,
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.86k, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.86k|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   233k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   233k|                    .transform_error(make_eof_scan_error));
  115|   233k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   233k|                               loc);
  117|   236k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|   493k|    {
  223|   493k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   493k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   493k|                          basic_contiguous_scan_context<char_type>>) {
  227|   493k|            auto rd = make_reader<T, char_type>();
  228|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   493k|            return impl(rd, range, value);
  233|   493k|        }
  234|   493k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   493k|            auto rd = make_reader<T, char_type>();
  236|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   493k|                return unexpected(e);
  238|   493k|            }
  239|       |
  240|   493k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   493k|                return impl(rd, range, value);
  242|   493k|            }
  243|       |
  244|   493k|            auto crange = get_as_contiguous(range);
  245|   493k|            SCN_TRY(it, impl(rd, crange, value));
  246|   493k|            return ranges_polyfill::batch_next(
  247|   493k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   493k|        }
  249|   493k|        else {
  250|   493k|            SCN_EXPECT(false);
  251|   493k|            SCN_UNREACHABLE;
  252|   493k|        }
  253|   493k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   493k|    {
  205|   493k|        SCN_TRY(it,
  ------------------
  |  |   71|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.12k, False: 487k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.12k|    }                                                  \
  |  |  |  |   70|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   487k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   487k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   487k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   487k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 487k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   487k|        return rd.read_specs(subr, specs, value, loc);
  218|   487k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|   530k|    {
  223|   530k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   530k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   530k|                          basic_contiguous_scan_context<char_type>>) {
  227|   530k|            auto rd = make_reader<T, char_type>();
  228|   530k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 530k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   530k|            return impl(rd, range, value);
  233|   530k|        }
  234|   530k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   530k|            auto rd = make_reader<T, char_type>();
  236|   530k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   530k|                return unexpected(e);
  238|   530k|            }
  239|       |
  240|   530k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   530k|                return impl(rd, range, value);
  242|   530k|            }
  243|       |
  244|   530k|            auto crange = get_as_contiguous(range);
  245|   530k|            SCN_TRY(it, impl(rd, crange, value));
  246|   530k|            return ranges_polyfill::batch_next(
  247|   530k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   530k|        }
  249|   530k|        else {
  250|   530k|            SCN_EXPECT(false);
  251|   530k|            SCN_UNREACHABLE;
  252|   530k|        }
  253|   530k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   530k|    {
  205|   530k|        SCN_TRY(it,
  ------------------
  |  |   71|   530k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   530k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   530k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.85k, False: 523k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.85k|    }                                                  \
  |  |  |  |   70|   530k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   523k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   523k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   523k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   523k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 523k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   523k|        return rd.read_specs(subr, specs, value, loc);
  218|   523k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|   537k|    {
  223|   537k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   537k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   537k|                          basic_contiguous_scan_context<char_type>>) {
  227|   537k|            auto rd = make_reader<T, char_type>();
  228|   537k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   537k|            return impl(rd, range, value);
  233|   537k|        }
  234|   537k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   537k|            auto rd = make_reader<T, char_type>();
  236|   537k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   537k|                return unexpected(e);
  238|   537k|            }
  239|       |
  240|   537k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   537k|                return impl(rd, range, value);
  242|   537k|            }
  243|       |
  244|   537k|            auto crange = get_as_contiguous(range);
  245|   537k|            SCN_TRY(it, impl(rd, crange, value));
  246|   537k|            return ranges_polyfill::batch_next(
  247|   537k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   537k|        }
  249|   537k|        else {
  250|   537k|            SCN_EXPECT(false);
  251|   537k|            SCN_UNREACHABLE;
  252|   537k|        }
  253|   537k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   537k|    {
  205|   537k|        SCN_TRY(it,
  ------------------
  |  |   71|   537k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   537k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   537k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.18k, False: 530k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.18k|    }                                                  \
  |  |  |  |   70|   537k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   530k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   530k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   530k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   530k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   530k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 530k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   530k|        return rd.read_specs(subr, specs, value, loc);
  218|   530k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   506k|{
   43|   506k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 132, False: 506k]
  |  |  ------------------
  ------------------
   44|    132|        return unexpected(e);
   45|    132|    }
   46|       |
   47|   506k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 506k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   506k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   506k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  43.4k|    {
  122|  43.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  43.4k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  43.4k|            auto rd = make_reader<T, char_type>();
  127|  43.4k|            return impl(rd, range, value);
  128|  43.4k|        }
  129|  43.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.4k|            auto rd = make_reader<T, char_type>();
  131|  43.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 43.4k, False: 0]
  ------------------
  132|  43.4k|                return impl(rd, range, value);
  133|  43.4k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  43.4k|        else {
  140|  43.4k|            SCN_EXPECT(false);
  141|  43.4k|            SCN_UNREACHABLE;
  142|  43.4k|        }
  143|  43.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  43.4k|    {
  112|  43.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 21, False: 43.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  43.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  43.3k|                    .transform_error(make_eof_scan_error));
  115|  43.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  43.3k|                               loc);
  117|  43.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  43.4k|    {
  122|  43.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  43.4k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  43.4k|            auto rd = make_reader<T, char_type>();
  127|  43.4k|            return impl(rd, range, value);
  128|  43.4k|        }
  129|  43.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.4k|            auto rd = make_reader<T, char_type>();
  131|  43.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 43.4k, False: 0]
  ------------------
  132|  43.4k|                return impl(rd, range, value);
  133|  43.4k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  43.4k|        else {
  140|  43.4k|            SCN_EXPECT(false);
  141|  43.4k|            SCN_UNREACHABLE;
  142|  43.4k|        }
  143|  43.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  43.4k|    {
  112|  43.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 21, False: 43.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  43.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  43.3k|                    .transform_error(make_eof_scan_error));
  115|  43.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  43.3k|                               loc);
  117|  43.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  43.4k|    {
  122|  43.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  43.4k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  43.4k|            auto rd = make_reader<T, char_type>();
  127|  43.4k|            return impl(rd, range, value);
  128|  43.4k|        }
  129|  43.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.4k|            auto rd = make_reader<T, char_type>();
  131|  43.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 43.4k, False: 0]
  ------------------
  132|  43.4k|                return impl(rd, range, value);
  133|  43.4k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  43.4k|        else {
  140|  43.4k|            SCN_EXPECT(false);
  141|  43.4k|            SCN_UNREACHABLE;
  142|  43.4k|        }
  143|  43.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  43.4k|    {
  112|  43.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 21, False: 43.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  43.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  43.3k|                    .transform_error(make_eof_scan_error));
  115|  43.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  43.3k|                               loc);
  117|  43.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   125k|    {
  223|   125k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   125k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   125k|            auto rd = make_reader<T, char_type>();
  228|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   125k|                return unexpected(e);
  230|   125k|            }
  231|       |
  232|   125k|            return impl(rd, range, value);
  233|   125k|        }
  234|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   125k|            auto rd = make_reader<T, char_type>();
  236|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   125k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 125k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   125k|                return impl(rd, range, value);
  242|   125k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   125k|        else {
  250|   125k|            SCN_EXPECT(false);
  251|   125k|            SCN_UNREACHABLE;
  252|   125k|        }
  253|   125k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   125k|    {
  205|   125k|        SCN_TRY(it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 56, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   125k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   125k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   125k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   125k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 125k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   125k|        return rd.read_specs(subr, specs, value, loc);
  218|   125k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   125k|    {
  223|   125k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   125k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   125k|            auto rd = make_reader<T, char_type>();
  228|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   125k|                return unexpected(e);
  230|   125k|            }
  231|       |
  232|   125k|            return impl(rd, range, value);
  233|   125k|        }
  234|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   125k|            auto rd = make_reader<T, char_type>();
  236|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   125k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 125k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   125k|                return impl(rd, range, value);
  242|   125k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   125k|        else {
  250|   125k|            SCN_EXPECT(false);
  251|   125k|            SCN_UNREACHABLE;
  252|   125k|        }
  253|   125k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   125k|    {
  205|   125k|        SCN_TRY(it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 56, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   125k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   125k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   125k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   125k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 125k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   125k|        return rd.read_specs(subr, specs, value, loc);
  218|   125k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   125k|    {
  223|   125k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   125k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   125k|            auto rd = make_reader<T, char_type>();
  228|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   125k|                return unexpected(e);
  230|   125k|            }
  231|       |
  232|   125k|            return impl(rd, range, value);
  233|   125k|        }
  234|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   125k|            auto rd = make_reader<T, char_type>();
  236|   125k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   125k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 125k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   125k|                return impl(rd, range, value);
  242|   125k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   125k|        else {
  250|   125k|            SCN_EXPECT(false);
  251|   125k|            SCN_UNREACHABLE;
  252|   125k|        }
  253|   125k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   125k|    {
  205|   125k|        SCN_TRY(it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 56, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   125k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   125k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   125k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   125k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 125k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   125k|        return rd.read_specs(subr, specs, value, loc);
  218|   125k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.79M|{
  110|  1.79M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.79M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   177k|{
   89|   177k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 177k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   177k|    constexpr auto enc = get_encoding<CharT>();
   94|   177k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   177k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   177k|    }
   97|   177k|    else if constexpr (enc == encoding::utf16) {
   98|   177k|        return simdutf::validate_utf16(
   99|   177k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   177k|    }
  101|   177k|    else if constexpr (enc == encoding::utf32) {
  102|   177k|        return simdutf::validate_utf32(
  103|   177k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   177k|    }
  105|   177k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  88.8k|{
  449|  88.8k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 88.8k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  88.8k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  88.8k|        SCN_EXPECT(output.size() >= input.size());
  455|  88.8k|        std::memcpy(output.data(), input.data(),
  456|  88.8k|                    input.size() * sizeof(SourceCharT));
  457|  88.8k|        return input.size();
  458|  88.8k|    }
  459|       |
  460|  88.8k|    const auto result = [&]() {
  461|  88.8k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  88.8k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  88.8k|        if constexpr (src_enc == encoding::utf8) {
  465|  88.8k|            if constexpr (dest_enc == encoding::utf16) {
  466|  88.8k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  88.8k|                    input.data(), input.size(),
  468|  88.8k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  88.8k|            }
  470|  88.8k|            else {
  471|  88.8k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  88.8k|                    input.data(), input.size(),
  473|  88.8k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  88.8k|            }
  475|  88.8k|        }
  476|  88.8k|        else if constexpr (src_enc == encoding::utf16) {
  477|  88.8k|            if constexpr (dest_enc == encoding::utf8) {
  478|  88.8k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  88.8k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  88.8k|                    input.size(), output.data());
  481|  88.8k|            }
  482|  88.8k|            else {
  483|  88.8k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  88.8k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  88.8k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  88.8k|            }
  487|  88.8k|        }
  488|  88.8k|        else if constexpr (src_enc == encoding::utf32) {
  489|  88.8k|            if constexpr (dest_enc == encoding::utf8) {
  490|  88.8k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  88.8k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  88.8k|                    input.size(), output.data());
  493|  88.8k|            }
  494|  88.8k|            else {
  495|  88.8k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  88.8k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  88.8k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  88.8k|            }
  499|  88.8k|        }
  500|  88.8k|    }();
  501|       |
  502|  88.8k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  157|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 88.8k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|  88.8k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  247|  88.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|  88.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|  88.8k|    return result.count;
  507|  88.8k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  88.8k|    const auto result = [&]() {
  461|  88.8k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  88.8k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  88.8k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  88.8k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  88.8k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  88.8k|                    input.data(), input.size(),
  468|  88.8k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  88.8k|            }
  470|  88.8k|            else {
  471|  88.8k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  88.8k|                    input.data(), input.size(),
  473|  88.8k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  88.8k|            }
  475|  88.8k|        }
  476|  88.8k|        else if constexpr (src_enc == encoding::utf16) {
  477|  88.8k|            if constexpr (dest_enc == encoding::utf8) {
  478|  88.8k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  88.8k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  88.8k|                    input.size(), output.data());
  481|  88.8k|            }
  482|  88.8k|            else {
  483|  88.8k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  88.8k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  88.8k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  88.8k|            }
  487|  88.8k|        }
  488|  88.8k|        else if constexpr (src_enc == encoding::utf32) {
  489|  88.8k|            if constexpr (dest_enc == encoding::utf8) {
  490|  88.8k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  88.8k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  88.8k|                    input.size(), output.data());
  493|  88.8k|            }
  494|  88.8k|            else {
  495|  88.8k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  88.8k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  88.8k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  88.8k|            }
  499|  88.8k|        }
  500|  88.8k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   177k|{
  116|   177k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|   177k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   177k|    constexpr auto enc = get_encoding<CharT>();
  124|   177k|    char32_t output{};
  125|   177k|    size_t ret{};
  126|   177k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   177k|#ifndef NDEBUG
  128|   177k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 177k, False: 0]
  ------------------
  129|   177k|            auto len =
  130|   177k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   177k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  246|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   177k|        }
  133|   177k|#endif
  134|   177k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   177k|    }
  136|   177k|    else if constexpr (enc == encoding::utf16) {
  137|   177k|#ifndef NDEBUG
  138|   177k|        if (validate_unicode(input)) {
  139|   177k|            auto len = simdutf::utf32_length_from_utf16(
  140|   177k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   177k|            SCN_EXPECT(len == 1);
  142|   177k|        }
  143|   177k|#endif
  144|   177k|        ret = simdutf::convert_utf16_to_utf32(
  145|   177k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   177k|    }
  147|   177k|    else if constexpr (enc == encoding::utf32) {
  148|   177k|        output = static_cast<char32_t>(input[0]);
  149|   177k|        ret = output < detail::invalid_code_point;
  150|   177k|    }
  151|       |
  152|   177k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  157|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   177k|    return static_cast<char32_t>(output);
  156|   177k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   982k|{
  263|   982k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   982k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   982k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|   982k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   982k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   982k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 112k, False: 870k]
  |  |  ------------------
  ------------------
  267|   112k|        return {get_start_of_next_code_point(input),
  268|   112k|                detail::invalid_code_point};
  269|   112k|    }
  270|   870k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  157|   870k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.94k, False: 867k]
  |  |  ------------------
  ------------------
  271|  2.94k|        return {input.end(), detail::invalid_code_point};
  272|  2.94k|    }
  273|       |
  274|   867k|    constexpr auto enc = get_encoding<CharT>();
  275|   867k|    std::size_t result{1};
  276|   867k|    char32_t output{};
  277|   867k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   867k|        result = simdutf::convert_utf8_to_utf32(
  279|   867k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   867k|    }
  281|   867k|    else if constexpr (enc == encoding::utf16) {
  282|   867k|        result = simdutf::convert_utf16_to_utf32(
  283|   867k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   867k|    }
  285|   867k|    else if constexpr (enc == encoding::utf32) {
  286|   867k|        SCN_EXPECT(len == 1);
  287|   867k|        output = static_cast<char32_t>(input[0]);
  288|   867k|    }
  289|       |
  290|   867k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  157|   867k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 113k, False: 753k]
  |  |  ------------------
  ------------------
  291|   113k|        return {get_start_of_next_code_point(input.substr(1)),
  292|   113k|                detail::invalid_code_point};
  293|   113k|    }
  294|       |
  295|   753k|    return {input.begin() + len, output};
  296|   867k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|   225k|{
  248|   225k|    auto it = input.begin();
  249|   464k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 363k, False: 101k]
  ------------------
  250|   363k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 124k, False: 239k]
  ------------------
  251|   124k|            break;
  252|   124k|        }
  253|   363k|    }
  254|       |
  255|   225k|    return it;
  256|   225k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  79.9M|{
  110|  79.9M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  79.9M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  5.77M|{
  449|  5.77M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 5.77M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  5.77M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  5.77M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  246|  5.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  5.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|  5.77M|        std::memcpy(output.data(), input.data(),
  456|  5.77M|                    input.size() * sizeof(SourceCharT));
  457|  5.77M|        return input.size();
  458|  5.77M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   795k|{
  116|   795k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   795k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   795k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|   795k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   795k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 795k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   795k|    constexpr auto enc = get_encoding<CharT>();
  124|   795k|    char32_t output{};
  125|   795k|    size_t ret{};
  126|   795k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   795k|#ifndef NDEBUG
  128|   795k|        if (validate_unicode(input)) {
  129|   795k|            auto len =
  130|   795k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   795k|            SCN_EXPECT(len == 1);
  132|   795k|        }
  133|   795k|#endif
  134|   795k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   795k|    }
  136|   795k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|   795k|#ifndef NDEBUG
  138|   795k|        if (validate_unicode(input)) {
  139|   795k|            auto len = simdutf::utf32_length_from_utf16(
  140|   795k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   795k|            SCN_EXPECT(len == 1);
  142|   795k|        }
  143|   795k|#endif
  144|   795k|        ret = simdutf::convert_utf16_to_utf32(
  145|   795k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   795k|    }
  147|   795k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|   795k|        output = static_cast<char32_t>(input[0]);
  149|   795k|        ret = output < detail::invalid_code_point;
  150|   795k|    }
  151|       |
  152|   795k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  157|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 795k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   795k|    return static_cast<char32_t>(output);
  156|   795k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  42.5M|{
   29|       |    // Pattern_White_Space property
   30|  42.5M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 42.3M, False: 195k]
  |  Branch (30:27): [True: 3.04M, False: 39.3M]
  ------------------
   31|  42.5M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 269k, False: 39.2M]
  ------------------
   32|  42.5M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 540k, False: 38.7M]
  ------------------
   33|  42.5M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.92k, False: 38.7M]
  ------------------
   34|  42.5M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 3.23k, False: 38.7M]
  ------------------
   35|  42.5M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 8.96k, False: 38.7M]
  ------------------
   36|  42.5M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 38.7M]
  ------------------
   37|  42.5M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  21.2k|{
   69|  21.2k|    return static_cast<unsigned char>(ch) <= 127;
   70|  21.2k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  21.1k|{
   74|  21.1k|#if WCHAR_MIN < 0
   75|  21.1k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 21.1k, False: 0]
  |  Branch (75:23): [True: 21.1k, False: 83]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  21.1k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  45.9M|{
   58|  45.9M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  45.9M|        static_cast<unsigned char>(ch))];
   60|  45.9M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  8.88M|{
   92|  8.88M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  8.88M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.75M|    {
   57|  1.75M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  5.17M|    {
   61|  5.17M|        return m_current;
   62|  5.17M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.42M|    {
   66|  3.42M|        return m_range.end();
   67|  3.42M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.67M|    {
   81|  1.67M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.67M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.67M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.67M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.67M|        }
   87|  1.67M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.67M|    static_cast<    \
  |  |  251|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.67M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.75M|    {
   71|  1.75M|        return ranges::subrange{begin(), end()};
   72|  1.75M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.56M|    {
   57|  1.56M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.54M|    {
   61|  4.54M|        return m_current;
   62|  4.54M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  2.97M|    {
   66|  2.97M|        return m_range.end();
   67|  2.97M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.41M|    {
   81|  1.41M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.41M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.41M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.41M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.41M|        }
   87|  1.41M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.41M|    static_cast<    \
  |  |  251|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.41M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.56M|    {
   71|  1.56M|        return ranges::subrange{begin(), end()};
   72|  1.56M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.49M|    {
  205|  2.49M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.49M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   235k|    {
  196|   235k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   235k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   235k|              cvref<T> obj = *get<T>(fn);
  187|   235k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   235k|                  obj(static_cast<decltype(args)>(args)...);
  189|   235k|              }
  190|   235k|              else {
  191|   235k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   235k|              }
  193|   235k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   235k|    {
  126|   235k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   235k|            return static_cast<T*>(s.m_cp);
  128|   235k|        }
  129|   235k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   235k|            return static_cast<T*>(s.m_p);
  131|   235k|        }
  132|   235k|        else {
  133|   235k|            return reinterpret_cast<T*>(s.m_fp);
  134|   235k|        }
  135|   235k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  16.5M|    {
  205|  16.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  16.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  16.5M|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.77M|    {
  196|  1.77M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  8.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  8.26M|              cvref<T> obj = *get<T>(fn);
  187|  8.26M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  8.26M|                  obj(static_cast<decltype(args)>(args)...);
  189|  8.26M|              }
  190|  8.26M|              else {
  191|  8.26M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  8.26M|              }
  193|  8.26M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  8.26M|    {
  126|  8.26M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  8.26M|            return static_cast<T*>(s.m_cp);
  128|  8.26M|        }
  129|  8.26M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.26M|            return static_cast<T*>(s.m_p);
  131|  8.26M|        }
  132|  8.26M|        else {
  133|  8.26M|            return reinterpret_cast<T*>(s.m_fp);
  134|  8.26M|        }
  135|  8.26M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.77M|        {
  104|  1.77M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|  3.53k|    {
  196|  3.53k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|  21.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.2k|              cvref<T> obj = *get<T>(fn);
  187|  21.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.2k|              }
  190|  21.2k|              else {
  191|  21.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.2k|              }
  193|  21.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|  21.2k|    {
  126|  21.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.2k|            return static_cast<T*>(s.m_cp);
  128|  21.2k|        }
  129|  21.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.2k|            return static_cast<T*>(s.m_p);
  131|  21.2k|        }
  132|  21.2k|        else {
  133|  21.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.2k|        }
  135|  21.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|  3.53k|        {
  104|  3.53k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|  79.0k|    {
  196|  79.0k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   259k|              cvref<T> obj = *get<T>(fn);
  187|   259k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   259k|                  obj(static_cast<decltype(args)>(args)...);
  189|   259k|              }
  190|   259k|              else {
  191|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   259k|              }
  193|   259k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|   259k|    {
  126|   259k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   259k|            return static_cast<T*>(s.m_cp);
  128|   259k|        }
  129|   259k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   259k|            return static_cast<T*>(s.m_p);
  131|   259k|        }
  132|   259k|        else {
  133|   259k|            return reinterpret_cast<T*>(s.m_fp);
  134|   259k|        }
  135|   259k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|  79.0k|        {
  104|  79.0k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|  1.21M|    {
  196|  1.21M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|  7.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.31M|              cvref<T> obj = *get<T>(fn);
  187|  7.31M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.31M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.31M|              }
  190|  7.31M|              else {
  191|  7.31M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.31M|              }
  193|  7.31M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|  7.31M|    {
  126|  7.31M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.31M|            return static_cast<T*>(s.m_cp);
  128|  7.31M|        }
  129|  7.31M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.31M|            return static_cast<T*>(s.m_p);
  131|  7.31M|        }
  132|  7.31M|        else {
  133|  7.31M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.31M|        }
  135|  7.31M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|  1.21M|        {
  104|  1.21M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   235k|        {
  104|   235k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   262k|    {
  196|   262k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   262k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   262k|              cvref<T> obj = *get<T>(fn);
  187|   262k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   262k|                  obj(static_cast<decltype(args)>(args)...);
  189|   262k|              }
  190|   262k|              else {
  191|   262k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   262k|              }
  193|   262k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   262k|    {
  126|   262k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   262k|            return static_cast<T*>(s.m_cp);
  128|   262k|        }
  129|   262k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   262k|            return static_cast<T*>(s.m_p);
  131|   262k|        }
  132|   262k|        else {
  133|   262k|            return reinterpret_cast<T*>(s.m_fp);
  134|   262k|        }
  135|   262k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   262k|        {
  104|   262k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   267k|    {
  196|   267k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   267k|              cvref<T> obj = *get<T>(fn);
  187|   267k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   267k|                  obj(static_cast<decltype(args)>(args)...);
  189|   267k|              }
  190|   267k|              else {
  191|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   267k|              }
  193|   267k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   267k|    {
  126|   267k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   267k|            return static_cast<T*>(s.m_cp);
  128|   267k|        }
  129|   267k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   267k|            return static_cast<T*>(s.m_p);
  131|   267k|        }
  132|   267k|        else {
  133|   267k|            return reinterpret_cast<T*>(s.m_fp);
  134|   267k|        }
  135|   267k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   267k|        {
  104|   267k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  47.2M|    {
  205|  47.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  47.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  47.2M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.81M|    {
  196|  2.81M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  5.64M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.64M|              cvref<T> obj = *get<T>(fn);
  187|  5.64M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.64M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.64M|              }
  190|  5.64M|              else {
  191|  5.64M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.64M|              }
  193|  5.64M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  5.64M|    {
  126|  5.64M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.64M|            return static_cast<T*>(s.m_cp);
  128|  5.64M|        }
  129|  5.64M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.64M|            return static_cast<T*>(s.m_p);
  131|  5.64M|        }
  132|  5.64M|        else {
  133|  5.64M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.64M|        }
  135|  5.64M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.81M|        {
  104|  2.81M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|  88.8k|    {
  196|  88.8k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   266k|              cvref<T> obj = *get<T>(fn);
  187|   266k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   266k|                  obj(static_cast<decltype(args)>(args)...);
  189|   266k|              }
  190|   266k|              else {
  191|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   266k|              }
  193|   266k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   266k|    {
  126|   266k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   266k|            return static_cast<T*>(s.m_cp);
  128|   266k|        }
  129|   266k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   266k|            return static_cast<T*>(s.m_p);
  131|   266k|        }
  132|   266k|        else {
  133|   266k|            return reinterpret_cast<T*>(s.m_fp);
  134|   266k|        }
  135|   266k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|  88.8k|        {
  104|  88.8k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   282k|    {
  205|   282k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   282k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  24.2k|    {
  196|  24.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  24.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  24.2k|              cvref<T> obj = *get<T>(fn);
  187|  24.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  24.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  24.2k|              }
  190|  24.2k|              else {
  191|  24.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  24.2k|              }
  193|  24.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  24.2k|    {
  126|  24.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  24.2k|            return static_cast<T*>(s.m_cp);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            return static_cast<T*>(s.m_p);
  131|  24.2k|        }
  132|  24.2k|        else {
  133|  24.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  24.2k|        }
  135|  24.2k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  80.7k|    {
  196|  80.7k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   113k|              cvref<T> obj = *get<T>(fn);
  187|   113k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   113k|                  obj(static_cast<decltype(args)>(args)...);
  189|   113k|              }
  190|   113k|              else {
  191|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   113k|              }
  193|   113k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|   113k|    {
  126|   113k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   113k|            return static_cast<T*>(s.m_cp);
  128|   113k|        }
  129|   113k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   113k|            return static_cast<T*>(s.m_p);
  131|   113k|        }
  132|   113k|        else {
  133|   113k|            return reinterpret_cast<T*>(s.m_fp);
  134|   113k|        }
  135|   113k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  80.7k|        {
  104|  80.7k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|   395k|    {
  196|   395k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   557k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   557k|              cvref<T> obj = *get<T>(fn);
  187|   557k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   557k|                  obj(static_cast<decltype(args)>(args)...);
  189|   557k|              }
  190|   557k|              else {
  191|   557k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   557k|              }
  193|   557k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|   557k|    {
  126|   557k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   557k|            return static_cast<T*>(s.m_cp);
  128|   557k|        }
  129|   557k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   557k|            return static_cast<T*>(s.m_p);
  131|   557k|        }
  132|   557k|        else {
  133|   557k|            return reinterpret_cast<T*>(s.m_fp);
  134|   557k|        }
  135|   557k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|   395k|        {
  104|   395k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  24.2k|        {
  104|  24.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  24.2k|    {
  196|  24.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  24.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  24.2k|              cvref<T> obj = *get<T>(fn);
  187|  24.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  24.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  24.2k|              }
  190|  24.2k|              else {
  191|  24.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  24.2k|              }
  193|  24.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  24.2k|    {
  126|  24.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  24.2k|            return static_cast<T*>(s.m_cp);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            return static_cast<T*>(s.m_p);
  131|  24.2k|        }
  132|  24.2k|        else {
  133|  24.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  24.2k|        }
  135|  24.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  24.2k|        {
  104|  24.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  24.2k|    {
  196|  24.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  24.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  24.2k|              cvref<T> obj = *get<T>(fn);
  187|  24.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  24.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  24.2k|              }
  190|  24.2k|              else {
  191|  24.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  24.2k|              }
  193|  24.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  24.2k|    {
  126|  24.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  24.2k|            return static_cast<T*>(s.m_cp);
  128|  24.2k|        }
  129|  24.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.2k|            return static_cast<T*>(s.m_p);
  131|  24.2k|        }
  132|  24.2k|        else {
  133|  24.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  24.2k|        }
  135|  24.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  24.2k|        {
  104|  24.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   157k|    {
  196|   157k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   157k|              cvref<T> obj = *get<T>(fn);
  187|   157k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   157k|                  obj(static_cast<decltype(args)>(args)...);
  189|   157k|              }
  190|   157k|              else {
  191|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   157k|              }
  193|   157k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   157k|    {
  126|   157k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   157k|            return static_cast<T*>(s.m_cp);
  128|   157k|        }
  129|   157k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   157k|            return static_cast<T*>(s.m_p);
  131|   157k|        }
  132|   157k|        else {
  133|   157k|            return reinterpret_cast<T*>(s.m_fp);
  134|   157k|        }
  135|   157k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   157k|        {
  104|   157k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   388k|    {
  196|   388k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   388k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   388k|              cvref<T> obj = *get<T>(fn);
  187|   388k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   388k|                  obj(static_cast<decltype(args)>(args)...);
  189|   388k|              }
  190|   388k|              else {
  191|   388k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   388k|              }
  193|   388k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   388k|    {
  126|   388k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   388k|            return static_cast<T*>(s.m_cp);
  128|   388k|        }
  129|   388k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   388k|            return static_cast<T*>(s.m_p);
  131|   388k|        }
  132|   388k|        else {
  133|   388k|            return reinterpret_cast<T*>(s.m_fp);
  134|   388k|        }
  135|   388k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   388k|        {
  104|   388k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   175k|    {
  196|   175k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   175k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   175k|              cvref<T> obj = *get<T>(fn);
  187|   175k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   175k|                  obj(static_cast<decltype(args)>(args)...);
  189|   175k|              }
  190|   175k|              else {
  191|   175k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   175k|              }
  193|   175k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   175k|    {
  126|   175k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   175k|            return static_cast<T*>(s.m_cp);
  128|   175k|        }
  129|   175k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   175k|            return static_cast<T*>(s.m_p);
  131|   175k|        }
  132|   175k|        else {
  133|   175k|            return reinterpret_cast<T*>(s.m_fp);
  134|   175k|        }
  135|   175k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   175k|        {
  104|   175k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   415k|    {
  196|   415k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   415k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   415k|              cvref<T> obj = *get<T>(fn);
  187|   415k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   415k|                  obj(static_cast<decltype(args)>(args)...);
  189|   415k|              }
  190|   415k|              else {
  191|   415k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   415k|              }
  193|   415k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   415k|    {
  126|   415k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   415k|            return static_cast<T*>(s.m_cp);
  128|   415k|        }
  129|   415k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   415k|            return static_cast<T*>(s.m_p);
  131|   415k|        }
  132|   415k|        else {
  133|   415k|            return reinterpret_cast<T*>(s.m_fp);
  134|   415k|        }
  135|   415k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   415k|        {
  104|   415k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   178k|    {
  196|   178k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   178k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   178k|              cvref<T> obj = *get<T>(fn);
  187|   178k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   178k|                  obj(static_cast<decltype(args)>(args)...);
  189|   178k|              }
  190|   178k|              else {
  191|   178k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   178k|              }
  193|   178k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   178k|    {
  126|   178k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   178k|            return static_cast<T*>(s.m_cp);
  128|   178k|        }
  129|   178k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   178k|            return static_cast<T*>(s.m_p);
  131|   178k|        }
  132|   178k|        else {
  133|   178k|            return reinterpret_cast<T*>(s.m_fp);
  134|   178k|        }
  135|   178k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   178k|        {
  104|   178k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   419k|    {
  196|   419k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   419k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   419k|              cvref<T> obj = *get<T>(fn);
  187|   419k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   419k|                  obj(static_cast<decltype(args)>(args)...);
  189|   419k|              }
  190|   419k|              else {
  191|   419k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   419k|              }
  193|   419k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   419k|    {
  126|   419k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   419k|            return static_cast<T*>(s.m_cp);
  128|   419k|        }
  129|   419k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   419k|            return static_cast<T*>(s.m_p);
  131|   419k|        }
  132|   419k|        else {
  133|   419k|            return reinterpret_cast<T*>(s.m_fp);
  134|   419k|        }
  135|   419k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   419k|        {
  104|   419k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  16.1k|    {
  196|  16.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  16.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  16.1k|              cvref<T> obj = *get<T>(fn);
  187|  16.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  16.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  16.1k|              }
  190|  16.1k|              else {
  191|  16.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  16.1k|              }
  193|  16.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  16.1k|    {
  126|  16.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  16.1k|            return static_cast<T*>(s.m_cp);
  128|  16.1k|        }
  129|  16.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  16.1k|            return static_cast<T*>(s.m_p);
  131|  16.1k|        }
  132|  16.1k|        else {
  133|  16.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  16.1k|        }
  135|  16.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  16.1k|        {
  104|  16.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  53.8k|    {
  196|  53.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  53.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  53.8k|              cvref<T> obj = *get<T>(fn);
  187|  53.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  53.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  53.8k|              }
  190|  53.8k|              else {
  191|  53.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  53.8k|              }
  193|  53.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  53.8k|    {
  126|  53.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  53.8k|            return static_cast<T*>(s.m_cp);
  128|  53.8k|        }
  129|  53.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  53.8k|            return static_cast<T*>(s.m_p);
  131|  53.8k|        }
  132|  53.8k|        else {
  133|  53.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  53.8k|        }
  135|  53.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  53.8k|        {
  104|  53.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  16.1k|    {
  196|  16.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  16.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  16.1k|              cvref<T> obj = *get<T>(fn);
  187|  16.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  16.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  16.1k|              }
  190|  16.1k|              else {
  191|  16.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  16.1k|              }
  193|  16.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  16.1k|    {
  126|  16.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  16.1k|            return static_cast<T*>(s.m_cp);
  128|  16.1k|        }
  129|  16.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  16.1k|            return static_cast<T*>(s.m_p);
  131|  16.1k|        }
  132|  16.1k|        else {
  133|  16.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  16.1k|        }
  135|  16.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  16.1k|        {
  104|  16.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  53.8k|    {
  196|  53.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  53.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  53.8k|              cvref<T> obj = *get<T>(fn);
  187|  53.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  53.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  53.8k|              }
  190|  53.8k|              else {
  191|  53.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  53.8k|              }
  193|  53.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  53.8k|    {
  126|  53.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  53.8k|            return static_cast<T*>(s.m_cp);
  128|  53.8k|        }
  129|  53.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  53.8k|            return static_cast<T*>(s.m_p);
  131|  53.8k|        }
  132|  53.8k|        else {
  133|  53.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  53.8k|        }
  135|  53.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  53.8k|        {
  104|  53.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  16.1k|    {
  196|  16.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  16.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  16.1k|              cvref<T> obj = *get<T>(fn);
  187|  16.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  16.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  16.1k|              }
  190|  16.1k|              else {
  191|  16.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  16.1k|              }
  193|  16.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  16.1k|    {
  126|  16.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  16.1k|            return static_cast<T*>(s.m_cp);
  128|  16.1k|        }
  129|  16.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  16.1k|            return static_cast<T*>(s.m_p);
  131|  16.1k|        }
  132|  16.1k|        else {
  133|  16.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  16.1k|        }
  135|  16.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  16.1k|        {
  104|  16.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  53.8k|    {
  196|  53.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  53.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  53.8k|              cvref<T> obj = *get<T>(fn);
  187|  53.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  53.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  53.8k|              }
  190|  53.8k|              else {
  191|  53.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  53.8k|              }
  193|  53.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  53.8k|    {
  126|  53.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  53.8k|            return static_cast<T*>(s.m_cp);
  128|  53.8k|        }
  129|  53.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  53.8k|            return static_cast<T*>(s.m_p);
  131|  53.8k|        }
  132|  53.8k|        else {
  133|  53.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  53.8k|        }
  135|  53.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  53.8k|        {
  104|  53.8k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.21M|    {
  196|  2.21M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  4.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.07M|              cvref<T> obj = *get<T>(fn);
  187|  4.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.07M|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.07M|              }
  190|  4.07M|              else {
  191|  4.07M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.07M|              }
  193|  4.07M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  4.07M|    {
  126|  4.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.07M|            return static_cast<T*>(s.m_cp);
  128|  4.07M|        }
  129|  4.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  4.07M|            return static_cast<T*>(s.m_p);
  131|  4.07M|        }
  132|  4.07M|        else {
  133|  4.07M|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.07M|        }
  135|  4.07M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.21M|        {
  104|  2.21M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.21M|    {
  205|  2.21M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.21M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   207k|    {
  196|   207k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   207k|              cvref<T> obj = *get<T>(fn);
  187|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   207k|                  obj(static_cast<decltype(args)>(args)...);
  189|   207k|              }
  190|   207k|              else {
  191|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   207k|              }
  193|   207k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   207k|    {
  126|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   207k|            return static_cast<T*>(s.m_cp);
  128|   207k|        }
  129|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   207k|            return static_cast<T*>(s.m_p);
  131|   207k|        }
  132|   207k|        else {
  133|   207k|            return reinterpret_cast<T*>(s.m_fp);
  134|   207k|        }
  135|   207k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  15.0M|    {
  205|  15.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  15.0M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.99M|    {
  196|  1.99M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  7.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.54M|              cvref<T> obj = *get<T>(fn);
  187|  7.54M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.54M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.54M|              }
  190|  7.54M|              else {
  191|  7.54M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.54M|              }
  193|  7.54M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  7.54M|    {
  126|  7.54M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.54M|            return static_cast<T*>(s.m_cp);
  128|  7.54M|        }
  129|  7.54M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.54M|            return static_cast<T*>(s.m_p);
  131|  7.54M|        }
  132|  7.54M|        else {
  133|  7.54M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.54M|        }
  135|  7.54M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.99M|        {
  104|  1.99M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_:
  195|  3.46k|    {
  196|  3.46k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.1k|              cvref<T> obj = *get<T>(fn);
  187|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.1k|              }
  190|  21.1k|              else {
  191|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.1k|              }
  193|  21.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlwE_EEDaNS3_7storageE:
  125|  21.1k|    {
  126|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.1k|            return static_cast<T*>(s.m_cp);
  128|  21.1k|        }
  129|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.1k|            return static_cast<T*>(s.m_p);
  131|  21.1k|        }
  132|  21.1k|        else {
  133|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.1k|        }
  135|  21.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_LPv0EEEPSK_:
  103|  3.46k|        {
  104|  3.46k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  69.8k|    {
  196|  69.8k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   223k|              cvref<T> obj = *get<T>(fn);
  187|   223k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   223k|                  obj(static_cast<decltype(args)>(args)...);
  189|   223k|              }
  190|   223k|              else {
  191|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   223k|              }
  193|   223k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|   223k|    {
  126|   223k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   223k|            return static_cast<T*>(s.m_cp);
  128|   223k|        }
  129|   223k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   223k|            return static_cast<T*>(s.m_p);
  131|   223k|        }
  132|   223k|        else {
  133|   223k|            return reinterpret_cast<T*>(s.m_fp);
  134|   223k|        }
  135|   223k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  69.8k|        {
  104|  69.8k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|  1.06M|    {
  196|  1.06M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|  5.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.75M|              cvref<T> obj = *get<T>(fn);
  187|  5.75M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.75M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.75M|              }
  190|  5.75M|              else {
  191|  5.75M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.75M|              }
  193|  5.75M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|  5.75M|    {
  126|  5.75M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.75M|            return static_cast<T*>(s.m_cp);
  128|  5.75M|        }
  129|  5.75M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.75M|            return static_cast<T*>(s.m_p);
  131|  5.75M|        }
  132|  5.75M|        else {
  133|  5.75M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.75M|        }
  135|  5.75M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|  1.06M|        {
  104|  1.06M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   207k|        {
  104|   207k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   229k|    {
  196|   229k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   229k|              cvref<T> obj = *get<T>(fn);
  187|   229k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   229k|                  obj(static_cast<decltype(args)>(args)...);
  189|   229k|              }
  190|   229k|              else {
  191|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   229k|              }
  193|   229k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   229k|    {
  126|   229k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   229k|            return static_cast<T*>(s.m_cp);
  128|   229k|        }
  129|   229k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   229k|            return static_cast<T*>(s.m_p);
  131|   229k|        }
  132|   229k|        else {
  133|   229k|            return reinterpret_cast<T*>(s.m_fp);
  134|   229k|        }
  135|   229k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   229k|        {
  104|   229k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   233k|    {
  196|   233k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   233k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   233k|              cvref<T> obj = *get<T>(fn);
  187|   233k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   233k|                  obj(static_cast<decltype(args)>(args)...);
  189|   233k|              }
  190|   233k|              else {
  191|   233k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   233k|              }
  193|   233k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   233k|    {
  126|   233k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   233k|            return static_cast<T*>(s.m_cp);
  128|   233k|        }
  129|   233k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   233k|            return static_cast<T*>(s.m_p);
  131|   233k|        }
  132|   233k|        else {
  133|   233k|            return reinterpret_cast<T*>(s.m_fp);
  134|   233k|        }
  135|   233k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   233k|        {
  104|   233k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   138k|    {
  196|   138k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   138k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   138k|              cvref<T> obj = *get<T>(fn);
  187|   138k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   138k|                  obj(static_cast<decltype(args)>(args)...);
  189|   138k|              }
  190|   138k|              else {
  191|   138k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   138k|              }
  193|   138k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   138k|    {
  126|   138k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   138k|            return static_cast<T*>(s.m_cp);
  128|   138k|        }
  129|   138k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   138k|            return static_cast<T*>(s.m_p);
  131|   138k|        }
  132|   138k|        else {
  133|   138k|            return reinterpret_cast<T*>(s.m_fp);
  134|   138k|        }
  135|   138k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   138k|        {
  104|   138k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   349k|    {
  196|   349k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   349k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   349k|              cvref<T> obj = *get<T>(fn);
  187|   349k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   349k|                  obj(static_cast<decltype(args)>(args)...);
  189|   349k|              }
  190|   349k|              else {
  191|   349k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   349k|              }
  193|   349k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   349k|    {
  126|   349k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   349k|            return static_cast<T*>(s.m_cp);
  128|   349k|        }
  129|   349k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   349k|            return static_cast<T*>(s.m_p);
  131|   349k|        }
  132|   349k|        else {
  133|   349k|            return reinterpret_cast<T*>(s.m_fp);
  134|   349k|        }
  135|   349k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   349k|        {
  104|   349k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   152k|    {
  196|   152k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   152k|              cvref<T> obj = *get<T>(fn);
  187|   152k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   152k|                  obj(static_cast<decltype(args)>(args)...);
  189|   152k|              }
  190|   152k|              else {
  191|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   152k|              }
  193|   152k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   152k|    {
  126|   152k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   152k|            return static_cast<T*>(s.m_cp);
  128|   152k|        }
  129|   152k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   152k|            return static_cast<T*>(s.m_p);
  131|   152k|        }
  132|   152k|        else {
  133|   152k|            return reinterpret_cast<T*>(s.m_fp);
  134|   152k|        }
  135|   152k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   152k|        {
  104|   152k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   370k|    {
  196|   370k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   370k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   370k|              cvref<T> obj = *get<T>(fn);
  187|   370k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   370k|                  obj(static_cast<decltype(args)>(args)...);
  189|   370k|              }
  190|   370k|              else {
  191|   370k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   370k|              }
  193|   370k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   370k|    {
  126|   370k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   370k|            return static_cast<T*>(s.m_cp);
  128|   370k|        }
  129|   370k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   370k|            return static_cast<T*>(s.m_p);
  131|   370k|        }
  132|   370k|        else {
  133|   370k|            return reinterpret_cast<T*>(s.m_fp);
  134|   370k|        }
  135|   370k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   370k|        {
  104|   370k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   155k|    {
  196|   155k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   155k|              cvref<T> obj = *get<T>(fn);
  187|   155k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   155k|                  obj(static_cast<decltype(args)>(args)...);
  189|   155k|              }
  190|   155k|              else {
  191|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   155k|              }
  193|   155k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   155k|    {
  126|   155k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   155k|            return static_cast<T*>(s.m_cp);
  128|   155k|        }
  129|   155k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   155k|            return static_cast<T*>(s.m_p);
  131|   155k|        }
  132|   155k|        else {
  133|   155k|            return reinterpret_cast<T*>(s.m_fp);
  134|   155k|        }
  135|   155k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   155k|        {
  104|   155k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   374k|    {
  196|   374k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   374k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   374k|              cvref<T> obj = *get<T>(fn);
  187|   374k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   374k|                  obj(static_cast<decltype(args)>(args)...);
  189|   374k|              }
  190|   374k|              else {
  191|   374k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   374k|              }
  193|   374k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   374k|    {
  126|   374k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   374k|            return static_cast<T*>(s.m_cp);
  128|   374k|        }
  129|   374k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   374k|            return static_cast<T*>(s.m_p);
  131|   374k|        }
  132|   374k|        else {
  133|   374k|            return reinterpret_cast<T*>(s.m_fp);
  134|   374k|        }
  135|   374k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   374k|        {
  104|   374k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   506k|    {
  196|   506k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  1.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.30M|              cvref<T> obj = *get<T>(fn);
  187|  1.30M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.30M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.30M|              }
  190|  1.30M|              else {
  191|  1.30M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.30M|              }
  193|  1.30M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  1.30M|    {
  126|  1.30M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.30M|            return static_cast<T*>(s.m_cp);
  128|  1.30M|        }
  129|  1.30M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.30M|            return static_cast<T*>(s.m_p);
  131|  1.30M|        }
  132|  1.30M|        else {
  133|  1.30M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.30M|        }
  135|  1.30M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   506k|        {
  104|   506k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   506k|    {
  205|   506k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   506k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  43.3k|    {
  196|  43.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  43.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  43.3k|              cvref<T> obj = *get<T>(fn);
  187|  43.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  43.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  43.3k|              }
  190|  43.3k|              else {
  191|  43.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  43.3k|              }
  193|  43.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  43.3k|    {
  126|  43.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  43.3k|            return static_cast<T*>(s.m_cp);
  128|  43.3k|        }
  129|  43.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.3k|            return static_cast<T*>(s.m_p);
  131|  43.3k|        }
  132|  43.3k|        else {
  133|  43.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  43.3k|        }
  135|  43.3k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   144k|    {
  196|   144k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   260k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   260k|              cvref<T> obj = *get<T>(fn);
  187|   260k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   260k|                  obj(static_cast<decltype(args)>(args)...);
  189|   260k|              }
  190|   260k|              else {
  191|   260k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   260k|              }
  193|   260k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   260k|    {
  126|   260k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   260k|            return static_cast<T*>(s.m_cp);
  128|   260k|        }
  129|   260k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   260k|            return static_cast<T*>(s.m_p);
  131|   260k|        }
  132|   260k|        else {
  133|   260k|            return reinterpret_cast<T*>(s.m_fp);
  134|   260k|        }
  135|   260k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   144k|        {
  104|   144k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   708k|    {
  196|   708k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|  1.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.28M|              cvref<T> obj = *get<T>(fn);
  187|  1.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.28M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.28M|              }
  190|  1.28M|              else {
  191|  1.28M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.28M|              }
  193|  1.28M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|  1.28M|    {
  126|  1.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.28M|            return static_cast<T*>(s.m_cp);
  128|  1.28M|        }
  129|  1.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.28M|            return static_cast<T*>(s.m_p);
  131|  1.28M|        }
  132|  1.28M|        else {
  133|  1.28M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.28M|        }
  135|  1.28M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   708k|        {
  104|   708k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  43.3k|        {
  104|  43.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  43.3k|    {
  196|  43.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  43.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  43.3k|              cvref<T> obj = *get<T>(fn);
  187|  43.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  43.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  43.3k|              }
  190|  43.3k|              else {
  191|  43.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  43.3k|              }
  193|  43.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  43.3k|    {
  126|  43.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  43.3k|            return static_cast<T*>(s.m_cp);
  128|  43.3k|        }
  129|  43.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.3k|            return static_cast<T*>(s.m_p);
  131|  43.3k|        }
  132|  43.3k|        else {
  133|  43.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  43.3k|        }
  135|  43.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  43.3k|        {
  104|  43.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  43.3k|    {
  196|  43.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  43.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  43.3k|              cvref<T> obj = *get<T>(fn);
  187|  43.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  43.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  43.3k|              }
  190|  43.3k|              else {
  191|  43.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  43.3k|              }
  193|  43.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  43.3k|    {
  126|  43.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  43.3k|            return static_cast<T*>(s.m_cp);
  128|  43.3k|        }
  129|  43.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.3k|            return static_cast<T*>(s.m_p);
  131|  43.3k|        }
  132|  43.3k|        else {
  133|  43.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  43.3k|        }
  135|  43.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  43.3k|        {
  104|  43.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  28.9k|    {
  196|  28.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.9k|              cvref<T> obj = *get<T>(fn);
  187|  28.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.9k|              }
  190|  28.9k|              else {
  191|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.9k|              }
  193|  28.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.9k|    {
  126|  28.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.9k|            return static_cast<T*>(s.m_cp);
  128|  28.9k|        }
  129|  28.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.9k|            return static_cast<T*>(s.m_p);
  131|  28.9k|        }
  132|  28.9k|        else {
  133|  28.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.9k|        }
  135|  28.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  28.9k|        {
  104|  28.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  96.4k|    {
  196|  96.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  96.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  96.4k|              cvref<T> obj = *get<T>(fn);
  187|  96.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  96.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  96.4k|              }
  190|  96.4k|              else {
  191|  96.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  96.4k|              }
  193|  96.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  96.4k|    {
  126|  96.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  96.4k|            return static_cast<T*>(s.m_cp);
  128|  96.4k|        }
  129|  96.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  96.4k|            return static_cast<T*>(s.m_p);
  131|  96.4k|        }
  132|  96.4k|        else {
  133|  96.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  96.4k|        }
  135|  96.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  96.4k|        {
  104|  96.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  28.9k|    {
  196|  28.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.9k|              cvref<T> obj = *get<T>(fn);
  187|  28.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.9k|              }
  190|  28.9k|              else {
  191|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.9k|              }
  193|  28.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.9k|    {
  126|  28.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.9k|            return static_cast<T*>(s.m_cp);
  128|  28.9k|        }
  129|  28.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.9k|            return static_cast<T*>(s.m_p);
  131|  28.9k|        }
  132|  28.9k|        else {
  133|  28.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.9k|        }
  135|  28.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  28.9k|        {
  104|  28.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  96.4k|    {
  196|  96.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  96.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  96.4k|              cvref<T> obj = *get<T>(fn);
  187|  96.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  96.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  96.4k|              }
  190|  96.4k|              else {
  191|  96.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  96.4k|              }
  193|  96.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  96.4k|    {
  126|  96.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  96.4k|            return static_cast<T*>(s.m_cp);
  128|  96.4k|        }
  129|  96.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  96.4k|            return static_cast<T*>(s.m_p);
  131|  96.4k|        }
  132|  96.4k|        else {
  133|  96.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  96.4k|        }
  135|  96.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  96.4k|        {
  104|  96.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  28.9k|    {
  196|  28.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  28.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.9k|              cvref<T> obj = *get<T>(fn);
  187|  28.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.9k|              }
  190|  28.9k|              else {
  191|  28.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.9k|              }
  193|  28.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.9k|    {
  126|  28.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.9k|            return static_cast<T*>(s.m_cp);
  128|  28.9k|        }
  129|  28.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.9k|            return static_cast<T*>(s.m_p);
  131|  28.9k|        }
  132|  28.9k|        else {
  133|  28.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.9k|        }
  135|  28.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  28.9k|        {
  104|  28.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  96.4k|    {
  196|  96.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  96.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  96.4k|              cvref<T> obj = *get<T>(fn);
  187|  96.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  96.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  96.4k|              }
  190|  96.4k|              else {
  191|  96.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  96.4k|              }
  193|  96.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  96.4k|    {
  126|  96.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  96.4k|            return static_cast<T*>(s.m_cp);
  128|  96.4k|        }
  129|  96.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  96.4k|            return static_cast<T*>(s.m_p);
  131|  96.4k|        }
  132|  96.4k|        else {
  133|  96.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  96.4k|        }
  135|  96.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  96.4k|        {
  104|  96.4k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|  1.15M|    {
  196|  1.15M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  35.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  35.9M|              cvref<T> obj = *get<T>(fn);
  187|  35.9M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  35.9M|                  obj(static_cast<decltype(args)>(args)...);
  189|  35.9M|              }
  190|  35.9M|              else {
  191|  35.9M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  35.9M|              }
  193|  35.9M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  35.9M|    {
  126|  35.9M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  35.9M|            return static_cast<T*>(s.m_cp);
  128|  35.9M|        }
  129|  35.9M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  35.9M|            return static_cast<T*>(s.m_p);
  131|  35.9M|        }
  132|  35.9M|        else {
  133|  35.9M|            return reinterpret_cast<T*>(s.m_fp);
  134|  35.9M|        }
  135|  35.9M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|  1.15M|        {
  104|  1.15M|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  54.5k|{
   44|  54.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|  54.5k|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  54.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  19.7M|{
   30|  19.7M|    return e != eof_error::good;
   31|  19.7M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   162k|{
   91|   162k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|   162k|    return parse_error::eof;
   93|   162k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  15.3M|    {
   69|  15.3M|        return a.m_code == b.m_code;
   70|  15.3M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  38.2M|    {
   55|  38.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  38.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  38.2M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  5.58M|    return [code, msg](parse_error err) {
  115|  5.58M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.58M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  5.58M|{
  100|  5.58M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 5.58M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  5.58M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 61.8k, False: 5.52M]
  ------------------
  105|  61.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|  61.8k|    }
  107|       |
  108|  5.52M|    return scan_error{code, msg};
  109|  5.58M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  5.58M|{
  114|  5.58M|    return [code, msg](parse_error err) {
  115|  5.58M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.58M|    };
  117|  5.58M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.13M|{
  587|  1.13M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.13M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   129k|{
  595|   129k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   129k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   129k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 80.7k, False: 48.4k]
  |  |  ------------------
  ------------------
  597|  80.7k|        source.sync(*n);
  598|  80.7k|    }
  599|  48.4k|    else {
  600|  48.4k|        source.sync_all();
  601|  48.4k|    }
  602|   129k|    return n;
  603|   129k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.00M|{
  611|  1.00M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.00M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   231k|{
  619|   231k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   231k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   231k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 144k, False: 86.8k]
  |  |  ------------------
  ------------------
  621|   144k|        source.sync(*n);
  622|   144k|    }
  623|  86.8k|    else {
  624|  86.8k|        source.sync_all();
  625|  86.8k|    }
  626|   231k|    return n;
  627|   231k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.13M|{
  544|  1.13M|    return vscan_internal(source, format, args);
  545|  1.13M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   129k|{
  550|   129k|    auto n = vscan_internal(source, format, args);
  551|   129k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   129k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 80.7k, False: 48.4k]
  |  |  ------------------
  ------------------
  552|  80.7k|        source.sync(*n);
  553|  80.7k|    }
  554|  48.4k|    else {
  555|  48.4k|        source.sync_all();
  556|  48.4k|    }
  557|   129k|    return n;
  558|   129k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.00M|{
  564|  1.00M|    return vscan_internal(source, format, args);
  565|  1.00M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   231k|{
  570|   231k|    auto n = vscan_internal(source, format, args);
  571|   231k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   231k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 144k, False: 86.8k]
  |  |  ------------------
  ------------------
  572|   144k|        source.sync(*n);
  573|   144k|    }
  574|  86.8k|    else {
  575|  86.8k|        source.sync_all();
  576|  86.8k|    }
  577|   231k|    return n;
  578|   231k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   257k|{
  654|   257k|    return vscan_value_internal(source, arg);
  655|   257k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  24.2k|{
  659|  24.2k|    auto n = vscan_value_internal(source, arg);
  660|  24.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  24.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 16.1k, False: 8.07k]
  |  |  ------------------
  ------------------
  661|  16.1k|        source.sync(*n);
  662|  16.1k|    }
  663|  8.07k|    else {
  664|  8.07k|        source.sync_all();
  665|  8.07k|    }
  666|  24.2k|    return n;
  667|  24.2k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   226k|{
  673|   226k|    return vscan_value_internal(source, arg);
  674|   226k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  43.4k|{
  679|  43.4k|    auto n = vscan_value_internal(source, arg);
  680|  43.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  43.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 28.9k, False: 14.4k]
  |  |  ------------------
  ------------------
  681|  28.9k|        source.sync(*n);
  682|  28.9k|    }
  683|  14.4k|    else {
  684|  14.4k|        source.sync_all();
  685|  14.4k|    }
  686|  43.4k|    return n;
  687|  43.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   258k|{
  476|   258k|    const auto argcount = args.size();
  477|   258k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 48.4k, False: 210k]
  |  Branch (477:60): [True: 48.4k, False: 0]
  ------------------
  478|  48.4k|        auto arg = args.get(0);
  479|  48.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  48.4k|    static_cast<    \
  |  |  251|  48.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  48.4k|    }
  481|       |
  482|   210k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 210k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   210k|    SCN_UNLIKELY_ATTR
  490|   210k|    {
  491|   210k|        auto handler = format_handler<false, CharT>{
  492|   210k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   210k|        return vscan_parse_format_string(format, handler);
  494|   210k|    }
  495|   210k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.52M|{
   36|  2.52M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.96M, False: 563k]
  ------------------
   37|  1.96M|        return false;
   38|  1.96M|    }
   39|   563k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 563k, False: 0]
  |  Branch (39:39): [True: 563k, False: 0]
  ------------------
   40|  2.52M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  72.6k|{
   69|  72.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  72.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|  72.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  72.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  72.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|  72.6k|    static_cast<    \
  |  |  251|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  72.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  72.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 24.2k, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.2k|    }                                                  \
  |  |  |  |   70|  72.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  48.4k|    return it.position();
   86|  72.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.75M|    {
  314|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  3.90M|    {
  133|  3.90M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  157|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.90M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  3.90M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.75M|    {
  264|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.75M|{
  441|  1.75M|    const auto beg = handler.get_ctx().begin();
  442|  1.75M|    detail::parse_format_string<false>(format, handler);
  443|  1.75M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.7k, False: 1.67M]
  |  |  ------------------
  ------------------
  444|  80.7k|        return unexpected(handler.error);
  445|  80.7k|    }
  446|  1.67M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.75M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  12.1M|    {
  425|  12.1M|        return ctx.get();
  426|  12.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  12.1M|    {
  268|  12.1M|        return contiguous_ctx;
  269|  12.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.42M|    {
  318|  3.42M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.42M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.75M|{
   92|  1.75M|    auto arg = ctx.arg(id);
   93|  1.75M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.75M|    return arg;
   97|  1.75M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  3.90M|    {
  208|  3.90M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.90M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  3.90M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  157|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.90M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  3.90M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  3.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 3.90M, False: 0]
  |  |  ------------------
  ------------------
  218|  3.90M|            visited_args_lower64 |= (1ull << id);
  219|  3.90M|            return;
  220|  3.90M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  3.90M|    {
  193|  3.90M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.90M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  3.90M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  3.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 3.90M, False: 0]
  |  |  ------------------
  ------------------
  199|  3.90M|            return (visited_args_lower64 >> id) & 1ull;
  200|  3.90M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  3.90M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   451k|    {
  177|   451k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  157|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 451k, False: 0]
  |  |  ------------------
  ------------------
  178|   451k|            error = err;
  179|   451k|        }
  180|   451k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.75M|    {
  347|  1.75M|        return parse_ctx.next_arg_id();
  348|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.75M|    {
  388|  1.75M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.75M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.75M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.75M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.75M|        auto specs = detail::format_specs{};
  401|  1.75M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.75M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.75M|            arg.type()};
  404|       |
  405|  1.75M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.75M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.75M]
  |  Branch (406:29): [True: 0, False: 1.75M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.75M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.75M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.75M|        on_visit_scan_arg(
  417|  1.75M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.75M|                                           get_ctx().locale()},
  419|  1.75M|            arg);
  420|  1.75M|        return parse_ctx.begin();
  421|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.75M|    {
  112|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.75M|    {
  359|  1.75M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.75M]
  |  Branch (359:23): [True: 0, False: 1.75M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.75M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.75M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.7k, False: 1.67M]
  |  |  ------------------
  ------------------
  366|  80.7k|            on_error(r.error());
  367|  80.7k|        }
  368|  1.67M|        else {
  369|  1.67M|            get_ctx().advance_to(*r);
  370|  1.67M|        }
  371|  1.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  3.90M|    {
  140|  3.90M|        {
  141|  3.90M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 3.90M]
  ------------------
  142|  3.90M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 3.90M]
  ------------------
  143|  3.90M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  3.90M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  3.90M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 3.90M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  3.90M|        }
  150|       |
  151|  3.90M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 3.90M, False: 0]
  ------------------
  152|  3.90M|            return;
  153|  3.90M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  3.90M|    {
  188|  3.90M|        return error;
  189|  3.90M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  11.7M|    {
  184|  11.7M|        return static_cast<bool>(error);
  185|  11.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   210k|    {
  314|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   210k|    {
  241|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   210k|{
  441|   210k|    const auto beg = handler.get_ctx().begin();
  442|   210k|    detail::parse_format_string<false>(format, handler);
  443|   210k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.7k, False: 129k]
  |  |  ------------------
  ------------------
  444|  80.7k|        return unexpected(handler.error);
  445|  80.7k|    }
  446|   129k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   210k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.30M|    {
  425|  1.30M|        return ctx.get();
  426|  1.30M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.30M|    {
  245|  1.30M|        return ctx;
  246|  1.30M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   339k|    {
  318|   339k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 339k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   339k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   210k|{
   92|   210k|    auto arg = ctx.arg(id);
   93|   210k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   210k|    return arg;
   97|   210k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   210k|    {
  347|   210k|        return parse_ctx.next_arg_id();
  348|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   210k|    {
  388|   210k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   210k|        set_arg_as_visited(arg_id);
  390|       |
  391|   210k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 210k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   210k|        auto specs = detail::format_specs{};
  401|   210k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   210k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   210k|            arg.type()};
  404|       |
  405|   210k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   210k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 210k]
  |  Branch (406:29): [True: 0, False: 210k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   210k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   210k|        parse_ctx.advance_to(begin);
  415|       |
  416|   210k|        on_visit_scan_arg(
  417|   210k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   210k|                                           get_ctx().locale()},
  419|   210k|            arg);
  420|   210k|        return parse_ctx.begin();
  421|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   210k|    {
  112|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   210k|    {
  359|   210k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 210k]
  |  Branch (359:23): [True: 0, False: 210k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   210k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   210k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.7k, False: 129k]
  |  |  ------------------
  ------------------
  366|  80.7k|            on_error(r.error());
  367|  80.7k|        }
  368|   129k|        else {
  369|   129k|            get_ctx().advance_to(*r);
  370|   129k|        }
  371|   210k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.26M|{
  456|  2.26M|    const auto argcount = args.size();
  457|  2.26M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 515k, False: 1.75M]
  |  Branch (457:60): [True: 515k, False: 0]
  ------------------
  458|   515k|        auto arg = args.get(0);
  459|   515k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   515k|    static_cast<    \
  |  |  251|   515k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   515k|    }
  461|       |
  462|  1.75M|    auto handler = format_handler<true, CharT>{
  463|  1.75M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.75M|                                       source.data() + source.size()},
  465|  1.75M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.75M|    static_cast<    \
  |  |  251|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.75M|    static_cast<    \
  |  |  251|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.75M|    return vscan_parse_format_string(format, handler);
  467|  2.26M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   773k|{
   49|   773k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 773k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   773k|    auto reader =
   55|   773k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   773k|            ranges::subrange<const CharT*>{source.data(),
   57|   773k|                                           source.data() + source.size()},
   58|   773k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   773k|    static_cast<    \
  |  |  251|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   773k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   773k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   773k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   773k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 24.2k, False: 748k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.2k|    }                                                  \
  |  |  |  |   70|   773k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   748k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   748k|    return ranges::distance(source.data(), it);
   61|   773k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.01M|{
  456|  2.01M|    const auto argcount = args.size();
  457|  2.01M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 452k, False: 1.56M]
  |  Branch (457:60): [True: 452k, False: 0]
  ------------------
  458|   452k|        auto arg = args.get(0);
  459|   452k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   452k|    static_cast<    \
  |  |  251|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   452k|    }
  461|       |
  462|  1.56M|    auto handler = format_handler<true, CharT>{
  463|  1.56M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.56M|                                       source.data() + source.size()},
  465|  1.56M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.56M|    static_cast<    \
  |  |  251|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.56M|    static_cast<    \
  |  |  251|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.56M|    return vscan_parse_format_string(format, handler);
  467|  2.01M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.47M|{
   36|  2.47M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.93M, False: 539k]
  ------------------
   37|  1.93M|        return false;
   38|  1.93M|    }
   39|   539k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 539k, False: 0]
  |  Branch (39:39): [True: 539k, False: 0]
  ------------------
   40|  2.47M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   678k|{
   49|   678k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   678k|    auto reader =
   55|   678k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   678k|            ranges::subrange<const CharT*>{source.data(),
   57|   678k|                                           source.data() + source.size()},
   58|   678k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   678k|    static_cast<    \
  |  |  251|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   678k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   678k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   678k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   678k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 43.4k, False: 635k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  43.4k|    }                                                  \
  |  |  |  |   70|   678k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   635k|    return ranges::distance(source.data(), it);
   61|   678k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.56M|    {
  314|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.56M|    {
  264|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.56M|{
  441|  1.56M|    const auto beg = handler.get_ctx().begin();
  442|  1.56M|    detail::parse_format_string<false>(format, handler);
  443|  1.56M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 144k, False: 1.41M]
  |  |  ------------------
  ------------------
  444|   144k|        return unexpected(handler.error);
  445|   144k|    }
  446|  1.41M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.56M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  10.6M|    {
  425|  10.6M|        return ctx.get();
  426|  10.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  10.6M|    {
  268|  10.6M|        return contiguous_ctx;
  269|  10.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  2.97M|    {
  318|  2.97M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 2.97M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  2.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.56M|{
   92|  1.56M|    auto arg = ctx.arg(id);
   93|  1.56M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.56M|    return arg;
   97|  1.56M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.56M|    {
  347|  1.56M|        return parse_ctx.next_arg_id();
  348|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.56M|    {
  388|  1.56M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.56M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.56M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.56M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.56M|        auto specs = detail::format_specs{};
  401|  1.56M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.56M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.56M|            arg.type()};
  404|       |
  405|  1.56M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.56M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.56M]
  |  Branch (406:29): [True: 0, False: 1.56M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.56M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.56M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.56M|        on_visit_scan_arg(
  417|  1.56M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.56M|                                           get_ctx().locale()},
  419|  1.56M|            arg);
  420|  1.56M|        return parse_ctx.begin();
  421|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.56M|    {
  112|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.56M|    {
  359|  1.56M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.56M]
  |  Branch (359:23): [True: 0, False: 1.56M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.56M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.56M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 144k, False: 1.41M]
  |  |  ------------------
  ------------------
  366|   144k|            on_error(r.error());
  367|   144k|        }
  368|  1.41M|        else {
  369|  1.41M|            get_ctx().advance_to(*r);
  370|  1.41M|        }
  371|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   462k|{
  476|   462k|    const auto argcount = args.size();
  477|   462k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 86.8k, False: 376k]
  |  Branch (477:60): [True: 86.8k, False: 0]
  ------------------
  478|  86.8k|        auto arg = args.get(0);
  479|  86.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  86.8k|    static_cast<    \
  |  |  251|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  86.8k|    }
  481|       |
  482|   376k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 376k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   376k|    SCN_UNLIKELY_ATTR
  490|   376k|    {
  491|   376k|        auto handler = format_handler<false, CharT>{
  492|   376k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   376k|    static_cast<    \
  |  |  251|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   376k|    static_cast<    \
  |  |  251|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   376k|        return vscan_parse_format_string(format, handler);
  494|   376k|    }
  495|   376k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   130k|{
   69|   130k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   130k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   130k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   130k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|   130k|    static_cast<    \
  |  |  251|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   130k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 43.4k, False: 86.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  43.4k|    }                                                  \
  |  |  |  |   70|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  86.7k|    return it.position();
   86|   130k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   376k|    {
  314|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   376k|    {
  241|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   376k|{
  441|   376k|    const auto beg = handler.get_ctx().begin();
  442|   376k|    detail::parse_format_string<false>(format, handler);
  443|   376k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 144k, False: 231k]
  |  |  ------------------
  ------------------
  444|   144k|        return unexpected(handler.error);
  445|   144k|    }
  446|   231k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   376k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  2.34M|    {
  425|  2.34M|        return ctx.get();
  426|  2.34M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  2.34M|    {
  245|  2.34M|        return ctx;
  246|  2.34M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   607k|    {
  318|   607k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 607k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   607k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   376k|{
   92|   376k|    auto arg = ctx.arg(id);
   93|   376k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   376k|    return arg;
   97|   376k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   376k|    {
  347|   376k|        return parse_ctx.next_arg_id();
  348|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   376k|    {
  388|   376k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   376k|        set_arg_as_visited(arg_id);
  390|       |
  391|   376k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 376k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   376k|        auto specs = detail::format_specs{};
  401|   376k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   376k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   376k|            arg.type()};
  404|       |
  405|   376k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   376k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 376k]
  |  Branch (406:29): [True: 0, False: 376k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   376k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   376k|        parse_ctx.advance_to(begin);
  415|       |
  416|   376k|        on_visit_scan_arg(
  417|   376k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   376k|                                           get_ctx().locale()},
  419|   376k|            arg);
  420|   376k|        return parse_ctx.begin();
  421|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   376k|    {
  112|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   376k|    {
  359|   376k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 376k]
  |  Branch (359:23): [True: 0, False: 376k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   376k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   376k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 144k, False: 231k]
  |  |  ------------------
  ------------------
  366|   144k|            on_error(r.error());
  367|   144k|        }
  368|   231k|        else {
  369|   231k|            get_ctx().advance_to(*r);
  370|   231k|        }
  371|   376k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   257k|{
  502|   257k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   257k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  24.2k|{
  502|  24.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  24.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   226k|{
  502|   226k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   226k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  43.4k|{
  502|  43.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  43.4k|}

LLVMFuzzerTestOneInput:
   54|  2.69k|{
   55|  2.69k|    scn::fuzz::run({data, size});
   56|  2.69k|    return 0;
   57|  2.69k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  2.69k|{
   33|  2.69k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.69k]
  |  Branch (33:42): [True: 0, False: 2.69k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.69k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   38|       |
   39|  2.69k|    auto f =
   40|  2.69k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.69k|    do_basic_run(sv, f);
   42|       |
   43|  2.69k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   44|  2.69k|                                          L"{:g}", L"{:L}");
   45|  2.69k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.69k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.13k, False: 562]
  ------------------
   47|  2.13k|        do_basic_run(wsv_transcode, wf);
   48|  2.13k|    }
   49|  2.69k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.69k|{
   25|  2.69k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.69k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.69k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.69k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.69k|{
   25|  2.69k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.69k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.69k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.69k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  4.82k|{
   25|  4.82k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.82k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.82k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.82k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  4.82k|{
   25|  4.82k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.82k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.82k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.82k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.69k|{
   52|  2.69k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  246|  2.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.69k|    string_buffer.resize(data.size());
   56|  2.69k|    std::copy(data.begin(), data.end(),
   57|  2.69k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.69k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.69k|    const auto wsv_reinterpret_size =
   62|  2.69k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 66, False: 2.62k]
  ------------------
   63|  2.69k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.69k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.69k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.69k|    std::wstring_view wsv_transcoded;
   69|  2.69k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 2.13k, False: 562]
  ------------------
   70|  2.13k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  2.13k|        else {
   79|  2.13k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  2.13k|            wstring_buffer_transcoded_wide.resize(size);
   81|  2.13k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  2.13k|                sv.data(), sv.size(),
   83|  2.13k|                reinterpret_cast<char32_t*>(
   84|  2.13k|                    wstring_buffer_transcoded_wide.data()));
   85|  2.13k|        }
   86|  2.13k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  2.13k|    }
   88|       |
   89|  2.69k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.69k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.69k|{
  140|  2.69k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.69k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.69k|    buf.resize(sizeof...(Args));
  143|  2.69k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.69k|    return {buf.data(), buf.size()};
  145|  2.69k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.69k|{
  126|  2.69k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.69k|        return format_string_view_buffer;
  128|  2.69k|    }
  129|  2.69k|    else {
  130|  2.69k|        return wformat_string_view_buffer;
  131|  2.69k|    }
  132|  2.69k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.69k|{
  200|  2.69k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.69k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.69k|                                   format_strings);
  203|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|   355k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   355k|            auto result = scn::scan<T>(
  156|   355k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   355k|                scn::runtime_format(f));
  158|   355k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 338k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|   338k|            it = result->begin();
  162|   338k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|   355k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   355k|            auto result = scn::scan<T>(
  170|   355k|                global_locale,
  171|   355k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   355k|                scn::runtime_format(f));
  173|   355k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 338k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|   338k|            it = result->begin();
  177|   338k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  79.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  79.2k|            auto result = scn::scan_value<T>(
  185|  79.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  79.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 76.5k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  76.5k|            it = result->begin();
  190|  76.5k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|   386k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   386k|            auto result = scn::scan<T>(
  156|   386k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   386k|                scn::runtime_format(f));
  158|   386k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 370k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|   370k|            it = result->begin();
  162|   370k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|   386k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   386k|            auto result = scn::scan<T>(
  170|   386k|                global_locale,
  171|   386k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   386k|                scn::runtime_format(f));
  173|   386k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 370k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|   370k|            it = result->begin();
  177|   370k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  88.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  88.3k|            auto result = scn::scan_value<T>(
  185|  88.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  88.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 85.6k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  85.6k|            it = result->begin();
  190|  85.6k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|   392k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   392k|            auto result = scn::scan<T>(
  156|   392k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   392k|                scn::runtime_format(f));
  158|   392k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 376k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|   376k|            it = result->begin();
  162|   376k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|   392k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   392k|            auto result = scn::scan<T>(
  170|   392k|                global_locale,
  171|   392k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   392k|                scn::runtime_format(f));
  173|   392k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 376k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|   376k|            it = result->begin();
  177|   376k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  90.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  90.0k|            auto result = scn::scan_value<T>(
  185|  90.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  90.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 87.3k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  87.3k|            it = result->begin();
  190|  87.3k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|  43.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  43.0k|            auto result = scn::scan<T>(
  156|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.0k|                scn::runtime_format(f));
  158|  43.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 26.9k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|  26.9k|            it = result->begin();
  162|  26.9k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|  43.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  43.0k|            auto result = scn::scan<T>(
  170|  43.0k|                global_locale,
  171|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  43.0k|                scn::runtime_format(f));
  173|  43.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 26.9k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|  26.9k|            it = result->begin();
  177|  26.9k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  8.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.07k|            auto result = scn::scan_value<T>(
  185|  8.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 5.38k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  5.38k|            it = result->begin();
  190|  5.38k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|  43.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  43.0k|            auto result = scn::scan<T>(
  156|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.0k|                scn::runtime_format(f));
  158|  43.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 26.9k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|  26.9k|            it = result->begin();
  162|  26.9k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|  43.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  43.0k|            auto result = scn::scan<T>(
  170|  43.0k|                global_locale,
  171|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  43.0k|                scn::runtime_format(f));
  173|  43.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 26.9k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|  26.9k|            it = result->begin();
  177|  26.9k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  8.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.07k|            auto result = scn::scan_value<T>(
  185|  8.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 5.38k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  5.38k|            it = result->begin();
  190|  5.38k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.69k|{
  151|       |    // Regular scan
  152|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 16.1k, False: 2.69k]
  ------------------
  153|  16.1k|        auto it = scn::ranges::begin(source);
  154|  43.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  43.0k|            auto result = scn::scan<T>(
  156|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.0k|                scn::runtime_format(f));
  158|  43.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 16.1k, False: 26.9k]
  ------------------
  159|  16.1k|                break;
  160|  16.1k|            }
  161|  26.9k|            it = result->begin();
  162|  26.9k|        }
  163|  16.1k|    }
  164|       |
  165|       |    // scan localized
  166|  16.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 16.1k, False: 2.69k]
  ------------------
  167|  16.1k|        auto it = scn::ranges::begin(source);
  168|  43.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  43.0k|            auto result = scn::scan<T>(
  170|  43.0k|                global_locale,
  171|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  43.0k|                scn::runtime_format(f));
  173|  43.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 16.1k, False: 26.9k]
  ------------------
  174|  16.1k|                break;
  175|  16.1k|            }
  176|  26.9k|            it = result->begin();
  177|  26.9k|        }
  178|  16.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.69k|    {
  182|  2.69k|        auto it = scn::ranges::begin(source);
  183|  8.07k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.07k|            auto result = scn::scan_value<T>(
  185|  8.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.07k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.69k, False: 5.38k]
  ------------------
  187|  2.69k|                break;
  188|  2.69k|            }
  189|  5.38k|            it = result->begin();
  190|  5.38k|        }
  191|  2.69k|    }
  192|  2.69k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.69k|{
  109|  2.69k|    using char_type = ranges::range_value_t<Source>;
  110|  2.69k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.69k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.69k|              std::back_inserter(deque));
  113|  2.69k|    return deque;
  114|  2.69k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.69k|{
   98|  2.69k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.69k|        return noncontiguous_buffer;
  100|  2.69k|    }
  101|  2.69k|    else {
  102|  2.69k|        return wnoncontiguous_buffer;
  103|  2.69k|    }
  104|  2.69k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.69k|{
  140|  2.69k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.69k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.69k|    buf.resize(sizeof...(Args));
  143|  2.69k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.69k|    return {buf.data(), buf.size()};
  145|  2.69k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.69k|{
  126|  2.69k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.69k|        return format_string_view_buffer;
  128|  2.69k|    }
  129|  2.69k|    else {
  130|  2.69k|        return wformat_string_view_buffer;
  131|  2.69k|    }
  132|  2.69k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  4.82k|{
  200|  4.82k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  4.82k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  4.82k|                                   format_strings);
  203|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|   316k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   316k|            auto result = scn::scan<T>(
  156|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   316k|                scn::runtime_format(f));
  158|   316k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 287k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|   316k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   316k|            auto result = scn::scan<T>(
  170|   316k|                global_locale,
  171|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   316k|                scn::runtime_format(f));
  173|   316k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 287k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|   287k|            it = result->begin();
  177|   287k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  69.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  69.9k|            auto result = scn::scan_value<T>(
  185|  69.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  69.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 65.1k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  65.1k|            it = result->begin();
  190|  65.1k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|   342k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   342k|            auto result = scn::scan<T>(
  156|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   342k|                scn::runtime_format(f));
  158|   342k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 313k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|   313k|            it = result->begin();
  162|   313k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|   342k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   342k|            auto result = scn::scan<T>(
  170|   342k|                global_locale,
  171|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   342k|                scn::runtime_format(f));
  173|   342k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 313k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|   313k|            it = result->begin();
  177|   313k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  77.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  77.3k|            auto result = scn::scan_value<T>(
  185|  77.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  77.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 72.5k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  72.5k|            it = result->begin();
  190|  72.5k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|   347k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   347k|            auto result = scn::scan<T>(
  156|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   347k|                scn::runtime_format(f));
  158|   347k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 318k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|   318k|            it = result->begin();
  162|   318k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|   347k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   347k|            auto result = scn::scan<T>(
  170|   347k|                global_locale,
  171|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   347k|                scn::runtime_format(f));
  173|   347k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 318k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|   318k|            it = result->begin();
  177|   318k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  78.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  78.8k|            auto result = scn::scan_value<T>(
  185|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  78.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 74.0k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  74.0k|            it = result->begin();
  190|  74.0k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|  77.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  77.1k|            auto result = scn::scan<T>(
  156|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.1k|                scn::runtime_format(f));
  158|  77.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 48.2k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|  48.2k|            it = result->begin();
  162|  48.2k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|  77.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  77.1k|            auto result = scn::scan<T>(
  170|  77.1k|                global_locale,
  171|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  77.1k|                scn::runtime_format(f));
  173|  77.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 48.2k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|  48.2k|            it = result->begin();
  177|  48.2k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  14.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  14.4k|            auto result = scn::scan_value<T>(
  185|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  14.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 9.64k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  9.64k|            it = result->begin();
  190|  9.64k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|  77.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  77.1k|            auto result = scn::scan<T>(
  156|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.1k|                scn::runtime_format(f));
  158|  77.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 48.2k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|  48.2k|            it = result->begin();
  162|  48.2k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|  77.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  77.1k|            auto result = scn::scan<T>(
  170|  77.1k|                global_locale,
  171|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  77.1k|                scn::runtime_format(f));
  173|  77.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 48.2k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|  48.2k|            it = result->begin();
  177|  48.2k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  14.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  14.4k|            auto result = scn::scan_value<T>(
  185|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  14.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 9.64k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  9.64k|            it = result->begin();
  190|  9.64k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.82k|{
  151|       |    // Regular scan
  152|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.9k, False: 4.82k]
  ------------------
  153|  28.9k|        auto it = scn::ranges::begin(source);
  154|  77.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  77.1k|            auto result = scn::scan<T>(
  156|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.1k|                scn::runtime_format(f));
  158|  77.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.9k, False: 48.2k]
  ------------------
  159|  28.9k|                break;
  160|  28.9k|            }
  161|  48.2k|            it = result->begin();
  162|  48.2k|        }
  163|  28.9k|    }
  164|       |
  165|       |    // scan localized
  166|  28.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.9k, False: 4.82k]
  ------------------
  167|  28.9k|        auto it = scn::ranges::begin(source);
  168|  77.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  77.1k|            auto result = scn::scan<T>(
  170|  77.1k|                global_locale,
  171|  77.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  77.1k|                scn::runtime_format(f));
  173|  77.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.9k, False: 48.2k]
  ------------------
  174|  28.9k|                break;
  175|  28.9k|            }
  176|  48.2k|            it = result->begin();
  177|  48.2k|        }
  178|  28.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.82k|    {
  182|  4.82k|        auto it = scn::ranges::begin(source);
  183|  14.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  14.4k|            auto result = scn::scan_value<T>(
  185|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  14.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.82k, False: 9.64k]
  ------------------
  187|  4.82k|                break;
  188|  4.82k|            }
  189|  9.64k|            it = result->begin();
  190|  9.64k|        }
  191|  4.82k|    }
  192|  4.82k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  4.82k|{
  109|  4.82k|    using char_type = ranges::range_value_t<Source>;
  110|  4.82k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  4.82k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  4.82k|              std::back_inserter(deque));
  113|  4.82k|    return deque;
  114|  4.82k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  4.82k|{
   98|  4.82k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  4.82k|        return noncontiguous_buffer;
  100|  4.82k|    }
  101|  4.82k|    else {
  102|  4.82k|        return wnoncontiguous_buffer;
  103|  4.82k|    }
  104|  4.82k|}

